{
	"id": "6e459bd389a452f73bd91ae965855d9c",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.20",
	"solcLongVersion": "0.8.20+commit.a1b79de6",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/ERC20Token_flattened.sol": {
				"content": "\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n\n\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\n\n\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n\n// File: @openzeppelin/contracts/utils/Context.sol\n\n\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n\n// File: @openzeppelin/contracts/interfaces/draft-IERC6093.sol\n\n\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\n\n\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\n\n\n\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     * ```\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n\n// File: @openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\n\n\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC20Burnable.sol)\n\npragma solidity ^0.8.20;\n\n\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    /**\n     * @dev Destroys a `value` amount of tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 value) public virtual {\n        _burn(_msgSender(), value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, deducting from\n     * the caller's allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `value`.\n     */\n    function burnFrom(address account, uint256 value) public virtual {\n        _spendAllowance(account, _msgSender(), value);\n        _burn(account, value);\n    }\n}\n\n// File: @openzeppelin/contracts/utils/Pausable.sol\n\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\n\npragma solidity ^0.8.20;\n\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    bool private _paused;\n\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    /**\n     * @dev The operation failed because the contract is paused.\n     */\n    error EnforcedPause();\n\n    /**\n     * @dev The operation failed because the contract is not paused.\n     */\n    error ExpectedPause();\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        if (paused()) {\n            revert EnforcedPause();\n        }\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        if (!paused()) {\n            revert ExpectedPause();\n        }\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n\n// File: @openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol\n\n\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC20Pausable.sol)\n\npragma solidity ^0.8.20;\n\n\n\n/**\n * @dev ERC20 token with pausable token transfers, minting and burning.\n *\n * Useful for scenarios such as preventing trades until the end of an evaluation\n * period, or having an emergency switch for freezing all token transfers in the\n * event of a large bug.\n *\n * IMPORTANT: This contract does not include public pause and unpause functions. In\n * addition to inheriting this contract, you must define both functions, invoking the\n * {Pausable-_pause} and {Pausable-_unpause} internal functions, with appropriate\n * access control, e.g. using {AccessControl} or {Ownable}. Not doing so will\n * make the contract pause mechanism of the contract unreachable, and thus unusable.\n */\nabstract contract ERC20Pausable is ERC20, Pausable {\n    /**\n     * @dev See {ERC20-_update}.\n     *\n     * Requirements:\n     *\n     * - the contract must not be paused.\n     */\n    function _update(address from, address to, uint256 value) internal virtual override whenNotPaused {\n        super._update(from, to, value);\n    }\n}\n\n// File: @openzeppelin/contracts/access/Ownable.sol\n\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\n\n\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n\n// File: @openzeppelin/contracts/utils/cryptography/ECDSA.sol\n\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS\n    }\n\n    /**\n     * @dev The signature derives the `address(0)`.\n     */\n    error ECDSAInvalidSignature();\n\n    /**\n     * @dev The signature has an invalid length.\n     */\n    error ECDSAInvalidSignatureLength(uint256 length);\n\n    /**\n     * @dev The signature has an S value that is in the upper half order.\n     */\n    error ECDSAInvalidSignatureS(bytes32 s);\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\n     * and a bytes32 providing additional information about the error.\n     *\n     * If no error is returned, then the address can be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     */\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\n        unchecked {\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\n            return tryRecover(hash, v, r, s);\n        }\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError, bytes32) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS, s);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\n        }\n\n        return (signer, RecoverError.NoError, bytes32(0));\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\n     */\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert ECDSAInvalidSignature();\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert ECDSAInvalidSignatureS(errorArg);\n        }\n    }\n}\n\n// File: @openzeppelin/contracts/utils/math/Math.sol\n\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Muldiv operation overflow.\n     */\n    error MathOverflowedMulDiv();\n\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            return a / b;\n        }\n\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                revert MathOverflowedMulDiv();\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}\n\n// File: @openzeppelin/contracts/utils/math/SignedMath.sol\n\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n\n// File: @openzeppelin/contracts/utils/Strings.sol\n\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\n\npragma solidity ^0.8.20;\n\n\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant HEX_DIGITS = \"0123456789abcdef\";\n    uint8 private constant ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev The `value` string doesn't fit in the specified `length`.\n     */\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toStringSigned(int256 value) internal pure returns (string memory) {\n        return string.concat(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value)));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        uint256 localValue = value;\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\n            localValue >>= 4;\n        }\n        if (localValue != 0) {\n            revert StringsInsufficientHexLength(value, length);\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n     * representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n\n// File: @openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\n\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MessageHashUtils.sol)\n\npragma solidity ^0.8.20;\n\n\n/**\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\n *\n * The library provides methods for generating a hash of a message that conforms to the\n * https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\n * specifications.\n */\nlibrary MessageHashUtils {\n    /**\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\n     * `0x45` (`personal_sign` messages).\n     *\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\n     * `\"\\x19Ethereum Signed Message:\\n32\"` and hashing the result. It corresponds with the\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\n     *\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\n     * keccak256, although any bytes32 value can be safely used because the final digest will\n     * be re-hashed.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, \"\\x19Ethereum Signed Message:\\n32\") // 32 is the bytes-length of messageHash\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\n        }\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\n     * `0x45` (`personal_sign` messages).\n     *\n     * The digest is calculated by prefixing an arbitrary `message` with\n     * `\"\\x19Ethereum Signed Message:\\n\" + len(message)` and hashing the result. It corresponds with the\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\n        return\n            keccak256(bytes.concat(\"\\x19Ethereum Signed Message:\\n\", bytes(Strings.toString(message.length)), message));\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\n     * `0x00` (data with intended validator).\n     *\n     * The digest is calculated by prefixing an arbitrary `data` with `\"\\x19\\x00\"` and the intended\n     * `validator` address. Then hashing the result.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(hex\"19_00\", validator, data));\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (EIP-191 version `0x01`).\n     *\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\n     * `\\x19\\x01` and hashing the result. It corresponds to the hash signed by the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, hex\"19_01\")\n            mstore(add(ptr, 0x02), domainSeparator)\n            mstore(add(ptr, 0x22), structHash)\n            digest := keccak256(ptr, 0x42)\n        }\n    }\n}\n\n// File: @openzeppelin/contracts/utils/StorageSlot.sol\n\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(newImplementation.code.length > 0);\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n\n// File: @openzeppelin/contracts/utils/ShortStrings.sol\n\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ShortStrings.sol)\n\npragma solidity ^0.8.20;\n\n\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\n// | length  | 0x                                                              BB |\ntype ShortString is bytes32;\n\n/**\n * @dev This library provides functions to convert short memory strings\n * into a `ShortString` type that can be used as an immutable variable.\n *\n * Strings of arbitrary length can be optimized using this library if\n * they are short enough (up to 31 bytes) by packing them with their\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\n * fallback mechanism can be used for every other case.\n *\n * Usage example:\n *\n * ```solidity\n * contract Named {\n *     using ShortStrings for *;\n *\n *     ShortString private immutable _name;\n *     string private _nameFallback;\n *\n *     constructor(string memory contractName) {\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\n *     }\n *\n *     function name() external view returns (string memory) {\n *         return _name.toStringWithFallback(_nameFallback);\n *     }\n * }\n * ```\n */\nlibrary ShortStrings {\n    // Used as an identifier for strings longer than 31 bytes.\n    bytes32 private constant FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\n\n    error StringTooLong(string str);\n    error InvalidShortString();\n\n    /**\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\n     *\n     * This will trigger a `StringTooLong` error is the input string is too long.\n     */\n    function toShortString(string memory str) internal pure returns (ShortString) {\n        bytes memory bstr = bytes(str);\n        if (bstr.length > 31) {\n            revert StringTooLong(str);\n        }\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\n    }\n\n    /**\n     * @dev Decode a `ShortString` back to a \"normal\" string.\n     */\n    function toString(ShortString sstr) internal pure returns (string memory) {\n        uint256 len = byteLength(sstr);\n        // using `new string(len)` would work locally but is not memory safe.\n        string memory str = new string(32);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(str, len)\n            mstore(add(str, 0x20), sstr)\n        }\n        return str;\n    }\n\n    /**\n     * @dev Return the length of a `ShortString`.\n     */\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\n        if (result > 31) {\n            revert InvalidShortString();\n        }\n        return result;\n    }\n\n    /**\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\n     */\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\n        if (bytes(value).length < 32) {\n            return toShortString(value);\n        } else {\n            StorageSlot.getStringSlot(store).value = value;\n            return ShortString.wrap(FALLBACK_SENTINEL);\n        }\n    }\n\n    /**\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\n     */\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\n            return toString(value);\n        } else {\n            return store;\n        }\n    }\n\n    /**\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using\n     * {setWithFallback}.\n     *\n     * WARNING: This will return the \"byte length\" of the string. This may not reflect the actual length in terms of\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\n     */\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\n            return byteLength(value);\n        } else {\n            return bytes(store).length;\n        }\n    }\n}\n\n// File: @openzeppelin/contracts/interfaces/IERC5267.sol\n\n\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5267.sol)\n\npragma solidity ^0.8.20;\n\ninterface IERC5267 {\n    /**\n     * @dev MAY be emitted to signal that the domain could have changed.\n     */\n    event EIP712DomainChanged();\n\n    /**\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\n     * signature.\n     */\n    function eip712Domain()\n        external\n        view\n        returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        );\n}\n\n// File: @openzeppelin/contracts/utils/cryptography/EIP712.sol\n\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/EIP712.sol)\n\npragma solidity ^0.8.20;\n\n\n\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose\n * encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract\n * does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to\n * produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\n * separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\n *\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable\n */\nabstract contract EIP712 is IERC5267 {\n    using ShortStrings for *;\n\n    bytes32 private constant TYPE_HASH =\n        keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\n\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n    // invalidate the cached domain separator if the chain id changes.\n    bytes32 private immutable _cachedDomainSeparator;\n    uint256 private immutable _cachedChainId;\n    address private immutable _cachedThis;\n\n    bytes32 private immutable _hashedName;\n    bytes32 private immutable _hashedVersion;\n\n    ShortString private immutable _name;\n    ShortString private immutable _version;\n    string private _nameFallback;\n    string private _versionFallback;\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    constructor(string memory name, string memory version) {\n        _name = name.toShortStringWithFallback(_nameFallback);\n        _version = version.toShortStringWithFallback(_versionFallback);\n        _hashedName = keccak256(bytes(name));\n        _hashedVersion = keccak256(bytes(version));\n\n        _cachedChainId = block.chainid;\n        _cachedDomainSeparator = _buildDomainSeparator();\n        _cachedThis = address(this);\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\n            return _cachedDomainSeparator;\n        } else {\n            return _buildDomainSeparator();\n        }\n    }\n\n    function _buildDomainSeparator() private view returns (bytes32) {\n        return keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n\n    /**\n     * @dev See {IERC-5267}.\n     */\n    function eip712Domain()\n        public\n        view\n        virtual\n        returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        )\n    {\n        return (\n            hex\"0f\", // 01111\n            _EIP712Name(),\n            _EIP712Version(),\n            block.chainid,\n            address(this),\n            bytes32(0),\n            new uint256[](0)\n        );\n    }\n\n    /**\n     * @dev The name parameter for the EIP712 domain.\n     *\n     * NOTE: By default this function reads _name which is an immutable value.\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function _EIP712Name() internal view returns (string memory) {\n        return _name.toStringWithFallback(_nameFallback);\n    }\n\n    /**\n     * @dev The version parameter for the EIP712 domain.\n     *\n     * NOTE: By default this function reads _version which is an immutable value.\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function _EIP712Version() internal view returns (string memory) {\n        return _version.toStringWithFallback(_versionFallback);\n    }\n}\n\n// File: @openzeppelin/contracts/utils/Nonces.sol\n\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Nonces.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides tracking nonces for addresses. Nonces will only increment.\n */\nabstract contract Nonces {\n    /**\n     * @dev The nonce used for an `account` is not the expected current nonce.\n     */\n    error InvalidAccountNonce(address account, uint256 currentNonce);\n\n    mapping(address account => uint256) private _nonces;\n\n    /**\n     * @dev Returns the next unused nonce for an address.\n     */\n    function nonces(address owner) public view virtual returns (uint256) {\n        return _nonces[owner];\n    }\n\n    /**\n     * @dev Consumes a nonce.\n     *\n     * Returns the current value and increments nonce.\n     */\n    function _useNonce(address owner) internal virtual returns (uint256) {\n        // For each account, the nonce has an initial value of 0, can only be incremented by one, and cannot be\n        // decremented or reset. This guarantees that the nonce never overflows.\n        unchecked {\n            // It is important to do x++ and not ++x here.\n            return _nonces[owner]++;\n        }\n    }\n\n    /**\n     * @dev Same as {_useNonce} but checking that `nonce` is the next valid for `owner`.\n     */\n    function _useCheckedNonce(address owner, uint256 nonce) internal virtual {\n        uint256 current = _useNonce(owner);\n        if (nonce != current) {\n            revert InvalidAccountNonce(owner, current);\n        }\n    }\n}\n\n// File: @openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\n\n\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\n\n\n\n\n\n/**\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712, Nonces {\n    bytes32 private constant PERMIT_TYPEHASH =\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n\n    /**\n     * @dev Permit deadline has expired.\n     */\n    error ERC2612ExpiredSignature(uint256 deadline);\n\n    /**\n     * @dev Mismatched signature.\n     */\n    error ERC2612InvalidSigner(address signer, address owner);\n\n    /**\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n     *\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\n     */\n    constructor(string memory name) EIP712(name, \"1\") {}\n\n    /**\n     * @inheritdoc IERC20Permit\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual {\n        if (block.timestamp > deadline) {\n            revert ERC2612ExpiredSignature(deadline);\n        }\n\n        bytes32 structHash = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\n\n        bytes32 hash = _hashTypedDataV4(structHash);\n\n        address signer = ECDSA.recover(hash, v, r, s);\n        if (signer != owner) {\n            revert ERC2612InvalidSigner(signer, owner);\n        }\n\n        _approve(owner, spender, value);\n    }\n\n    /**\n     * @inheritdoc IERC20Permit\n     */\n    function nonces(address owner) public view virtual override(IERC20Permit, Nonces) returns (uint256) {\n        return super.nonces(owner);\n    }\n\n    /**\n     * @inheritdoc IERC20Permit\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view virtual returns (bytes32) {\n        return _domainSeparatorV4();\n    }\n}\n\n// File: contracts/ERC20Token.sol\n\n\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.20;\n\n\n\n\n\n\ncontract VEGAN is ERC20, ERC20Burnable, ERC20Pausable, Ownable, ERC20Permit {\n    constructor(address initialOwner)\n        ERC20(\"VEGAN\", \"VGN\")\n        Ownable(initialOwner)\n        ERC20Permit(\"VEGAN\")\n    {\n        _mint(msg.sender, 21000000 * 10 ** decimals());\n    }\n\n    function pause() public onlyOwner {\n        _pause();\n    }\n\n    function unpause() public onlyOwner {\n        _unpause();\n    }\n\n    function mint(address to, uint256 amount) public onlyOwner {\n        _mint(to, amount);\n    }\n\n    // The following functions are overrides required by Solidity.\n\n    function _update(address from, address to, uint256 value)\n        internal\n        override(ERC20, ERC20Pausable)\n    {\n        super._update(from, to, value);\n    }\n}"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			"contracts/ERC20Token_flattened.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ERC20Token_flattened.sol\":\"Context\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ERC20Token_flattened.sol\":{\"keccak256\":\"0x8f4c4437433dc1b1b99ecde98c0b4c6179f9c26187eacd9921673722f312d28a\",\"urls\":[\"bzz-raw://ec20930f29c633f826145760a539999bcd374a4d9aa9de12a761985b13f45cf7\",\"dweb:/ipfs/QmRMogmcmaDFrtw49LHuihMDwL9aGzEfK9ntSiWKQrWUQL\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"ECDSA": {
					"abi": [
						{
							"inputs": [],
							"name": "ECDSAInvalidSignature",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "length",
									"type": "uint256"
								}
							],
							"name": "ECDSAInvalidSignatureLength",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "ECDSAInvalidSignatureS",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.",
						"errors": {
							"ECDSAInvalidSignature()": [
								{
									"details": "The signature derives the `address(0)`."
								}
							],
							"ECDSAInvalidSignatureLength(uint256)": [
								{
									"details": "The signature has an invalid length."
								}
							],
							"ECDSAInvalidSignatureS(bytes32)": [
								{
									"details": "The signature has an S value that is in the upper half order."
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/ERC20Token_flattened.sol\":34470:41856  library ECDSA {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/ERC20Token_flattened.sol\":34470:41856  library ECDSA {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220bb92ff9eff3ec30c4adeed03a784d920f3f37a084f6e16960e7f6838ac099a8564736f6c63430008140033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6055604b600b8282823980515f1a607314603f577f4e487b71000000000000000000000000000000000000000000000000000000005f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220bb92ff9eff3ec30c4adeed03a784d920f3f37a084f6e16960e7f6838ac099a8564736f6c63430008140033",
							"opcodes": "PUSH1 0x55 PUSH1 0x4B PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x3F JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBB SWAP3 SELFDESTRUCT SWAP15 SELFDESTRUCT RETURNDATACOPY 0xC3 0xC 0x4A 0xDE 0xED SUB 0xA7 DUP5 0xD9 KECCAK256 RETURN RETURN PUSH27 0x84F6E16960E7F6838AC099A8564736F6C63430008140033000000 ",
							"sourceMap": "34470:7386:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220bb92ff9eff3ec30c4adeed03a784d920f3f37a084f6e16960e7f6838ac099a8564736f6c63430008140033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBB SWAP3 SELFDESTRUCT SWAP15 SELFDESTRUCT RETURNDATACOPY 0xC3 0xC 0x4A 0xDE 0xED SUB 0xA7 DUP5 0xD9 KECCAK256 RETURN RETURN PUSH27 0x84F6E16960E7F6838AC099A8564736F6C63430008140033000000 ",
							"sourceMap": "34470:7386:0:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "92",
								"totalCost": "17092"
							},
							"internal": {
								"_throwError(enum ECDSA.RecoverError,bytes32)": "infinite",
								"recover(bytes32,bytes memory)": "infinite",
								"recover(bytes32,bytes32,bytes32)": "infinite",
								"recover(bytes32,uint8,bytes32,bytes32)": "infinite",
								"tryRecover(bytes32,bytes memory)": "infinite",
								"tryRecover(bytes32,bytes32,bytes32)": "infinite",
								"tryRecover(bytes32,uint8,bytes32,bytes32)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 34470,
									"end": 41856,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 34470,
									"end": 41856,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 34470,
									"end": 41856,
									"name": "PUSH",
									"source": 0,
									"value": "B"
								},
								{
									"begin": 34470,
									"end": 41856,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 34470,
									"end": 41856,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 34470,
									"end": 41856,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 34470,
									"end": 41856,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 34470,
									"end": 41856,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 34470,
									"end": 41856,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 34470,
									"end": 41856,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 34470,
									"end": 41856,
									"name": "BYTE",
									"source": 0
								},
								{
									"begin": 34470,
									"end": 41856,
									"name": "PUSH",
									"source": 0,
									"value": "73"
								},
								{
									"begin": 34470,
									"end": 41856,
									"name": "EQ",
									"source": 0
								},
								{
									"begin": 34470,
									"end": 41856,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 34470,
									"end": 41856,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 34470,
									"end": 41856,
									"name": "PUSH",
									"source": 0,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 34470,
									"end": 41856,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 34470,
									"end": 41856,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 34470,
									"end": 41856,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 34470,
									"end": 41856,
									"name": "PUSH",
									"source": 0,
									"value": "4"
								},
								{
									"begin": 34470,
									"end": 41856,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 34470,
									"end": 41856,
									"name": "PUSH",
									"source": 0,
									"value": "24"
								},
								{
									"begin": 34470,
									"end": 41856,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 34470,
									"end": 41856,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 34470,
									"end": 41856,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 34470,
									"end": 41856,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 34470,
									"end": 41856,
									"name": "ADDRESS",
									"source": 0
								},
								{
									"begin": 34470,
									"end": 41856,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 34470,
									"end": 41856,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 34470,
									"end": 41856,
									"name": "PUSH",
									"source": 0,
									"value": "73"
								},
								{
									"begin": 34470,
									"end": 41856,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 34470,
									"end": 41856,
									"name": "MSTORE8",
									"source": 0
								},
								{
									"begin": 34470,
									"end": 41856,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 34470,
									"end": 41856,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 34470,
									"end": 41856,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220bb92ff9eff3ec30c4adeed03a784d920f3f37a084f6e16960e7f6838ac099a8564736f6c63430008140033",
									".code": [
										{
											"begin": 34470,
											"end": 41856,
											"name": "PUSHDEPLOYADDRESS",
											"source": 0
										},
										{
											"begin": 34470,
											"end": 41856,
											"name": "ADDRESS",
											"source": 0
										},
										{
											"begin": 34470,
											"end": 41856,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 34470,
											"end": 41856,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 34470,
											"end": 41856,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 34470,
											"end": 41856,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 34470,
											"end": 41856,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 34470,
											"end": 41856,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 34470,
											"end": 41856,
											"name": "REVERT",
											"source": 0
										}
									]
								}
							},
							"sourceList": [
								"contracts/ERC20Token_flattened.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ECDSAInvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ECDSAInvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ECDSAInvalidSignatureS\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.\",\"errors\":{\"ECDSAInvalidSignature()\":[{\"details\":\"The signature derives the `address(0)`.\"}],\"ECDSAInvalidSignatureLength(uint256)\":[{\"details\":\"The signature has an invalid length.\"}],\"ECDSAInvalidSignatureS(bytes32)\":[{\"details\":\"The signature has an S value that is in the upper half order.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ERC20Token_flattened.sol\":\"ECDSA\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ERC20Token_flattened.sol\":{\"keccak256\":\"0x8f4c4437433dc1b1b99ecde98c0b4c6179f9c26187eacd9921673722f312d28a\",\"urls\":[\"bzz-raw://ec20930f29c633f826145760a539999bcd374a4d9aa9de12a761985b13f45cf7\",\"dweb:/ipfs/QmRMogmcmaDFrtw49LHuihMDwL9aGzEfK9ntSiWKQrWUQL\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"EIP712": {
					"abi": [
						{
							"inputs": [],
							"name": "InvalidShortString",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "str",
									"type": "string"
								}
							],
							"name": "StringTooLong",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [],
							"name": "EIP712DomainChanged",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "eip712Domain",
							"outputs": [
								{
									"internalType": "bytes1",
									"name": "fields",
									"type": "bytes1"
								},
								{
									"internalType": "string",
									"name": "name",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "version",
									"type": "string"
								},
								{
									"internalType": "uint256",
									"name": "chainId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "verifyingContract",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "salt",
									"type": "bytes32"
								},
								{
									"internalType": "uint256[]",
									"name": "extensions",
									"type": "uint256[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"custom:oz-upgrades-unsafe-allow": "state-variable-immutable",
						"details": "https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data. The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to produce the hash of their typed data using a combination of `abi.encode` and `keccak256`. This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA ({_hashTypedDataV4}). The implementation of the domain separator was designed to be as efficient as possible while still properly updating the chain id to protect against replay attacks on an eventual fork of the chain. NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask]. NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the separator from the immutable values, which is cheaper than accessing a cached version in cold storage.",
						"events": {
							"EIP712DomainChanged()": {
								"details": "MAY be emitted to signal that the domain could have changed."
							}
						},
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "Initializes the domain separator and parameter caches. The meaning of `name` and `version` is specified in https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]: - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol. - `version`: the current major version of the signing domain. NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart contract upgrade]."
							},
							"eip712Domain()": {
								"details": "See {IERC-5267}."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"eip712Domain()": "84b0196e"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"custom:oz-upgrades-unsafe-allow\":\"state-variable-immutable\",\"details\":\"https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data. The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to produce the hash of their typed data using a combination of `abi.encode` and `keccak256`. This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA ({_hashTypedDataV4}). The implementation of the domain separator was designed to be as efficient as possible while still properly updating the chain id to protect against replay attacks on an eventual fork of the chain. NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask]. NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\",\"events\":{\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the domain separator and parameter caches. The meaning of `name` and `version` is specified in https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]: - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol. - `version`: the current major version of the signing domain. NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart contract upgrade].\"},\"eip712Domain()\":{\"details\":\"See {IERC-5267}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ERC20Token_flattened.sol\":\"EIP712\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ERC20Token_flattened.sol\":{\"keccak256\":\"0x8f4c4437433dc1b1b99ecde98c0b4c6179f9c26187eacd9921673722f312d28a\",\"urls\":[\"bzz-raw://ec20930f29c633f826145760a539999bcd374a4d9aa9de12a761985b13f45cf7\",\"dweb:/ipfs/QmRMogmcmaDFrtw49LHuihMDwL9aGzEfK9ntSiWKQrWUQL\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 3336,
								"contract": "contracts/ERC20Token_flattened.sol:EIP712",
								"label": "_nameFallback",
								"offset": 0,
								"slot": "0",
								"type": "t_string_storage"
							},
							{
								"astId": 3338,
								"contract": "contracts/ERC20Token_flattened.sol:EIP712",
								"label": "_versionFallback",
								"offset": 0,
								"slot": "1",
								"type": "t_string_storage"
							}
						],
						"types": {
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"ERC20": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. The default value of {decimals} is 18. To change this, you should override this function so it returns a different value. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification.",
						"errors": {
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							]
						},
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"constructor": {
								"details": "Sets the values for {name} and {symbol}. All two of these values are immutable: they can only be set once during construction."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. The default value of {decimals} is 18. To change this, you should override this function so it returns a different value. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification.\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"details\":\"Sets the values for {name} and {symbol}. All two of these values are immutable: they can only be set once during construction.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ERC20Token_flattened.sol\":\"ERC20\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ERC20Token_flattened.sol\":{\"keccak256\":\"0x8f4c4437433dc1b1b99ecde98c0b4c6179f9c26187eacd9921673722f312d28a\",\"urls\":[\"bzz-raw://ec20930f29c633f826145760a539999bcd374a4d9aa9de12a761985b13f45cf7\",\"dweb:/ipfs/QmRMogmcmaDFrtw49LHuihMDwL9aGzEfK9ntSiWKQrWUQL\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 279,
								"contract": "contracts/ERC20Token_flattened.sol:ERC20",
								"label": "_balances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 285,
								"contract": "contracts/ERC20Token_flattened.sol:ERC20",
								"label": "_allowances",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 287,
								"contract": "contracts/ERC20Token_flattened.sol:ERC20",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 289,
								"contract": "contracts/ERC20Token_flattened.sol:ERC20",
								"label": "_name",
								"offset": 0,
								"slot": "3",
								"type": "t_string_storage"
							},
							{
								"astId": 291,
								"contract": "contracts/ERC20Token_flattened.sol:ERC20",
								"label": "_symbol",
								"offset": 0,
								"slot": "4",
								"type": "t_string_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"ERC20Burnable": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "burn",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "burnFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Extension of {ERC20} that allows token holders to destroy both their own tokens and those that they have an allowance for, in a way that can be recognized off-chain (via event analysis).",
						"errors": {
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							]
						},
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"burn(uint256)": {
								"details": "Destroys a `value` amount of tokens from the caller. See {ERC20-_burn}."
							},
							"burnFrom(address,uint256)": {
								"details": "Destroys a `value` amount of tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `value`."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"burn(uint256)": "42966c68",
							"burnFrom(address,uint256)": "79cc6790",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Extension of {ERC20} that allows token holders to destroy both their own tokens and those that they have an allowance for, in a way that can be recognized off-chain (via event analysis).\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Destroys a `value` amount of tokens from the caller. See {ERC20-_burn}.\"},\"burnFrom(address,uint256)\":{\"details\":\"Destroys a `value` amount of tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `value`.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ERC20Token_flattened.sol\":\"ERC20Burnable\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ERC20Token_flattened.sol\":{\"keccak256\":\"0x8f4c4437433dc1b1b99ecde98c0b4c6179f9c26187eacd9921673722f312d28a\",\"urls\":[\"bzz-raw://ec20930f29c633f826145760a539999bcd374a4d9aa9de12a761985b13f45cf7\",\"dweb:/ipfs/QmRMogmcmaDFrtw49LHuihMDwL9aGzEfK9ntSiWKQrWUQL\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 279,
								"contract": "contracts/ERC20Token_flattened.sol:ERC20Burnable",
								"label": "_balances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 285,
								"contract": "contracts/ERC20Token_flattened.sol:ERC20Burnable",
								"label": "_allowances",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 287,
								"contract": "contracts/ERC20Token_flattened.sol:ERC20Burnable",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 289,
								"contract": "contracts/ERC20Token_flattened.sol:ERC20Burnable",
								"label": "_name",
								"offset": 0,
								"slot": "3",
								"type": "t_string_storage"
							},
							{
								"astId": 291,
								"contract": "contracts/ERC20Token_flattened.sol:ERC20Burnable",
								"label": "_symbol",
								"offset": 0,
								"slot": "4",
								"type": "t_string_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"ERC20Pausable": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "EnforcedPause",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ExpectedPause",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "Paused",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "Unpaused",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "paused",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "ERC20 token with pausable token transfers, minting and burning. Useful for scenarios such as preventing trades until the end of an evaluation period, or having an emergency switch for freezing all token transfers in the event of a large bug. IMPORTANT: This contract does not include public pause and unpause functions. In addition to inheriting this contract, you must define both functions, invoking the {Pausable-_pause} and {Pausable-_unpause} internal functions, with appropriate access control, e.g. using {AccessControl} or {Ownable}. Not doing so will make the contract pause mechanism of the contract unreachable, and thus unusable.",
						"errors": {
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"EnforcedPause()": [
								{
									"details": "The operation failed because the contract is paused."
								}
							],
							"ExpectedPause()": [
								{
									"details": "The operation failed because the contract is not paused."
								}
							]
						},
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Paused(address)": {
								"details": "Emitted when the pause is triggered by `account`."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							},
							"Unpaused(address)": {
								"details": "Emitted when the pause is lifted by `account`."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"paused()": {
								"details": "Returns true if the contract is paused, and false otherwise."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"paused()": "5c975abb",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"ERC20 token with pausable token transfers, minting and burning. Useful for scenarios such as preventing trades until the end of an evaluation period, or having an emergency switch for freezing all token transfers in the event of a large bug. IMPORTANT: This contract does not include public pause and unpause functions. In addition to inheriting this contract, you must define both functions, invoking the {Pausable-_pause} and {Pausable-_unpause} internal functions, with appropriate access control, e.g. using {AccessControl} or {Ownable}. Not doing so will make the contract pause mechanism of the contract unreachable, and thus unusable.\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ERC20Token_flattened.sol\":\"ERC20Pausable\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ERC20Token_flattened.sol\":{\"keccak256\":\"0x8f4c4437433dc1b1b99ecde98c0b4c6179f9c26187eacd9921673722f312d28a\",\"urls\":[\"bzz-raw://ec20930f29c633f826145760a539999bcd374a4d9aa9de12a761985b13f45cf7\",\"dweb:/ipfs/QmRMogmcmaDFrtw49LHuihMDwL9aGzEfK9ntSiWKQrWUQL\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 279,
								"contract": "contracts/ERC20Token_flattened.sol:ERC20Pausable",
								"label": "_balances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 285,
								"contract": "contracts/ERC20Token_flattened.sol:ERC20Pausable",
								"label": "_allowances",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 287,
								"contract": "contracts/ERC20Token_flattened.sol:ERC20Pausable",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 289,
								"contract": "contracts/ERC20Token_flattened.sol:ERC20Pausable",
								"label": "_name",
								"offset": 0,
								"slot": "3",
								"type": "t_string_storage"
							},
							{
								"astId": 291,
								"contract": "contracts/ERC20Token_flattened.sol:ERC20Pausable",
								"label": "_symbol",
								"offset": 0,
								"slot": "4",
								"type": "t_string_storage"
							},
							{
								"astId": 818,
								"contract": "contracts/ERC20Token_flattened.sol:ERC20Pausable",
								"label": "_paused",
								"offset": 0,
								"slot": "5",
								"type": "t_bool"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"ERC20Permit": {
					"abi": [
						{
							"inputs": [],
							"name": "ECDSAInvalidSignature",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "length",
									"type": "uint256"
								}
							],
							"name": "ECDSAInvalidSignatureLength",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "ECDSAInvalidSignatureS",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								}
							],
							"name": "ERC2612ExpiredSignature",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "signer",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC2612InvalidSigner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "currentNonce",
									"type": "uint256"
								}
							],
							"name": "InvalidAccountNonce",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidShortString",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "str",
									"type": "string"
								}
							],
							"name": "StringTooLong",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [],
							"name": "EIP712DomainChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "eip712Domain",
							"outputs": [
								{
									"internalType": "bytes1",
									"name": "fields",
									"type": "bytes1"
								},
								{
									"internalType": "string",
									"name": "name",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "version",
									"type": "string"
								},
								{
									"internalType": "uint256",
									"name": "chainId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "verifyingContract",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "salt",
									"type": "bytes32"
								},
								{
									"internalType": "uint256[]",
									"name": "extensions",
									"type": "uint256[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "nonces",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.",
						"errors": {
							"ECDSAInvalidSignature()": [
								{
									"details": "The signature derives the `address(0)`."
								}
							],
							"ECDSAInvalidSignatureLength(uint256)": [
								{
									"details": "The signature has an invalid length."
								}
							],
							"ECDSAInvalidSignatureS(bytes32)": [
								{
									"details": "The signature has an S value that is in the upper half order."
								}
							],
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC2612ExpiredSignature(uint256)": [
								{
									"details": "Permit deadline has expired."
								}
							],
							"ERC2612InvalidSigner(address,address)": [
								{
									"details": "Mismatched signature."
								}
							],
							"InvalidAccountNonce(address,uint256)": [
								{
									"details": "The nonce used for an `account` is not the expected current nonce."
								}
							]
						},
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"EIP712DomainChanged()": {
								"details": "MAY be emitted to signal that the domain could have changed."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"details": "Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
							},
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"constructor": {
								"details": "Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`. It's a good idea to use the same `name` that is defined as the ERC20 token name."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"eip712Domain()": {
								"details": "See {IERC-5267}."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"nonces(address)": {
								"details": "Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."
							},
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515",
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"eip712Domain()": "84b0196e",
							"name()": "06fdde03",
							"nonces(address)": "7ecebe00",
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ECDSAInvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ECDSAInvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ECDSAInvalidSignatureS\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"ERC2612ExpiredSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC2612InvalidSigner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentNonce\",\"type\":\"uint256\"}],\"name\":\"InvalidAccountNonce\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.\",\"errors\":{\"ECDSAInvalidSignature()\":[{\"details\":\"The signature derives the `address(0)`.\"}],\"ECDSAInvalidSignatureLength(uint256)\":[{\"details\":\"The signature has an invalid length.\"}],\"ECDSAInvalidSignatureS(bytes32)\":[{\"details\":\"The signature has an S value that is in the upper half order.\"}],\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC2612ExpiredSignature(uint256)\":[{\"details\":\"Permit deadline has expired.\"}],\"ERC2612InvalidSigner(address,address)\":[{\"details\":\"Mismatched signature.\"}],\"InvalidAccountNonce(address,uint256)\":[{\"details\":\"The nonce used for an `account` is not the expected current nonce.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"details\":\"Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`. It's a good idea to use the same `name` that is defined as the ERC20 token name.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"eip712Domain()\":{\"details\":\"See {IERC-5267}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ERC20Token_flattened.sol\":\"ERC20Permit\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ERC20Token_flattened.sol\":{\"keccak256\":\"0x8f4c4437433dc1b1b99ecde98c0b4c6179f9c26187eacd9921673722f312d28a\",\"urls\":[\"bzz-raw://ec20930f29c633f826145760a539999bcd374a4d9aa9de12a761985b13f45cf7\",\"dweb:/ipfs/QmRMogmcmaDFrtw49LHuihMDwL9aGzEfK9ntSiWKQrWUQL\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 279,
								"contract": "contracts/ERC20Token_flattened.sol:ERC20Permit",
								"label": "_balances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 285,
								"contract": "contracts/ERC20Token_flattened.sol:ERC20Permit",
								"label": "_allowances",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 287,
								"contract": "contracts/ERC20Token_flattened.sol:ERC20Permit",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 289,
								"contract": "contracts/ERC20Token_flattened.sol:ERC20Permit",
								"label": "_name",
								"offset": 0,
								"slot": "3",
								"type": "t_string_storage"
							},
							{
								"astId": 291,
								"contract": "contracts/ERC20Token_flattened.sol:ERC20Permit",
								"label": "_symbol",
								"offset": 0,
								"slot": "4",
								"type": "t_string_storage"
							},
							{
								"astId": 3336,
								"contract": "contracts/ERC20Token_flattened.sol:ERC20Permit",
								"label": "_nameFallback",
								"offset": 0,
								"slot": "5",
								"type": "t_string_storage"
							},
							{
								"astId": 3338,
								"contract": "contracts/ERC20Token_flattened.sol:ERC20Permit",
								"label": "_versionFallback",
								"offset": 0,
								"slot": "6",
								"type": "t_string_storage"
							},
							{
								"astId": 3539,
								"contract": "contracts/ERC20Token_flattened.sol:ERC20Permit",
								"label": "_nonces",
								"offset": 0,
								"slot": "7",
								"type": "t_mapping(t_address,t_uint256)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"IERC1155Errors": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ERC1155InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "idsLength",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "valuesLength",
									"type": "uint256"
								}
							],
							"name": "ERC1155InvalidArrayLength",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidOperator",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC1155MissingApprovalForAll",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard ERC1155 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.",
						"errors": {
							"ERC1155InsufficientBalance(address,uint256,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred.",
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"ERC1155InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC1155InvalidArrayLength(uint256,uint256)": [
								{
									"details": "Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.",
									"params": {
										"idsLength": "Length of the array of token identifiers",
										"valuesLength": "Length of the array of token amounts"
									}
								}
							],
							"ERC1155InvalidOperator(address)": [
								{
									"details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC1155InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC1155InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC1155MissingApprovalForAll(address,address)": [
								{
									"details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner.",
										"owner": "Address of the current owner of a token."
									}
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC1155InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idsLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valuesLength\",\"type\":\"uint256\"}],\"name\":\"ERC1155InvalidArrayLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC1155MissingApprovalForAll\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC1155 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\",\"errors\":{\"ERC1155InsufficientBalance(address,uint256,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC1155InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC1155InvalidArrayLength(uint256,uint256)\":[{\"details\":\"Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.\",\"params\":{\"idsLength\":\"Length of the array of token identifiers\",\"valuesLength\":\"Length of the array of token amounts\"}}],\"ERC1155InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC1155InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC1155InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC1155MissingApprovalForAll(address,address)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"owner\":\"Address of the current owner of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ERC20Token_flattened.sol\":\"IERC1155Errors\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ERC20Token_flattened.sol\":{\"keccak256\":\"0x8f4c4437433dc1b1b99ecde98c0b4c6179f9c26187eacd9921673722f312d28a\",\"urls\":[\"bzz-raw://ec20930f29c633f826145760a539999bcd374a4d9aa9de12a761985b13f45cf7\",\"dweb:/ipfs/QmRMogmcmaDFrtw49LHuihMDwL9aGzEfK9ntSiWKQrWUQL\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the value of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the value of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ERC20Token_flattened.sol\":\"IERC20\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ERC20Token_flattened.sol\":{\"keccak256\":\"0x8f4c4437433dc1b1b99ecde98c0b4c6179f9c26187eacd9921673722f312d28a\",\"urls\":[\"bzz-raw://ec20930f29c633f826145760a539999bcd374a4d9aa9de12a761985b13f45cf7\",\"dweb:/ipfs/QmRMogmcmaDFrtw49LHuihMDwL9aGzEfK9ntSiWKQrWUQL\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"IERC20Errors": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard ERC20 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.",
						"errors": {
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC20 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ERC20Token_flattened.sol\":\"IERC20Errors\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ERC20Token_flattened.sol\":{\"keccak256\":\"0x8f4c4437433dc1b1b99ecde98c0b4c6179f9c26187eacd9921673722f312d28a\",\"urls\":[\"bzz-raw://ec20930f29c633f826145760a539999bcd374a4d9aa9de12a761985b13f45cf7\",\"dweb:/ipfs/QmRMogmcmaDFrtw49LHuihMDwL9aGzEfK9ntSiWKQrWUQL\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"IERC20Metadata": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface for the optional metadata functions from the ERC20 standard.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the value of tokens owned by `account`."
							},
							"decimals()": {
								"details": "Returns the decimals places of the token."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token."
							},
							"totalSupply()": {
								"details": "Returns the value of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the optional metadata functions from the ERC20 standard.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ERC20Token_flattened.sol\":\"IERC20Metadata\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ERC20Token_flattened.sol\":{\"keccak256\":\"0x8f4c4437433dc1b1b99ecde98c0b4c6179f9c26187eacd9921673722f312d28a\",\"urls\":[\"bzz-raw://ec20930f29c633f826145760a539999bcd374a4d9aa9de12a761985b13f45cf7\",\"dweb:/ipfs/QmRMogmcmaDFrtw49LHuihMDwL9aGzEfK9ntSiWKQrWUQL\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"IERC20Permit": {
					"abi": [
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "nonces",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all. ==== Security Considerations There are two important considerations concerning the use of `permit`. The first is that a valid permit signature expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be considered as an intention to spend the allowance in any specific way. The second is that because permits have built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be generally recommended is: ```solidity function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}     doThing(..., value); } function doThing(..., uint256 value) public {     token.safeTransferFrom(msg.sender, address(this), value);     ... } ``` Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also {SafeERC20-safeTransferFrom}). Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so contracts should have entry points that don't rely on permit.",
						"kind": "dev",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"details": "Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
							},
							"nonces(address)": {
								"details": "Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."
							},
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515",
							"nonces(address)": "7ecebe00",
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all. ==== Security Considerations There are two important considerations concerning the use of `permit`. The first is that a valid permit signature expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be considered as an intention to spend the allowance in any specific way. The second is that because permits have built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be generally recommended is: ```solidity function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}     doThing(..., value); } function doThing(..., uint256 value) public {     token.safeTransferFrom(msg.sender, address(this), value);     ... } ``` Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also {SafeERC20-safeTransferFrom}). Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so contracts should have entry points that don't rely on permit.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ERC20Token_flattened.sol\":\"IERC20Permit\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ERC20Token_flattened.sol\":{\"keccak256\":\"0x8f4c4437433dc1b1b99ecde98c0b4c6179f9c26187eacd9921673722f312d28a\",\"urls\":[\"bzz-raw://ec20930f29c633f826145760a539999bcd374a4d9aa9de12a761985b13f45cf7\",\"dweb:/ipfs/QmRMogmcmaDFrtw49LHuihMDwL9aGzEfK9ntSiWKQrWUQL\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"IERC5267": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [],
							"name": "EIP712DomainChanged",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "eip712Domain",
							"outputs": [
								{
									"internalType": "bytes1",
									"name": "fields",
									"type": "bytes1"
								},
								{
									"internalType": "string",
									"name": "name",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "version",
									"type": "string"
								},
								{
									"internalType": "uint256",
									"name": "chainId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "verifyingContract",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "salt",
									"type": "bytes32"
								},
								{
									"internalType": "uint256[]",
									"name": "extensions",
									"type": "uint256[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"events": {
							"EIP712DomainChanged()": {
								"details": "MAY be emitted to signal that the domain could have changed."
							}
						},
						"kind": "dev",
						"methods": {
							"eip712Domain()": {
								"details": "returns the fields and values that describe the domain separator used by this contract for EIP-712 signature."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"eip712Domain()": "84b0196e"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"}},\"kind\":\"dev\",\"methods\":{\"eip712Domain()\":{\"details\":\"returns the fields and values that describe the domain separator used by this contract for EIP-712 signature.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ERC20Token_flattened.sol\":\"IERC5267\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ERC20Token_flattened.sol\":{\"keccak256\":\"0x8f4c4437433dc1b1b99ecde98c0b4c6179f9c26187eacd9921673722f312d28a\",\"urls\":[\"bzz-raw://ec20930f29c633f826145760a539999bcd374a4d9aa9de12a761985b13f45cf7\",\"dweb:/ipfs/QmRMogmcmaDFrtw49LHuihMDwL9aGzEfK9ntSiWKQrWUQL\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"IERC721Errors": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC721IncorrectOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ERC721InsufficientApproval",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC721InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "ERC721InvalidOperator",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC721InvalidOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC721InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC721InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ERC721NonexistentToken",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard ERC721 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.",
						"errors": {
							"ERC721IncorrectOwner(address,uint256,address)": [
								{
									"details": "Indicates an error related to the ownership over a particular token. Used in transfers.",
									"params": {
										"owner": "Address of the current owner of a token.",
										"sender": "Address whose tokens are being transferred.",
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"ERC721InsufficientApproval(address,uint256)": [
								{
									"details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner.",
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"ERC721InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC721InvalidOperator(address)": [
								{
									"details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC721InvalidOwner(address)": [
								{
									"details": "Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.",
									"params": {
										"owner": "Address of the current owner of a token."
									}
								}
							],
							"ERC721InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC721InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC721NonexistentToken(uint256)": [
								{
									"details": "Indicates a `tokenId` whose `owner` is the zero address.",
									"params": {
										"tokenId": "Identifier number of a token."
									}
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC721 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\",\"errors\":{\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ERC20Token_flattened.sol\":\"IERC721Errors\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ERC20Token_flattened.sol\":{\"keccak256\":\"0x8f4c4437433dc1b1b99ecde98c0b4c6179f9c26187eacd9921673722f312d28a\",\"urls\":[\"bzz-raw://ec20930f29c633f826145760a539999bcd374a4d9aa9de12a761985b13f45cf7\",\"dweb:/ipfs/QmRMogmcmaDFrtw49LHuihMDwL9aGzEfK9ntSiWKQrWUQL\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"Math": {
					"abi": [
						{
							"inputs": [],
							"name": "MathOverflowedMulDiv",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard math utilities missing in the Solidity language.",
						"errors": {
							"MathOverflowedMulDiv()": [
								{
									"details": "Muldiv operation overflow."
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/ERC20Token_flattened.sol\":42084:56998  library Math {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/ERC20Token_flattened.sol\":42084:56998  library Math {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220b69c8f11e9548e44ca01a133ef8cc8644ebc1bd70f10bd3a2a1f896524af315f64736f6c63430008140033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6055604b600b8282823980515f1a607314603f577f4e487b71000000000000000000000000000000000000000000000000000000005f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220b69c8f11e9548e44ca01a133ef8cc8644ebc1bd70f10bd3a2a1f896524af315f64736f6c63430008140033",
							"opcodes": "PUSH1 0x55 PUSH1 0x4B PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x3F JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB6 SWAP13 DUP16 GT 0xE9 SLOAD DUP15 PREVRANDAO 0xCA ADD LOG1 CALLER 0xEF DUP13 0xC8 PUSH5 0x4EBC1BD70F LT 0xBD GASPRICE 0x2A 0x1F DUP10 PUSH6 0x24AF315F6473 PUSH16 0x6C634300081400330000000000000000 ",
							"sourceMap": "42084:14914:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220b69c8f11e9548e44ca01a133ef8cc8644ebc1bd70f10bd3a2a1f896524af315f64736f6c63430008140033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB6 SWAP13 DUP16 GT 0xE9 SLOAD DUP15 PREVRANDAO 0xCA ADD LOG1 CALLER 0xEF DUP13 0xC8 PUSH5 0x4EBC1BD70F LT 0xBD GASPRICE 0x2A 0x1F DUP10 PUSH6 0x24AF315F6473 PUSH16 0x6C634300081400330000000000000000 ",
							"sourceMap": "42084:14914:0:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "92",
								"totalCost": "17092"
							},
							"internal": {
								"average(uint256,uint256)": "infinite",
								"ceilDiv(uint256,uint256)": "infinite",
								"log10(uint256)": "infinite",
								"log10(uint256,enum Math.Rounding)": "infinite",
								"log2(uint256)": "infinite",
								"log2(uint256,enum Math.Rounding)": "infinite",
								"log256(uint256)": "infinite",
								"log256(uint256,enum Math.Rounding)": "infinite",
								"max(uint256,uint256)": "infinite",
								"min(uint256,uint256)": "infinite",
								"mulDiv(uint256,uint256,uint256)": "infinite",
								"mulDiv(uint256,uint256,uint256,enum Math.Rounding)": "infinite",
								"sqrt(uint256)": "infinite",
								"sqrt(uint256,enum Math.Rounding)": "infinite",
								"tryAdd(uint256,uint256)": "infinite",
								"tryDiv(uint256,uint256)": "infinite",
								"tryMod(uint256,uint256)": "infinite",
								"tryMul(uint256,uint256)": "infinite",
								"trySub(uint256,uint256)": "infinite",
								"unsignedRoundsUp(enum Math.Rounding)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 42084,
									"end": 56998,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 42084,
									"end": 56998,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 42084,
									"end": 56998,
									"name": "PUSH",
									"source": 0,
									"value": "B"
								},
								{
									"begin": 42084,
									"end": 56998,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 42084,
									"end": 56998,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 42084,
									"end": 56998,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 42084,
									"end": 56998,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 42084,
									"end": 56998,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 42084,
									"end": 56998,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 42084,
									"end": 56998,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 42084,
									"end": 56998,
									"name": "BYTE",
									"source": 0
								},
								{
									"begin": 42084,
									"end": 56998,
									"name": "PUSH",
									"source": 0,
									"value": "73"
								},
								{
									"begin": 42084,
									"end": 56998,
									"name": "EQ",
									"source": 0
								},
								{
									"begin": 42084,
									"end": 56998,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 42084,
									"end": 56998,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 42084,
									"end": 56998,
									"name": "PUSH",
									"source": 0,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 42084,
									"end": 56998,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 42084,
									"end": 56998,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 42084,
									"end": 56998,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 42084,
									"end": 56998,
									"name": "PUSH",
									"source": 0,
									"value": "4"
								},
								{
									"begin": 42084,
									"end": 56998,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 42084,
									"end": 56998,
									"name": "PUSH",
									"source": 0,
									"value": "24"
								},
								{
									"begin": 42084,
									"end": 56998,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 42084,
									"end": 56998,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 42084,
									"end": 56998,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 42084,
									"end": 56998,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 42084,
									"end": 56998,
									"name": "ADDRESS",
									"source": 0
								},
								{
									"begin": 42084,
									"end": 56998,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 42084,
									"end": 56998,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 42084,
									"end": 56998,
									"name": "PUSH",
									"source": 0,
									"value": "73"
								},
								{
									"begin": 42084,
									"end": 56998,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 42084,
									"end": 56998,
									"name": "MSTORE8",
									"source": 0
								},
								{
									"begin": 42084,
									"end": 56998,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 42084,
									"end": 56998,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 42084,
									"end": 56998,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220b69c8f11e9548e44ca01a133ef8cc8644ebc1bd70f10bd3a2a1f896524af315f64736f6c63430008140033",
									".code": [
										{
											"begin": 42084,
											"end": 56998,
											"name": "PUSHDEPLOYADDRESS",
											"source": 0
										},
										{
											"begin": 42084,
											"end": 56998,
											"name": "ADDRESS",
											"source": 0
										},
										{
											"begin": 42084,
											"end": 56998,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 42084,
											"end": 56998,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 42084,
											"end": 56998,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 42084,
											"end": 56998,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 42084,
											"end": 56998,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 42084,
											"end": 56998,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 42084,
											"end": 56998,
											"name": "REVERT",
											"source": 0
										}
									]
								}
							},
							"sourceList": [
								"contracts/ERC20Token_flattened.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"MathOverflowedMulDiv\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"errors\":{\"MathOverflowedMulDiv()\":[{\"details\":\"Muldiv operation overflow.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ERC20Token_flattened.sol\":\"Math\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ERC20Token_flattened.sol\":{\"keccak256\":\"0x8f4c4437433dc1b1b99ecde98c0b4c6179f9c26187eacd9921673722f312d28a\",\"urls\":[\"bzz-raw://ec20930f29c633f826145760a539999bcd374a4d9aa9de12a761985b13f45cf7\",\"dweb:/ipfs/QmRMogmcmaDFrtw49LHuihMDwL9aGzEfK9ntSiWKQrWUQL\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"MessageHashUtils": {
					"abi": [],
					"devdoc": {
						"details": "Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing. The library provides methods for generating a hash of a message that conforms to the https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712] specifications.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/ERC20Token_flattened.sol\":61852:65087  library MessageHashUtils {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/ERC20Token_flattened.sol\":61852:65087  library MessageHashUtils {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212205a53a9a756e304693bdbfd2caed764b51abce3dc8d1943cb6a7262c09be33a8564736f6c63430008140033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6055604b600b8282823980515f1a607314603f577f4e487b71000000000000000000000000000000000000000000000000000000005f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea26469706673582212205a53a9a756e304693bdbfd2caed764b51abce3dc8d1943cb6a7262c09be33a8564736f6c63430008140033",
							"opcodes": "PUSH1 0x55 PUSH1 0x4B PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x3F JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 GAS MSTORE8 0xA9 0xA7 JUMP 0xE3 DIV PUSH10 0x3BDBFD2CAED764B51ABC 0xE3 0xDC DUP14 NOT NUMBER 0xCB PUSH11 0x7262C09BE33A8564736F6C PUSH4 0x43000814 STOP CALLER ",
							"sourceMap": "61852:3235:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f80fdfea26469706673582212205a53a9a756e304693bdbfd2caed764b51abce3dc8d1943cb6a7262c09be33a8564736f6c63430008140033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 GAS MSTORE8 0xA9 0xA7 JUMP 0xE3 DIV PUSH10 0x3BDBFD2CAED764B51ABC 0xE3 0xDC DUP14 NOT NUMBER 0xCB PUSH11 0x7262C09BE33A8564736F6C PUSH4 0x43000814 STOP CALLER ",
							"sourceMap": "61852:3235:0:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "92",
								"totalCost": "17092"
							},
							"internal": {
								"toDataWithIntendedValidatorHash(address,bytes memory)": "infinite",
								"toEthSignedMessageHash(bytes memory)": "infinite",
								"toEthSignedMessageHash(bytes32)": "infinite",
								"toTypedDataHash(bytes32,bytes32)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 61852,
									"end": 65087,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 61852,
									"end": 65087,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 61852,
									"end": 65087,
									"name": "PUSH",
									"source": 0,
									"value": "B"
								},
								{
									"begin": 61852,
									"end": 65087,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 61852,
									"end": 65087,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 61852,
									"end": 65087,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 61852,
									"end": 65087,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 61852,
									"end": 65087,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 61852,
									"end": 65087,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 61852,
									"end": 65087,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 61852,
									"end": 65087,
									"name": "BYTE",
									"source": 0
								},
								{
									"begin": 61852,
									"end": 65087,
									"name": "PUSH",
									"source": 0,
									"value": "73"
								},
								{
									"begin": 61852,
									"end": 65087,
									"name": "EQ",
									"source": 0
								},
								{
									"begin": 61852,
									"end": 65087,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 61852,
									"end": 65087,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 61852,
									"end": 65087,
									"name": "PUSH",
									"source": 0,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 61852,
									"end": 65087,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 61852,
									"end": 65087,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 61852,
									"end": 65087,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 61852,
									"end": 65087,
									"name": "PUSH",
									"source": 0,
									"value": "4"
								},
								{
									"begin": 61852,
									"end": 65087,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 61852,
									"end": 65087,
									"name": "PUSH",
									"source": 0,
									"value": "24"
								},
								{
									"begin": 61852,
									"end": 65087,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 61852,
									"end": 65087,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 61852,
									"end": 65087,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 61852,
									"end": 65087,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 61852,
									"end": 65087,
									"name": "ADDRESS",
									"source": 0
								},
								{
									"begin": 61852,
									"end": 65087,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 61852,
									"end": 65087,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 61852,
									"end": 65087,
									"name": "PUSH",
									"source": 0,
									"value": "73"
								},
								{
									"begin": 61852,
									"end": 65087,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 61852,
									"end": 65087,
									"name": "MSTORE8",
									"source": 0
								},
								{
									"begin": 61852,
									"end": 65087,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 61852,
									"end": 65087,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 61852,
									"end": 65087,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212205a53a9a756e304693bdbfd2caed764b51abce3dc8d1943cb6a7262c09be33a8564736f6c63430008140033",
									".code": [
										{
											"begin": 61852,
											"end": 65087,
											"name": "PUSHDEPLOYADDRESS",
											"source": 0
										},
										{
											"begin": 61852,
											"end": 65087,
											"name": "ADDRESS",
											"source": 0
										},
										{
											"begin": 61852,
											"end": 65087,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 61852,
											"end": 65087,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 61852,
											"end": 65087,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 61852,
											"end": 65087,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 61852,
											"end": 65087,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 61852,
											"end": 65087,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 61852,
											"end": 65087,
											"name": "REVERT",
											"source": 0
										}
									]
								}
							},
							"sourceList": [
								"contracts/ERC20Token_flattened.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing. The library provides methods for generating a hash of a message that conforms to the https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712] specifications.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ERC20Token_flattened.sol\":\"MessageHashUtils\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ERC20Token_flattened.sol\":{\"keccak256\":\"0x8f4c4437433dc1b1b99ecde98c0b4c6179f9c26187eacd9921673722f312d28a\",\"urls\":[\"bzz-raw://ec20930f29c633f826145760a539999bcd374a4d9aa9de12a761985b13f45cf7\",\"dweb:/ipfs/QmRMogmcmaDFrtw49LHuihMDwL9aGzEfK9ntSiWKQrWUQL\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"Nonces": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "currentNonce",
									"type": "uint256"
								}
							],
							"name": "InvalidAccountNonce",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "nonces",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Provides tracking nonces for addresses. Nonces will only increment.",
						"errors": {
							"InvalidAccountNonce(address,uint256)": [
								{
									"details": "The nonce used for an `account` is not the expected current nonce."
								}
							]
						},
						"kind": "dev",
						"methods": {
							"nonces(address)": {
								"details": "Returns the next unused nonce for an address."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"nonces(address)": "7ecebe00"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentNonce\",\"type\":\"uint256\"}],\"name\":\"InvalidAccountNonce\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Provides tracking nonces for addresses. Nonces will only increment.\",\"errors\":{\"InvalidAccountNonce(address,uint256)\":[{\"details\":\"The nonce used for an `account` is not the expected current nonce.\"}]},\"kind\":\"dev\",\"methods\":{\"nonces(address)\":{\"details\":\"Returns the next unused nonce for an address.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ERC20Token_flattened.sol\":\"Nonces\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ERC20Token_flattened.sol\":{\"keccak256\":\"0x8f4c4437433dc1b1b99ecde98c0b4c6179f9c26187eacd9921673722f312d28a\",\"urls\":[\"bzz-raw://ec20930f29c633f826145760a539999bcd374a4d9aa9de12a761985b13f45cf7\",\"dweb:/ipfs/QmRMogmcmaDFrtw49LHuihMDwL9aGzEfK9ntSiWKQrWUQL\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 3539,
								"contract": "contracts/ERC20Token_flattened.sol:Nonces",
								"label": "_nonces",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"Ownable": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "OwnableInvalidOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "OwnableUnauthorizedAccount",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
						"errors": {
							"OwnableInvalidOwner(address)": [
								{
									"details": "The owner is not a valid owner account. (eg. `address(0)`)"
								}
							],
							"OwnableUnauthorizedAccount(address)": [
								{
									"details": "The caller account is not authorized to perform an operation."
								}
							]
						},
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "Initializes the contract setting the address provided by the deployer as the initial owner."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the address provided by the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ERC20Token_flattened.sol\":\"Ownable\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ERC20Token_flattened.sol\":{\"keccak256\":\"0x8f4c4437433dc1b1b99ecde98c0b4c6179f9c26187eacd9921673722f312d28a\",\"urls\":[\"bzz-raw://ec20930f29c633f826145760a539999bcd374a4d9aa9de12a761985b13f45cf7\",\"dweb:/ipfs/QmRMogmcmaDFrtw49LHuihMDwL9aGzEfK9ntSiWKQrWUQL\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 961,
								"contract": "contracts/ERC20Token_flattened.sol:Ownable",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"Pausable": {
					"abi": [
						{
							"inputs": [],
							"name": "EnforcedPause",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ExpectedPause",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "Paused",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "Unpaused",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "paused",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which allows children to implement an emergency stop mechanism that can be triggered by an authorized account. This module is used through inheritance. It will make available the modifiers `whenNotPaused` and `whenPaused`, which can be applied to the functions of your contract. Note that they will not be pausable by simply including this module, only once the modifiers are put in place.",
						"errors": {
							"EnforcedPause()": [
								{
									"details": "The operation failed because the contract is paused."
								}
							],
							"ExpectedPause()": [
								{
									"details": "The operation failed because the contract is not paused."
								}
							]
						},
						"events": {
							"Paused(address)": {
								"details": "Emitted when the pause is triggered by `account`."
							},
							"Unpaused(address)": {
								"details": "Emitted when the pause is lifted by `account`."
							}
						},
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "Initializes the contract in unpaused state."
							},
							"paused()": {
								"details": "Returns true if the contract is paused, and false otherwise."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"paused()": "5c975abb"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which allows children to implement an emergency stop mechanism that can be triggered by an authorized account. This module is used through inheritance. It will make available the modifiers `whenNotPaused` and `whenPaused`, which can be applied to the functions of your contract. Note that they will not be pausable by simply including this module, only once the modifiers are put in place.\",\"errors\":{\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}]},\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract in unpaused state.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ERC20Token_flattened.sol\":\"Pausable\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ERC20Token_flattened.sol\":{\"keccak256\":\"0x8f4c4437433dc1b1b99ecde98c0b4c6179f9c26187eacd9921673722f312d28a\",\"urls\":[\"bzz-raw://ec20930f29c633f826145760a539999bcd374a4d9aa9de12a761985b13f45cf7\",\"dweb:/ipfs/QmRMogmcmaDFrtw49LHuihMDwL9aGzEfK9ntSiWKQrWUQL\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 818,
								"contract": "contracts/ERC20Token_flattened.sol:Pausable",
								"label": "_paused",
								"offset": 0,
								"slot": "0",
								"type": "t_bool"
							}
						],
						"types": {
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"ShortStrings": {
					"abi": [
						{
							"inputs": [],
							"name": "InvalidShortString",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "str",
									"type": "string"
								}
							],
							"name": "StringTooLong",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "This library provides functions to convert short memory strings into a `ShortString` type that can be used as an immutable variable. Strings of arbitrary length can be optimized using this library if they are short enough (up to 31 bytes) by packing them with their length (1 byte) in a single EVM word (32 bytes). Additionally, a fallback mechanism can be used for every other case. Usage example: ```solidity contract Named {     using ShortStrings for *;     ShortString private immutable _name;     string private _nameFallback;     constructor(string memory contractName) {         _name = contractName.toShortStringWithFallback(_nameFallback);     }     function name() external view returns (string memory) {         return _name.toStringWithFallback(_nameFallback);     } } ```",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/ERC20Token_flattened.sol\":70280:73333  library ShortStrings {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/ERC20Token_flattened.sol\":70280:73333  library ShortStrings {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220e43d954d414c6db33ee8d2985e32beb064b683133503e974f3660a2ee54e1a2e64736f6c63430008140033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6055604b600b8282823980515f1a607314603f577f4e487b71000000000000000000000000000000000000000000000000000000005f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220e43d954d414c6db33ee8d2985e32beb064b683133503e974f3660a2ee54e1a2e64736f6c63430008140033",
							"opcodes": "PUSH1 0x55 PUSH1 0x4B PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x3F JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE4 RETURNDATASIZE SWAP6 0x4D COINBASE 0x4C PUSH14 0xB33EE8D2985E32BEB064B6831335 SUB 0xE9 PUSH21 0xF3660A2EE54E1A2E64736F6C634300081400330000 ",
							"sourceMap": "70280:3053:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220e43d954d414c6db33ee8d2985e32beb064b683133503e974f3660a2ee54e1a2e64736f6c63430008140033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE4 RETURNDATASIZE SWAP6 0x4D COINBASE 0x4C PUSH14 0xB33EE8D2985E32BEB064B6831335 SUB 0xE9 PUSH21 0xF3660A2EE54E1A2E64736F6C634300081400330000 ",
							"sourceMap": "70280:3053:0:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "92",
								"totalCost": "17092"
							},
							"internal": {
								"byteLength(ShortString)": "infinite",
								"byteLengthWithFallback(ShortString,string storage pointer)": "infinite",
								"toShortString(string memory)": "infinite",
								"toShortStringWithFallback(string memory,string storage pointer)": "infinite",
								"toString(ShortString)": "infinite",
								"toStringWithFallback(ShortString,string storage pointer)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 70280,
									"end": 73333,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 70280,
									"end": 73333,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 70280,
									"end": 73333,
									"name": "PUSH",
									"source": 0,
									"value": "B"
								},
								{
									"begin": 70280,
									"end": 73333,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 70280,
									"end": 73333,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 70280,
									"end": 73333,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 70280,
									"end": 73333,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 70280,
									"end": 73333,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 70280,
									"end": 73333,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 70280,
									"end": 73333,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 70280,
									"end": 73333,
									"name": "BYTE",
									"source": 0
								},
								{
									"begin": 70280,
									"end": 73333,
									"name": "PUSH",
									"source": 0,
									"value": "73"
								},
								{
									"begin": 70280,
									"end": 73333,
									"name": "EQ",
									"source": 0
								},
								{
									"begin": 70280,
									"end": 73333,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 70280,
									"end": 73333,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 70280,
									"end": 73333,
									"name": "PUSH",
									"source": 0,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 70280,
									"end": 73333,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 70280,
									"end": 73333,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 70280,
									"end": 73333,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 70280,
									"end": 73333,
									"name": "PUSH",
									"source": 0,
									"value": "4"
								},
								{
									"begin": 70280,
									"end": 73333,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 70280,
									"end": 73333,
									"name": "PUSH",
									"source": 0,
									"value": "24"
								},
								{
									"begin": 70280,
									"end": 73333,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 70280,
									"end": 73333,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 70280,
									"end": 73333,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 70280,
									"end": 73333,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 70280,
									"end": 73333,
									"name": "ADDRESS",
									"source": 0
								},
								{
									"begin": 70280,
									"end": 73333,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 70280,
									"end": 73333,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 70280,
									"end": 73333,
									"name": "PUSH",
									"source": 0,
									"value": "73"
								},
								{
									"begin": 70280,
									"end": 73333,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 70280,
									"end": 73333,
									"name": "MSTORE8",
									"source": 0
								},
								{
									"begin": 70280,
									"end": 73333,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 70280,
									"end": 73333,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 70280,
									"end": 73333,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220e43d954d414c6db33ee8d2985e32beb064b683133503e974f3660a2ee54e1a2e64736f6c63430008140033",
									".code": [
										{
											"begin": 70280,
											"end": 73333,
											"name": "PUSHDEPLOYADDRESS",
											"source": 0
										},
										{
											"begin": 70280,
											"end": 73333,
											"name": "ADDRESS",
											"source": 0
										},
										{
											"begin": 70280,
											"end": 73333,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 70280,
											"end": 73333,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 70280,
											"end": 73333,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 70280,
											"end": 73333,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 70280,
											"end": 73333,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 70280,
											"end": 73333,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 70280,
											"end": 73333,
											"name": "REVERT",
											"source": 0
										}
									]
								}
							},
							"sourceList": [
								"contracts/ERC20Token_flattened.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"This library provides functions to convert short memory strings into a `ShortString` type that can be used as an immutable variable. Strings of arbitrary length can be optimized using this library if they are short enough (up to 31 bytes) by packing them with their length (1 byte) in a single EVM word (32 bytes). Additionally, a fallback mechanism can be used for every other case. Usage example: ```solidity contract Named {     using ShortStrings for *;     ShortString private immutable _name;     string private _nameFallback;     constructor(string memory contractName) {         _name = contractName.toShortStringWithFallback(_nameFallback);     }     function name() external view returns (string memory) {         return _name.toStringWithFallback(_nameFallback);     } } ```\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ERC20Token_flattened.sol\":\"ShortStrings\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ERC20Token_flattened.sol\":{\"keccak256\":\"0x8f4c4437433dc1b1b99ecde98c0b4c6179f9c26187eacd9921673722f312d28a\",\"urls\":[\"bzz-raw://ec20930f29c633f826145760a539999bcd374a4d9aa9de12a761985b13f45cf7\",\"dweb:/ipfs/QmRMogmcmaDFrtw49LHuihMDwL9aGzEfK9ntSiWKQrWUQL\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"SignedMath": {
					"abi": [],
					"devdoc": {
						"details": "Standard signed math utilities missing in the Solidity language.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/ERC20Token_flattened.sol\":57245:58292  library SignedMath {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/ERC20Token_flattened.sol\":57245:58292  library SignedMath {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122015f79a02142c0e6d57abffa444f64f10d98eb8eac65d965af44da4754aa8a59a64736f6c63430008140033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6055604b600b8282823980515f1a607314603f577f4e487b71000000000000000000000000000000000000000000000000000000005f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea264697066735822122015f79a02142c0e6d57abffa444f64f10d98eb8eac65d965af44da4754aa8a59a64736f6c63430008140033",
							"opcodes": "PUSH1 0x55 PUSH1 0x4B PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x3F JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 ISZERO 0xF7 SWAP11 MUL EQ 0x2C 0xE PUSH14 0x57ABFFA444F64F10D98EB8EAC65D SWAP7 GAS DELEGATECALL 0x4D LOG4 PUSH22 0x4AA8A59A64736F6C6343000814003300000000000000 ",
							"sourceMap": "57245:1047:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f80fdfea264697066735822122015f79a02142c0e6d57abffa444f64f10d98eb8eac65d965af44da4754aa8a59a64736f6c63430008140033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 ISZERO 0xF7 SWAP11 MUL EQ 0x2C 0xE PUSH14 0x57ABFFA444F64F10D98EB8EAC65D SWAP7 GAS DELEGATECALL 0x4D LOG4 PUSH22 0x4AA8A59A64736F6C6343000814003300000000000000 ",
							"sourceMap": "57245:1047:0:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "92",
								"totalCost": "17092"
							},
							"internal": {
								"abs(int256)": "infinite",
								"average(int256,int256)": "infinite",
								"max(int256,int256)": "infinite",
								"min(int256,int256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 57245,
									"end": 58292,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 57245,
									"end": 58292,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 57245,
									"end": 58292,
									"name": "PUSH",
									"source": 0,
									"value": "B"
								},
								{
									"begin": 57245,
									"end": 58292,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 57245,
									"end": 58292,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 57245,
									"end": 58292,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 57245,
									"end": 58292,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 57245,
									"end": 58292,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 57245,
									"end": 58292,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 57245,
									"end": 58292,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 57245,
									"end": 58292,
									"name": "BYTE",
									"source": 0
								},
								{
									"begin": 57245,
									"end": 58292,
									"name": "PUSH",
									"source": 0,
									"value": "73"
								},
								{
									"begin": 57245,
									"end": 58292,
									"name": "EQ",
									"source": 0
								},
								{
									"begin": 57245,
									"end": 58292,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 57245,
									"end": 58292,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 57245,
									"end": 58292,
									"name": "PUSH",
									"source": 0,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 57245,
									"end": 58292,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 57245,
									"end": 58292,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 57245,
									"end": 58292,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 57245,
									"end": 58292,
									"name": "PUSH",
									"source": 0,
									"value": "4"
								},
								{
									"begin": 57245,
									"end": 58292,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 57245,
									"end": 58292,
									"name": "PUSH",
									"source": 0,
									"value": "24"
								},
								{
									"begin": 57245,
									"end": 58292,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 57245,
									"end": 58292,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 57245,
									"end": 58292,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 57245,
									"end": 58292,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 57245,
									"end": 58292,
									"name": "ADDRESS",
									"source": 0
								},
								{
									"begin": 57245,
									"end": 58292,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 57245,
									"end": 58292,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 57245,
									"end": 58292,
									"name": "PUSH",
									"source": 0,
									"value": "73"
								},
								{
									"begin": 57245,
									"end": 58292,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 57245,
									"end": 58292,
									"name": "MSTORE8",
									"source": 0
								},
								{
									"begin": 57245,
									"end": 58292,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 57245,
									"end": 58292,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 57245,
									"end": 58292,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122015f79a02142c0e6d57abffa444f64f10d98eb8eac65d965af44da4754aa8a59a64736f6c63430008140033",
									".code": [
										{
											"begin": 57245,
											"end": 58292,
											"name": "PUSHDEPLOYADDRESS",
											"source": 0
										},
										{
											"begin": 57245,
											"end": 58292,
											"name": "ADDRESS",
											"source": 0
										},
										{
											"begin": 57245,
											"end": 58292,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 57245,
											"end": 58292,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 57245,
											"end": 58292,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 57245,
											"end": 58292,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 57245,
											"end": 58292,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 57245,
											"end": 58292,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 57245,
											"end": 58292,
											"name": "REVERT",
											"source": 0
										}
									]
								}
							},
							"sourceList": [
								"contracts/ERC20Token_flattened.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard signed math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ERC20Token_flattened.sol\":\"SignedMath\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ERC20Token_flattened.sol\":{\"keccak256\":\"0x8f4c4437433dc1b1b99ecde98c0b4c6179f9c26187eacd9921673722f312d28a\",\"urls\":[\"bzz-raw://ec20930f29c633f826145760a539999bcd374a4d9aa9de12a761985b13f45cf7\",\"dweb:/ipfs/QmRMogmcmaDFrtw49LHuihMDwL9aGzEfK9ntSiWKQrWUQL\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"StorageSlot": {
					"abi": [],
					"devdoc": {
						"details": "Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ```solidity contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(newImplementation.code.length > 0);         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ```",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/ERC20Token_flattened.sol\":66359:69044  library StorageSlot {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/ERC20Token_flattened.sol\":66359:69044  library StorageSlot {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122081a2ca5dd9fa09f73061c0360025accc941117b6bed75984e2e644223c719e4264736f6c63430008140033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6055604b600b8282823980515f1a607314603f577f4e487b71000000000000000000000000000000000000000000000000000000005f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea264697066735822122081a2ca5dd9fa09f73061c0360025accc941117b6bed75984e2e644223c719e4264736f6c63430008140033",
							"opcodes": "PUSH1 0x55 PUSH1 0x4B PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x3F JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP2 LOG2 0xCA 0x5D 0xD9 STATICCALL MULMOD 0xF7 ADDRESS PUSH2 0xC036 STOP 0x25 0xAC 0xCC SWAP5 GT OR 0xB6 0xBE 0xD7 MSIZE DUP5 0xE2 0xE6 PREVRANDAO 0x22 EXTCODECOPY PUSH18 0x9E4264736F6C634300081400330000000000 ",
							"sourceMap": "66359:2685:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f80fdfea264697066735822122081a2ca5dd9fa09f73061c0360025accc941117b6bed75984e2e644223c719e4264736f6c63430008140033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP2 LOG2 0xCA 0x5D 0xD9 STATICCALL MULMOD 0xF7 ADDRESS PUSH2 0xC036 STOP 0x25 0xAC 0xCC SWAP5 GT OR 0xB6 0xBE 0xD7 MSIZE DUP5 0xE2 0xE6 PREVRANDAO 0x22 EXTCODECOPY PUSH18 0x9E4264736F6C634300081400330000000000 ",
							"sourceMap": "66359:2685:0:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "92",
								"totalCost": "17092"
							},
							"internal": {
								"getAddressSlot(bytes32)": "infinite",
								"getBooleanSlot(bytes32)": "infinite",
								"getBytes32Slot(bytes32)": "infinite",
								"getBytesSlot(bytes storage pointer)": "infinite",
								"getBytesSlot(bytes32)": "infinite",
								"getStringSlot(bytes32)": "infinite",
								"getStringSlot(string storage pointer)": "infinite",
								"getUint256Slot(bytes32)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 66359,
									"end": 69044,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 66359,
									"end": 69044,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 66359,
									"end": 69044,
									"name": "PUSH",
									"source": 0,
									"value": "B"
								},
								{
									"begin": 66359,
									"end": 69044,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 66359,
									"end": 69044,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 66359,
									"end": 69044,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 66359,
									"end": 69044,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 66359,
									"end": 69044,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 66359,
									"end": 69044,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 66359,
									"end": 69044,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 66359,
									"end": 69044,
									"name": "BYTE",
									"source": 0
								},
								{
									"begin": 66359,
									"end": 69044,
									"name": "PUSH",
									"source": 0,
									"value": "73"
								},
								{
									"begin": 66359,
									"end": 69044,
									"name": "EQ",
									"source": 0
								},
								{
									"begin": 66359,
									"end": 69044,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 66359,
									"end": 69044,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 66359,
									"end": 69044,
									"name": "PUSH",
									"source": 0,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 66359,
									"end": 69044,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 66359,
									"end": 69044,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 66359,
									"end": 69044,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 66359,
									"end": 69044,
									"name": "PUSH",
									"source": 0,
									"value": "4"
								},
								{
									"begin": 66359,
									"end": 69044,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 66359,
									"end": 69044,
									"name": "PUSH",
									"source": 0,
									"value": "24"
								},
								{
									"begin": 66359,
									"end": 69044,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 66359,
									"end": 69044,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 66359,
									"end": 69044,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 66359,
									"end": 69044,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 66359,
									"end": 69044,
									"name": "ADDRESS",
									"source": 0
								},
								{
									"begin": 66359,
									"end": 69044,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 66359,
									"end": 69044,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 66359,
									"end": 69044,
									"name": "PUSH",
									"source": 0,
									"value": "73"
								},
								{
									"begin": 66359,
									"end": 69044,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 66359,
									"end": 69044,
									"name": "MSTORE8",
									"source": 0
								},
								{
									"begin": 66359,
									"end": 69044,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 66359,
									"end": 69044,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 66359,
									"end": 69044,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122081a2ca5dd9fa09f73061c0360025accc941117b6bed75984e2e644223c719e4264736f6c63430008140033",
									".code": [
										{
											"begin": 66359,
											"end": 69044,
											"name": "PUSHDEPLOYADDRESS",
											"source": 0
										},
										{
											"begin": 66359,
											"end": 69044,
											"name": "ADDRESS",
											"source": 0
										},
										{
											"begin": 66359,
											"end": 69044,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 66359,
											"end": 69044,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 66359,
											"end": 69044,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 66359,
											"end": 69044,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 66359,
											"end": 69044,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 66359,
											"end": 69044,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 66359,
											"end": 69044,
											"name": "REVERT",
											"source": 0
										}
									]
								}
							},
							"sourceList": [
								"contracts/ERC20Token_flattened.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ```solidity contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(newImplementation.code.length > 0);         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ```\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ERC20Token_flattened.sol\":\"StorageSlot\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ERC20Token_flattened.sol\":{\"keccak256\":\"0x8f4c4437433dc1b1b99ecde98c0b4c6179f9c26187eacd9921673722f312d28a\",\"urls\":[\"bzz-raw://ec20930f29c633f826145760a539999bcd374a4d9aa9de12a761985b13f45cf7\",\"dweb:/ipfs/QmRMogmcmaDFrtw49LHuihMDwL9aGzEfK9ntSiWKQrWUQL\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"Strings": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "length",
									"type": "uint256"
								}
							],
							"name": "StringsInsufficientHexLength",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "String operations.",
						"errors": {
							"StringsInsufficientHexLength(uint256,uint256)": [
								{
									"details": "The `value` string doesn't fit in the specified `length`."
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/ERC20Token_flattened.sol\":58479:61326  library Strings {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/ERC20Token_flattened.sol\":58479:61326  library Strings {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212202b30cef1e823d585e260d070211cb51a7f6646b4a6a546f01c2e822e3957595a64736f6c63430008140033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6055604b600b8282823980515f1a607314603f577f4e487b71000000000000000000000000000000000000000000000000000000005f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea26469706673582212202b30cef1e823d585e260d070211cb51a7f6646b4a6a546f01c2e822e3957595a64736f6c63430008140033",
							"opcodes": "PUSH1 0x55 PUSH1 0x4B PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x3F JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2B ADDRESS 0xCE CALL 0xE8 0x23 0xD5 DUP6 0xE2 PUSH1 0xD0 PUSH17 0x211CB51A7F6646B4A6A546F01C2E822E39 JUMPI MSIZE GAS PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ",
							"sourceMap": "58479:2847:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f80fdfea26469706673582212202b30cef1e823d585e260d070211cb51a7f6646b4a6a546f01c2e822e3957595a64736f6c63430008140033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2B ADDRESS 0xCE CALL 0xE8 0x23 0xD5 DUP6 0xE2 PUSH1 0xD0 PUSH17 0x211CB51A7F6646B4A6A546F01C2E822E39 JUMPI MSIZE GAS PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ",
							"sourceMap": "58479:2847:0:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "92",
								"totalCost": "17092"
							},
							"internal": {
								"equal(string memory,string memory)": "infinite",
								"toHexString(address)": "infinite",
								"toHexString(uint256)": "infinite",
								"toHexString(uint256,uint256)": "infinite",
								"toString(uint256)": "infinite",
								"toStringSigned(int256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 58479,
									"end": 61326,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 58479,
									"end": 61326,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 58479,
									"end": 61326,
									"name": "PUSH",
									"source": 0,
									"value": "B"
								},
								{
									"begin": 58479,
									"end": 61326,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 58479,
									"end": 61326,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 58479,
									"end": 61326,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 58479,
									"end": 61326,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 58479,
									"end": 61326,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 58479,
									"end": 61326,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 58479,
									"end": 61326,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 58479,
									"end": 61326,
									"name": "BYTE",
									"source": 0
								},
								{
									"begin": 58479,
									"end": 61326,
									"name": "PUSH",
									"source": 0,
									"value": "73"
								},
								{
									"begin": 58479,
									"end": 61326,
									"name": "EQ",
									"source": 0
								},
								{
									"begin": 58479,
									"end": 61326,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 58479,
									"end": 61326,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 58479,
									"end": 61326,
									"name": "PUSH",
									"source": 0,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 58479,
									"end": 61326,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 58479,
									"end": 61326,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 58479,
									"end": 61326,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 58479,
									"end": 61326,
									"name": "PUSH",
									"source": 0,
									"value": "4"
								},
								{
									"begin": 58479,
									"end": 61326,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 58479,
									"end": 61326,
									"name": "PUSH",
									"source": 0,
									"value": "24"
								},
								{
									"begin": 58479,
									"end": 61326,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 58479,
									"end": 61326,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 58479,
									"end": 61326,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 58479,
									"end": 61326,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 58479,
									"end": 61326,
									"name": "ADDRESS",
									"source": 0
								},
								{
									"begin": 58479,
									"end": 61326,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 58479,
									"end": 61326,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 58479,
									"end": 61326,
									"name": "PUSH",
									"source": 0,
									"value": "73"
								},
								{
									"begin": 58479,
									"end": 61326,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 58479,
									"end": 61326,
									"name": "MSTORE8",
									"source": 0
								},
								{
									"begin": 58479,
									"end": 61326,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 58479,
									"end": 61326,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 58479,
									"end": 61326,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212202b30cef1e823d585e260d070211cb51a7f6646b4a6a546f01c2e822e3957595a64736f6c63430008140033",
									".code": [
										{
											"begin": 58479,
											"end": 61326,
											"name": "PUSHDEPLOYADDRESS",
											"source": 0
										},
										{
											"begin": 58479,
											"end": 61326,
											"name": "ADDRESS",
											"source": 0
										},
										{
											"begin": 58479,
											"end": 61326,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 58479,
											"end": 61326,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 58479,
											"end": 61326,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 58479,
											"end": 61326,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 58479,
											"end": 61326,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 58479,
											"end": 61326,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 58479,
											"end": 61326,
											"name": "REVERT",
											"source": 0
										}
									]
								}
							},
							"sourceList": [
								"contracts/ERC20Token_flattened.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"StringsInsufficientHexLength\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"String operations.\",\"errors\":{\"StringsInsufficientHexLength(uint256,uint256)\":[{\"details\":\"The `value` string doesn't fit in the specified `length`.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ERC20Token_flattened.sol\":\"Strings\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ERC20Token_flattened.sol\":{\"keccak256\":\"0x8f4c4437433dc1b1b99ecde98c0b4c6179f9c26187eacd9921673722f312d28a\",\"urls\":[\"bzz-raw://ec20930f29c633f826145760a539999bcd374a4d9aa9de12a761985b13f45cf7\",\"dweb:/ipfs/QmRMogmcmaDFrtw49LHuihMDwL9aGzEfK9ntSiWKQrWUQL\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"VEGAN": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "initialOwner",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"inputs": [],
							"name": "ECDSAInvalidSignature",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "length",
									"type": "uint256"
								}
							],
							"name": "ECDSAInvalidSignatureLength",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "ECDSAInvalidSignatureS",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								}
							],
							"name": "ERC2612ExpiredSignature",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "signer",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC2612InvalidSigner",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "EnforcedPause",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ExpectedPause",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "currentNonce",
									"type": "uint256"
								}
							],
							"name": "InvalidAccountNonce",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidShortString",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "OwnableInvalidOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "OwnableUnauthorizedAccount",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "str",
									"type": "string"
								}
							],
							"name": "StringTooLong",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [],
							"name": "EIP712DomainChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "Paused",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "Unpaused",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "burn",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "burnFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "eip712Domain",
							"outputs": [
								{
									"internalType": "bytes1",
									"name": "fields",
									"type": "bytes1"
								},
								{
									"internalType": "string",
									"name": "name",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "version",
									"type": "string"
								},
								{
									"internalType": "uint256",
									"name": "chainId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "verifyingContract",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "salt",
									"type": "bytes32"
								},
								{
									"internalType": "uint256[]",
									"name": "extensions",
									"type": "uint256[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "mint",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "nonces",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "pause",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "paused",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "unpause",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"errors": {
							"ECDSAInvalidSignature()": [
								{
									"details": "The signature derives the `address(0)`."
								}
							],
							"ECDSAInvalidSignatureLength(uint256)": [
								{
									"details": "The signature has an invalid length."
								}
							],
							"ECDSAInvalidSignatureS(bytes32)": [
								{
									"details": "The signature has an S value that is in the upper half order."
								}
							],
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC2612ExpiredSignature(uint256)": [
								{
									"details": "Permit deadline has expired."
								}
							],
							"ERC2612InvalidSigner(address,address)": [
								{
									"details": "Mismatched signature."
								}
							],
							"EnforcedPause()": [
								{
									"details": "The operation failed because the contract is paused."
								}
							],
							"ExpectedPause()": [
								{
									"details": "The operation failed because the contract is not paused."
								}
							],
							"InvalidAccountNonce(address,uint256)": [
								{
									"details": "The nonce used for an `account` is not the expected current nonce."
								}
							],
							"OwnableInvalidOwner(address)": [
								{
									"details": "The owner is not a valid owner account. (eg. `address(0)`)"
								}
							],
							"OwnableUnauthorizedAccount(address)": [
								{
									"details": "The caller account is not authorized to perform an operation."
								}
							]
						},
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"EIP712DomainChanged()": {
								"details": "MAY be emitted to signal that the domain could have changed."
							},
							"Paused(address)": {
								"details": "Emitted when the pause is triggered by `account`."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							},
							"Unpaused(address)": {
								"details": "Emitted when the pause is lifted by `account`."
							}
						},
						"kind": "dev",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"details": "Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
							},
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"burn(uint256)": {
								"details": "Destroys a `value` amount of tokens from the caller. See {ERC20-_burn}."
							},
							"burnFrom(address,uint256)": {
								"details": "Destroys a `value` amount of tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `value`."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"eip712Domain()": {
								"details": "See {IERC-5267}."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"nonces(address)": {
								"details": "Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"paused()": {
								"details": "Returns true if the contract is paused, and false otherwise."
							},
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/ERC20Token_flattened.sol\":84759:85505  contract VEGAN is ERC20, ERC20Burnable, ERC20Pausable, Ownable, ERC20Permit {... */\n  mstore(0x40, 0x0160)\n    /* \"contracts/ERC20Token_flattened.sol\":84841:85031  constructor(address initialOwner)... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  dup2\n  add\n  0x40\n  mstore\n  dup2\n  add\n  swap1\n  tag_2\n  swap2\n  swap1\n  tag_3\n  jump\t// in\ntag_2:\n    /* \"contracts/ERC20Token_flattened.sol\":83445:83497  constructor(string memory name) EIP712(name, \"1\") {} */\n  mload(0x40)\n  dup1\n  0x40\n  add\n  0x40\n  mstore\n  dup1\n  0x05\n  dup2\n  mstore\n  0x20\n  add\n  0x564547414e000000000000000000000000000000000000000000000000000000\n  dup2\n  mstore\n  pop\n    /* \"contracts/ERC20Token_flattened.sol\":83484:83488  name */\n  dup1\n    /* \"contracts/ERC20Token_flattened.sol\":77289:77720  constructor(string memory name, string memory version) {... */\n  mload(0x40)\n  dup1\n  0x40\n  add\n  0x40\n  mstore\n  dup1\n  0x01\n  dup2\n  mstore\n  0x20\n  add\n  0x3100000000000000000000000000000000000000000000000000000000000000\n  dup2\n  mstore\n  pop\n    /* \"contracts/ERC20Token_flattened.sol\":84921:84933  initialOwner */\n  dup4\n    /* \"contracts/ERC20Token_flattened.sol\":12757:12870  constructor(string memory name_, string memory symbol_) {... */\n  mload(0x40)\n  dup1\n  0x40\n  add\n  0x40\n  mstore\n  dup1\n  0x05\n  dup2\n  mstore\n  0x20\n  add\n  0x564547414e000000000000000000000000000000000000000000000000000000\n  dup2\n  mstore\n  pop\n  mload(0x40)\n  dup1\n  0x40\n  add\n  0x40\n  mstore\n  dup1\n  0x03\n  dup2\n  mstore\n  0x20\n  add\n  0x56474e0000000000000000000000000000000000000000000000000000000000\n  dup2\n  mstore\n  pop\n    /* \"contracts/ERC20Token_flattened.sol\":12831:12836  name_ */\n  dup2\n    /* \"contracts/ERC20Token_flattened.sol\":12823:12828  _name */\n  0x03\n    /* \"contracts/ERC20Token_flattened.sol\":12823:12836  _name = name_ */\n  swap1\n  dup2\n  tag_11\n  swap2\n  swap1\n  tag_12\n  jump\t// in\ntag_11:\n  pop\n    /* \"contracts/ERC20Token_flattened.sol\":12856:12863  symbol_ */\n  dup1\n    /* \"contracts/ERC20Token_flattened.sol\":12846:12853  _symbol */\n  0x04\n    /* \"contracts/ERC20Token_flattened.sol\":12846:12863  _symbol = symbol_ */\n  swap1\n  dup2\n  tag_13\n  swap2\n  swap1\n  tag_12\n  jump\t// in\ntag_13:\n  pop\n    /* \"contracts/ERC20Token_flattened.sol\":12757:12870  constructor(string memory name_, string memory symbol_) {... */\n  pop\n  pop\n    /* \"contracts/ERC20Token_flattened.sol\":24362:24367  false */\n  0x00\n    /* \"contracts/ERC20Token_flattened.sol\":24352:24359  _paused */\n  0x05\n  0x00\n    /* \"contracts/ERC20Token_flattened.sol\":24352:24367  _paused = false */\n  0x0100\n  exp\n  dup2\n  sload\n  dup2\n  0xff\n  mul\n  not\n  and\n  swap1\n  dup4\n  iszero\n  iszero\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"contracts/ERC20Token_flattened.sol\":28441:28442  0 */\n  0x00\n    /* \"contracts/ERC20Token_flattened.sol\":28417:28443  initialOwner == address(0) */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n    /* \"contracts/ERC20Token_flattened.sol\":28417:28429  initialOwner */\n  dup2\n    /* \"contracts/ERC20Token_flattened.sol\":28417:28443  initialOwner == address(0) */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  sub\n    /* \"contracts/ERC20Token_flattened.sol\":28413:28508  if (initialOwner == address(0)) {... */\n  tag_16\n  jumpi\n    /* \"contracts/ERC20Token_flattened.sol\":28494:28495  0 */\n  0x00\n    /* \"contracts/ERC20Token_flattened.sol\":28466:28497  OwnableInvalidOwner(address(0)) */\n  mload(0x40)\n  0x1e4fbdf700000000000000000000000000000000000000000000000000000000\n  dup2\n  mstore\n  0x04\n  add\n  tag_17\n  swap2\n  swap1\n  tag_18\n  jump\t// in\ntag_17:\n  mload(0x40)\n  dup1\n  swap2\n  sub\n  swap1\n  revert\n    /* \"contracts/ERC20Token_flattened.sol\":28413:28508  if (initialOwner == address(0)) {... */\ntag_16:\n    /* \"contracts/ERC20Token_flattened.sol\":28517:28549  _transferOwnership(initialOwner) */\n  tag_19\n    /* \"contracts/ERC20Token_flattened.sol\":28536:28548  initialOwner */\n  dup2\n    /* \"contracts/ERC20Token_flattened.sol\":28517:28535  _transferOwnership */\n  shl(0x20, tag_20)\n    /* \"contracts/ERC20Token_flattened.sol\":28517:28549  _transferOwnership(initialOwner) */\n  0x20\n  shr\n  jump\t// in\ntag_19:\n    /* \"contracts/ERC20Token_flattened.sol\":28369:28556  constructor(address initialOwner) {... */\n  pop\n    /* \"contracts/ERC20Token_flattened.sol\":77362:77407  name.toShortStringWithFallback(_nameFallback) */\n  tag_22\n    /* \"contracts/ERC20Token_flattened.sol\":77393:77406  _nameFallback */\n  0x06\n    /* \"contracts/ERC20Token_flattened.sol\":77362:77366  name */\n  dup4\n    /* \"contracts/ERC20Token_flattened.sol\":77362:77392  name.toShortStringWithFallback */\n  shl(0x20, tag_23)\n  swap1\n    /* \"contracts/ERC20Token_flattened.sol\":77362:77407  name.toShortStringWithFallback(_nameFallback) */\n  swap2\n  swap1\n  0x20\n  shr\n  jump\t// in\ntag_22:\n    /* \"contracts/ERC20Token_flattened.sol\":77354:77407  _name = name.toShortStringWithFallback(_nameFallback) */\n  0x0120\n  dup2\n  dup2\n  mstore\n  pop\n  pop\n    /* \"contracts/ERC20Token_flattened.sol\":77428:77479  version.toShortStringWithFallback(_versionFallback) */\n  tag_24\n    /* \"contracts/ERC20Token_flattened.sol\":77462:77478  _versionFallback */\n  0x07\n    /* \"contracts/ERC20Token_flattened.sol\":77428:77435  version */\n  dup3\n    /* \"contracts/ERC20Token_flattened.sol\":77428:77461  version.toShortStringWithFallback */\n  shl(0x20, tag_23)\n  swap1\n    /* \"contracts/ERC20Token_flattened.sol\":77428:77479  version.toShortStringWithFallback(_versionFallback) */\n  swap2\n  swap1\n  0x20\n  shr\n  jump\t// in\ntag_24:\n    /* \"contracts/ERC20Token_flattened.sol\":77417:77479  _version = version.toShortStringWithFallback(_versionFallback) */\n  0x0140\n  dup2\n  dup2\n  mstore\n  pop\n  pop\n    /* \"contracts/ERC20Token_flattened.sol\":77519:77523  name */\n  dup2\n    /* \"contracts/ERC20Token_flattened.sol\":77503:77525  keccak256(bytes(name)) */\n  dup1\n  mload\n  swap1\n  0x20\n  add\n  keccak256\n    /* \"contracts/ERC20Token_flattened.sol\":77489:77525  _hashedName = keccak256(bytes(name)) */\n  0xe0\n  dup2\n  dup2\n  mstore\n  pop\n  pop\n    /* \"contracts/ERC20Token_flattened.sol\":77568:77575  version */\n  dup1\n    /* \"contracts/ERC20Token_flattened.sol\":77552:77577  keccak256(bytes(version)) */\n  dup1\n  mload\n  swap1\n  0x20\n  add\n  keccak256\n    /* \"contracts/ERC20Token_flattened.sol\":77535:77577  _hashedVersion = keccak256(bytes(version)) */\n  0x0100\n  dup2\n  dup2\n  mstore\n  pop\n  pop\n    /* \"contracts/ERC20Token_flattened.sol\":77605:77618  block.chainid */\n  chainid\n    /* \"contracts/ERC20Token_flattened.sol\":77588:77618  _cachedChainId = block.chainid */\n  0xa0\n  dup2\n  dup2\n  mstore\n  pop\n  pop\n    /* \"contracts/ERC20Token_flattened.sol\":77653:77676  _buildDomainSeparator() */\n  tag_25\n    /* \"contracts/ERC20Token_flattened.sol\":77653:77674  _buildDomainSeparator */\n  shl(0x20, tag_26)\n    /* \"contracts/ERC20Token_flattened.sol\":77653:77676  _buildDomainSeparator() */\n  0x20\n  shr\n  jump\t// in\ntag_25:\n    /* \"contracts/ERC20Token_flattened.sol\":77628:77676  _cachedDomainSeparator = _buildDomainSeparator() */\n  0x80\n  dup2\n  dup2\n  mstore\n  pop\n  pop\n    /* \"contracts/ERC20Token_flattened.sol\":77708:77712  this */\n  address\n    /* \"contracts/ERC20Token_flattened.sol\":77686:77713  _cachedThis = address(this) */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  0xc0\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  dup2\n  mstore\n  pop\n  pop\n    /* \"contracts/ERC20Token_flattened.sol\":77289:77720  constructor(string memory name, string memory version) {... */\n  pop\n  pop\n    /* \"contracts/ERC20Token_flattened.sol\":83445:83497  constructor(string memory name) EIP712(name, \"1\") {} */\n  pop\n    /* \"contracts/ERC20Token_flattened.sol\":84978:85024  _mint(msg.sender, 21000000 * 10 ** decimals()) */\n  tag_29\n    /* \"contracts/ERC20Token_flattened.sol\":84984:84994  msg.sender */\n  caller\n    /* \"contracts/ERC20Token_flattened.sol\":85013:85023  decimals() */\n  tag_30\n    /* \"contracts/ERC20Token_flattened.sol\":85013:85021  decimals */\n  shl(0x20, tag_31)\n    /* \"contracts/ERC20Token_flattened.sol\":85013:85023  decimals() */\n  0x20\n  shr\n  jump\t// in\ntag_30:\n    /* \"contracts/ERC20Token_flattened.sol\":85007:85009  10 */\n  0x0a\n    /* \"contracts/ERC20Token_flattened.sol\":85007:85023  10 ** decimals() */\n  tag_32\n  swap2\n  swap1\n  tag_33\n  jump\t// in\ntag_32:\n    /* \"contracts/ERC20Token_flattened.sol\":84996:85004  21000000 */\n  0x01406f40\n    /* \"contracts/ERC20Token_flattened.sol\":84996:85023  21000000 * 10 ** decimals() */\n  tag_34\n  swap2\n  swap1\n  tag_35\n  jump\t// in\ntag_34:\n    /* \"contracts/ERC20Token_flattened.sol\":84978:84983  _mint */\n  shl(0x20, tag_36)\n    /* \"contracts/ERC20Token_flattened.sol\":84978:85024  _mint(msg.sender, 21000000 * 10 ** decimals()) */\n  0x20\n  shr\n  jump\t// in\ntag_29:\n    /* \"contracts/ERC20Token_flattened.sol\":84841:85031  constructor(address initialOwner)... */\n  pop\n    /* \"contracts/ERC20Token_flattened.sol\":84759:85505  contract VEGAN is ERC20, ERC20Burnable, ERC20Pausable, Ownable, ERC20Permit {... */\n  jump(tag_37)\n    /* \"contracts/ERC20Token_flattened.sol\":30056:30243  function _transferOwnership(address newOwner) internal virtual {... */\ntag_20:\n    /* \"contracts/ERC20Token_flattened.sol\":30129:30145  address oldOwner */\n  0x00\n    /* \"contracts/ERC20Token_flattened.sol\":30148:30154  _owner */\n  0x05\n  0x01\n  swap1\n  sload\n  swap1\n  0x0100\n  exp\n  swap1\n  div\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n    /* \"contracts/ERC20Token_flattened.sol\":30129:30154  address oldOwner = _owner */\n  swap1\n  pop\n    /* \"contracts/ERC20Token_flattened.sol\":30173:30181  newOwner */\n  dup2\n    /* \"contracts/ERC20Token_flattened.sol\":30164:30170  _owner */\n  0x05\n  0x01\n    /* \"contracts/ERC20Token_flattened.sol\":30164:30181  _owner = newOwner */\n  0x0100\n  exp\n  dup2\n  sload\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  mul\n  not\n  and\n  swap1\n  dup4\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"contracts/ERC20Token_flattened.sol\":30227:30235  newOwner */\n  dup2\n    /* \"contracts/ERC20Token_flattened.sol\":30196:30236  OwnershipTransferred(oldOwner, newOwner) */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n    /* \"contracts/ERC20Token_flattened.sol\":30217:30225  oldOwner */\n  dup2\n    /* \"contracts/ERC20Token_flattened.sol\":30196:30236  OwnershipTransferred(oldOwner, newOwner) */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n  mload(0x40)\n  mload(0x40)\n  dup1\n  swap2\n  sub\n  swap1\n  log3\n    /* \"contracts/ERC20Token_flattened.sol\":30119:30243  {... */\n  pop\n    /* \"contracts/ERC20Token_flattened.sol\":30056:30243  function _transferOwnership(address newOwner) internal virtual {... */\n  pop\n  jump\t// out\n    /* \"contracts/ERC20Token_flattened.sol\":71939:72279  function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {... */\ntag_23:\n    /* \"contracts/ERC20Token_flattened.sol\":72035:72046  ShortString */\n  0x00\n    /* \"contracts/ERC20Token_flattened.sol\":72084:72086  32 */\n  0x20\n    /* \"contracts/ERC20Token_flattened.sol\":72068:72073  value */\n  dup4\n    /* \"contracts/ERC20Token_flattened.sol\":72062:72081  bytes(value).length */\n  mload\n    /* \"contracts/ERC20Token_flattened.sol\":72062:72086  bytes(value).length < 32 */\n  lt\n    /* \"contracts/ERC20Token_flattened.sol\":72058:72273  if (bytes(value).length < 32) {... */\n  iszero\n  tag_40\n  jumpi\n    /* \"contracts/ERC20Token_flattened.sol\":72109:72129  toShortString(value) */\n  tag_41\n    /* \"contracts/ERC20Token_flattened.sol\":72123:72128  value */\n  dup4\n    /* \"contracts/ERC20Token_flattened.sol\":72109:72122  toShortString */\n  shl(0x20, tag_42)\n    /* \"contracts/ERC20Token_flattened.sol\":72109:72129  toShortString(value) */\n  0x20\n  shr\n  jump\t// in\ntag_41:\n    /* \"contracts/ERC20Token_flattened.sol\":72102:72129  return toShortString(value) */\n  swap1\n  pop\n  jump(tag_39)\n    /* \"contracts/ERC20Token_flattened.sol\":72058:72273  if (bytes(value).length < 32) {... */\ntag_40:\n    /* \"contracts/ERC20Token_flattened.sol\":72201:72206  value */\n  dup3\n    /* \"contracts/ERC20Token_flattened.sol\":72160:72192  StorageSlot.getStringSlot(store) */\n  tag_44\n    /* \"contracts/ERC20Token_flattened.sol\":72186:72191  store */\n  dup4\n    /* \"contracts/ERC20Token_flattened.sol\":72160:72185  StorageSlot.getStringSlot */\n  shl(0x20, tag_45)\n    /* \"contracts/ERC20Token_flattened.sol\":72160:72192  StorageSlot.getStringSlot(store) */\n  0x20\n  shr\n  jump\t// in\ntag_44:\n    /* \"contracts/ERC20Token_flattened.sol\":72160:72198  StorageSlot.getStringSlot(store).value */\n  0x00\n  add\n    /* \"contracts/ERC20Token_flattened.sol\":72160:72206  StorageSlot.getStringSlot(store).value = value */\n  swap1\n  dup2\n  tag_46\n  swap2\n  swap1\n  tag_12\n  jump\t// in\ntag_46:\n  pop\n    /* \"contracts/ERC20Token_flattened.sol\":70415:70481  0x00000000000000000000000000000000000000000000000000000000000000FF */\n  0xff\n    /* \"contracts/ERC20Token_flattened.sol\":72244:72261  FALLBACK_SENTINEL */\n  0x00\n  shl\n    /* \"contracts/ERC20Token_flattened.sol\":72220:72262  return ShortString.wrap(FALLBACK_SENTINEL) */\n  swap1\n  pop\n    /* \"contracts/ERC20Token_flattened.sol\":71939:72279  function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {... */\ntag_39:\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"contracts/ERC20Token_flattened.sol\":78074:78253  function _buildDomainSeparator() private view returns (bytes32) {... */\ntag_26:\n    /* \"contracts/ERC20Token_flattened.sol\":78129:78136  bytes32 */\n  0x00\n    /* \"contracts/ERC20Token_flattened.sol\":76040:76135  keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\") */\n  0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f\n    /* \"contracts/ERC20Token_flattened.sol\":78187:78198  _hashedName */\n  mload(0xe0)\n    /* \"contracts/ERC20Token_flattened.sol\":78200:78214  _hashedVersion */\n  mload(0x0100)\n    /* \"contracts/ERC20Token_flattened.sol\":78216:78229  block.chainid */\n  chainid\n    /* \"contracts/ERC20Token_flattened.sol\":78239:78243  this */\n  address\n    /* \"contracts/ERC20Token_flattened.sol\":78165:78245  abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)) */\n  add(0x20, mload(0x40))\n  tag_48\n  swap6\n  swap5\n  swap4\n  swap3\n  swap2\n  swap1\n  tag_49\n  jump\t// in\ntag_48:\n  mload(0x40)\n  0x20\n  dup2\n  dup4\n  sub\n  sub\n  dup2\n  mstore\n  swap1\n  0x40\n  mstore\n    /* \"contracts/ERC20Token_flattened.sol\":78155:78246  keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this))) */\n  dup1\n  mload\n  swap1\n  0x20\n  add\n  keccak256\n    /* \"contracts/ERC20Token_flattened.sol\":78148:78246  return keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this))) */\n  swap1\n  pop\n    /* \"contracts/ERC20Token_flattened.sol\":78074:78253  function _buildDomainSeparator() private view returns (bytes32) {... */\n  swap1\n  jump\t// out\n    /* \"contracts/ERC20Token_flattened.sol\":13863:13945  function decimals() public view virtual returns (uint8) {... */\ntag_31:\n    /* \"contracts/ERC20Token_flattened.sol\":13912:13917  uint8 */\n  0x00\n    /* \"contracts/ERC20Token_flattened.sol\":13936:13938  18 */\n  0x12\n    /* \"contracts/ERC20Token_flattened.sol\":13929:13938  return 18 */\n  swap1\n  pop\n    /* \"contracts/ERC20Token_flattened.sol\":13863:13945  function decimals() public view virtual returns (uint8) {... */\n  swap1\n  jump\t// out\n    /* \"contracts/ERC20Token_flattened.sol\":18582:18790  function _mint(address account, uint256 value) internal {... */\ntag_36:\n    /* \"contracts/ERC20Token_flattened.sol\":18671:18672  0 */\n  0x00\n    /* \"contracts/ERC20Token_flattened.sol\":18652:18673  account == address(0) */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n    /* \"contracts/ERC20Token_flattened.sol\":18652:18659  account */\n  dup3\n    /* \"contracts/ERC20Token_flattened.sol\":18652:18673  account == address(0) */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  sub\n    /* \"contracts/ERC20Token_flattened.sol\":18648:18739  if (account == address(0)) {... */\n  tag_52\n  jumpi\n    /* \"contracts/ERC20Token_flattened.sol\":18725:18726  0 */\n  0x00\n    /* \"contracts/ERC20Token_flattened.sol\":18696:18728  ERC20InvalidReceiver(address(0)) */\n  mload(0x40)\n  0xec442f0500000000000000000000000000000000000000000000000000000000\n  dup2\n  mstore\n  0x04\n  add\n  tag_53\n  swap2\n  swap1\n  tag_18\n  jump\t// in\ntag_53:\n  mload(0x40)\n  dup1\n  swap2\n  sub\n  swap1\n  revert\n    /* \"contracts/ERC20Token_flattened.sol\":18648:18739  if (account == address(0)) {... */\ntag_52:\n    /* \"contracts/ERC20Token_flattened.sol\":18748:18783  _update(address(0), account, value) */\n  tag_54\n    /* \"contracts/ERC20Token_flattened.sol\":18764:18765  0 */\n  0x00\n    /* \"contracts/ERC20Token_flattened.sol\":18768:18775  account */\n  dup4\n    /* \"contracts/ERC20Token_flattened.sol\":18777:18782  value */\n  dup4\n    /* \"contracts/ERC20Token_flattened.sol\":18748:18755  _update */\n  shl(0x20, tag_55)\n    /* \"contracts/ERC20Token_flattened.sol\":18748:18783  _update(address(0), account, value) */\n  0x20\n  shr\n  jump\t// in\ntag_54:\n    /* \"contracts/ERC20Token_flattened.sol\":18582:18790  function _mint(address account, uint256 value) internal {... */\n  pop\n  pop\n  jump\t// out\n    /* \"contracts/ERC20Token_flattened.sol\":70733:71019  function toShortString(string memory str) internal pure returns (ShortString) {... */\ntag_42:\n    /* \"contracts/ERC20Token_flattened.sol\":70798:70809  ShortString */\n  0x00\n    /* \"contracts/ERC20Token_flattened.sol\":70821:70838  bytes memory bstr */\n  dup1\n    /* \"contracts/ERC20Token_flattened.sol\":70847:70850  str */\n  dup3\n    /* \"contracts/ERC20Token_flattened.sol\":70821:70851  bytes memory bstr = bytes(str) */\n  swap1\n  pop\n    /* \"contracts/ERC20Token_flattened.sol\":70879:70881  31 */\n  0x1f\n    /* \"contracts/ERC20Token_flattened.sol\":70865:70869  bstr */\n  dup2\n    /* \"contracts/ERC20Token_flattened.sol\":70865:70876  bstr.length */\n  mload\n    /* \"contracts/ERC20Token_flattened.sol\":70865:70881  bstr.length > 31 */\n  gt\n    /* \"contracts/ERC20Token_flattened.sol\":70861:70933  if (bstr.length > 31) {... */\n  iszero\n  tag_57\n  jumpi\n    /* \"contracts/ERC20Token_flattened.sol\":70918:70921  str */\n  dup3\n    /* \"contracts/ERC20Token_flattened.sol\":70904:70922  StringTooLong(str) */\n  mload(0x40)\n  0x305a27a900000000000000000000000000000000000000000000000000000000\n  dup2\n  mstore\n  0x04\n  add\n  tag_58\n  swap2\n  swap1\n  tag_59\n  jump\t// in\ntag_58:\n  mload(0x40)\n  dup1\n  swap2\n  sub\n  swap1\n  revert\n    /* \"contracts/ERC20Token_flattened.sol\":70861:70933  if (bstr.length > 31) {... */\ntag_57:\n    /* \"contracts/ERC20Token_flattened.sol\":70999:71003  bstr */\n  dup1\n    /* \"contracts/ERC20Token_flattened.sol\":70999:71010  bstr.length */\n  mload\n    /* \"contracts/ERC20Token_flattened.sol\":70990:70994  bstr */\n  dup2\n    /* \"contracts/ERC20Token_flattened.sol\":70982:70995  bytes32(bstr) */\n  tag_60\n  swap1\n  tag_61\n  jump\t// in\ntag_60:\n    /* \"contracts/ERC20Token_flattened.sol\":70974:70996  uint256(bytes32(bstr)) */\n  0x00\n  shr\n    /* \"contracts/ERC20Token_flattened.sol\":70974:71010  uint256(bytes32(bstr)) | bstr.length */\n  or\n    /* \"contracts/ERC20Token_flattened.sol\":70966:71011  bytes32(uint256(bytes32(bstr)) | bstr.length) */\n  0x00\n  shl\n    /* \"contracts/ERC20Token_flattened.sol\":70942:71012  return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length)) */\n  swap2\n  pop\n  pop\n    /* \"contracts/ERC20Token_flattened.sol\":70733:71019  function toShortString(string memory str) internal pure returns (ShortString) {... */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"contracts/ERC20Token_flattened.sol\":68249:68451  function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {... */\ntag_45:\n    /* \"contracts/ERC20Token_flattened.sol\":68317:68337  StringSlot storage r */\n  0x00\n    /* \"contracts/ERC20Token_flattened.sol\":68425:68435  store.slot */\n  dup2\n    /* \"contracts/ERC20Token_flattened.sol\":68415:68435  r.slot := store.slot */\n  swap1\n  pop\n    /* \"contracts/ERC20Token_flattened.sol\":68249:68451  function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {... */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"contracts/ERC20Token_flattened.sol\":85338:85503  function _update(address from, address to, uint256 value)... */\ntag_55:\n    /* \"contracts/ERC20Token_flattened.sol\":85466:85496  super._update(from, to, value) */\n  tag_64\n    /* \"contracts/ERC20Token_flattened.sol\":85480:85484  from */\n  dup4\n    /* \"contracts/ERC20Token_flattened.sol\":85486:85488  to */\n  dup4\n    /* \"contracts/ERC20Token_flattened.sol\":85490:85495  value */\n  dup4\n    /* \"contracts/ERC20Token_flattened.sol\":85466:85479  super._update */\n  shl(0x20, tag_65)\n    /* \"contracts/ERC20Token_flattened.sol\":85466:85496  super._update(from, to, value) */\n  0x20\n  shr\n  jump\t// in\ntag_64:\n    /* \"contracts/ERC20Token_flattened.sol\":85338:85503  function _update(address from, address to, uint256 value)... */\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"contracts/ERC20Token_flattened.sol\":27019:27164  function _update(address from, address to, uint256 value) internal virtual override whenNotPaused {... */\ntag_65:\n    /* \"contracts/ERC20Token_flattened.sol\":24595:24614  _requireNotPaused() */\n  tag_67\n    /* \"contracts/ERC20Token_flattened.sol\":24595:24612  _requireNotPaused */\n  shl(0x20, tag_68)\n    /* \"contracts/ERC20Token_flattened.sol\":24595:24614  _requireNotPaused() */\n  0x20\n  shr\n  jump\t// in\ntag_67:\n    /* \"contracts/ERC20Token_flattened.sol\":27127:27157  super._update(from, to, value) */\n  tag_70\n    /* \"contracts/ERC20Token_flattened.sol\":27141:27145  from */\n  dup4\n    /* \"contracts/ERC20Token_flattened.sol\":27147:27149  to */\n  dup4\n    /* \"contracts/ERC20Token_flattened.sol\":27151:27156  value */\n  dup4\n    /* \"contracts/ERC20Token_flattened.sol\":27127:27140  super._update */\n  shl(0x20, tag_71)\n    /* \"contracts/ERC20Token_flattened.sol\":27127:27157  super._update(from, to, value) */\n  0x20\n  shr\n  jump\t// in\ntag_70:\n    /* \"contracts/ERC20Token_flattened.sol\":27019:27164  function _update(address from, address to, uint256 value) internal virtual override whenNotPaused {... */\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"contracts/ERC20Token_flattened.sol\":25123:25251  function _requireNotPaused() internal view virtual {... */\ntag_68:\n    /* \"contracts/ERC20Token_flattened.sol\":25188:25196  paused() */\n  tag_73\n    /* \"contracts/ERC20Token_flattened.sol\":25188:25194  paused */\n  shl(0x20, tag_74)\n    /* \"contracts/ERC20Token_flattened.sol\":25188:25196  paused() */\n  0x20\n  shr\n  jump\t// in\ntag_73:\n    /* \"contracts/ERC20Token_flattened.sol\":25184:25245  if (paused()) {... */\n  iszero\n  tag_75\n  jumpi\n    /* \"contracts/ERC20Token_flattened.sol\":25219:25234  EnforcedPause() */\n  mload(0x40)\n  0xd93c066500000000000000000000000000000000000000000000000000000000\n  dup2\n  mstore\n  0x04\n  add\n  mload(0x40)\n  dup1\n  swap2\n  sub\n  swap1\n  revert\n    /* \"contracts/ERC20Token_flattened.sol\":25184:25245  if (paused()) {... */\ntag_75:\n    /* \"contracts/ERC20Token_flattened.sol\":25123:25251  function _requireNotPaused() internal view virtual {... */\n  jump\t// out\n    /* \"contracts/ERC20Token_flattened.sol\":17132:18239  function _update(address from, address to, uint256 value) internal virtual {... */\ntag_71:\n    /* \"contracts/ERC20Token_flattened.sol\":17237:17238  0 */\n  0x00\n    /* \"contracts/ERC20Token_flattened.sol\":17221:17239  from == address(0) */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n    /* \"contracts/ERC20Token_flattened.sol\":17221:17225  from */\n  dup4\n    /* \"contracts/ERC20Token_flattened.sol\":17221:17239  from == address(0) */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  sub\n    /* \"contracts/ERC20Token_flattened.sol\":17217:17757  if (from == address(0)) {... */\n  tag_77\n  jumpi\n    /* \"contracts/ERC20Token_flattened.sol\":17373:17378  value */\n  dup1\n    /* \"contracts/ERC20Token_flattened.sol\":17357:17369  _totalSupply */\n  0x02\n  0x00\n    /* \"contracts/ERC20Token_flattened.sol\":17357:17378  _totalSupply += value */\n  dup3\n  dup3\n  sload\n  tag_78\n  swap2\n  swap1\n  tag_79\n  jump\t// in\ntag_78:\n  swap3\n  pop\n  pop\n  dup2\n  swap1\n  sstore\n  pop\n    /* \"contracts/ERC20Token_flattened.sol\":17217:17757  if (from == address(0)) {... */\n  jump(tag_80)\ntag_77:\n    /* \"contracts/ERC20Token_flattened.sol\":17409:17428  uint256 fromBalance */\n  0x00\n    /* \"contracts/ERC20Token_flattened.sol\":17431:17440  _balances */\n  dup1\n    /* \"contracts/ERC20Token_flattened.sol\":17431:17446  _balances[from] */\n  0x00\n    /* \"contracts/ERC20Token_flattened.sol\":17441:17445  from */\n  dup6\n    /* \"contracts/ERC20Token_flattened.sol\":17431:17446  _balances[from] */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  dup2\n  mstore\n  0x20\n  add\n  swap1\n  dup2\n  mstore\n  0x20\n  add\n  0x00\n  keccak256\n  sload\n    /* \"contracts/ERC20Token_flattened.sol\":17409:17446  uint256 fromBalance = _balances[from] */\n  swap1\n  pop\n    /* \"contracts/ERC20Token_flattened.sol\":17478:17483  value */\n  dup2\n    /* \"contracts/ERC20Token_flattened.sol\":17464:17475  fromBalance */\n  dup2\n    /* \"contracts/ERC20Token_flattened.sol\":17464:17483  fromBalance < value */\n  lt\n    /* \"contracts/ERC20Token_flattened.sol\":17460:17575  if (fromBalance < value) {... */\n  iszero\n  tag_81\n  jumpi\n    /* \"contracts/ERC20Token_flattened.sol\":17535:17539  from */\n  dup4\n    /* \"contracts/ERC20Token_flattened.sol\":17541:17552  fromBalance */\n  dup2\n    /* \"contracts/ERC20Token_flattened.sol\":17554:17559  value */\n  dup4\n    /* \"contracts/ERC20Token_flattened.sol\":17510:17560  ERC20InsufficientBalance(from, fromBalance, value) */\n  mload(0x40)\n  0xe450d38c00000000000000000000000000000000000000000000000000000000\n  dup2\n  mstore\n  0x04\n  add\n  tag_82\n  swap4\n  swap3\n  swap2\n  swap1\n  tag_83\n  jump\t// in\ntag_82:\n  mload(0x40)\n  dup1\n  swap2\n  sub\n  swap1\n  revert\n    /* \"contracts/ERC20Token_flattened.sol\":17460:17575  if (fromBalance < value) {... */\ntag_81:\n    /* \"contracts/ERC20Token_flattened.sol\":17727:17732  value */\n  dup2\n    /* \"contracts/ERC20Token_flattened.sol\":17713:17724  fromBalance */\n  dup2\n    /* \"contracts/ERC20Token_flattened.sol\":17713:17732  fromBalance - value */\n  sub\n    /* \"contracts/ERC20Token_flattened.sol\":17695:17704  _balances */\n  0x00\n    /* \"contracts/ERC20Token_flattened.sol\":17695:17710  _balances[from] */\n  dup1\n    /* \"contracts/ERC20Token_flattened.sol\":17705:17709  from */\n  dup7\n    /* \"contracts/ERC20Token_flattened.sol\":17695:17710  _balances[from] */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  dup2\n  mstore\n  0x20\n  add\n  swap1\n  dup2\n  mstore\n  0x20\n  add\n  0x00\n  keccak256\n    /* \"contracts/ERC20Token_flattened.sol\":17695:17732  _balances[from] = fromBalance - value */\n  dup2\n  swap1\n  sstore\n  pop\n    /* \"contracts/ERC20Token_flattened.sol\":17395:17757  {... */\n  pop\n    /* \"contracts/ERC20Token_flattened.sol\":17217:17757  if (from == address(0)) {... */\ntag_80:\n    /* \"contracts/ERC20Token_flattened.sol\":17785:17786  0 */\n  0x00\n    /* \"contracts/ERC20Token_flattened.sol\":17771:17787  to == address(0) */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n    /* \"contracts/ERC20Token_flattened.sol\":17771:17773  to */\n  dup3\n    /* \"contracts/ERC20Token_flattened.sol\":17771:17787  to == address(0) */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  sub\n    /* \"contracts/ERC20Token_flattened.sol\":17767:18192  if (to == address(0)) {... */\n  tag_84\n  jumpi\n    /* \"contracts/ERC20Token_flattened.sol\":17950:17955  value */\n  dup1\n    /* \"contracts/ERC20Token_flattened.sol\":17934:17946  _totalSupply */\n  0x02\n  0x00\n    /* \"contracts/ERC20Token_flattened.sol\":17934:17955  _totalSupply -= value */\n  dup3\n  dup3\n  sload\n  sub\n  swap3\n  pop\n  pop\n  dup2\n  swap1\n  sstore\n  pop\n    /* \"contracts/ERC20Token_flattened.sol\":17767:18192  if (to == address(0)) {... */\n  jump(tag_85)\ntag_84:\n    /* \"contracts/ERC20Token_flattened.sol\":18162:18167  value */\n  dup1\n    /* \"contracts/ERC20Token_flattened.sol\":18145:18154  _balances */\n  0x00\n    /* \"contracts/ERC20Token_flattened.sol\":18145:18158  _balances[to] */\n  dup1\n    /* \"contracts/ERC20Token_flattened.sol\":18155:18157  to */\n  dup5\n    /* \"contracts/ERC20Token_flattened.sol\":18145:18158  _balances[to] */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  dup2\n  mstore\n  0x20\n  add\n  swap1\n  dup2\n  mstore\n  0x20\n  add\n  0x00\n  keccak256\n  0x00\n    /* \"contracts/ERC20Token_flattened.sol\":18145:18167  _balances[to] += value */\n  dup3\n  dup3\n  sload\n  add\n  swap3\n  pop\n  pop\n  dup2\n  swap1\n  sstore\n  pop\n    /* \"contracts/ERC20Token_flattened.sol\":17767:18192  if (to == address(0)) {... */\ntag_85:\n    /* \"contracts/ERC20Token_flattened.sol\":18222:18224  to */\n  dup2\n    /* \"contracts/ERC20Token_flattened.sol\":18207:18232  Transfer(from, to, value) */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n    /* \"contracts/ERC20Token_flattened.sol\":18216:18220  from */\n  dup4\n    /* \"contracts/ERC20Token_flattened.sol\":18207:18232  Transfer(from, to, value) */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n    /* \"contracts/ERC20Token_flattened.sol\":18226:18231  value */\n  dup4\n    /* \"contracts/ERC20Token_flattened.sol\":18207:18232  Transfer(from, to, value) */\n  mload(0x40)\n  tag_86\n  swap2\n  swap1\n  tag_87\n  jump\t// in\ntag_86:\n  mload(0x40)\n  dup1\n  swap2\n  sub\n  swap1\n  log3\n    /* \"contracts/ERC20Token_flattened.sol\":17132:18239  function _update(address from, address to, uint256 value) internal virtual {... */\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"contracts/ERC20Token_flattened.sol\":24971:25055  function paused() public view virtual returns (bool) {... */\ntag_74:\n    /* \"contracts/ERC20Token_flattened.sol\":25018:25022  bool */\n  0x00\n    /* \"contracts/ERC20Token_flattened.sol\":25041:25048  _paused */\n  0x05\n  0x00\n  swap1\n  sload\n  swap1\n  0x0100\n  exp\n  swap1\n  div\n  0xff\n  and\n    /* \"contracts/ERC20Token_flattened.sol\":25034:25048  return _paused */\n  swap1\n  pop\n    /* \"contracts/ERC20Token_flattened.sol\":24971:25055  function paused() public view virtual returns (bool) {... */\n  swap1\n  jump\t// out\n    /* \"#utility.yul\":88:205   */\ntag_90:\n    /* \"#utility.yul\":197:198   */\n  0x00\n    /* \"#utility.yul\":194:195   */\n  dup1\n    /* \"#utility.yul\":187:199   */\n  revert\n    /* \"#utility.yul\":334:460   */\ntag_92:\n    /* \"#utility.yul\":371:378   */\n  0x00\n    /* \"#utility.yul\":411:453   */\n  0xffffffffffffffffffffffffffffffffffffffff\n    /* \"#utility.yul\":404:409   */\n  dup3\n    /* \"#utility.yul\":400:454   */\n  and\n    /* \"#utility.yul\":389:454   */\n  swap1\n  pop\n    /* \"#utility.yul\":334:460   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":466:562   */\ntag_93:\n    /* \"#utility.yul\":503:510   */\n  0x00\n    /* \"#utility.yul\":532:556   */\n  tag_138\n    /* \"#utility.yul\":550:555   */\n  dup3\n    /* \"#utility.yul\":532:556   */\n  tag_92\n  jump\t// in\ntag_138:\n    /* \"#utility.yul\":521:556   */\n  swap1\n  pop\n    /* \"#utility.yul\":466:562   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":568:690   */\ntag_94:\n    /* \"#utility.yul\":641:665   */\n  tag_140\n    /* \"#utility.yul\":659:664   */\n  dup2\n    /* \"#utility.yul\":641:665   */\n  tag_93\n  jump\t// in\ntag_140:\n    /* \"#utility.yul\":634:639   */\n  dup2\n    /* \"#utility.yul\":631:666   */\n  eq\n    /* \"#utility.yul\":621:684   */\n  tag_141\n  jumpi\n    /* \"#utility.yul\":680:681   */\n  0x00\n    /* \"#utility.yul\":677:678   */\n  dup1\n    /* \"#utility.yul\":670:682   */\n  revert\n    /* \"#utility.yul\":621:684   */\ntag_141:\n    /* \"#utility.yul\":568:690   */\n  pop\n  jump\t// out\n    /* \"#utility.yul\":696:839   */\ntag_95:\n    /* \"#utility.yul\":753:758   */\n  0x00\n    /* \"#utility.yul\":784:790   */\n  dup2\n    /* \"#utility.yul\":778:791   */\n  mload\n    /* \"#utility.yul\":769:791   */\n  swap1\n  pop\n    /* \"#utility.yul\":800:833   */\n  tag_143\n    /* \"#utility.yul\":827:832   */\n  dup2\n    /* \"#utility.yul\":800:833   */\n  tag_94\n  jump\t// in\ntag_143:\n    /* \"#utility.yul\":696:839   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":845:1196   */\ntag_3:\n    /* \"#utility.yul\":915:921   */\n  0x00\n    /* \"#utility.yul\":964:966   */\n  0x20\n    /* \"#utility.yul\":952:961   */\n  dup3\n    /* \"#utility.yul\":943:950   */\n  dup5\n    /* \"#utility.yul\":939:962   */\n  sub\n    /* \"#utility.yul\":935:967   */\n  slt\n    /* \"#utility.yul\":932:1051   */\n  iszero\n  tag_145\n  jumpi\n    /* \"#utility.yul\":970:1049   */\n  tag_146\n  tag_90\n  jump\t// in\ntag_146:\n    /* \"#utility.yul\":932:1051   */\ntag_145:\n    /* \"#utility.yul\":1090:1091   */\n  0x00\n    /* \"#utility.yul\":1115:1179   */\n  tag_147\n    /* \"#utility.yul\":1171:1178   */\n  dup5\n    /* \"#utility.yul\":1162:1168   */\n  dup3\n    /* \"#utility.yul\":1151:1160   */\n  dup6\n    /* \"#utility.yul\":1147:1169   */\n  add\n    /* \"#utility.yul\":1115:1179   */\n  tag_95\n  jump\t// in\ntag_147:\n    /* \"#utility.yul\":1105:1179   */\n  swap2\n  pop\n    /* \"#utility.yul\":1061:1189   */\n  pop\n    /* \"#utility.yul\":845:1196   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1202:1301   */\ntag_96:\n    /* \"#utility.yul\":1254:1260   */\n  0x00\n    /* \"#utility.yul\":1288:1293   */\n  dup2\n    /* \"#utility.yul\":1282:1294   */\n  mload\n    /* \"#utility.yul\":1272:1294   */\n  swap1\n  pop\n    /* \"#utility.yul\":1202:1301   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1307:1487   */\ntag_97:\n    /* \"#utility.yul\":1355:1432   */\n  0x4e487b7100000000000000000000000000000000000000000000000000000000\n    /* \"#utility.yul\":1352:1353   */\n  0x00\n    /* \"#utility.yul\":1345:1433   */\n  mstore\n    /* \"#utility.yul\":1452:1456   */\n  0x41\n    /* \"#utility.yul\":1449:1450   */\n  0x04\n    /* \"#utility.yul\":1442:1457   */\n  mstore\n    /* \"#utility.yul\":1476:1480   */\n  0x24\n    /* \"#utility.yul\":1473:1474   */\n  0x00\n    /* \"#utility.yul\":1466:1481   */\n  revert\n    /* \"#utility.yul\":1493:1673   */\ntag_98:\n    /* \"#utility.yul\":1541:1618   */\n  0x4e487b7100000000000000000000000000000000000000000000000000000000\n    /* \"#utility.yul\":1538:1539   */\n  0x00\n    /* \"#utility.yul\":1531:1619   */\n  mstore\n    /* \"#utility.yul\":1638:1642   */\n  0x22\n    /* \"#utility.yul\":1635:1636   */\n  0x04\n    /* \"#utility.yul\":1628:1643   */\n  mstore\n    /* \"#utility.yul\":1662:1666   */\n  0x24\n    /* \"#utility.yul\":1659:1660   */\n  0x00\n    /* \"#utility.yul\":1652:1667   */\n  revert\n    /* \"#utility.yul\":1679:1999   */\ntag_99:\n    /* \"#utility.yul\":1723:1729   */\n  0x00\n    /* \"#utility.yul\":1760:1761   */\n  0x02\n    /* \"#utility.yul\":1754:1758   */\n  dup3\n    /* \"#utility.yul\":1750:1762   */\n  div\n    /* \"#utility.yul\":1740:1762   */\n  swap1\n  pop\n    /* \"#utility.yul\":1807:1808   */\n  0x01\n    /* \"#utility.yul\":1801:1805   */\n  dup3\n    /* \"#utility.yul\":1797:1809   */\n  and\n    /* \"#utility.yul\":1828:1846   */\n  dup1\n    /* \"#utility.yul\":1818:1899   */\n  tag_152\n  jumpi\n    /* \"#utility.yul\":1884:1888   */\n  0x7f\n    /* \"#utility.yul\":1876:1882   */\n  dup3\n    /* \"#utility.yul\":1872:1889   */\n  and\n    /* \"#utility.yul\":1862:1889   */\n  swap2\n  pop\n    /* \"#utility.yul\":1818:1899   */\ntag_152:\n    /* \"#utility.yul\":1946:1948   */\n  0x20\n    /* \"#utility.yul\":1938:1944   */\n  dup3\n    /* \"#utility.yul\":1935:1949   */\n  lt\n    /* \"#utility.yul\":1915:1933   */\n  dup2\n    /* \"#utility.yul\":1912:1950   */\n  sub\n    /* \"#utility.yul\":1909:1993   */\n  tag_153\n  jumpi\n    /* \"#utility.yul\":1965:1983   */\n  tag_154\n  tag_98\n  jump\t// in\ntag_154:\n    /* \"#utility.yul\":1909:1993   */\ntag_153:\n    /* \"#utility.yul\":1730:1999   */\n  pop\n    /* \"#utility.yul\":1679:1999   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":2005:2146   */\ntag_100:\n    /* \"#utility.yul\":2054:2058   */\n  0x00\n    /* \"#utility.yul\":2077:2080   */\n  dup2\n    /* \"#utility.yul\":2069:2080   */\n  swap1\n  pop\n    /* \"#utility.yul\":2100:2103   */\n  dup2\n    /* \"#utility.yul\":2097:2098   */\n  0x00\n    /* \"#utility.yul\":2090:2104   */\n  mstore\n    /* \"#utility.yul\":2134:2138   */\n  0x20\n    /* \"#utility.yul\":2131:2132   */\n  0x00\n    /* \"#utility.yul\":2121:2139   */\n  keccak256\n    /* \"#utility.yul\":2113:2139   */\n  swap1\n  pop\n    /* \"#utility.yul\":2005:2146   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":2152:2245   */\ntag_101:\n    /* \"#utility.yul\":2189:2195   */\n  0x00\n    /* \"#utility.yul\":2236:2238   */\n  0x20\n    /* \"#utility.yul\":2231:2233   */\n  0x1f\n    /* \"#utility.yul\":2224:2229   */\n  dup4\n    /* \"#utility.yul\":2220:2234   */\n  add\n    /* \"#utility.yul\":2216:2239   */\n  div\n    /* \"#utility.yul\":2206:2239   */\n  swap1\n  pop\n    /* \"#utility.yul\":2152:2245   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":2251:2358   */\ntag_102:\n    /* \"#utility.yul\":2295:2303   */\n  0x00\n    /* \"#utility.yul\":2345:2350   */\n  dup3\n    /* \"#utility.yul\":2339:2343   */\n  dup3\n    /* \"#utility.yul\":2335:2351   */\n  shl\n    /* \"#utility.yul\":2314:2351   */\n  swap1\n  pop\n    /* \"#utility.yul\":2251:2358   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":2364:2757   */\ntag_103:\n    /* \"#utility.yul\":2433:2439   */\n  0x00\n    /* \"#utility.yul\":2483:2484   */\n  0x08\n    /* \"#utility.yul\":2471:2481   */\n  dup4\n    /* \"#utility.yul\":2467:2485   */\n  mul\n    /* \"#utility.yul\":2506:2603   */\n  tag_159\n    /* \"#utility.yul\":2536:2602   */\n  0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n    /* \"#utility.yul\":2525:2534   */\n  dup3\n    /* \"#utility.yul\":2506:2603   */\n  tag_102\n  jump\t// in\ntag_159:\n    /* \"#utility.yul\":2624:2663   */\n  tag_160\n    /* \"#utility.yul\":2654:2662   */\n  dup7\n    /* \"#utility.yul\":2643:2652   */\n  dup4\n    /* \"#utility.yul\":2624:2663   */\n  tag_102\n  jump\t// in\ntag_160:\n    /* \"#utility.yul\":2612:2663   */\n  swap6\n  pop\n    /* \"#utility.yul\":2696:2700   */\n  dup1\n    /* \"#utility.yul\":2692:2701   */\n  not\n    /* \"#utility.yul\":2685:2690   */\n  dup5\n    /* \"#utility.yul\":2681:2702   */\n  and\n    /* \"#utility.yul\":2672:2702   */\n  swap4\n  pop\n    /* \"#utility.yul\":2745:2749   */\n  dup1\n    /* \"#utility.yul\":2735:2743   */\n  dup7\n    /* \"#utility.yul\":2731:2750   */\n  and\n    /* \"#utility.yul\":2724:2729   */\n  dup5\n    /* \"#utility.yul\":2721:2751   */\n  or\n    /* \"#utility.yul\":2711:2751   */\n  swap3\n  pop\n    /* \"#utility.yul\":2440:2757   */\n  pop\n  pop\n    /* \"#utility.yul\":2364:2757   */\n  swap4\n  swap3\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":2763:2840   */\ntag_104:\n    /* \"#utility.yul\":2800:2807   */\n  0x00\n    /* \"#utility.yul\":2829:2834   */\n  dup2\n    /* \"#utility.yul\":2818:2834   */\n  swap1\n  pop\n    /* \"#utility.yul\":2763:2840   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":2846:2906   */\ntag_105:\n    /* \"#utility.yul\":2874:2877   */\n  0x00\n    /* \"#utility.yul\":2895:2900   */\n  dup2\n    /* \"#utility.yul\":2888:2900   */\n  swap1\n  pop\n    /* \"#utility.yul\":2846:2906   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":2912:3054   */\ntag_106:\n    /* \"#utility.yul\":2962:2971   */\n  0x00\n    /* \"#utility.yul\":2995:3048   */\n  tag_164\n    /* \"#utility.yul\":3013:3047   */\n  tag_165\n    /* \"#utility.yul\":3022:3046   */\n  tag_166\n    /* \"#utility.yul\":3040:3045   */\n  dup5\n    /* \"#utility.yul\":3022:3046   */\n  tag_104\n  jump\t// in\ntag_166:\n    /* \"#utility.yul\":3013:3047   */\n  tag_105\n  jump\t// in\ntag_165:\n    /* \"#utility.yul\":2995:3048   */\n  tag_104\n  jump\t// in\ntag_164:\n    /* \"#utility.yul\":2982:3048   */\n  swap1\n  pop\n    /* \"#utility.yul\":2912:3054   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":3060:3135   */\ntag_107:\n    /* \"#utility.yul\":3103:3106   */\n  0x00\n    /* \"#utility.yul\":3124:3129   */\n  dup2\n    /* \"#utility.yul\":3117:3129   */\n  swap1\n  pop\n    /* \"#utility.yul\":3060:3135   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":3141:3410   */\ntag_108:\n    /* \"#utility.yul\":3251:3290   */\n  tag_169\n    /* \"#utility.yul\":3282:3289   */\n  dup4\n    /* \"#utility.yul\":3251:3290   */\n  tag_106\n  jump\t// in\ntag_169:\n    /* \"#utility.yul\":3312:3403   */\n  tag_170\n    /* \"#utility.yul\":3361:3402   */\n  tag_171\n    /* \"#utility.yul\":3385:3401   */\n  dup3\n    /* \"#utility.yul\":3361:3402   */\n  tag_107\n  jump\t// in\ntag_171:\n    /* \"#utility.yul\":3353:3359   */\n  dup5\n    /* \"#utility.yul\":3346:3350   */\n  dup5\n    /* \"#utility.yul\":3340:3351   */\n  sload\n    /* \"#utility.yul\":3312:3403   */\n  tag_103\n  jump\t// in\ntag_170:\n    /* \"#utility.yul\":3306:3310   */\n  dup3\n    /* \"#utility.yul\":3299:3404   */\n  sstore\n    /* \"#utility.yul\":3217:3410   */\n  pop\n    /* \"#utility.yul\":3141:3410   */\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":3416:3489   */\ntag_109:\n    /* \"#utility.yul\":3461:3464   */\n  0x00\n    /* \"#utility.yul\":3416:3489   */\n  swap1\n  jump\t// out\n    /* \"#utility.yul\":3495:3684   */\ntag_110:\n    /* \"#utility.yul\":3572:3604   */\n  tag_174\n  tag_109\n  jump\t// in\ntag_174:\n    /* \"#utility.yul\":3613:3678   */\n  tag_175\n    /* \"#utility.yul\":3671:3677   */\n  dup2\n    /* \"#utility.yul\":3663:3669   */\n  dup5\n    /* \"#utility.yul\":3657:3661   */\n  dup5\n    /* \"#utility.yul\":3613:3678   */\n  tag_108\n  jump\t// in\ntag_175:\n    /* \"#utility.yul\":3548:3684   */\n  pop\n    /* \"#utility.yul\":3495:3684   */\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":3690:3876   */\ntag_111:\n    /* \"#utility.yul\":3750:3870   */\ntag_177:\n    /* \"#utility.yul\":3767:3770   */\n  dup2\n    /* \"#utility.yul\":3760:3765   */\n  dup2\n    /* \"#utility.yul\":3757:3771   */\n  lt\n    /* \"#utility.yul\":3750:3870   */\n  iszero\n  tag_179\n  jumpi\n    /* \"#utility.yul\":3821:3860   */\n  tag_180\n    /* \"#utility.yul\":3858:3859   */\n  0x00\n    /* \"#utility.yul\":3851:3856   */\n  dup3\n    /* \"#utility.yul\":3821:3860   */\n  tag_110\n  jump\t// in\ntag_180:\n    /* \"#utility.yul\":3794:3795   */\n  0x01\n    /* \"#utility.yul\":3787:3792   */\n  dup2\n    /* \"#utility.yul\":3783:3796   */\n  add\n    /* \"#utility.yul\":3774:3796   */\n  swap1\n  pop\n    /* \"#utility.yul\":3750:3870   */\n  jump(tag_177)\ntag_179:\n    /* \"#utility.yul\":3690:3876   */\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":3882:4425   */\ntag_112:\n    /* \"#utility.yul\":3983:3985   */\n  0x1f\n    /* \"#utility.yul\":3978:3981   */\n  dup3\n    /* \"#utility.yul\":3975:3986   */\n  gt\n    /* \"#utility.yul\":3972:4418   */\n  iszero\n  tag_182\n  jumpi\n    /* \"#utility.yul\":4017:4055   */\n  tag_183\n    /* \"#utility.yul\":4049:4054   */\n  dup2\n    /* \"#utility.yul\":4017:4055   */\n  tag_100\n  jump\t// in\ntag_183:\n    /* \"#utility.yul\":4101:4130   */\n  tag_184\n    /* \"#utility.yul\":4119:4129   */\n  dup5\n    /* \"#utility.yul\":4101:4130   */\n  tag_101\n  jump\t// in\ntag_184:\n    /* \"#utility.yul\":4091:4099   */\n  dup2\n    /* \"#utility.yul\":4087:4131   */\n  add\n    /* \"#utility.yul\":4284:4286   */\n  0x20\n    /* \"#utility.yul\":4272:4282   */\n  dup6\n    /* \"#utility.yul\":4269:4287   */\n  lt\n    /* \"#utility.yul\":4266:4315   */\n  iszero\n  tag_185\n  jumpi\n    /* \"#utility.yul\":4305:4313   */\n  dup2\n    /* \"#utility.yul\":4290:4313   */\n  swap1\n  pop\n    /* \"#utility.yul\":4266:4315   */\ntag_185:\n    /* \"#utility.yul\":4328:4408   */\n  tag_186\n    /* \"#utility.yul\":4384:4406   */\n  tag_187\n    /* \"#utility.yul\":4402:4405   */\n  dup6\n    /* \"#utility.yul\":4384:4406   */\n  tag_101\n  jump\t// in\ntag_187:\n    /* \"#utility.yul\":4374:4382   */\n  dup4\n    /* \"#utility.yul\":4370:4407   */\n  add\n    /* \"#utility.yul\":4357:4368   */\n  dup3\n    /* \"#utility.yul\":4328:4408   */\n  tag_111\n  jump\t// in\ntag_186:\n    /* \"#utility.yul\":3987:4418   */\n  pop\n  pop\n    /* \"#utility.yul\":3972:4418   */\ntag_182:\n    /* \"#utility.yul\":3882:4425   */\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":4431:4548   */\ntag_113:\n    /* \"#utility.yul\":4485:4493   */\n  0x00\n    /* \"#utility.yul\":4535:4540   */\n  dup3\n    /* \"#utility.yul\":4529:4533   */\n  dup3\n    /* \"#utility.yul\":4525:4541   */\n  shr\n    /* \"#utility.yul\":4504:4541   */\n  swap1\n  pop\n    /* \"#utility.yul\":4431:4548   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":4554:4723   */\ntag_114:\n    /* \"#utility.yul\":4598:4604   */\n  0x00\n    /* \"#utility.yul\":4631:4682   */\n  tag_190\n    /* \"#utility.yul\":4679:4680   */\n  0x00\n    /* \"#utility.yul\":4675:4681   */\n  not\n    /* \"#utility.yul\":4667:4672   */\n  dup5\n    /* \"#utility.yul\":4664:4665   */\n  0x08\n    /* \"#utility.yul\":4660:4673   */\n  mul\n    /* \"#utility.yul\":4631:4682   */\n  tag_113\n  jump\t// in\ntag_190:\n    /* \"#utility.yul\":4627:4683   */\n  not\n    /* \"#utility.yul\":4712:4716   */\n  dup1\n    /* \"#utility.yul\":4706:4710   */\n  dup4\n    /* \"#utility.yul\":4702:4717   */\n  and\n    /* \"#utility.yul\":4692:4717   */\n  swap2\n  pop\n    /* \"#utility.yul\":4605:4723   */\n  pop\n    /* \"#utility.yul\":4554:4723   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":4728:5023   */\ntag_115:\n    /* \"#utility.yul\":4804:4808   */\n  0x00\n    /* \"#utility.yul\":4950:4979   */\n  tag_192\n    /* \"#utility.yul\":4975:4978   */\n  dup4\n    /* \"#utility.yul\":4969:4973   */\n  dup4\n    /* \"#utility.yul\":4950:4979   */\n  tag_114\n  jump\t// in\ntag_192:\n    /* \"#utility.yul\":4942:4979   */\n  swap2\n  pop\n    /* \"#utility.yul\":5012:5015   */\n  dup3\n    /* \"#utility.yul\":5009:5010   */\n  0x02\n    /* \"#utility.yul\":5005:5016   */\n  mul\n    /* \"#utility.yul\":4999:5003   */\n  dup3\n    /* \"#utility.yul\":4996:5017   */\n  or\n    /* \"#utility.yul\":4988:5017   */\n  swap1\n  pop\n    /* \"#utility.yul\":4728:5023   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":5028:6423   */\ntag_12:\n    /* \"#utility.yul\":5145:5182   */\n  tag_194\n    /* \"#utility.yul\":5178:5181   */\n  dup3\n    /* \"#utility.yul\":5145:5182   */\n  tag_96\n  jump\t// in\ntag_194:\n    /* \"#utility.yul\":5247:5265   */\n  0xffffffffffffffff\n    /* \"#utility.yul\":5239:5245   */\n  dup2\n    /* \"#utility.yul\":5236:5266   */\n  gt\n    /* \"#utility.yul\":5233:5289   */\n  iszero\n  tag_195\n  jumpi\n    /* \"#utility.yul\":5269:5287   */\n  tag_196\n  tag_97\n  jump\t// in\ntag_196:\n    /* \"#utility.yul\":5233:5289   */\ntag_195:\n    /* \"#utility.yul\":5313:5351   */\n  tag_197\n    /* \"#utility.yul\":5345:5349   */\n  dup3\n    /* \"#utility.yul\":5339:5350   */\n  sload\n    /* \"#utility.yul\":5313:5351   */\n  tag_99\n  jump\t// in\ntag_197:\n    /* \"#utility.yul\":5398:5465   */\n  tag_198\n    /* \"#utility.yul\":5458:5464   */\n  dup3\n    /* \"#utility.yul\":5450:5456   */\n  dup3\n    /* \"#utility.yul\":5444:5448   */\n  dup6\n    /* \"#utility.yul\":5398:5465   */\n  tag_112\n  jump\t// in\ntag_198:\n    /* \"#utility.yul\":5492:5493   */\n  0x00\n    /* \"#utility.yul\":5516:5520   */\n  0x20\n    /* \"#utility.yul\":5503:5520   */\n  swap1\n  pop\n    /* \"#utility.yul\":5548:5550   */\n  0x1f\n    /* \"#utility.yul\":5540:5546   */\n  dup4\n    /* \"#utility.yul\":5537:5551   */\n  gt\n    /* \"#utility.yul\":5565:5566   */\n  0x01\n    /* \"#utility.yul\":5560:6178   */\n  dup2\n  eq\n  tag_200\n  jumpi\n    /* \"#utility.yul\":6222:6223   */\n  0x00\n    /* \"#utility.yul\":6239:6245   */\n  dup5\n    /* \"#utility.yul\":6236:6313   */\n  iszero\n  tag_201\n  jumpi\n    /* \"#utility.yul\":6288:6297   */\n  dup3\n    /* \"#utility.yul\":6283:6286   */\n  dup8\n    /* \"#utility.yul\":6279:6298   */\n  add\n    /* \"#utility.yul\":6273:6299   */\n  mload\n    /* \"#utility.yul\":6264:6299   */\n  swap1\n  pop\n    /* \"#utility.yul\":6236:6313   */\ntag_201:\n    /* \"#utility.yul\":6339:6406   */\n  tag_202\n    /* \"#utility.yul\":6399:6405   */\n  dup6\n    /* \"#utility.yul\":6392:6397   */\n  dup3\n    /* \"#utility.yul\":6339:6406   */\n  tag_115\n  jump\t// in\ntag_202:\n    /* \"#utility.yul\":6333:6337   */\n  dup7\n    /* \"#utility.yul\":6326:6407   */\n  sstore\n    /* \"#utility.yul\":6195:6417   */\n  pop\n    /* \"#utility.yul\":5530:6417   */\n  jump(tag_199)\n    /* \"#utility.yul\":5560:6178   */\ntag_200:\n    /* \"#utility.yul\":5612:5616   */\n  0x1f\n    /* \"#utility.yul\":5608:5617   */\n  not\n    /* \"#utility.yul\":5600:5606   */\n  dup5\n    /* \"#utility.yul\":5596:5618   */\n  and\n    /* \"#utility.yul\":5646:5683   */\n  tag_203\n    /* \"#utility.yul\":5678:5682   */\n  dup7\n    /* \"#utility.yul\":5646:5683   */\n  tag_100\n  jump\t// in\ntag_203:\n    /* \"#utility.yul\":5705:5706   */\n  0x00\n    /* \"#utility.yul\":5719:5927   */\ntag_204:\n    /* \"#utility.yul\":5733:5740   */\n  dup3\n    /* \"#utility.yul\":5730:5731   */\n  dup2\n    /* \"#utility.yul\":5727:5741   */\n  lt\n    /* \"#utility.yul\":5719:5927   */\n  iszero\n  tag_206\n  jumpi\n    /* \"#utility.yul\":5812:5821   */\n  dup5\n    /* \"#utility.yul\":5807:5810   */\n  dup10\n    /* \"#utility.yul\":5803:5822   */\n  add\n    /* \"#utility.yul\":5797:5823   */\n  mload\n    /* \"#utility.yul\":5789:5795   */\n  dup3\n    /* \"#utility.yul\":5782:5824   */\n  sstore\n    /* \"#utility.yul\":5863:5864   */\n  0x01\n    /* \"#utility.yul\":5855:5861   */\n  dup3\n    /* \"#utility.yul\":5851:5865   */\n  add\n    /* \"#utility.yul\":5841:5865   */\n  swap2\n  pop\n    /* \"#utility.yul\":5910:5912   */\n  0x20\n    /* \"#utility.yul\":5899:5908   */\n  dup6\n    /* \"#utility.yul\":5895:5913   */\n  add\n    /* \"#utility.yul\":5882:5913   */\n  swap5\n  pop\n    /* \"#utility.yul\":5756:5760   */\n  0x20\n    /* \"#utility.yul\":5753:5754   */\n  dup2\n    /* \"#utility.yul\":5749:5761   */\n  add\n    /* \"#utility.yul\":5744:5761   */\n  swap1\n  pop\n    /* \"#utility.yul\":5719:5927   */\n  jump(tag_204)\ntag_206:\n    /* \"#utility.yul\":5955:5961   */\n  dup7\n    /* \"#utility.yul\":5946:5953   */\n  dup4\n    /* \"#utility.yul\":5943:5962   */\n  lt\n    /* \"#utility.yul\":5940:6119   */\n  iszero\n  tag_207\n  jumpi\n    /* \"#utility.yul\":6013:6022   */\n  dup5\n    /* \"#utility.yul\":6008:6011   */\n  dup10\n    /* \"#utility.yul\":6004:6023   */\n  add\n    /* \"#utility.yul\":5998:6024   */\n  mload\n    /* \"#utility.yul\":6056:6104   */\n  tag_208\n    /* \"#utility.yul\":6098:6102   */\n  0x1f\n    /* \"#utility.yul\":6090:6096   */\n  dup10\n    /* \"#utility.yul\":6086:6103   */\n  and\n    /* \"#utility.yul\":6075:6084   */\n  dup3\n    /* \"#utility.yul\":6056:6104   */\n  tag_114\n  jump\t// in\ntag_208:\n    /* \"#utility.yul\":6048:6054   */\n  dup4\n    /* \"#utility.yul\":6041:6105   */\n  sstore\n    /* \"#utility.yul\":5963:6119   */\n  pop\n    /* \"#utility.yul\":5940:6119   */\ntag_207:\n    /* \"#utility.yul\":6165:6166   */\n  0x01\n    /* \"#utility.yul\":6161:6162   */\n  0x02\n    /* \"#utility.yul\":6153:6159   */\n  dup9\n    /* \"#utility.yul\":6149:6163   */\n  mul\n    /* \"#utility.yul\":6145:6167   */\n  add\n    /* \"#utility.yul\":6139:6143   */\n  dup9\n    /* \"#utility.yul\":6132:6168   */\n  sstore\n    /* \"#utility.yul\":5567:6178   */\n  pop\n  pop\n  pop\n    /* \"#utility.yul\":5530:6417   */\ntag_199:\n  pop\n    /* \"#utility.yul\":5120:6423   */\n  pop\n  pop\n  pop\n    /* \"#utility.yul\":5028:6423   */\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":6429:6547   */\ntag_116:\n    /* \"#utility.yul\":6516:6540   */\n  tag_210\n    /* \"#utility.yul\":6534:6539   */\n  dup2\n    /* \"#utility.yul\":6516:6540   */\n  tag_93\n  jump\t// in\ntag_210:\n    /* \"#utility.yul\":6511:6514   */\n  dup3\n    /* \"#utility.yul\":6504:6541   */\n  mstore\n    /* \"#utility.yul\":6429:6547   */\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":6553:6775   */\ntag_18:\n    /* \"#utility.yul\":6646:6650   */\n  0x00\n    /* \"#utility.yul\":6684:6686   */\n  0x20\n    /* \"#utility.yul\":6673:6682   */\n  dup3\n    /* \"#utility.yul\":6669:6687   */\n  add\n    /* \"#utility.yul\":6661:6687   */\n  swap1\n  pop\n    /* \"#utility.yul\":6697:6768   */\n  tag_212\n    /* \"#utility.yul\":6765:6766   */\n  0x00\n    /* \"#utility.yul\":6754:6763   */\n  dup4\n    /* \"#utility.yul\":6750:6767   */\n  add\n    /* \"#utility.yul\":6741:6747   */\n  dup5\n    /* \"#utility.yul\":6697:6768   */\n  tag_116\n  jump\t// in\ntag_212:\n    /* \"#utility.yul\":6553:6775   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":6781:6961   */\ntag_117:\n    /* \"#utility.yul\":6829:6906   */\n  0x4e487b7100000000000000000000000000000000000000000000000000000000\n    /* \"#utility.yul\":6826:6827   */\n  0x00\n    /* \"#utility.yul\":6819:6907   */\n  mstore\n    /* \"#utility.yul\":6926:6930   */\n  0x11\n    /* \"#utility.yul\":6923:6924   */\n  0x04\n    /* \"#utility.yul\":6916:6931   */\n  mstore\n    /* \"#utility.yul\":6950:6954   */\n  0x24\n    /* \"#utility.yul\":6947:6948   */\n  0x00\n    /* \"#utility.yul\":6940:6955   */\n  revert\n    /* \"#utility.yul\":6967:7069   */\ntag_118:\n    /* \"#utility.yul\":7009:7017   */\n  0x00\n    /* \"#utility.yul\":7056:7061   */\n  dup2\n    /* \"#utility.yul\":7053:7054   */\n  0x01\n    /* \"#utility.yul\":7049:7062   */\n  shr\n    /* \"#utility.yul\":7028:7062   */\n  swap1\n  pop\n    /* \"#utility.yul\":6967:7069   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":7075:7923   */\ntag_119:\n    /* \"#utility.yul\":7136:7141   */\n  0x00\n    /* \"#utility.yul\":7143:7147   */\n  dup1\n    /* \"#utility.yul\":7167:7173   */\n  dup3\n    /* \"#utility.yul\":7158:7173   */\n  swap2\n  pop\n    /* \"#utility.yul\":7191:7196   */\n  dup4\n    /* \"#utility.yul\":7182:7196   */\n  swap1\n  pop\n    /* \"#utility.yul\":7205:7917   */\ntag_216:\n    /* \"#utility.yul\":7226:7227   */\n  0x01\n    /* \"#utility.yul\":7216:7224   */\n  dup6\n    /* \"#utility.yul\":7213:7228   */\n  gt\n    /* \"#utility.yul\":7205:7917   */\n  iszero\n  tag_218\n  jumpi\n    /* \"#utility.yul\":7321:7325   */\n  dup1\n    /* \"#utility.yul\":7316:7319   */\n  dup7\n    /* \"#utility.yul\":7312:7326   */\n  div\n    /* \"#utility.yul\":7306:7310   */\n  dup2\n    /* \"#utility.yul\":7303:7327   */\n  gt\n    /* \"#utility.yul\":7300:7350   */\n  iszero\n  tag_219\n  jumpi\n    /* \"#utility.yul\":7330:7348   */\n  tag_220\n  tag_117\n  jump\t// in\ntag_220:\n    /* \"#utility.yul\":7300:7350   */\ntag_219:\n    /* \"#utility.yul\":7380:7381   */\n  0x01\n    /* \"#utility.yul\":7370:7378   */\n  dup6\n    /* \"#utility.yul\":7366:7382   */\n  and\n    /* \"#utility.yul\":7363:7814   */\n  iszero\n  tag_221\n  jumpi\n    /* \"#utility.yul\":7795:7799   */\n  dup1\n    /* \"#utility.yul\":7788:7793   */\n  dup3\n    /* \"#utility.yul\":7784:7800   */\n  mul\n    /* \"#utility.yul\":7775:7800   */\n  swap2\n  pop\n    /* \"#utility.yul\":7363:7814   */\ntag_221:\n    /* \"#utility.yul\":7845:7849   */\n  dup1\n    /* \"#utility.yul\":7839:7843   */\n  dup2\n    /* \"#utility.yul\":7835:7850   */\n  mul\n    /* \"#utility.yul\":7827:7850   */\n  swap1\n  pop\n    /* \"#utility.yul\":7875:7907   */\n  tag_222\n    /* \"#utility.yul\":7898:7906   */\n  dup6\n    /* \"#utility.yul\":7875:7907   */\n  tag_118\n  jump\t// in\ntag_222:\n    /* \"#utility.yul\":7863:7907   */\n  swap5\n  pop\n    /* \"#utility.yul\":7205:7917   */\n  jump(tag_216)\ntag_218:\n    /* \"#utility.yul\":7075:7923   */\n  swap5\n  pop\n  swap5\n  swap3\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":7929:9002   */\ntag_120:\n    /* \"#utility.yul\":7983:7988   */\n  0x00\n    /* \"#utility.yul\":8174:8182   */\n  dup3\n    /* \"#utility.yul\":8164:8204   */\n  tag_224\n  jumpi\n    /* \"#utility.yul\":8195:8196   */\n  0x01\n    /* \"#utility.yul\":8186:8196   */\n  swap1\n  pop\n    /* \"#utility.yul\":8197:8202   */\n  jump(tag_223)\n    /* \"#utility.yul\":8164:8204   */\ntag_224:\n    /* \"#utility.yul\":8223:8227   */\n  dup2\n    /* \"#utility.yul\":8213:8249   */\n  tag_225\n  jumpi\n    /* \"#utility.yul\":8240:8241   */\n  0x00\n    /* \"#utility.yul\":8231:8241   */\n  swap1\n  pop\n    /* \"#utility.yul\":8242:8247   */\n  jump(tag_223)\n    /* \"#utility.yul\":8213:8249   */\ntag_225:\n    /* \"#utility.yul\":8309:8313   */\n  dup2\n    /* \"#utility.yul\":8357:8358   */\n  0x01\n    /* \"#utility.yul\":8352:8379   */\n  dup2\n  eq\n  tag_227\n  jumpi\n    /* \"#utility.yul\":8393:8394   */\n  0x02\n    /* \"#utility.yul\":8388:8579   */\n  dup2\n  eq\n  tag_228\n  jumpi\n    /* \"#utility.yul\":8302:8579   */\n  jump(tag_226)\n    /* \"#utility.yul\":8352:8379   */\ntag_227:\n    /* \"#utility.yul\":8370:8371   */\n  0x01\n    /* \"#utility.yul\":8361:8371   */\n  swap2\n  pop\n    /* \"#utility.yul\":8372:8377   */\n  pop\n  jump(tag_223)\n    /* \"#utility.yul\":8388:8579   */\ntag_228:\n    /* \"#utility.yul\":8433:8436   */\n  0xff\n    /* \"#utility.yul\":8423:8431   */\n  dup5\n    /* \"#utility.yul\":8420:8437   */\n  gt\n    /* \"#utility.yul\":8417:8460   */\n  iszero\n  tag_229\n  jumpi\n    /* \"#utility.yul\":8440:8458   */\n  tag_230\n  tag_117\n  jump\t// in\ntag_230:\n    /* \"#utility.yul\":8417:8460   */\ntag_229:\n    /* \"#utility.yul\":8489:8497   */\n  dup4\n    /* \"#utility.yul\":8486:8487   */\n  0x02\n    /* \"#utility.yul\":8482:8498   */\n  exp\n    /* \"#utility.yul\":8473:8498   */\n  swap2\n  pop\n    /* \"#utility.yul\":8524:8527   */\n  dup5\n    /* \"#utility.yul\":8517:8522   */\n  dup3\n    /* \"#utility.yul\":8514:8528   */\n  gt\n    /* \"#utility.yul\":8511:8551   */\n  iszero\n  tag_231\n  jumpi\n    /* \"#utility.yul\":8531:8549   */\n  tag_232\n  tag_117\n  jump\t// in\ntag_232:\n    /* \"#utility.yul\":8511:8551   */\ntag_231:\n    /* \"#utility.yul\":8564:8569   */\n  pop\n  jump(tag_223)\n    /* \"#utility.yul\":8302:8579   */\ntag_226:\n  pop\n    /* \"#utility.yul\":8688:8690   */\n  0x20\n    /* \"#utility.yul\":8678:8686   */\n  dup4\n    /* \"#utility.yul\":8675:8691   */\n  lt\n    /* \"#utility.yul\":8669:8672   */\n  0x0133\n    /* \"#utility.yul\":8663:8667   */\n  dup4\n    /* \"#utility.yul\":8660:8673   */\n  lt\n    /* \"#utility.yul\":8656:8692   */\n  and\n    /* \"#utility.yul\":8638:8640   */\n  0x4e\n    /* \"#utility.yul\":8628:8636   */\n  dup5\n    /* \"#utility.yul\":8625:8641   */\n  lt\n    /* \"#utility.yul\":8620:8622   */\n  0x0b\n    /* \"#utility.yul\":8614:8618   */\n  dup5\n    /* \"#utility.yul\":8611:8623   */\n  lt\n    /* \"#utility.yul\":8607:8642   */\n  and\n    /* \"#utility.yul\":8591:8702   */\n  or\n    /* \"#utility.yul\":8588:8834   */\n  iszero\n  tag_233\n  jumpi\n    /* \"#utility.yul\":8744:8752   */\n  dup3\n    /* \"#utility.yul\":8738:8742   */\n  dup3\n    /* \"#utility.yul\":8734:8753   */\n  exp\n    /* \"#utility.yul\":8725:8753   */\n  swap1\n  pop\n    /* \"#utility.yul\":8779:8782   */\n  dup4\n    /* \"#utility.yul\":8772:8777   */\n  dup2\n    /* \"#utility.yul\":8769:8783   */\n  gt\n    /* \"#utility.yul\":8766:8806   */\n  iszero\n  tag_234\n  jumpi\n    /* \"#utility.yul\":8786:8804   */\n  tag_235\n  tag_117\n  jump\t// in\ntag_235:\n    /* \"#utility.yul\":8766:8806   */\ntag_234:\n    /* \"#utility.yul\":8819:8824   */\n  jump(tag_223)\n    /* \"#utility.yul\":8588:8834   */\ntag_233:\n    /* \"#utility.yul\":8859:8901   */\n  tag_236\n    /* \"#utility.yul\":8897:8900   */\n  dup5\n    /* \"#utility.yul\":8887:8895   */\n  dup5\n    /* \"#utility.yul\":8881:8885   */\n  dup5\n    /* \"#utility.yul\":8878:8879   */\n  0x01\n    /* \"#utility.yul\":8859:8901   */\n  tag_119\n  jump\t// in\ntag_236:\n    /* \"#utility.yul\":8844:8901   */\n  swap3\n  pop\n  swap1\n  pop\n    /* \"#utility.yul\":8933:8937   */\n  dup2\n    /* \"#utility.yul\":8928:8931   */\n  dup5\n    /* \"#utility.yul\":8924:8938   */\n  div\n    /* \"#utility.yul\":8917:8922   */\n  dup2\n    /* \"#utility.yul\":8914:8939   */\n  gt\n    /* \"#utility.yul\":8911:8962   */\n  iszero\n  tag_237\n  jumpi\n    /* \"#utility.yul\":8942:8960   */\n  tag_238\n  tag_117\n  jump\t// in\ntag_238:\n    /* \"#utility.yul\":8911:8962   */\ntag_237:\n    /* \"#utility.yul\":8991:8995   */\n  dup2\n    /* \"#utility.yul\":8984:8989   */\n  dup2\n    /* \"#utility.yul\":8980:8996   */\n  mul\n    /* \"#utility.yul\":8971:8996   */\n  swap1\n  pop\n    /* \"#utility.yul\":7929:9002   */\ntag_223:\n  swap4\n  swap3\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":9008:9094   */\ntag_121:\n    /* \"#utility.yul\":9043:9050   */\n  0x00\n    /* \"#utility.yul\":9083:9087   */\n  0xff\n    /* \"#utility.yul\":9076:9081   */\n  dup3\n    /* \"#utility.yul\":9072:9088   */\n  and\n    /* \"#utility.yul\":9061:9088   */\n  swap1\n  pop\n    /* \"#utility.yul\":9008:9094   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":9100:9381   */\ntag_33:\n    /* \"#utility.yul\":9158:9163   */\n  0x00\n    /* \"#utility.yul\":9182:9205   */\n  tag_241\n    /* \"#utility.yul\":9200:9204   */\n  dup3\n    /* \"#utility.yul\":9182:9205   */\n  tag_104\n  jump\t// in\ntag_241:\n    /* \"#utility.yul\":9174:9205   */\n  swap2\n  pop\n    /* \"#utility.yul\":9226:9251   */\n  tag_242\n    /* \"#utility.yul\":9242:9250   */\n  dup4\n    /* \"#utility.yul\":9226:9251   */\n  tag_121\n  jump\t// in\ntag_242:\n    /* \"#utility.yul\":9214:9251   */\n  swap3\n  pop\n    /* \"#utility.yul\":9270:9374   */\n  tag_243\n    /* \"#utility.yul\":9307:9373   */\n  0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n    /* \"#utility.yul\":9297:9305   */\n  dup5\n    /* \"#utility.yul\":9291:9295   */\n  dup5\n    /* \"#utility.yul\":9270:9374   */\n  tag_120\n  jump\t// in\ntag_243:\n    /* \"#utility.yul\":9261:9374   */\n  swap1\n  pop\n    /* \"#utility.yul\":9100:9381   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":9387:9797   */\ntag_35:\n    /* \"#utility.yul\":9427:9434   */\n  0x00\n    /* \"#utility.yul\":9450:9470   */\n  tag_245\n    /* \"#utility.yul\":9468:9469   */\n  dup3\n    /* \"#utility.yul\":9450:9470   */\n  tag_104\n  jump\t// in\ntag_245:\n    /* \"#utility.yul\":9445:9470   */\n  swap2\n  pop\n    /* \"#utility.yul\":9484:9504   */\n  tag_246\n    /* \"#utility.yul\":9502:9503   */\n  dup4\n    /* \"#utility.yul\":9484:9504   */\n  tag_104\n  jump\t// in\ntag_246:\n    /* \"#utility.yul\":9479:9504   */\n  swap3\n  pop\n    /* \"#utility.yul\":9539:9540   */\n  dup3\n    /* \"#utility.yul\":9536:9537   */\n  dup3\n    /* \"#utility.yul\":9532:9541   */\n  mul\n    /* \"#utility.yul\":9561:9591   */\n  tag_247\n    /* \"#utility.yul\":9579:9590   */\n  dup2\n    /* \"#utility.yul\":9561:9591   */\n  tag_104\n  jump\t// in\ntag_247:\n    /* \"#utility.yul\":9550:9591   */\n  swap2\n  pop\n    /* \"#utility.yul\":9740:9741   */\n  dup3\n    /* \"#utility.yul\":9731:9738   */\n  dup3\n    /* \"#utility.yul\":9727:9742   */\n  div\n    /* \"#utility.yul\":9724:9725   */\n  dup5\n    /* \"#utility.yul\":9721:9743   */\n  eq\n    /* \"#utility.yul\":9701:9702   */\n  dup4\n    /* \"#utility.yul\":9694:9703   */\n  iszero\n    /* \"#utility.yul\":9674:9757   */\n  or\n    /* \"#utility.yul\":9651:9790   */\n  tag_248\n  jumpi\n    /* \"#utility.yul\":9770:9788   */\n  tag_249\n  tag_117\n  jump\t// in\ntag_249:\n    /* \"#utility.yul\":9651:9790   */\ntag_248:\n    /* \"#utility.yul\":9435:9797   */\n  pop\n    /* \"#utility.yul\":9387:9797   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":9803:9880   */\ntag_122:\n    /* \"#utility.yul\":9840:9847   */\n  0x00\n    /* \"#utility.yul\":9869:9874   */\n  dup2\n    /* \"#utility.yul\":9858:9874   */\n  swap1\n  pop\n    /* \"#utility.yul\":9803:9880   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":9886:10004   */\ntag_123:\n    /* \"#utility.yul\":9973:9997   */\n  tag_252\n    /* \"#utility.yul\":9991:9996   */\n  dup2\n    /* \"#utility.yul\":9973:9997   */\n  tag_122\n  jump\t// in\ntag_252:\n    /* \"#utility.yul\":9968:9971   */\n  dup3\n    /* \"#utility.yul\":9961:9998   */\n  mstore\n    /* \"#utility.yul\":9886:10004   */\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":10010:10128   */\ntag_124:\n    /* \"#utility.yul\":10097:10121   */\n  tag_254\n    /* \"#utility.yul\":10115:10120   */\n  dup2\n    /* \"#utility.yul\":10097:10121   */\n  tag_104\n  jump\t// in\ntag_254:\n    /* \"#utility.yul\":10092:10095   */\n  dup3\n    /* \"#utility.yul\":10085:10122   */\n  mstore\n    /* \"#utility.yul\":10010:10128   */\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":10134:10798   */\ntag_49:\n    /* \"#utility.yul\":10339:10343   */\n  0x00\n    /* \"#utility.yul\":10377:10380   */\n  0xa0\n    /* \"#utility.yul\":10366:10375   */\n  dup3\n    /* \"#utility.yul\":10362:10381   */\n  add\n    /* \"#utility.yul\":10354:10381   */\n  swap1\n  pop\n    /* \"#utility.yul\":10391:10462   */\n  tag_256\n    /* \"#utility.yul\":10459:10460   */\n  0x00\n    /* \"#utility.yul\":10448:10457   */\n  dup4\n    /* \"#utility.yul\":10444:10461   */\n  add\n    /* \"#utility.yul\":10435:10441   */\n  dup9\n    /* \"#utility.yul\":10391:10462   */\n  tag_123\n  jump\t// in\ntag_256:\n    /* \"#utility.yul\":10472:10544   */\n  tag_257\n    /* \"#utility.yul\":10540:10542   */\n  0x20\n    /* \"#utility.yul\":10529:10538   */\n  dup4\n    /* \"#utility.yul\":10525:10543   */\n  add\n    /* \"#utility.yul\":10516:10522   */\n  dup8\n    /* \"#utility.yul\":10472:10544   */\n  tag_123\n  jump\t// in\ntag_257:\n    /* \"#utility.yul\":10554:10626   */\n  tag_258\n    /* \"#utility.yul\":10622:10624   */\n  0x40\n    /* \"#utility.yul\":10611:10620   */\n  dup4\n    /* \"#utility.yul\":10607:10625   */\n  add\n    /* \"#utility.yul\":10598:10604   */\n  dup7\n    /* \"#utility.yul\":10554:10626   */\n  tag_123\n  jump\t// in\ntag_258:\n    /* \"#utility.yul\":10636:10708   */\n  tag_259\n    /* \"#utility.yul\":10704:10706   */\n  0x60\n    /* \"#utility.yul\":10693:10702   */\n  dup4\n    /* \"#utility.yul\":10689:10707   */\n  add\n    /* \"#utility.yul\":10680:10686   */\n  dup6\n    /* \"#utility.yul\":10636:10708   */\n  tag_124\n  jump\t// in\ntag_259:\n    /* \"#utility.yul\":10718:10791   */\n  tag_260\n    /* \"#utility.yul\":10786:10789   */\n  0x80\n    /* \"#utility.yul\":10775:10784   */\n  dup4\n    /* \"#utility.yul\":10771:10790   */\n  add\n    /* \"#utility.yul\":10762:10768   */\n  dup5\n    /* \"#utility.yul\":10718:10791   */\n  tag_116\n  jump\t// in\ntag_260:\n    /* \"#utility.yul\":10134:10798   */\n  swap7\n  swap6\n  pop\n  pop\n  pop\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":10804:10973   */\ntag_125:\n    /* \"#utility.yul\":10888:10899   */\n  0x00\n    /* \"#utility.yul\":10922:10928   */\n  dup3\n    /* \"#utility.yul\":10917:10920   */\n  dup3\n    /* \"#utility.yul\":10910:10929   */\n  mstore\n    /* \"#utility.yul\":10962:10966   */\n  0x20\n    /* \"#utility.yul\":10957:10960   */\n  dup3\n    /* \"#utility.yul\":10953:10967   */\n  add\n    /* \"#utility.yul\":10938:10967   */\n  swap1\n  pop\n    /* \"#utility.yul\":10804:10973   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":10979:11225   */\ntag_126:\n    /* \"#utility.yul\":11060:11061   */\n  0x00\n    /* \"#utility.yul\":11070:11183   */\ntag_263:\n    /* \"#utility.yul\":11084:11090   */\n  dup4\n    /* \"#utility.yul\":11081:11082   */\n  dup2\n    /* \"#utility.yul\":11078:11091   */\n  lt\n    /* \"#utility.yul\":11070:11183   */\n  iszero\n  tag_265\n  jumpi\n    /* \"#utility.yul\":11169:11170   */\n  dup1\n    /* \"#utility.yul\":11164:11167   */\n  dup3\n    /* \"#utility.yul\":11160:11171   */\n  add\n    /* \"#utility.yul\":11154:11172   */\n  mload\n    /* \"#utility.yul\":11150:11151   */\n  dup2\n    /* \"#utility.yul\":11145:11148   */\n  dup5\n    /* \"#utility.yul\":11141:11152   */\n  add\n    /* \"#utility.yul\":11134:11173   */\n  mstore\n    /* \"#utility.yul\":11106:11108   */\n  0x20\n    /* \"#utility.yul\":11103:11104   */\n  dup2\n    /* \"#utility.yul\":11099:11109   */\n  add\n    /* \"#utility.yul\":11094:11109   */\n  swap1\n  pop\n    /* \"#utility.yul\":11070:11183   */\n  jump(tag_263)\ntag_265:\n    /* \"#utility.yul\":11217:11218   */\n  0x00\n    /* \"#utility.yul\":11208:11214   */\n  dup5\n    /* \"#utility.yul\":11203:11206   */\n  dup5\n    /* \"#utility.yul\":11199:11215   */\n  add\n    /* \"#utility.yul\":11192:11219   */\n  mstore\n    /* \"#utility.yul\":11041:11225   */\n  pop\n    /* \"#utility.yul\":10979:11225   */\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":11231:11333   */\ntag_127:\n    /* \"#utility.yul\":11272:11278   */\n  0x00\n    /* \"#utility.yul\":11323:11325   */\n  0x1f\n    /* \"#utility.yul\":11319:11326   */\n  not\n    /* \"#utility.yul\":11314:11316   */\n  0x1f\n    /* \"#utility.yul\":11307:11312   */\n  dup4\n    /* \"#utility.yul\":11303:11317   */\n  add\n    /* \"#utility.yul\":11299:11327   */\n  and\n    /* \"#utility.yul\":11289:11327   */\n  swap1\n  pop\n    /* \"#utility.yul\":11231:11333   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":11339:11716   */\ntag_128:\n    /* \"#utility.yul\":11427:11430   */\n  0x00\n    /* \"#utility.yul\":11455:11494   */\n  tag_268\n    /* \"#utility.yul\":11488:11493   */\n  dup3\n    /* \"#utility.yul\":11455:11494   */\n  tag_96\n  jump\t// in\ntag_268:\n    /* \"#utility.yul\":11510:11581   */\n  tag_269\n    /* \"#utility.yul\":11574:11580   */\n  dup2\n    /* \"#utility.yul\":11569:11572   */\n  dup6\n    /* \"#utility.yul\":11510:11581   */\n  tag_125\n  jump\t// in\ntag_269:\n    /* \"#utility.yul\":11503:11581   */\n  swap4\n  pop\n    /* \"#utility.yul\":11590:11655   */\n  tag_270\n    /* \"#utility.yul\":11648:11654   */\n  dup2\n    /* \"#utility.yul\":11643:11646   */\n  dup6\n    /* \"#utility.yul\":11636:11640   */\n  0x20\n    /* \"#utility.yul\":11629:11634   */\n  dup7\n    /* \"#utility.yul\":11625:11641   */\n  add\n    /* \"#utility.yul\":11590:11655   */\n  tag_126\n  jump\t// in\ntag_270:\n    /* \"#utility.yul\":11680:11709   */\n  tag_271\n    /* \"#utility.yul\":11702:11708   */\n  dup2\n    /* \"#utility.yul\":11680:11709   */\n  tag_127\n  jump\t// in\ntag_271:\n    /* \"#utility.yul\":11675:11678   */\n  dup5\n    /* \"#utility.yul\":11671:11710   */\n  add\n    /* \"#utility.yul\":11664:11710   */\n  swap2\n  pop\n    /* \"#utility.yul\":11431:11716   */\n  pop\n    /* \"#utility.yul\":11339:11716   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":11722:12035   */\ntag_59:\n    /* \"#utility.yul\":11835:11839   */\n  0x00\n    /* \"#utility.yul\":11873:11875   */\n  0x20\n    /* \"#utility.yul\":11862:11871   */\n  dup3\n    /* \"#utility.yul\":11858:11876   */\n  add\n    /* \"#utility.yul\":11850:11876   */\n  swap1\n  pop\n    /* \"#utility.yul\":11922:11931   */\n  dup2\n    /* \"#utility.yul\":11916:11920   */\n  dup2\n    /* \"#utility.yul\":11912:11932   */\n  sub\n    /* \"#utility.yul\":11908:11909   */\n  0x00\n    /* \"#utility.yul\":11897:11906   */\n  dup4\n    /* \"#utility.yul\":11893:11910   */\n  add\n    /* \"#utility.yul\":11886:11933   */\n  mstore\n    /* \"#utility.yul\":11950:12028   */\n  tag_273\n    /* \"#utility.yul\":12023:12027   */\n  dup2\n    /* \"#utility.yul\":12014:12020   */\n  dup5\n    /* \"#utility.yul\":11950:12028   */\n  tag_128\n  jump\t// in\ntag_273:\n    /* \"#utility.yul\":11942:12028   */\n  swap1\n  pop\n    /* \"#utility.yul\":11722:12035   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":12041:12139   */\ntag_129:\n    /* \"#utility.yul\":12092:12098   */\n  0x00\n    /* \"#utility.yul\":12126:12131   */\n  dup2\n    /* \"#utility.yul\":12120:12132   */\n  mload\n    /* \"#utility.yul\":12110:12132   */\n  swap1\n  pop\n    /* \"#utility.yul\":12041:12139   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":12145:12261   */\ntag_130:\n    /* \"#utility.yul\":12196:12200   */\n  0x00\n    /* \"#utility.yul\":12219:12222   */\n  dup2\n    /* \"#utility.yul\":12211:12222   */\n  swap1\n  pop\n    /* \"#utility.yul\":12249:12253   */\n  0x20\n    /* \"#utility.yul\":12244:12247   */\n  dup3\n    /* \"#utility.yul\":12240:12254   */\n  add\n    /* \"#utility.yul\":12232:12254   */\n  swap1\n  pop\n    /* \"#utility.yul\":12145:12261   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":12267:12421   */\ntag_131:\n    /* \"#utility.yul\":12310:12321   */\n  0x00\n    /* \"#utility.yul\":12346:12375   */\n  tag_277\n    /* \"#utility.yul\":12370:12373   */\n  dup3\n    /* \"#utility.yul\":12364:12374   */\n  mload\n    /* \"#utility.yul\":12346:12375   */\n  tag_122\n  jump\t// in\ntag_277:\n    /* \"#utility.yul\":12409:12414   */\n  dup1\n    /* \"#utility.yul\":12385:12414   */\n  swap2\n  pop\n    /* \"#utility.yul\":12322:12421   */\n  pop\n    /* \"#utility.yul\":12267:12421   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":12427:13021   */\ntag_61:\n    /* \"#utility.yul\":12511:12516   */\n  0x00\n    /* \"#utility.yul\":12542:12580   */\n  tag_279\n    /* \"#utility.yul\":12574:12579   */\n  dup3\n    /* \"#utility.yul\":12542:12580   */\n  tag_129\n  jump\t// in\ntag_279:\n    /* \"#utility.yul\":12605:12610   */\n  dup3\n    /* \"#utility.yul\":12632:12672   */\n  tag_280\n    /* \"#utility.yul\":12666:12671   */\n  dup5\n    /* \"#utility.yul\":12632:12672   */\n  tag_130\n  jump\t// in\ntag_280:\n    /* \"#utility.yul\":12620:12672   */\n  swap1\n  pop\n    /* \"#utility.yul\":12691:12726   */\n  tag_281\n    /* \"#utility.yul\":12717:12725   */\n  dup2\n    /* \"#utility.yul\":12691:12726   */\n  tag_131\n  jump\t// in\ntag_281:\n    /* \"#utility.yul\":12682:12726   */\n  swap3\n  pop\n    /* \"#utility.yul\":12750:12752   */\n  0x20\n    /* \"#utility.yul\":12742:12748   */\n  dup3\n    /* \"#utility.yul\":12739:12753   */\n  lt\n    /* \"#utility.yul\":12736:13014   */\n  iszero\n  tag_282\n  jumpi\n    /* \"#utility.yul\":12821:12990   */\n  tag_283\n    /* \"#utility.yul\":12906:12972   */\n  0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n    /* \"#utility.yul\":12876:12882   */\n  dup4\n    /* \"#utility.yul\":12872:12874   */\n  0x20\n    /* \"#utility.yul\":12868:12883   */\n  sub\n    /* \"#utility.yul\":12865:12866   */\n  0x08\n    /* \"#utility.yul\":12861:12884   */\n  mul\n    /* \"#utility.yul\":12821:12990   */\n  tag_102\n  jump\t// in\ntag_283:\n    /* \"#utility.yul\":12798:12803   */\n  dup4\n    /* \"#utility.yul\":12777:13004   */\n  and\n    /* \"#utility.yul\":12768:13004   */\n  swap3\n  pop\n    /* \"#utility.yul\":12736:13014   */\ntag_282:\n    /* \"#utility.yul\":12517:13021   */\n  pop\n  pop\n    /* \"#utility.yul\":12427:13021   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":13027:13218   */\ntag_79:\n    /* \"#utility.yul\":13067:13070   */\n  0x00\n    /* \"#utility.yul\":13086:13106   */\n  tag_285\n    /* \"#utility.yul\":13104:13105   */\n  dup3\n    /* \"#utility.yul\":13086:13106   */\n  tag_104\n  jump\t// in\ntag_285:\n    /* \"#utility.yul\":13081:13106   */\n  swap2\n  pop\n    /* \"#utility.yul\":13120:13140   */\n  tag_286\n    /* \"#utility.yul\":13138:13139   */\n  dup4\n    /* \"#utility.yul\":13120:13140   */\n  tag_104\n  jump\t// in\ntag_286:\n    /* \"#utility.yul\":13115:13140   */\n  swap3\n  pop\n    /* \"#utility.yul\":13163:13164   */\n  dup3\n    /* \"#utility.yul\":13160:13161   */\n  dup3\n    /* \"#utility.yul\":13156:13165   */\n  add\n    /* \"#utility.yul\":13149:13165   */\n  swap1\n  pop\n    /* \"#utility.yul\":13184:13187   */\n  dup1\n    /* \"#utility.yul\":13181:13182   */\n  dup3\n    /* \"#utility.yul\":13178:13188   */\n  gt\n    /* \"#utility.yul\":13175:13211   */\n  iszero\n  tag_287\n  jumpi\n    /* \"#utility.yul\":13191:13209   */\n  tag_288\n  tag_117\n  jump\t// in\ntag_288:\n    /* \"#utility.yul\":13175:13211   */\ntag_287:\n    /* \"#utility.yul\":13027:13218   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":13224:13666   */\ntag_83:\n    /* \"#utility.yul\":13373:13377   */\n  0x00\n    /* \"#utility.yul\":13411:13413   */\n  0x60\n    /* \"#utility.yul\":13400:13409   */\n  dup3\n    /* \"#utility.yul\":13396:13414   */\n  add\n    /* \"#utility.yul\":13388:13414   */\n  swap1\n  pop\n    /* \"#utility.yul\":13424:13495   */\n  tag_290\n    /* \"#utility.yul\":13492:13493   */\n  0x00\n    /* \"#utility.yul\":13481:13490   */\n  dup4\n    /* \"#utility.yul\":13477:13494   */\n  add\n    /* \"#utility.yul\":13468:13474   */\n  dup7\n    /* \"#utility.yul\":13424:13495   */\n  tag_116\n  jump\t// in\ntag_290:\n    /* \"#utility.yul\":13505:13577   */\n  tag_291\n    /* \"#utility.yul\":13573:13575   */\n  0x20\n    /* \"#utility.yul\":13562:13571   */\n  dup4\n    /* \"#utility.yul\":13558:13576   */\n  add\n    /* \"#utility.yul\":13549:13555   */\n  dup6\n    /* \"#utility.yul\":13505:13577   */\n  tag_124\n  jump\t// in\ntag_291:\n    /* \"#utility.yul\":13587:13659   */\n  tag_292\n    /* \"#utility.yul\":13655:13657   */\n  0x40\n    /* \"#utility.yul\":13644:13653   */\n  dup4\n    /* \"#utility.yul\":13640:13658   */\n  add\n    /* \"#utility.yul\":13631:13637   */\n  dup5\n    /* \"#utility.yul\":13587:13659   */\n  tag_124\n  jump\t// in\ntag_292:\n    /* \"#utility.yul\":13224:13666   */\n  swap5\n  swap4\n  pop\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":13672:13894   */\ntag_87:\n    /* \"#utility.yul\":13765:13769   */\n  0x00\n    /* \"#utility.yul\":13803:13805   */\n  0x20\n    /* \"#utility.yul\":13792:13801   */\n  dup3\n    /* \"#utility.yul\":13788:13806   */\n  add\n    /* \"#utility.yul\":13780:13806   */\n  swap1\n  pop\n    /* \"#utility.yul\":13816:13887   */\n  tag_294\n    /* \"#utility.yul\":13884:13885   */\n  0x00\n    /* \"#utility.yul\":13873:13882   */\n  dup4\n    /* \"#utility.yul\":13869:13886   */\n  add\n    /* \"#utility.yul\":13860:13866   */\n  dup5\n    /* \"#utility.yul\":13816:13887   */\n  tag_124\n  jump\t// in\ntag_294:\n    /* \"#utility.yul\":13672:13894   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"contracts/ERC20Token_flattened.sol\":84759:85505  contract VEGAN is ERC20, ERC20Burnable, ERC20Pausable, Ownable, ERC20Permit {... */\ntag_37:\n  mload(0x80)\n  mload(0xa0)\n  mload(0xc0)\n  mload(0xe0)\n  mload(0x0100)\n  mload(0x0120)\n  mload(0x0140)\n  codecopy(0x00, dataOffset(sub_0), dataSize(sub_0))\n  0x00\n  assignImmutable(\"0xef17f12455e22a45134579834cdca993c5eec3070954e76052dcfac9f22697b4\")\n  0x00\n  assignImmutable(\"0xb8163922f365f2d54f6122835c04019c69b181c4b5bf7a62d07ca62e91817bd9\")\n  0x00\n  assignImmutable(\"0xc9c370779fd62a0c7c118a2246ccad4c103473123315c14d4e476e7f4b22843f\")\n  0x00\n  assignImmutable(\"0xf40d89e88f976c0e4eebddab04ab11e8eb9a648fae2f79611f9b9f54d5ffefc8\")\n  0x00\n  assignImmutable(\"0xce191cb8321ca757450c20e87b57fa44746b6a87612dab9cf25801eef5ed67f8\")\n  0x00\n  assignImmutable(\"0x1a100bb1148e9e506f9ba8ec1947d4f84b922b6e9d33f30c8d12f2e351bcf10c\")\n  0x00\n  assignImmutable(\"0x29952515f5d57954abac5ab7b1327bd7bcbb5425c05d93673edc46b02d7cb56d\")\n  return(0x00, dataSize(sub_0))\nstop\n\nsub_0: assembly {\n        /* \"contracts/ERC20Token_flattened.sol\":84759:85505  contract VEGAN is ERC20, ERC20Burnable, ERC20Pausable, Ownable, ERC20Permit {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x715018a6\n      gt\n      tag_25\n      jumpi\n      dup1\n      0x8da5cb5b\n      gt\n      tag_26\n      jumpi\n      dup1\n      0x8da5cb5b\n      eq\n      tag_19\n      jumpi\n      dup1\n      0x95d89b41\n      eq\n      tag_20\n      jumpi\n      dup1\n      0xa9059cbb\n      eq\n      tag_21\n      jumpi\n      dup1\n      0xd505accf\n      eq\n      tag_22\n      jumpi\n      dup1\n      0xdd62ed3e\n      eq\n      tag_23\n      jumpi\n      dup1\n      0xf2fde38b\n      eq\n      tag_24\n      jumpi\n      jump(tag_2)\n    tag_26:\n      dup1\n      0x715018a6\n      eq\n      tag_14\n      jumpi\n      dup1\n      0x79cc6790\n      eq\n      tag_15\n      jumpi\n      dup1\n      0x7ecebe00\n      eq\n      tag_16\n      jumpi\n      dup1\n      0x8456cb59\n      eq\n      tag_17\n      jumpi\n      dup1\n      0x84b0196e\n      eq\n      tag_18\n      jumpi\n      jump(tag_2)\n    tag_25:\n      dup1\n      0x3644e515\n      gt\n      tag_27\n      jumpi\n      dup1\n      0x3644e515\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x3f4ba83a\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x40c10f19\n      eq\n      tag_10\n      jumpi\n      dup1\n      0x42966c68\n      eq\n      tag_11\n      jumpi\n      dup1\n      0x5c975abb\n      eq\n      tag_12\n      jumpi\n      dup1\n      0x70a08231\n      eq\n      tag_13\n      jumpi\n      jump(tag_2)\n    tag_27:\n      dup1\n      0x06fdde03\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x095ea7b3\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x18160ddd\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x23b872dd\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x313ce567\n      eq\n      tag_7\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"contracts/ERC20Token_flattened.sol\":12935:13024  function name() public view virtual returns (string memory) {... */\n    tag_3:\n      tag_28\n      tag_29\n      jump\t// in\n    tag_28:\n      mload(0x40)\n      tag_30\n      swap2\n      swap1\n      tag_31\n      jump\t// in\n    tag_30:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/ERC20Token_flattened.sol\":15154:15340  function approve(address spender, uint256 value) public virtual returns (bool) {... */\n    tag_4:\n      tag_32\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_33\n      swap2\n      swap1\n      tag_34\n      jump\t// in\n    tag_33:\n      tag_35\n      jump\t// in\n    tag_32:\n      mload(0x40)\n      tag_36\n      swap2\n      swap1\n      tag_37\n      jump\t// in\n    tag_36:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/ERC20Token_flattened.sol\":14005:14102  function totalSupply() public view virtual returns (uint256) {... */\n    tag_5:\n      tag_38\n      tag_39\n      jump\t// in\n    tag_38:\n      mload(0x40)\n      tag_40\n      swap2\n      swap1\n      tag_41\n      jump\t// in\n    tag_40:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/ERC20Token_flattened.sol\":15900:16144  function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {... */\n    tag_6:\n      tag_42\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_43\n      swap2\n      swap1\n      tag_44\n      jump\t// in\n    tag_43:\n      tag_45\n      jump\t// in\n    tag_42:\n      mload(0x40)\n      tag_46\n      swap2\n      swap1\n      tag_37\n      jump\t// in\n    tag_46:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/ERC20Token_flattened.sol\":13863:13945  function decimals() public view virtual returns (uint8) {... */\n    tag_7:\n      tag_47\n      tag_48\n      jump\t// in\n    tag_47:\n      mload(0x40)\n      tag_49\n      swap2\n      swap1\n      tag_50\n      jump\t// in\n    tag_49:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/ERC20Token_flattened.sol\":84527:84639  function DOMAIN_SEPARATOR() external view virtual returns (bytes32) {... */\n    tag_8:\n      tag_51\n      tag_52\n      jump\t// in\n    tag_51:\n      mload(0x40)\n      tag_53\n      swap2\n      swap1\n      tag_54\n      jump\t// in\n    tag_53:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/ERC20Token_flattened.sol\":85102:85165  function unpause() public onlyOwner {... */\n    tag_9:\n      tag_55\n      tag_56\n      jump\t// in\n    tag_55:\n      stop\n        /* \"contracts/ERC20Token_flattened.sol\":85171:85264  function mint(address to, uint256 amount) public onlyOwner {... */\n    tag_10:\n      tag_57\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_58\n      swap2\n      swap1\n      tag_34\n      jump\t// in\n    tag_58:\n      tag_59\n      jump\t// in\n    tag_57:\n      stop\n        /* \"contracts/ERC20Token_flattened.sol\":22580:22667  function burn(uint256 value) public virtual {... */\n    tag_11:\n      tag_60\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_61\n      swap2\n      swap1\n      tag_62\n      jump\t// in\n    tag_61:\n      tag_63\n      jump\t// in\n    tag_60:\n      stop\n        /* \"contracts/ERC20Token_flattened.sol\":24971:25055  function paused() public view virtual returns (bool) {... */\n    tag_12:\n      tag_64\n      tag_65\n      jump\t// in\n    tag_64:\n      mload(0x40)\n      tag_66\n      swap2\n      swap1\n      tag_37\n      jump\t// in\n    tag_66:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/ERC20Token_flattened.sol\":14160:14276  function balanceOf(address account) public view virtual returns (uint256) {... */\n    tag_13:\n      tag_67\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_68\n      swap2\n      swap1\n      tag_69\n      jump\t// in\n    tag_68:\n      tag_70\n      jump\t// in\n    tag_67:\n      mload(0x40)\n      tag_71\n      swap2\n      swap1\n      tag_41\n      jump\t// in\n    tag_71:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/ERC20Token_flattened.sol\":29437:29538  function renounceOwnership() public virtual onlyOwner {... */\n    tag_14:\n      tag_72\n      tag_73\n      jump\t// in\n    tag_72:\n      stop\n        /* \"contracts/ERC20Token_flattened.sol\":22983:23141  function burnFrom(address account, uint256 value) public virtual {... */\n    tag_15:\n      tag_74\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_75\n      swap2\n      swap1\n      tag_34\n      jump\t// in\n    tag_75:\n      tag_76\n      jump\t// in\n    tag_74:\n      stop\n        /* \"contracts/ERC20Token_flattened.sol\":84277:84420  function nonces(address owner) public view virtual override(IERC20Permit, Nonces) returns (uint256) {... */\n    tag_16:\n      tag_77\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_78\n      swap2\n      swap1\n      tag_69\n      jump\t// in\n    tag_78:\n      tag_79\n      jump\t// in\n    tag_77:\n      mload(0x40)\n      tag_80\n      swap2\n      swap1\n      tag_41\n      jump\t// in\n    tag_80:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/ERC20Token_flattened.sol\":85037:85096  function pause() public onlyOwner {... */\n    tag_17:\n      tag_81\n      tag_82\n      jump\t// in\n    tag_81:\n      stop\n        /* \"contracts/ERC20Token_flattened.sol\":79105:79662  function eip712Domain()... */\n    tag_18:\n      tag_83\n      tag_84\n      jump\t// in\n    tag_83:\n      mload(0x40)\n      tag_85\n      swap8\n      swap7\n      swap6\n      swap5\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_86\n      jump\t// in\n    tag_85:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/ERC20Token_flattened.sol\":28782:28867  function owner() public view virtual returns (address) {... */\n    tag_19:\n      tag_87\n      tag_88\n      jump\t// in\n    tag_87:\n      mload(0x40)\n      tag_89\n      swap2\n      swap1\n      tag_90\n      jump\t// in\n    tag_89:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/ERC20Token_flattened.sol\":13137:13230  function symbol() public view virtual returns (string memory) {... */\n    tag_20:\n      tag_91\n      tag_92\n      jump\t// in\n    tag_91:\n      mload(0x40)\n      tag_93\n      swap2\n      swap1\n      tag_31\n      jump\t// in\n    tag_93:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/ERC20Token_flattened.sol\":14471:14649  function transfer(address to, uint256 value) public virtual returns (bool) {... */\n    tag_21:\n      tag_94\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_95\n      swap2\n      swap1\n      tag_34\n      jump\t// in\n    tag_95:\n      tag_96\n      jump\t// in\n    tag_94:\n      mload(0x40)\n      tag_97\n      swap2\n      swap1\n      tag_37\n      jump\t// in\n    tag_97:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/ERC20Token_flattened.sol\":83551:84223  function permit(... */\n    tag_22:\n      tag_98\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_99\n      swap2\n      swap1\n      tag_100\n      jump\t// in\n    tag_99:\n      tag_101\n      jump\t// in\n    tag_98:\n      stop\n        /* \"contracts/ERC20Token_flattened.sol\":14707:14847  function allowance(address owner, address spender) public view virtual returns (uint256) {... */\n    tag_23:\n      tag_102\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_103\n      swap2\n      swap1\n      tag_104\n      jump\t// in\n    tag_103:\n      tag_105\n      jump\t// in\n    tag_102:\n      mload(0x40)\n      tag_106\n      swap2\n      swap1\n      tag_41\n      jump\t// in\n    tag_106:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/ERC20Token_flattened.sol\":29687:29902  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_24:\n      tag_107\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_108\n      swap2\n      swap1\n      tag_69\n      jump\t// in\n    tag_108:\n      tag_109\n      jump\t// in\n    tag_107:\n      stop\n        /* \"contracts/ERC20Token_flattened.sol\":12935:13024  function name() public view virtual returns (string memory) {... */\n    tag_29:\n        /* \"contracts/ERC20Token_flattened.sol\":12980:12993  string memory */\n      0x60\n        /* \"contracts/ERC20Token_flattened.sol\":13012:13017  _name */\n      0x03\n        /* \"contracts/ERC20Token_flattened.sol\":13005:13017  return _name */\n      dup1\n      sload\n      tag_111\n      swap1\n      tag_112\n      jump\t// in\n    tag_111:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_113\n      swap1\n      tag_112\n      jump\t// in\n    tag_113:\n      dup1\n      iszero\n      tag_114\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_115\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_114)\n    tag_115:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_116:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_116\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_114:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"contracts/ERC20Token_flattened.sol\":12935:13024  function name() public view virtual returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"contracts/ERC20Token_flattened.sol\":15154:15340  function approve(address spender, uint256 value) public virtual returns (bool) {... */\n    tag_35:\n        /* \"contracts/ERC20Token_flattened.sol\":15227:15231  bool */\n      0x00\n        /* \"contracts/ERC20Token_flattened.sol\":15243:15256  address owner */\n      dup1\n        /* \"contracts/ERC20Token_flattened.sol\":15259:15271  _msgSender() */\n      tag_118\n        /* \"contracts/ERC20Token_flattened.sol\":15259:15269  _msgSender */\n      tag_119\n        /* \"contracts/ERC20Token_flattened.sol\":15259:15271  _msgSender() */\n      jump\t// in\n    tag_118:\n        /* \"contracts/ERC20Token_flattened.sol\":15243:15271  address owner = _msgSender() */\n      swap1\n      pop\n        /* \"contracts/ERC20Token_flattened.sol\":15281:15312  _approve(owner, spender, value) */\n      tag_120\n        /* \"contracts/ERC20Token_flattened.sol\":15290:15295  owner */\n      dup2\n        /* \"contracts/ERC20Token_flattened.sol\":15297:15304  spender */\n      dup6\n        /* \"contracts/ERC20Token_flattened.sol\":15306:15311  value */\n      dup6\n        /* \"contracts/ERC20Token_flattened.sol\":15281:15289  _approve */\n      tag_121\n        /* \"contracts/ERC20Token_flattened.sol\":15281:15312  _approve(owner, spender, value) */\n      jump\t// in\n    tag_120:\n        /* \"contracts/ERC20Token_flattened.sol\":15329:15333  true */\n      0x01\n        /* \"contracts/ERC20Token_flattened.sol\":15322:15333  return true */\n      swap2\n      pop\n      pop\n        /* \"contracts/ERC20Token_flattened.sol\":15154:15340  function approve(address spender, uint256 value) public virtual returns (bool) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/ERC20Token_flattened.sol\":14005:14102  function totalSupply() public view virtual returns (uint256) {... */\n    tag_39:\n        /* \"contracts/ERC20Token_flattened.sol\":14057:14064  uint256 */\n      0x00\n        /* \"contracts/ERC20Token_flattened.sol\":14083:14095  _totalSupply */\n      sload(0x02)\n        /* \"contracts/ERC20Token_flattened.sol\":14076:14095  return _totalSupply */\n      swap1\n      pop\n        /* \"contracts/ERC20Token_flattened.sol\":14005:14102  function totalSupply() public view virtual returns (uint256) {... */\n      swap1\n      jump\t// out\n        /* \"contracts/ERC20Token_flattened.sol\":15900:16144  function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {... */\n    tag_45:\n        /* \"contracts/ERC20Token_flattened.sol\":15987:15991  bool */\n      0x00\n        /* \"contracts/ERC20Token_flattened.sol\":16003:16018  address spender */\n      dup1\n        /* \"contracts/ERC20Token_flattened.sol\":16021:16033  _msgSender() */\n      tag_124\n        /* \"contracts/ERC20Token_flattened.sol\":16021:16031  _msgSender */\n      tag_119\n        /* \"contracts/ERC20Token_flattened.sol\":16021:16033  _msgSender() */\n      jump\t// in\n    tag_124:\n        /* \"contracts/ERC20Token_flattened.sol\":16003:16033  address spender = _msgSender() */\n      swap1\n      pop\n        /* \"contracts/ERC20Token_flattened.sol\":16043:16080  _spendAllowance(from, spender, value) */\n      tag_125\n        /* \"contracts/ERC20Token_flattened.sol\":16059:16063  from */\n      dup6\n        /* \"contracts/ERC20Token_flattened.sol\":16065:16072  spender */\n      dup3\n        /* \"contracts/ERC20Token_flattened.sol\":16074:16079  value */\n      dup6\n        /* \"contracts/ERC20Token_flattened.sol\":16043:16058  _spendAllowance */\n      tag_126\n        /* \"contracts/ERC20Token_flattened.sol\":16043:16080  _spendAllowance(from, spender, value) */\n      jump\t// in\n    tag_125:\n        /* \"contracts/ERC20Token_flattened.sol\":16090:16116  _transfer(from, to, value) */\n      tag_127\n        /* \"contracts/ERC20Token_flattened.sol\":16100:16104  from */\n      dup6\n        /* \"contracts/ERC20Token_flattened.sol\":16106:16108  to */\n      dup6\n        /* \"contracts/ERC20Token_flattened.sol\":16110:16115  value */\n      dup6\n        /* \"contracts/ERC20Token_flattened.sol\":16090:16099  _transfer */\n      tag_128\n        /* \"contracts/ERC20Token_flattened.sol\":16090:16116  _transfer(from, to, value) */\n      jump\t// in\n    tag_127:\n        /* \"contracts/ERC20Token_flattened.sol\":16133:16137  true */\n      0x01\n        /* \"contracts/ERC20Token_flattened.sol\":16126:16137  return true */\n      swap2\n      pop\n      pop\n        /* \"contracts/ERC20Token_flattened.sol\":15900:16144  function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {... */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/ERC20Token_flattened.sol\":13863:13945  function decimals() public view virtual returns (uint8) {... */\n    tag_48:\n        /* \"contracts/ERC20Token_flattened.sol\":13912:13917  uint8 */\n      0x00\n        /* \"contracts/ERC20Token_flattened.sol\":13936:13938  18 */\n      0x12\n        /* \"contracts/ERC20Token_flattened.sol\":13929:13938  return 18 */\n      swap1\n      pop\n        /* \"contracts/ERC20Token_flattened.sol\":13863:13945  function decimals() public view virtual returns (uint8) {... */\n      swap1\n      jump\t// out\n        /* \"contracts/ERC20Token_flattened.sol\":84527:84639  function DOMAIN_SEPARATOR() external view virtual returns (bytes32) {... */\n    tag_52:\n        /* \"contracts/ERC20Token_flattened.sol\":84586:84593  bytes32 */\n      0x00\n        /* \"contracts/ERC20Token_flattened.sol\":84612:84632  _domainSeparatorV4() */\n      tag_131\n        /* \"contracts/ERC20Token_flattened.sol\":84612:84630  _domainSeparatorV4 */\n      tag_132\n        /* \"contracts/ERC20Token_flattened.sol\":84612:84632  _domainSeparatorV4() */\n      jump\t// in\n    tag_131:\n        /* \"contracts/ERC20Token_flattened.sol\":84605:84632  return _domainSeparatorV4() */\n      swap1\n      pop\n        /* \"contracts/ERC20Token_flattened.sol\":84527:84639  function DOMAIN_SEPARATOR() external view virtual returns (bytes32) {... */\n      swap1\n      jump\t// out\n        /* \"contracts/ERC20Token_flattened.sol\":85102:85165  function unpause() public onlyOwner {... */\n    tag_56:\n        /* \"contracts/ERC20Token_flattened.sol\":28675:28688  _checkOwner() */\n      tag_134\n        /* \"contracts/ERC20Token_flattened.sol\":28675:28686  _checkOwner */\n      tag_135\n        /* \"contracts/ERC20Token_flattened.sol\":28675:28688  _checkOwner() */\n      jump\t// in\n    tag_134:\n        /* \"contracts/ERC20Token_flattened.sol\":85148:85158  _unpause() */\n      tag_137\n        /* \"contracts/ERC20Token_flattened.sol\":85148:85156  _unpause */\n      tag_138\n        /* \"contracts/ERC20Token_flattened.sol\":85148:85158  _unpause() */\n      jump\t// in\n    tag_137:\n        /* \"contracts/ERC20Token_flattened.sol\":85102:85165  function unpause() public onlyOwner {... */\n      jump\t// out\n        /* \"contracts/ERC20Token_flattened.sol\":85171:85264  function mint(address to, uint256 amount) public onlyOwner {... */\n    tag_59:\n        /* \"contracts/ERC20Token_flattened.sol\":28675:28688  _checkOwner() */\n      tag_140\n        /* \"contracts/ERC20Token_flattened.sol\":28675:28686  _checkOwner */\n      tag_135\n        /* \"contracts/ERC20Token_flattened.sol\":28675:28688  _checkOwner() */\n      jump\t// in\n    tag_140:\n        /* \"contracts/ERC20Token_flattened.sol\":85240:85257  _mint(to, amount) */\n      tag_142\n        /* \"contracts/ERC20Token_flattened.sol\":85246:85248  to */\n      dup3\n        /* \"contracts/ERC20Token_flattened.sol\":85250:85256  amount */\n      dup3\n        /* \"contracts/ERC20Token_flattened.sol\":85240:85245  _mint */\n      tag_143\n        /* \"contracts/ERC20Token_flattened.sol\":85240:85257  _mint(to, amount) */\n      jump\t// in\n    tag_142:\n        /* \"contracts/ERC20Token_flattened.sol\":85171:85264  function mint(address to, uint256 amount) public onlyOwner {... */\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/ERC20Token_flattened.sol\":22580:22667  function burn(uint256 value) public virtual {... */\n    tag_63:\n        /* \"contracts/ERC20Token_flattened.sol\":22634:22660  _burn(_msgSender(), value) */\n      tag_145\n        /* \"contracts/ERC20Token_flattened.sol\":22640:22652  _msgSender() */\n      tag_146\n        /* \"contracts/ERC20Token_flattened.sol\":22640:22650  _msgSender */\n      tag_119\n        /* \"contracts/ERC20Token_flattened.sol\":22640:22652  _msgSender() */\n      jump\t// in\n    tag_146:\n        /* \"contracts/ERC20Token_flattened.sol\":22654:22659  value */\n      dup3\n        /* \"contracts/ERC20Token_flattened.sol\":22634:22639  _burn */\n      tag_147\n        /* \"contracts/ERC20Token_flattened.sol\":22634:22660  _burn(_msgSender(), value) */\n      jump\t// in\n    tag_145:\n        /* \"contracts/ERC20Token_flattened.sol\":22580:22667  function burn(uint256 value) public virtual {... */\n      pop\n      jump\t// out\n        /* \"contracts/ERC20Token_flattened.sol\":24971:25055  function paused() public view virtual returns (bool) {... */\n    tag_65:\n        /* \"contracts/ERC20Token_flattened.sol\":25018:25022  bool */\n      0x00\n        /* \"contracts/ERC20Token_flattened.sol\":25041:25048  _paused */\n      0x05\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n        /* \"contracts/ERC20Token_flattened.sol\":25034:25048  return _paused */\n      swap1\n      pop\n        /* \"contracts/ERC20Token_flattened.sol\":24971:25055  function paused() public view virtual returns (bool) {... */\n      swap1\n      jump\t// out\n        /* \"contracts/ERC20Token_flattened.sol\":14160:14276  function balanceOf(address account) public view virtual returns (uint256) {... */\n    tag_70:\n        /* \"contracts/ERC20Token_flattened.sol\":14225:14232  uint256 */\n      0x00\n        /* \"contracts/ERC20Token_flattened.sol\":14251:14260  _balances */\n      dup1\n        /* \"contracts/ERC20Token_flattened.sol\":14251:14269  _balances[account] */\n      0x00\n        /* \"contracts/ERC20Token_flattened.sol\":14261:14268  account */\n      dup4\n        /* \"contracts/ERC20Token_flattened.sol\":14251:14269  _balances[account] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"contracts/ERC20Token_flattened.sol\":14244:14269  return _balances[account] */\n      swap1\n      pop\n        /* \"contracts/ERC20Token_flattened.sol\":14160:14276  function balanceOf(address account) public view virtual returns (uint256) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/ERC20Token_flattened.sol\":29437:29538  function renounceOwnership() public virtual onlyOwner {... */\n    tag_73:\n        /* \"contracts/ERC20Token_flattened.sol\":28675:28688  _checkOwner() */\n      tag_151\n        /* \"contracts/ERC20Token_flattened.sol\":28675:28686  _checkOwner */\n      tag_135\n        /* \"contracts/ERC20Token_flattened.sol\":28675:28688  _checkOwner() */\n      jump\t// in\n    tag_151:\n        /* \"contracts/ERC20Token_flattened.sol\":29501:29531  _transferOwnership(address(0)) */\n      tag_153\n        /* \"contracts/ERC20Token_flattened.sol\":29528:29529  0 */\n      0x00\n        /* \"contracts/ERC20Token_flattened.sol\":29501:29519  _transferOwnership */\n      tag_154\n        /* \"contracts/ERC20Token_flattened.sol\":29501:29531  _transferOwnership(address(0)) */\n      jump\t// in\n    tag_153:\n        /* \"contracts/ERC20Token_flattened.sol\":29437:29538  function renounceOwnership() public virtual onlyOwner {... */\n      jump\t// out\n        /* \"contracts/ERC20Token_flattened.sol\":22983:23141  function burnFrom(address account, uint256 value) public virtual {... */\n    tag_76:\n        /* \"contracts/ERC20Token_flattened.sol\":23058:23103  _spendAllowance(account, _msgSender(), value) */\n      tag_156\n        /* \"contracts/ERC20Token_flattened.sol\":23074:23081  account */\n      dup3\n        /* \"contracts/ERC20Token_flattened.sol\":23083:23095  _msgSender() */\n      tag_157\n        /* \"contracts/ERC20Token_flattened.sol\":23083:23093  _msgSender */\n      tag_119\n        /* \"contracts/ERC20Token_flattened.sol\":23083:23095  _msgSender() */\n      jump\t// in\n    tag_157:\n        /* \"contracts/ERC20Token_flattened.sol\":23097:23102  value */\n      dup4\n        /* \"contracts/ERC20Token_flattened.sol\":23058:23073  _spendAllowance */\n      tag_126\n        /* \"contracts/ERC20Token_flattened.sol\":23058:23103  _spendAllowance(account, _msgSender(), value) */\n      jump\t// in\n    tag_156:\n        /* \"contracts/ERC20Token_flattened.sol\":23113:23134  _burn(account, value) */\n      tag_158\n        /* \"contracts/ERC20Token_flattened.sol\":23119:23126  account */\n      dup3\n        /* \"contracts/ERC20Token_flattened.sol\":23128:23133  value */\n      dup3\n        /* \"contracts/ERC20Token_flattened.sol\":23113:23118  _burn */\n      tag_147\n        /* \"contracts/ERC20Token_flattened.sol\":23113:23134  _burn(account, value) */\n      jump\t// in\n    tag_158:\n        /* \"contracts/ERC20Token_flattened.sol\":22983:23141  function burnFrom(address account, uint256 value) public virtual {... */\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/ERC20Token_flattened.sol\":84277:84420  function nonces(address owner) public view virtual override(IERC20Permit, Nonces) returns (uint256) {... */\n    tag_79:\n        /* \"contracts/ERC20Token_flattened.sol\":84368:84375  uint256 */\n      0x00\n        /* \"contracts/ERC20Token_flattened.sol\":84394:84413  super.nonces(owner) */\n      tag_160\n        /* \"contracts/ERC20Token_flattened.sol\":84407:84412  owner */\n      dup3\n        /* \"contracts/ERC20Token_flattened.sol\":84394:84406  super.nonces */\n      tag_161\n        /* \"contracts/ERC20Token_flattened.sol\":84394:84413  super.nonces(owner) */\n      jump\t// in\n    tag_160:\n        /* \"contracts/ERC20Token_flattened.sol\":84387:84413  return super.nonces(owner) */\n      swap1\n      pop\n        /* \"contracts/ERC20Token_flattened.sol\":84277:84420  function nonces(address owner) public view virtual override(IERC20Permit, Nonces) returns (uint256) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/ERC20Token_flattened.sol\":85037:85096  function pause() public onlyOwner {... */\n    tag_82:\n        /* \"contracts/ERC20Token_flattened.sol\":28675:28688  _checkOwner() */\n      tag_163\n        /* \"contracts/ERC20Token_flattened.sol\":28675:28686  _checkOwner */\n      tag_135\n        /* \"contracts/ERC20Token_flattened.sol\":28675:28688  _checkOwner() */\n      jump\t// in\n    tag_163:\n        /* \"contracts/ERC20Token_flattened.sol\":85081:85089  _pause() */\n      tag_165\n        /* \"contracts/ERC20Token_flattened.sol\":85081:85087  _pause */\n      tag_166\n        /* \"contracts/ERC20Token_flattened.sol\":85081:85089  _pause() */\n      jump\t// in\n    tag_165:\n        /* \"contracts/ERC20Token_flattened.sol\":85037:85096  function pause() public onlyOwner {... */\n      jump\t// out\n        /* \"contracts/ERC20Token_flattened.sol\":79105:79662  function eip712Domain()... */\n    tag_84:\n        /* \"contracts/ERC20Token_flattened.sol\":79203:79216  bytes1 fields */\n      0x00\n        /* \"contracts/ERC20Token_flattened.sol\":79230:79248  string memory name */\n      0x60\n        /* \"contracts/ERC20Token_flattened.sol\":79262:79283  string memory version */\n      dup1\n        /* \"contracts/ERC20Token_flattened.sol\":79297:79312  uint256 chainId */\n      0x00\n        /* \"contracts/ERC20Token_flattened.sol\":79326:79351  address verifyingContract */\n      dup1\n        /* \"contracts/ERC20Token_flattened.sol\":79365:79377  bytes32 salt */\n      0x00\n        /* \"contracts/ERC20Token_flattened.sol\":79391:79418  uint256[] memory extensions */\n      0x60\n        /* \"contracts/ERC20Token_flattened.sol\":79494:79507  _EIP712Name() */\n      tag_168\n        /* \"contracts/ERC20Token_flattened.sol\":79494:79505  _EIP712Name */\n      tag_169\n        /* \"contracts/ERC20Token_flattened.sol\":79494:79507  _EIP712Name() */\n      jump\t// in\n    tag_168:\n        /* \"contracts/ERC20Token_flattened.sol\":79521:79537  _EIP712Version() */\n      tag_170\n        /* \"contracts/ERC20Token_flattened.sol\":79521:79535  _EIP712Version */\n      tag_171\n        /* \"contracts/ERC20Token_flattened.sol\":79521:79537  _EIP712Version() */\n      jump\t// in\n    tag_170:\n        /* \"contracts/ERC20Token_flattened.sol\":79551:79564  block.chainid */\n      chainid\n        /* \"contracts/ERC20Token_flattened.sol\":79586:79590  this */\n      address\n        /* \"contracts/ERC20Token_flattened.sol\":79613:79614  0 */\n      0x00\n        /* \"contracts/ERC20Token_flattened.sol\":79605:79615  bytes32(0) */\n      dup1\n      shl\n        /* \"contracts/ERC20Token_flattened.sol\":79643:79644  0 */\n      0x00\n        /* \"contracts/ERC20Token_flattened.sol\":79629:79645  new uint256[](0) */\n      0xffffffffffffffff\n      dup2\n      gt\n      iszero\n      tag_172\n      jumpi\n      tag_173\n      tag_174\n      jump\t// in\n    tag_173:\n    tag_172:\n      mload(0x40)\n      swap1\n      dup1\n      dup3\n      mstore\n      dup1\n      0x20\n      mul\n      0x20\n      add\n      dup3\n      add\n      0x40\n      mstore\n      dup1\n      iszero\n      tag_175\n      jumpi\n      dup2\n      0x20\n      add\n      0x20\n      dup3\n      mul\n      dup1\n      calldatasize\n      dup4\n      calldatacopy\n      dup1\n      dup3\n      add\n      swap2\n      pop\n      pop\n      swap1\n      pop\n    tag_175:\n      pop\n        /* \"contracts/ERC20Token_flattened.sol\":79443:79655  return (... */\n      0x0f00000000000000000000000000000000000000000000000000000000000000\n      swap6\n      swap5\n      swap4\n      swap3\n      swap2\n      swap1\n      swap7\n      pop\n      swap7\n      pop\n      swap7\n      pop\n      swap7\n      pop\n      swap7\n      pop\n      swap7\n      pop\n      swap7\n      pop\n        /* \"contracts/ERC20Token_flattened.sol\":79105:79662  function eip712Domain()... */\n      swap1\n      swap2\n      swap3\n      swap4\n      swap5\n      swap6\n      swap7\n      jump\t// out\n        /* \"contracts/ERC20Token_flattened.sol\":28782:28867  function owner() public view virtual returns (address) {... */\n    tag_88:\n        /* \"contracts/ERC20Token_flattened.sol\":28828:28835  address */\n      0x00\n        /* \"contracts/ERC20Token_flattened.sol\":28854:28860  _owner */\n      0x05\n      0x01\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/ERC20Token_flattened.sol\":28847:28860  return _owner */\n      swap1\n      pop\n        /* \"contracts/ERC20Token_flattened.sol\":28782:28867  function owner() public view virtual returns (address) {... */\n      swap1\n      jump\t// out\n        /* \"contracts/ERC20Token_flattened.sol\":13137:13230  function symbol() public view virtual returns (string memory) {... */\n    tag_92:\n        /* \"contracts/ERC20Token_flattened.sol\":13184:13197  string memory */\n      0x60\n        /* \"contracts/ERC20Token_flattened.sol\":13216:13223  _symbol */\n      0x04\n        /* \"contracts/ERC20Token_flattened.sol\":13209:13223  return _symbol */\n      dup1\n      sload\n      tag_178\n      swap1\n      tag_112\n      jump\t// in\n    tag_178:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_179\n      swap1\n      tag_112\n      jump\t// in\n    tag_179:\n      dup1\n      iszero\n      tag_180\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_181\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_180)\n    tag_181:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_182:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_182\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_180:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"contracts/ERC20Token_flattened.sol\":13137:13230  function symbol() public view virtual returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"contracts/ERC20Token_flattened.sol\":14471:14649  function transfer(address to, uint256 value) public virtual returns (bool) {... */\n    tag_96:\n        /* \"contracts/ERC20Token_flattened.sol\":14540:14544  bool */\n      0x00\n        /* \"contracts/ERC20Token_flattened.sol\":14556:14569  address owner */\n      dup1\n        /* \"contracts/ERC20Token_flattened.sol\":14572:14584  _msgSender() */\n      tag_184\n        /* \"contracts/ERC20Token_flattened.sol\":14572:14582  _msgSender */\n      tag_119\n        /* \"contracts/ERC20Token_flattened.sol\":14572:14584  _msgSender() */\n      jump\t// in\n    tag_184:\n        /* \"contracts/ERC20Token_flattened.sol\":14556:14584  address owner = _msgSender() */\n      swap1\n      pop\n        /* \"contracts/ERC20Token_flattened.sol\":14594:14621  _transfer(owner, to, value) */\n      tag_185\n        /* \"contracts/ERC20Token_flattened.sol\":14604:14609  owner */\n      dup2\n        /* \"contracts/ERC20Token_flattened.sol\":14611:14613  to */\n      dup6\n        /* \"contracts/ERC20Token_flattened.sol\":14615:14620  value */\n      dup6\n        /* \"contracts/ERC20Token_flattened.sol\":14594:14603  _transfer */\n      tag_128\n        /* \"contracts/ERC20Token_flattened.sol\":14594:14621  _transfer(owner, to, value) */\n      jump\t// in\n    tag_185:\n        /* \"contracts/ERC20Token_flattened.sol\":14638:14642  true */\n      0x01\n        /* \"contracts/ERC20Token_flattened.sol\":14631:14642  return true */\n      swap2\n      pop\n      pop\n        /* \"contracts/ERC20Token_flattened.sol\":14471:14649  function transfer(address to, uint256 value) public virtual returns (bool) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/ERC20Token_flattened.sol\":83551:84223  function permit(... */\n    tag_101:\n        /* \"contracts/ERC20Token_flattened.sol\":83772:83780  deadline */\n      dup4\n        /* \"contracts/ERC20Token_flattened.sol\":83754:83769  block.timestamp */\n      timestamp\n        /* \"contracts/ERC20Token_flattened.sol\":83754:83780  block.timestamp > deadline */\n      gt\n        /* \"contracts/ERC20Token_flattened.sol\":83750:83847  if (block.timestamp > deadline) {... */\n      iszero\n      tag_187\n      jumpi\n        /* \"contracts/ERC20Token_flattened.sol\":83827:83835  deadline */\n      dup4\n        /* \"contracts/ERC20Token_flattened.sol\":83803:83836  ERC2612ExpiredSignature(deadline) */\n      mload(0x40)\n      0x6279130200000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_188\n      swap2\n      swap1\n      tag_41\n      jump\t// in\n    tag_188:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/ERC20Token_flattened.sol\":83750:83847  if (block.timestamp > deadline) {... */\n    tag_187:\n        /* \"contracts/ERC20Token_flattened.sol\":83857:83875  bytes32 structHash */\n      0x00\n        /* \"contracts/ERC20Token_flattened.sol\":82893:82988  keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\") */\n      0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9\n        /* \"contracts/ERC20Token_flattened.sol\":83916:83921  owner */\n      dup9\n        /* \"contracts/ERC20Token_flattened.sol\":83923:83930  spender */\n      dup9\n        /* \"contracts/ERC20Token_flattened.sol\":83932:83937  value */\n      dup9\n        /* \"contracts/ERC20Token_flattened.sol\":83939:83955  _useNonce(owner) */\n      tag_189\n        /* \"contracts/ERC20Token_flattened.sol\":83949:83954  owner */\n      dup13\n        /* \"contracts/ERC20Token_flattened.sol\":83939:83948  _useNonce */\n      tag_190\n        /* \"contracts/ERC20Token_flattened.sol\":83939:83955  _useNonce(owner) */\n      jump\t// in\n    tag_189:\n        /* \"contracts/ERC20Token_flattened.sol\":83957:83965  deadline */\n      dup10\n        /* \"contracts/ERC20Token_flattened.sol\":83888:83966  abi.encode(PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline) */\n      add(0x20, mload(0x40))\n      tag_191\n      swap7\n      swap6\n      swap5\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_192\n      jump\t// in\n    tag_191:\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n        /* \"contracts/ERC20Token_flattened.sol\":83878:83967  keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline)) */\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      keccak256\n        /* \"contracts/ERC20Token_flattened.sol\":83857:83967  bytes32 structHash = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline)) */\n      swap1\n      pop\n        /* \"contracts/ERC20Token_flattened.sol\":83978:83990  bytes32 hash */\n      0x00\n        /* \"contracts/ERC20Token_flattened.sol\":83993:84021  _hashTypedDataV4(structHash) */\n      tag_193\n        /* \"contracts/ERC20Token_flattened.sol\":84010:84020  structHash */\n      dup3\n        /* \"contracts/ERC20Token_flattened.sol\":83993:84009  _hashTypedDataV4 */\n      tag_194\n        /* \"contracts/ERC20Token_flattened.sol\":83993:84021  _hashTypedDataV4(structHash) */\n      jump\t// in\n    tag_193:\n        /* \"contracts/ERC20Token_flattened.sol\":83978:84021  bytes32 hash = _hashTypedDataV4(structHash) */\n      swap1\n      pop\n        /* \"contracts/ERC20Token_flattened.sol\":84032:84046  address signer */\n      0x00\n        /* \"contracts/ERC20Token_flattened.sol\":84049:84077  ECDSA.recover(hash, v, r, s) */\n      tag_195\n        /* \"contracts/ERC20Token_flattened.sol\":84063:84067  hash */\n      dup3\n        /* \"contracts/ERC20Token_flattened.sol\":84069:84070  v */\n      dup8\n        /* \"contracts/ERC20Token_flattened.sol\":84072:84073  r */\n      dup8\n        /* \"contracts/ERC20Token_flattened.sol\":84075:84076  s */\n      dup8\n        /* \"contracts/ERC20Token_flattened.sol\":84049:84062  ECDSA.recover */\n      tag_196\n        /* \"contracts/ERC20Token_flattened.sol\":84049:84077  ECDSA.recover(hash, v, r, s) */\n      jump\t// in\n    tag_195:\n        /* \"contracts/ERC20Token_flattened.sol\":84032:84077  address signer = ECDSA.recover(hash, v, r, s) */\n      swap1\n      pop\n        /* \"contracts/ERC20Token_flattened.sol\":84101:84106  owner */\n      dup10\n        /* \"contracts/ERC20Token_flattened.sol\":84091:84106  signer != owner */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/ERC20Token_flattened.sol\":84091:84097  signer */\n      dup2\n        /* \"contracts/ERC20Token_flattened.sol\":84091:84106  signer != owner */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"contracts/ERC20Token_flattened.sol\":84087:84175  if (signer != owner) {... */\n      tag_197\n      jumpi\n        /* \"contracts/ERC20Token_flattened.sol\":84150:84156  signer */\n      dup1\n        /* \"contracts/ERC20Token_flattened.sol\":84158:84163  owner */\n      dup11\n        /* \"contracts/ERC20Token_flattened.sol\":84129:84164  ERC2612InvalidSigner(signer, owner) */\n      mload(0x40)\n      0x4b800e4600000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_198\n      swap3\n      swap2\n      swap1\n      tag_199\n      jump\t// in\n    tag_198:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/ERC20Token_flattened.sol\":84087:84175  if (signer != owner) {... */\n    tag_197:\n        /* \"contracts/ERC20Token_flattened.sol\":84185:84216  _approve(owner, spender, value) */\n      tag_200\n        /* \"contracts/ERC20Token_flattened.sol\":84194:84199  owner */\n      dup11\n        /* \"contracts/ERC20Token_flattened.sol\":84201:84208  spender */\n      dup11\n        /* \"contracts/ERC20Token_flattened.sol\":84210:84215  value */\n      dup11\n        /* \"contracts/ERC20Token_flattened.sol\":84185:84193  _approve */\n      tag_121\n        /* \"contracts/ERC20Token_flattened.sol\":84185:84216  _approve(owner, spender, value) */\n      jump\t// in\n    tag_200:\n        /* \"contracts/ERC20Token_flattened.sol\":83740:84223  {... */\n      pop\n      pop\n      pop\n        /* \"contracts/ERC20Token_flattened.sol\":83551:84223  function permit(... */\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/ERC20Token_flattened.sol\":14707:14847  function allowance(address owner, address spender) public view virtual returns (uint256) {... */\n    tag_105:\n        /* \"contracts/ERC20Token_flattened.sol\":14787:14794  uint256 */\n      0x00\n        /* \"contracts/ERC20Token_flattened.sol\":14813:14824  _allowances */\n      0x01\n        /* \"contracts/ERC20Token_flattened.sol\":14813:14831  _allowances[owner] */\n      0x00\n        /* \"contracts/ERC20Token_flattened.sol\":14825:14830  owner */\n      dup5\n        /* \"contracts/ERC20Token_flattened.sol\":14813:14831  _allowances[owner] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/ERC20Token_flattened.sol\":14813:14840  _allowances[owner][spender] */\n      0x00\n        /* \"contracts/ERC20Token_flattened.sol\":14832:14839  spender */\n      dup4\n        /* \"contracts/ERC20Token_flattened.sol\":14813:14840  _allowances[owner][spender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"contracts/ERC20Token_flattened.sol\":14806:14840  return _allowances[owner][spender] */\n      swap1\n      pop\n        /* \"contracts/ERC20Token_flattened.sol\":14707:14847  function allowance(address owner, address spender) public view virtual returns (uint256) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/ERC20Token_flattened.sol\":29687:29902  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_109:\n        /* \"contracts/ERC20Token_flattened.sol\":28675:28688  _checkOwner() */\n      tag_203\n        /* \"contracts/ERC20Token_flattened.sol\":28675:28686  _checkOwner */\n      tag_135\n        /* \"contracts/ERC20Token_flattened.sol\":28675:28688  _checkOwner() */\n      jump\t// in\n    tag_203:\n        /* \"contracts/ERC20Token_flattened.sol\":29791:29792  0 */\n      0x00\n        /* \"contracts/ERC20Token_flattened.sol\":29771:29793  newOwner == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/ERC20Token_flattened.sol\":29771:29779  newOwner */\n      dup2\n        /* \"contracts/ERC20Token_flattened.sol\":29771:29793  newOwner == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"contracts/ERC20Token_flattened.sol\":29767:29858  if (newOwner == address(0)) {... */\n      tag_205\n      jumpi\n        /* \"contracts/ERC20Token_flattened.sol\":29844:29845  0 */\n      0x00\n        /* \"contracts/ERC20Token_flattened.sol\":29816:29847  OwnableInvalidOwner(address(0)) */\n      mload(0x40)\n      0x1e4fbdf700000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_206\n      swap2\n      swap1\n      tag_90\n      jump\t// in\n    tag_206:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/ERC20Token_flattened.sol\":29767:29858  if (newOwner == address(0)) {... */\n    tag_205:\n        /* \"contracts/ERC20Token_flattened.sol\":29867:29895  _transferOwnership(newOwner) */\n      tag_207\n        /* \"contracts/ERC20Token_flattened.sol\":29886:29894  newOwner */\n      dup2\n        /* \"contracts/ERC20Token_flattened.sol\":29867:29885  _transferOwnership */\n      tag_154\n        /* \"contracts/ERC20Token_flattened.sol\":29867:29895  _transferOwnership(newOwner) */\n      jump\t// in\n    tag_207:\n        /* \"contracts/ERC20Token_flattened.sol\":29687:29902  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n      pop\n      jump\t// out\n        /* \"contracts/ERC20Token_flattened.sol\":4175:4271  function _msgSender() internal view virtual returns (address) {... */\n    tag_119:\n        /* \"contracts/ERC20Token_flattened.sol\":4228:4235  address */\n      0x00\n        /* \"contracts/ERC20Token_flattened.sol\":4254:4264  msg.sender */\n      caller\n        /* \"contracts/ERC20Token_flattened.sol\":4247:4264  return msg.sender */\n      swap1\n      pop\n        /* \"contracts/ERC20Token_flattened.sol\":4175:4271  function _msgSender() internal view virtual returns (address) {... */\n      swap1\n      jump\t// out\n        /* \"contracts/ERC20Token_flattened.sol\":19850:19978  function _approve(address owner, address spender, uint256 value) internal {... */\n    tag_121:\n        /* \"contracts/ERC20Token_flattened.sol\":19934:19971  _approve(owner, spender, value, true) */\n      tag_210\n        /* \"contracts/ERC20Token_flattened.sol\":19943:19948  owner */\n      dup4\n        /* \"contracts/ERC20Token_flattened.sol\":19950:19957  spender */\n      dup4\n        /* \"contracts/ERC20Token_flattened.sol\":19959:19964  value */\n      dup4\n        /* \"contracts/ERC20Token_flattened.sol\":19966:19970  true */\n      0x01\n        /* \"contracts/ERC20Token_flattened.sol\":19934:19942  _approve */\n      tag_211\n        /* \"contracts/ERC20Token_flattened.sol\":19934:19971  _approve(owner, spender, value, true) */\n      jump\t// in\n    tag_210:\n        /* \"contracts/ERC20Token_flattened.sol\":19850:19978  function _approve(address owner, address spender, uint256 value) internal {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/ERC20Token_flattened.sol\":21524:22001  function _spendAllowance(address owner, address spender, uint256 value) internal virtual {... */\n    tag_126:\n        /* \"contracts/ERC20Token_flattened.sol\":21623:21647  uint256 currentAllowance */\n      0x00\n        /* \"contracts/ERC20Token_flattened.sol\":21650:21675  allowance(owner, spender) */\n      tag_213\n        /* \"contracts/ERC20Token_flattened.sol\":21660:21665  owner */\n      dup5\n        /* \"contracts/ERC20Token_flattened.sol\":21667:21674  spender */\n      dup5\n        /* \"contracts/ERC20Token_flattened.sol\":21650:21659  allowance */\n      tag_105\n        /* \"contracts/ERC20Token_flattened.sol\":21650:21675  allowance(owner, spender) */\n      jump\t// in\n    tag_213:\n        /* \"contracts/ERC20Token_flattened.sol\":21623:21675  uint256 currentAllowance = allowance(owner, spender) */\n      swap1\n      pop\n        /* \"contracts/ERC20Token_flattened.sol\":21709:21726  type(uint256).max */\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n        /* \"contracts/ERC20Token_flattened.sol\":21689:21705  currentAllowance */\n      dup2\n        /* \"contracts/ERC20Token_flattened.sol\":21689:21726  currentAllowance != type(uint256).max */\n      eq\n        /* \"contracts/ERC20Token_flattened.sol\":21685:21995  if (currentAllowance != type(uint256).max) {... */\n      tag_214\n      jumpi\n        /* \"contracts/ERC20Token_flattened.sol\":21765:21770  value */\n      dup2\n        /* \"contracts/ERC20Token_flattened.sol\":21746:21762  currentAllowance */\n      dup2\n        /* \"contracts/ERC20Token_flattened.sol\":21746:21770  currentAllowance < value */\n      lt\n        /* \"contracts/ERC20Token_flattened.sol\":21742:21872  if (currentAllowance < value) {... */\n      iszero\n      tag_215\n      jumpi\n        /* \"contracts/ERC20Token_flattened.sol\":21824:21831  spender */\n      dup3\n        /* \"contracts/ERC20Token_flattened.sol\":21833:21849  currentAllowance */\n      dup2\n        /* \"contracts/ERC20Token_flattened.sol\":21851:21856  value */\n      dup4\n        /* \"contracts/ERC20Token_flattened.sol\":21797:21857  ERC20InsufficientAllowance(spender, currentAllowance, value) */\n      mload(0x40)\n      0xfb8f41b200000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_216\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_217\n      jump\t// in\n    tag_216:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/ERC20Token_flattened.sol\":21742:21872  if (currentAllowance < value) {... */\n    tag_215:\n        /* \"contracts/ERC20Token_flattened.sol\":21913:21970  _approve(owner, spender, currentAllowance - value, false) */\n      tag_218\n        /* \"contracts/ERC20Token_flattened.sol\":21922:21927  owner */\n      dup5\n        /* \"contracts/ERC20Token_flattened.sol\":21929:21936  spender */\n      dup5\n        /* \"contracts/ERC20Token_flattened.sol\":21957:21962  value */\n      dup5\n        /* \"contracts/ERC20Token_flattened.sol\":21938:21954  currentAllowance */\n      dup5\n        /* \"contracts/ERC20Token_flattened.sol\":21938:21962  currentAllowance - value */\n      sub\n        /* \"contracts/ERC20Token_flattened.sol\":21964:21969  false */\n      0x00\n        /* \"contracts/ERC20Token_flattened.sol\":21913:21921  _approve */\n      tag_211\n        /* \"contracts/ERC20Token_flattened.sol\":21913:21970  _approve(owner, spender, currentAllowance - value, false) */\n      jump\t// in\n    tag_218:\n        /* \"contracts/ERC20Token_flattened.sol\":21685:21995  if (currentAllowance != type(uint256).max) {... */\n    tag_214:\n        /* \"contracts/ERC20Token_flattened.sol\":21613:22001  {... */\n      pop\n        /* \"contracts/ERC20Token_flattened.sol\":21524:22001  function _spendAllowance(address owner, address spender, uint256 value) internal virtual {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/ERC20Token_flattened.sol\":16517:16817  function _transfer(address from, address to, uint256 value) internal {... */\n    tag_128:\n        /* \"contracts/ERC20Token_flattened.sol\":16616:16617  0 */\n      0x00\n        /* \"contracts/ERC20Token_flattened.sol\":16600:16618  from == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/ERC20Token_flattened.sol\":16600:16604  from */\n      dup4\n        /* \"contracts/ERC20Token_flattened.sol\":16600:16618  from == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"contracts/ERC20Token_flattened.sol\":16596:16682  if (from == address(0)) {... */\n      tag_220\n      jumpi\n        /* \"contracts/ERC20Token_flattened.sol\":16668:16669  0 */\n      0x00\n        /* \"contracts/ERC20Token_flattened.sol\":16641:16671  ERC20InvalidSender(address(0)) */\n      mload(0x40)\n      0x96c6fd1e00000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_221\n      swap2\n      swap1\n      tag_90\n      jump\t// in\n    tag_221:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/ERC20Token_flattened.sol\":16596:16682  if (from == address(0)) {... */\n    tag_220:\n        /* \"contracts/ERC20Token_flattened.sol\":16709:16710  0 */\n      0x00\n        /* \"contracts/ERC20Token_flattened.sol\":16695:16711  to == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/ERC20Token_flattened.sol\":16695:16697  to */\n      dup3\n        /* \"contracts/ERC20Token_flattened.sol\":16695:16711  to == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"contracts/ERC20Token_flattened.sol\":16691:16777  if (to == address(0)) {... */\n      tag_222\n      jumpi\n        /* \"contracts/ERC20Token_flattened.sol\":16763:16764  0 */\n      0x00\n        /* \"contracts/ERC20Token_flattened.sol\":16734:16766  ERC20InvalidReceiver(address(0)) */\n      mload(0x40)\n      0xec442f0500000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_223\n      swap2\n      swap1\n      tag_90\n      jump\t// in\n    tag_223:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/ERC20Token_flattened.sol\":16691:16777  if (to == address(0)) {... */\n    tag_222:\n        /* \"contracts/ERC20Token_flattened.sol\":16786:16810  _update(from, to, value) */\n      tag_224\n        /* \"contracts/ERC20Token_flattened.sol\":16794:16798  from */\n      dup4\n        /* \"contracts/ERC20Token_flattened.sol\":16800:16802  to */\n      dup4\n        /* \"contracts/ERC20Token_flattened.sol\":16804:16809  value */\n      dup4\n        /* \"contracts/ERC20Token_flattened.sol\":16786:16793  _update */\n      tag_225\n        /* \"contracts/ERC20Token_flattened.sol\":16786:16810  _update(from, to, value) */\n      jump\t// in\n    tag_224:\n        /* \"contracts/ERC20Token_flattened.sol\":16517:16817  function _transfer(address from, address to, uint256 value) internal {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/ERC20Token_flattened.sol\":77806:78068  function _domainSeparatorV4() internal view returns (bytes32) {... */\n    tag_132:\n        /* \"contracts/ERC20Token_flattened.sol\":77859:77866  bytes32 */\n      0x00\n        /* \"contracts/ERC20Token_flattened.sol\":77899:77910  _cachedThis */\n      immutable(\"0xce191cb8321ca757450c20e87b57fa44746b6a87612dab9cf25801eef5ed67f8\")\n        /* \"contracts/ERC20Token_flattened.sol\":77882:77910  address(this) == _cachedThis */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/ERC20Token_flattened.sol\":77890:77894  this */\n      address\n        /* \"contracts/ERC20Token_flattened.sol\":77882:77910  address(this) == _cachedThis */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"contracts/ERC20Token_flattened.sol\":77882:77945  address(this) == _cachedThis && block.chainid == _cachedChainId */\n      dup1\n      iszero\n      tag_227\n      jumpi\n      pop\n        /* \"contracts/ERC20Token_flattened.sol\":77931:77945  _cachedChainId */\n      immutable(\"0x1a100bb1148e9e506f9ba8ec1947d4f84b922b6e9d33f30c8d12f2e351bcf10c\")\n        /* \"contracts/ERC20Token_flattened.sol\":77914:77927  block.chainid */\n      chainid\n        /* \"contracts/ERC20Token_flattened.sol\":77914:77945  block.chainid == _cachedChainId */\n      eq\n        /* \"contracts/ERC20Token_flattened.sol\":77882:77945  address(this) == _cachedThis && block.chainid == _cachedChainId */\n    tag_227:\n        /* \"contracts/ERC20Token_flattened.sol\":77878:78062  if (address(this) == _cachedThis && block.chainid == _cachedChainId) {... */\n      iszero\n      tag_228\n      jumpi\n        /* \"contracts/ERC20Token_flattened.sol\":77968:77990  _cachedDomainSeparator */\n      immutable(\"0x29952515f5d57954abac5ab7b1327bd7bcbb5425c05d93673edc46b02d7cb56d\")\n        /* \"contracts/ERC20Token_flattened.sol\":77961:77990  return _cachedDomainSeparator */\n      swap1\n      pop\n      jump(tag_226)\n        /* \"contracts/ERC20Token_flattened.sol\":77878:78062  if (address(this) == _cachedThis && block.chainid == _cachedChainId) {... */\n    tag_228:\n        /* \"contracts/ERC20Token_flattened.sol\":78028:78051  _buildDomainSeparator() */\n      tag_230\n        /* \"contracts/ERC20Token_flattened.sol\":78028:78049  _buildDomainSeparator */\n      tag_231\n        /* \"contracts/ERC20Token_flattened.sol\":78028:78051  _buildDomainSeparator() */\n      jump\t// in\n    tag_230:\n        /* \"contracts/ERC20Token_flattened.sol\":78021:78051  return _buildDomainSeparator() */\n      swap1\n      pop\n        /* \"contracts/ERC20Token_flattened.sol\":77806:78068  function _domainSeparatorV4() internal view returns (bytes32) {... */\n    tag_226:\n      swap1\n      jump\t// out\n        /* \"contracts/ERC20Token_flattened.sol\":28940:29102  function _checkOwner() internal view virtual {... */\n    tag_135:\n        /* \"contracts/ERC20Token_flattened.sol\":29010:29022  _msgSender() */\n      tag_233\n        /* \"contracts/ERC20Token_flattened.sol\":29010:29020  _msgSender */\n      tag_119\n        /* \"contracts/ERC20Token_flattened.sol\":29010:29022  _msgSender() */\n      jump\t// in\n    tag_233:\n        /* \"contracts/ERC20Token_flattened.sol\":28999:29022  owner() != _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/ERC20Token_flattened.sol\":28999:29006  owner() */\n      tag_234\n        /* \"contracts/ERC20Token_flattened.sol\":28999:29004  owner */\n      tag_88\n        /* \"contracts/ERC20Token_flattened.sol\":28999:29006  owner() */\n      jump\t// in\n    tag_234:\n        /* \"contracts/ERC20Token_flattened.sol\":28999:29022  owner() != _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"contracts/ERC20Token_flattened.sol\":28995:29096  if (owner() != _msgSender()) {... */\n      tag_235\n      jumpi\n        /* \"contracts/ERC20Token_flattened.sol\":29072:29084  _msgSender() */\n      tag_236\n        /* \"contracts/ERC20Token_flattened.sol\":29072:29082  _msgSender */\n      tag_119\n        /* \"contracts/ERC20Token_flattened.sol\":29072:29084  _msgSender() */\n      jump\t// in\n    tag_236:\n        /* \"contracts/ERC20Token_flattened.sol\":29045:29085  OwnableUnauthorizedAccount(_msgSender()) */\n      mload(0x40)\n      0x118cdaa700000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_237\n      swap2\n      swap1\n      tag_90\n      jump\t// in\n    tag_237:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/ERC20Token_flattened.sol\":28995:29096  if (owner() != _msgSender()) {... */\n    tag_235:\n        /* \"contracts/ERC20Token_flattened.sol\":28940:29102  function _checkOwner() internal view virtual {... */\n      jump\t// out\n        /* \"contracts/ERC20Token_flattened.sol\":25831:25948  function _unpause() internal virtual whenPaused {... */\n    tag_138:\n        /* \"contracts/ERC20Token_flattened.sol\":24842:24858  _requirePaused() */\n      tag_239\n        /* \"contracts/ERC20Token_flattened.sol\":24842:24856  _requirePaused */\n      tag_240\n        /* \"contracts/ERC20Token_flattened.sol\":24842:24858  _requirePaused() */\n      jump\t// in\n    tag_239:\n        /* \"contracts/ERC20Token_flattened.sol\":25899:25904  false */\n      0x00\n        /* \"contracts/ERC20Token_flattened.sol\":25889:25896  _paused */\n      0x05\n      0x00\n        /* \"contracts/ERC20Token_flattened.sol\":25889:25904  _paused = false */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      iszero\n      iszero\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"contracts/ERC20Token_flattened.sol\":25919:25941  Unpaused(_msgSender()) */\n      0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa\n        /* \"contracts/ERC20Token_flattened.sol\":25928:25940  _msgSender() */\n      tag_242\n        /* \"contracts/ERC20Token_flattened.sol\":25928:25938  _msgSender */\n      tag_119\n        /* \"contracts/ERC20Token_flattened.sol\":25928:25940  _msgSender() */\n      jump\t// in\n    tag_242:\n        /* \"contracts/ERC20Token_flattened.sol\":25919:25941  Unpaused(_msgSender()) */\n      mload(0x40)\n      tag_243\n      swap2\n      swap1\n      tag_90\n      jump\t// in\n    tag_243:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log1\n        /* \"contracts/ERC20Token_flattened.sol\":25831:25948  function _unpause() internal virtual whenPaused {... */\n      jump\t// out\n        /* \"contracts/ERC20Token_flattened.sol\":18582:18790  function _mint(address account, uint256 value) internal {... */\n    tag_143:\n        /* \"contracts/ERC20Token_flattened.sol\":18671:18672  0 */\n      0x00\n        /* \"contracts/ERC20Token_flattened.sol\":18652:18673  account == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/ERC20Token_flattened.sol\":18652:18659  account */\n      dup3\n        /* \"contracts/ERC20Token_flattened.sol\":18652:18673  account == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"contracts/ERC20Token_flattened.sol\":18648:18739  if (account == address(0)) {... */\n      tag_245\n      jumpi\n        /* \"contracts/ERC20Token_flattened.sol\":18725:18726  0 */\n      0x00\n        /* \"contracts/ERC20Token_flattened.sol\":18696:18728  ERC20InvalidReceiver(address(0)) */\n      mload(0x40)\n      0xec442f0500000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_246\n      swap2\n      swap1\n      tag_90\n      jump\t// in\n    tag_246:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/ERC20Token_flattened.sol\":18648:18739  if (account == address(0)) {... */\n    tag_245:\n        /* \"contracts/ERC20Token_flattened.sol\":18748:18783  _update(address(0), account, value) */\n      tag_247\n        /* \"contracts/ERC20Token_flattened.sol\":18764:18765  0 */\n      0x00\n        /* \"contracts/ERC20Token_flattened.sol\":18768:18775  account */\n      dup4\n        /* \"contracts/ERC20Token_flattened.sol\":18777:18782  value */\n      dup4\n        /* \"contracts/ERC20Token_flattened.sol\":18748:18755  _update */\n      tag_225\n        /* \"contracts/ERC20Token_flattened.sol\":18748:18783  _update(address(0), account, value) */\n      jump\t// in\n    tag_247:\n        /* \"contracts/ERC20Token_flattened.sol\":18582:18790  function _mint(address account, uint256 value) internal {... */\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/ERC20Token_flattened.sol\":19108:19314  function _burn(address account, uint256 value) internal {... */\n    tag_147:\n        /* \"contracts/ERC20Token_flattened.sol\":19197:19198  0 */\n      0x00\n        /* \"contracts/ERC20Token_flattened.sol\":19178:19199  account == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/ERC20Token_flattened.sol\":19178:19185  account */\n      dup3\n        /* \"contracts/ERC20Token_flattened.sol\":19178:19199  account == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"contracts/ERC20Token_flattened.sol\":19174:19263  if (account == address(0)) {... */\n      tag_249\n      jumpi\n        /* \"contracts/ERC20Token_flattened.sol\":19249:19250  0 */\n      0x00\n        /* \"contracts/ERC20Token_flattened.sol\":19222:19252  ERC20InvalidSender(address(0)) */\n      mload(0x40)\n      0x96c6fd1e00000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_250\n      swap2\n      swap1\n      tag_90\n      jump\t// in\n    tag_250:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/ERC20Token_flattened.sol\":19174:19263  if (account == address(0)) {... */\n    tag_249:\n        /* \"contracts/ERC20Token_flattened.sol\":19272:19307  _update(account, address(0), value) */\n      tag_251\n        /* \"contracts/ERC20Token_flattened.sol\":19280:19287  account */\n      dup3\n        /* \"contracts/ERC20Token_flattened.sol\":19297:19298  0 */\n      0x00\n        /* \"contracts/ERC20Token_flattened.sol\":19301:19306  value */\n      dup4\n        /* \"contracts/ERC20Token_flattened.sol\":19272:19279  _update */\n      tag_225\n        /* \"contracts/ERC20Token_flattened.sol\":19272:19307  _update(account, address(0), value) */\n      jump\t// in\n    tag_251:\n        /* \"contracts/ERC20Token_flattened.sol\":19108:19314  function _burn(address account, uint256 value) internal {... */\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/ERC20Token_flattened.sol\":30056:30243  function _transferOwnership(address newOwner) internal virtual {... */\n    tag_154:\n        /* \"contracts/ERC20Token_flattened.sol\":30129:30145  address oldOwner */\n      0x00\n        /* \"contracts/ERC20Token_flattened.sol\":30148:30154  _owner */\n      0x05\n      0x01\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/ERC20Token_flattened.sol\":30129:30154  address oldOwner = _owner */\n      swap1\n      pop\n        /* \"contracts/ERC20Token_flattened.sol\":30173:30181  newOwner */\n      dup2\n        /* \"contracts/ERC20Token_flattened.sol\":30164:30170  _owner */\n      0x05\n      0x01\n        /* \"contracts/ERC20Token_flattened.sol\":30164:30181  _owner = newOwner */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xffffffffffffffffffffffffffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"contracts/ERC20Token_flattened.sol\":30227:30235  newOwner */\n      dup2\n        /* \"contracts/ERC20Token_flattened.sol\":30196:30236  OwnershipTransferred(oldOwner, newOwner) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/ERC20Token_flattened.sol\":30217:30225  oldOwner */\n      dup2\n        /* \"contracts/ERC20Token_flattened.sol\":30196:30236  OwnershipTransferred(oldOwner, newOwner) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n      mload(0x40)\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"contracts/ERC20Token_flattened.sol\":30119:30243  {... */\n      pop\n        /* \"contracts/ERC20Token_flattened.sol\":30056:30243  function _transferOwnership(address newOwner) internal virtual {... */\n      pop\n      jump\t// out\n        /* \"contracts/ERC20Token_flattened.sol\":81131:81238  function nonces(address owner) public view virtual returns (uint256) {... */\n    tag_161:\n        /* \"contracts/ERC20Token_flattened.sol\":81191:81198  uint256 */\n      0x00\n        /* \"contracts/ERC20Token_flattened.sol\":81217:81224  _nonces */\n      0x08\n        /* \"contracts/ERC20Token_flattened.sol\":81217:81231  _nonces[owner] */\n      0x00\n        /* \"contracts/ERC20Token_flattened.sol\":81225:81230  owner */\n      dup4\n        /* \"contracts/ERC20Token_flattened.sol\":81217:81231  _nonces[owner] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"contracts/ERC20Token_flattened.sol\":81210:81231  return _nonces[owner] */\n      swap1\n      pop\n        /* \"contracts/ERC20Token_flattened.sol\":81131:81238  function nonces(address owner) public view virtual returns (uint256) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/ERC20Token_flattened.sol\":25584:25699  function _pause() internal virtual whenNotPaused {... */\n    tag_166:\n        /* \"contracts/ERC20Token_flattened.sol\":24595:24614  _requireNotPaused() */\n      tag_255\n        /* \"contracts/ERC20Token_flattened.sol\":24595:24612  _requireNotPaused */\n      tag_256\n        /* \"contracts/ERC20Token_flattened.sol\":24595:24614  _requireNotPaused() */\n      jump\t// in\n    tag_255:\n        /* \"contracts/ERC20Token_flattened.sol\":25653:25657  true */\n      0x01\n        /* \"contracts/ERC20Token_flattened.sol\":25643:25650  _paused */\n      0x05\n      0x00\n        /* \"contracts/ERC20Token_flattened.sol\":25643:25657  _paused = true */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      iszero\n      iszero\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"contracts/ERC20Token_flattened.sol\":25672:25692  Paused(_msgSender()) */\n      0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258\n        /* \"contracts/ERC20Token_flattened.sol\":25679:25691  _msgSender() */\n      tag_258\n        /* \"contracts/ERC20Token_flattened.sol\":25679:25689  _msgSender */\n      tag_119\n        /* \"contracts/ERC20Token_flattened.sol\":25679:25691  _msgSender() */\n      jump\t// in\n    tag_258:\n        /* \"contracts/ERC20Token_flattened.sol\":25672:25692  Paused(_msgSender()) */\n      mload(0x40)\n      tag_259\n      swap2\n      swap1\n      tag_90\n      jump\t// in\n    tag_259:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log1\n        /* \"contracts/ERC20Token_flattened.sol\":25584:25699  function _pause() internal virtual whenNotPaused {... */\n      jump\t// out\n        /* \"contracts/ERC20Token_flattened.sol\":79982:80108  function _EIP712Name() internal view returns (string memory) {... */\n    tag_169:\n        /* \"contracts/ERC20Token_flattened.sol\":80028:80041  string memory */\n      0x60\n        /* \"contracts/ERC20Token_flattened.sol\":80060:80101  _name.toStringWithFallback(_nameFallback) */\n      tag_261\n        /* \"contracts/ERC20Token_flattened.sol\":80087:80100  _nameFallback */\n      0x06\n        /* \"contracts/ERC20Token_flattened.sol\":80060:80065  _name */\n      immutable(\"0xb8163922f365f2d54f6122835c04019c69b181c4b5bf7a62d07ca62e91817bd9\")\n        /* \"contracts/ERC20Token_flattened.sol\":80060:80086  _name.toStringWithFallback */\n      tag_262\n      swap1\n        /* \"contracts/ERC20Token_flattened.sol\":80060:80101  _name.toStringWithFallback(_nameFallback) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_261:\n        /* \"contracts/ERC20Token_flattened.sol\":80053:80101  return _name.toStringWithFallback(_nameFallback) */\n      swap1\n      pop\n        /* \"contracts/ERC20Token_flattened.sol\":79982:80108  function _EIP712Name() internal view returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"contracts/ERC20Token_flattened.sol\":80434:80569  function _EIP712Version() internal view returns (string memory) {... */\n    tag_171:\n        /* \"contracts/ERC20Token_flattened.sol\":80483:80496  string memory */\n      0x60\n        /* \"contracts/ERC20Token_flattened.sol\":80515:80562  _version.toStringWithFallback(_versionFallback) */\n      tag_264\n        /* \"contracts/ERC20Token_flattened.sol\":80545:80561  _versionFallback */\n      0x07\n        /* \"contracts/ERC20Token_flattened.sol\":80515:80523  _version */\n      immutable(\"0xef17f12455e22a45134579834cdca993c5eec3070954e76052dcfac9f22697b4\")\n        /* \"contracts/ERC20Token_flattened.sol\":80515:80544  _version.toStringWithFallback */\n      tag_262\n      swap1\n        /* \"contracts/ERC20Token_flattened.sol\":80515:80562  _version.toStringWithFallback(_versionFallback) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_264:\n        /* \"contracts/ERC20Token_flattened.sol\":80508:80562  return _version.toStringWithFallback(_versionFallback) */\n      swap1\n      pop\n        /* \"contracts/ERC20Token_flattened.sol\":80434:80569  function _EIP712Version() internal view returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"contracts/ERC20Token_flattened.sol\":81352:81747  function _useNonce(address owner) internal virtual returns (uint256) {... */\n    tag_190:\n        /* \"contracts/ERC20Token_flattened.sol\":81412:81419  uint256 */\n      0x00\n        /* \"contracts/ERC20Token_flattened.sol\":81714:81721  _nonces */\n      0x08\n        /* \"contracts/ERC20Token_flattened.sol\":81714:81728  _nonces[owner] */\n      0x00\n        /* \"contracts/ERC20Token_flattened.sol\":81722:81727  owner */\n      dup4\n        /* \"contracts/ERC20Token_flattened.sol\":81714:81728  _nonces[owner] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n        /* \"contracts/ERC20Token_flattened.sol\":81714:81730  _nonces[owner]++ */\n      dup2\n      sload\n      dup1\n      swap3\n      swap2\n      swap1\n      0x01\n      add\n      swap2\n      swap1\n      pop\n      sstore\n        /* \"contracts/ERC20Token_flattened.sol\":81707:81730  return _nonces[owner]++ */\n      swap1\n      pop\n        /* \"contracts/ERC20Token_flattened.sol\":81352:81747  function _useNonce(address owner) internal virtual returns (uint256) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/ERC20Token_flattened.sol\":78878:79054  function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {... */\n    tag_194:\n        /* \"contracts/ERC20Token_flattened.sol\":78955:78962  bytes32 */\n      0x00\n        /* \"contracts/ERC20Token_flattened.sol\":78981:79047  MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash) */\n      tag_267\n        /* \"contracts/ERC20Token_flattened.sol\":79014:79034  _domainSeparatorV4() */\n      tag_268\n        /* \"contracts/ERC20Token_flattened.sol\":79014:79032  _domainSeparatorV4 */\n      tag_132\n        /* \"contracts/ERC20Token_flattened.sol\":79014:79034  _domainSeparatorV4() */\n      jump\t// in\n    tag_268:\n        /* \"contracts/ERC20Token_flattened.sol\":79036:79046  structHash */\n      dup4\n        /* \"contracts/ERC20Token_flattened.sol\":78981:79013  MessageHashUtils.toTypedDataHash */\n      tag_269\n        /* \"contracts/ERC20Token_flattened.sol\":78981:79047  MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash) */\n      jump\t// in\n    tag_267:\n        /* \"contracts/ERC20Token_flattened.sol\":78974:79047  return MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash) */\n      swap1\n      pop\n        /* \"contracts/ERC20Token_flattened.sol\":78878:79054  function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/ERC20Token_flattened.sol\":40929:41189  function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {... */\n    tag_196:\n        /* \"contracts/ERC20Token_flattened.sol\":41014:41021  address */\n      0x00\n        /* \"contracts/ERC20Token_flattened.sol\":41034:41051  address recovered */\n      dup1\n        /* \"contracts/ERC20Token_flattened.sol\":41053:41071  RecoverError error */\n      0x00\n        /* \"contracts/ERC20Token_flattened.sol\":41073:41089  bytes32 errorArg */\n      dup1\n        /* \"contracts/ERC20Token_flattened.sol\":41093:41118  tryRecover(hash, v, r, s) */\n      tag_271\n        /* \"contracts/ERC20Token_flattened.sol\":41104:41108  hash */\n      dup9\n        /* \"contracts/ERC20Token_flattened.sol\":41110:41111  v */\n      dup9\n        /* \"contracts/ERC20Token_flattened.sol\":41113:41114  r */\n      dup9\n        /* \"contracts/ERC20Token_flattened.sol\":41116:41117  s */\n      dup9\n        /* \"contracts/ERC20Token_flattened.sol\":41093:41103  tryRecover */\n      tag_272\n        /* \"contracts/ERC20Token_flattened.sol\":41093:41118  tryRecover(hash, v, r, s) */\n      jump\t// in\n    tag_271:\n        /* \"contracts/ERC20Token_flattened.sol\":41033:41118  (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s) */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      pop\n        /* \"contracts/ERC20Token_flattened.sol\":41128:41156  _throwError(error, errorArg) */\n      tag_273\n        /* \"contracts/ERC20Token_flattened.sol\":41140:41145  error */\n      dup3\n        /* \"contracts/ERC20Token_flattened.sol\":41147:41155  errorArg */\n      dup3\n        /* \"contracts/ERC20Token_flattened.sol\":41128:41139  _throwError */\n      tag_274\n        /* \"contracts/ERC20Token_flattened.sol\":41128:41156  _throwError(error, errorArg) */\n      jump\t// in\n    tag_273:\n        /* \"contracts/ERC20Token_flattened.sol\":41173:41182  recovered */\n      dup3\n        /* \"contracts/ERC20Token_flattened.sol\":41166:41182  return recovered */\n      swap4\n      pop\n      pop\n      pop\n      pop\n        /* \"contracts/ERC20Token_flattened.sol\":40929:41189  function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {... */\n      swap5\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/ERC20Token_flattened.sol\":20810:21242  function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {... */\n    tag_211:\n        /* \"contracts/ERC20Token_flattened.sol\":20939:20940  0 */\n      0x00\n        /* \"contracts/ERC20Token_flattened.sol\":20922:20941  owner == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/ERC20Token_flattened.sol\":20922:20927  owner */\n      dup5\n        /* \"contracts/ERC20Token_flattened.sol\":20922:20941  owner == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"contracts/ERC20Token_flattened.sol\":20918:21007  if (owner == address(0)) {... */\n      tag_276\n      jumpi\n        /* \"contracts/ERC20Token_flattened.sol\":20993:20994  0 */\n      0x00\n        /* \"contracts/ERC20Token_flattened.sol\":20964:20996  ERC20InvalidApprover(address(0)) */\n      mload(0x40)\n      0xe602df0500000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_277\n      swap2\n      swap1\n      tag_90\n      jump\t// in\n    tag_277:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/ERC20Token_flattened.sol\":20918:21007  if (owner == address(0)) {... */\n    tag_276:\n        /* \"contracts/ERC20Token_flattened.sol\":21039:21040  0 */\n      0x00\n        /* \"contracts/ERC20Token_flattened.sol\":21020:21041  spender == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/ERC20Token_flattened.sol\":21020:21027  spender */\n      dup4\n        /* \"contracts/ERC20Token_flattened.sol\":21020:21041  spender == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"contracts/ERC20Token_flattened.sol\":21016:21106  if (spender == address(0)) {... */\n      tag_278\n      jumpi\n        /* \"contracts/ERC20Token_flattened.sol\":21092:21093  0 */\n      0x00\n        /* \"contracts/ERC20Token_flattened.sol\":21064:21095  ERC20InvalidSpender(address(0)) */\n      mload(0x40)\n      0x94280d6200000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_279\n      swap2\n      swap1\n      tag_90\n      jump\t// in\n    tag_279:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/ERC20Token_flattened.sol\":21016:21106  if (spender == address(0)) {... */\n    tag_278:\n        /* \"contracts/ERC20Token_flattened.sol\":21145:21150  value */\n      dup2\n        /* \"contracts/ERC20Token_flattened.sol\":21115:21126  _allowances */\n      0x01\n        /* \"contracts/ERC20Token_flattened.sol\":21115:21133  _allowances[owner] */\n      0x00\n        /* \"contracts/ERC20Token_flattened.sol\":21127:21132  owner */\n      dup7\n        /* \"contracts/ERC20Token_flattened.sol\":21115:21133  _allowances[owner] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/ERC20Token_flattened.sol\":21115:21142  _allowances[owner][spender] */\n      0x00\n        /* \"contracts/ERC20Token_flattened.sol\":21134:21141  spender */\n      dup6\n        /* \"contracts/ERC20Token_flattened.sol\":21115:21142  _allowances[owner][spender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/ERC20Token_flattened.sol\":21115:21150  _allowances[owner][spender] = value */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/ERC20Token_flattened.sol\":21164:21173  emitEvent */\n      dup1\n        /* \"contracts/ERC20Token_flattened.sol\":21160:21236  if (emitEvent) {... */\n      iszero\n      tag_280\n      jumpi\n        /* \"contracts/ERC20Token_flattened.sol\":21210:21217  spender */\n      dup3\n        /* \"contracts/ERC20Token_flattened.sol\":21194:21225  Approval(owner, spender, value) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/ERC20Token_flattened.sol\":21203:21208  owner */\n      dup5\n        /* \"contracts/ERC20Token_flattened.sol\":21194:21225  Approval(owner, spender, value) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\n        /* \"contracts/ERC20Token_flattened.sol\":21219:21224  value */\n      dup5\n        /* \"contracts/ERC20Token_flattened.sol\":21194:21225  Approval(owner, spender, value) */\n      mload(0x40)\n      tag_281\n      swap2\n      swap1\n      tag_41\n      jump\t// in\n    tag_281:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"contracts/ERC20Token_flattened.sol\":21160:21236  if (emitEvent) {... */\n    tag_280:\n        /* \"contracts/ERC20Token_flattened.sol\":20810:21242  function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/ERC20Token_flattened.sol\":85338:85503  function _update(address from, address to, uint256 value)... */\n    tag_225:\n        /* \"contracts/ERC20Token_flattened.sol\":85466:85496  super._update(from, to, value) */\n      tag_283\n        /* \"contracts/ERC20Token_flattened.sol\":85480:85484  from */\n      dup4\n        /* \"contracts/ERC20Token_flattened.sol\":85486:85488  to */\n      dup4\n        /* \"contracts/ERC20Token_flattened.sol\":85490:85495  value */\n      dup4\n        /* \"contracts/ERC20Token_flattened.sol\":85466:85479  super._update */\n      tag_284\n        /* \"contracts/ERC20Token_flattened.sol\":85466:85496  super._update(from, to, value) */\n      jump\t// in\n    tag_283:\n        /* \"contracts/ERC20Token_flattened.sol\":85338:85503  function _update(address from, address to, uint256 value)... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/ERC20Token_flattened.sol\":78074:78253  function _buildDomainSeparator() private view returns (bytes32) {... */\n    tag_231:\n        /* \"contracts/ERC20Token_flattened.sol\":78129:78136  bytes32 */\n      0x00\n        /* \"contracts/ERC20Token_flattened.sol\":76040:76135  keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\") */\n      0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f\n        /* \"contracts/ERC20Token_flattened.sol\":78187:78198  _hashedName */\n      immutable(\"0xf40d89e88f976c0e4eebddab04ab11e8eb9a648fae2f79611f9b9f54d5ffefc8\")\n        /* \"contracts/ERC20Token_flattened.sol\":78200:78214  _hashedVersion */\n      immutable(\"0xc9c370779fd62a0c7c118a2246ccad4c103473123315c14d4e476e7f4b22843f\")\n        /* \"contracts/ERC20Token_flattened.sol\":78216:78229  block.chainid */\n      chainid\n        /* \"contracts/ERC20Token_flattened.sol\":78239:78243  this */\n      address\n        /* \"contracts/ERC20Token_flattened.sol\":78165:78245  abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)) */\n      add(0x20, mload(0x40))\n      tag_286\n      swap6\n      swap5\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_287\n      jump\t// in\n    tag_286:\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n        /* \"contracts/ERC20Token_flattened.sol\":78155:78246  keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this))) */\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      keccak256\n        /* \"contracts/ERC20Token_flattened.sol\":78148:78246  return keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this))) */\n      swap1\n      pop\n        /* \"contracts/ERC20Token_flattened.sol\":78074:78253  function _buildDomainSeparator() private view returns (bytes32) {... */\n      swap1\n      jump\t// out\n        /* \"contracts/ERC20Token_flattened.sol\":25323:25449  function _requirePaused() internal view virtual {... */\n    tag_240:\n        /* \"contracts/ERC20Token_flattened.sol\":25386:25394  paused() */\n      tag_289\n        /* \"contracts/ERC20Token_flattened.sol\":25386:25392  paused */\n      tag_65\n        /* \"contracts/ERC20Token_flattened.sol\":25386:25394  paused() */\n      jump\t// in\n    tag_289:\n        /* \"contracts/ERC20Token_flattened.sol\":25381:25443  if (!paused()) {... */\n      tag_290\n      jumpi\n        /* \"contracts/ERC20Token_flattened.sol\":25417:25432  ExpectedPause() */\n      mload(0x40)\n      0x8dfc202b00000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/ERC20Token_flattened.sol\":25381:25443  if (!paused()) {... */\n    tag_290:\n        /* \"contracts/ERC20Token_flattened.sol\":25323:25449  function _requirePaused() internal view virtual {... */\n      jump\t// out\n        /* \"contracts/ERC20Token_flattened.sol\":25123:25251  function _requireNotPaused() internal view virtual {... */\n    tag_256:\n        /* \"contracts/ERC20Token_flattened.sol\":25188:25196  paused() */\n      tag_292\n        /* \"contracts/ERC20Token_flattened.sol\":25188:25194  paused */\n      tag_65\n        /* \"contracts/ERC20Token_flattened.sol\":25188:25196  paused() */\n      jump\t// in\n    tag_292:\n        /* \"contracts/ERC20Token_flattened.sol\":25184:25245  if (paused()) {... */\n      iszero\n      tag_293\n      jumpi\n        /* \"contracts/ERC20Token_flattened.sol\":25219:25234  EnforcedPause() */\n      mload(0x40)\n      0xd93c066500000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/ERC20Token_flattened.sol\":25184:25245  if (paused()) {... */\n    tag_293:\n        /* \"contracts/ERC20Token_flattened.sol\":25123:25251  function _requireNotPaused() internal view virtual {... */\n      jump\t// out\n        /* \"contracts/ERC20Token_flattened.sol\":72410:72677  function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {... */\n    tag_262:\n        /* \"contracts/ERC20Token_flattened.sol\":72504:72517  string memory */\n      0x60\n        /* \"contracts/ERC20Token_flattened.sol\":70415:70481  0x00000000000000000000000000000000000000000000000000000000000000FF */\n      0xff\n        /* \"contracts/ERC20Token_flattened.sol\":72562:72579  FALLBACK_SENTINEL */\n      0x00\n      shl\n        /* \"contracts/ERC20Token_flattened.sol\":72552:72557  value */\n      dup4\n        /* \"contracts/ERC20Token_flattened.sol\":72533:72579  ShortString.unwrap(value) != FALLBACK_SENTINEL */\n      eq\n        /* \"contracts/ERC20Token_flattened.sol\":72529:72671  if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {... */\n      tag_295\n      jumpi\n        /* \"contracts/ERC20Token_flattened.sol\":72602:72617  toString(value) */\n      tag_296\n        /* \"contracts/ERC20Token_flattened.sol\":72611:72616  value */\n      dup4\n        /* \"contracts/ERC20Token_flattened.sol\":72602:72610  toString */\n      tag_297\n        /* \"contracts/ERC20Token_flattened.sol\":72602:72617  toString(value) */\n      jump\t// in\n    tag_296:\n        /* \"contracts/ERC20Token_flattened.sol\":72595:72617  return toString(value) */\n      swap1\n      pop\n      jump(tag_294)\n        /* \"contracts/ERC20Token_flattened.sol\":72529:72671  if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {... */\n    tag_295:\n        /* \"contracts/ERC20Token_flattened.sol\":72655:72660  store */\n      dup2\n        /* \"contracts/ERC20Token_flattened.sol\":72648:72660  return store */\n      dup1\n      sload\n      tag_299\n      swap1\n      tag_112\n      jump\t// in\n    tag_299:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_300\n      swap1\n      tag_112\n      jump\t// in\n    tag_300:\n      dup1\n      iszero\n      tag_301\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_302\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_301)\n    tag_302:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_303:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_303\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_301:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"contracts/ERC20Token_flattened.sol\":72410:72677  function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {... */\n    tag_294:\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/ERC20Token_flattened.sol\":64684:65085  function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {... */\n    tag_269:\n        /* \"contracts/ERC20Token_flattened.sol\":64777:64791  bytes32 digest */\n      0x00\n        /* \"contracts/ERC20Token_flattened.sol\":64886:64890  0x40 */\n      0x40\n        /* \"contracts/ERC20Token_flattened.sol\":64880:64891  mload(0x40) */\n      mload\n        /* \"contracts/ERC20Token_flattened.sol\":64916:64926  hex\"19_01\" */\n      0x1901000000000000000000000000000000000000000000000000000000000000\n        /* \"contracts/ERC20Token_flattened.sol\":64911:64914  ptr */\n      dup2\n        /* \"contracts/ERC20Token_flattened.sol\":64904:64927  mstore(ptr, hex\"19_01\") */\n      mstore\n        /* \"contracts/ERC20Token_flattened.sol\":64963:64978  domainSeparator */\n      dup4\n        /* \"contracts/ERC20Token_flattened.sol\":64956:64960  0x02 */\n      0x02\n        /* \"contracts/ERC20Token_flattened.sol\":64951:64954  ptr */\n      dup3\n        /* \"contracts/ERC20Token_flattened.sol\":64947:64961  add(ptr, 0x02) */\n      add\n        /* \"contracts/ERC20Token_flattened.sol\":64940:64979  mstore(add(ptr, 0x02), domainSeparator) */\n      mstore\n        /* \"contracts/ERC20Token_flattened.sol\":65015:65025  structHash */\n      dup3\n        /* \"contracts/ERC20Token_flattened.sol\":65008:65012  0x22 */\n      0x22\n        /* \"contracts/ERC20Token_flattened.sol\":65003:65006  ptr */\n      dup3\n        /* \"contracts/ERC20Token_flattened.sol\":64999:65013  add(ptr, 0x22) */\n      add\n        /* \"contracts/ERC20Token_flattened.sol\":64992:65026  mstore(add(ptr, 0x22), structHash) */\n      mstore\n        /* \"contracts/ERC20Token_flattened.sol\":65064:65068  0x42 */\n      0x42\n        /* \"contracts/ERC20Token_flattened.sol\":65059:65062  ptr */\n      dup2\n        /* \"contracts/ERC20Token_flattened.sol\":65049:65069  keccak256(ptr, 0x42) */\n      keccak256\n        /* \"contracts/ERC20Token_flattened.sol\":65039:65069  digest := keccak256(ptr, 0x42) */\n      swap2\n      pop\n        /* \"contracts/ERC20Token_flattened.sol\":64855:65079  {... */\n      pop\n        /* \"contracts/ERC20Token_flattened.sol\":64684:65085  function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/ERC20Token_flattened.sol\":39266:40796  function tryRecover(... */\n    tag_272:\n        /* \"contracts/ERC20Token_flattened.sol\":39392:39399  address */\n      0x00\n        /* \"contracts/ERC20Token_flattened.sol\":39401:39413  RecoverError */\n      dup1\n        /* \"contracts/ERC20Token_flattened.sol\":39415:39422  bytes32 */\n      0x00\n        /* \"contracts/ERC20Token_flattened.sol\":40325:40391  0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 */\n      0x7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0\n        /* \"contracts/ERC20Token_flattened.sol\":40320:40321  s */\n      dup5\n        /* \"contracts/ERC20Token_flattened.sol\":40312:40322  uint256(s) */\n      0x00\n      shr\n        /* \"contracts/ERC20Token_flattened.sol\":40312:40391  uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 */\n      gt\n        /* \"contracts/ERC20Token_flattened.sol\":40308:40472  if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {... */\n      iszero\n      tag_306\n      jumpi\n        /* \"contracts/ERC20Token_flattened.sol\":40423:40424  0 */\n      0x00\n        /* \"contracts/ERC20Token_flattened.sol\":40427:40457  RecoverError.InvalidSignatureS */\n      0x03\n        /* \"contracts/ERC20Token_flattened.sol\":40459:40460  s */\n      dup6\n        /* \"contracts/ERC20Token_flattened.sol\":40407:40461  return (address(0), RecoverError.InvalidSignatureS, s) */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      pop\n      jump(tag_305)\n        /* \"contracts/ERC20Token_flattened.sol\":40308:40472  if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {... */\n    tag_306:\n        /* \"contracts/ERC20Token_flattened.sol\":40566:40580  address signer */\n      0x00\n        /* \"contracts/ERC20Token_flattened.sol\":40583:40607  ecrecover(hash, v, r, s) */\n      0x01\n        /* \"contracts/ERC20Token_flattened.sol\":40593:40597  hash */\n      dup9\n        /* \"contracts/ERC20Token_flattened.sol\":40599:40600  v */\n      dup9\n        /* \"contracts/ERC20Token_flattened.sol\":40602:40603  r */\n      dup9\n        /* \"contracts/ERC20Token_flattened.sol\":40605:40606  s */\n      dup9\n        /* \"contracts/ERC20Token_flattened.sol\":40583:40607  ecrecover(hash, v, r, s) */\n      mload(0x40)\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x40\n      mstore\n      mload(0x40)\n      tag_307\n      swap5\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_308\n      jump\t// in\n    tag_307:\n      0x20\n      mload(0x40)\n      0x20\n      dup2\n      sub\n      swap1\n      dup1\n      dup5\n      sub\n      swap1\n      dup6\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_310\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_310:\n      pop\n      pop\n      pop\n      mload(sub(mload(0x40), 0x20))\n        /* \"contracts/ERC20Token_flattened.sol\":40566:40607  address signer = ecrecover(hash, v, r, s) */\n      swap1\n      pop\n        /* \"contracts/ERC20Token_flattened.sol\":40639:40640  0 */\n      0x00\n        /* \"contracts/ERC20Token_flattened.sol\":40621:40641  signer == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/ERC20Token_flattened.sol\":40621:40627  signer */\n      dup2\n        /* \"contracts/ERC20Token_flattened.sol\":40621:40641  signer == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"contracts/ERC20Token_flattened.sol\":40617:40730  if (signer == address(0)) {... */\n      tag_311\n      jumpi\n        /* \"contracts/ERC20Token_flattened.sol\":40673:40674  0 */\n      0x00\n        /* \"contracts/ERC20Token_flattened.sol\":40677:40706  RecoverError.InvalidSignature */\n      0x01\n        /* \"contracts/ERC20Token_flattened.sol\":40716:40717  0 */\n      0x00\n        /* \"contracts/ERC20Token_flattened.sol\":40708:40718  bytes32(0) */\n      dup1\n      shl\n        /* \"contracts/ERC20Token_flattened.sol\":40657:40719  return (address(0), RecoverError.InvalidSignature, bytes32(0)) */\n      swap4\n      pop\n      swap4\n      pop\n      swap4\n      pop\n      pop\n      jump(tag_305)\n        /* \"contracts/ERC20Token_flattened.sol\":40617:40730  if (signer == address(0)) {... */\n    tag_311:\n        /* \"contracts/ERC20Token_flattened.sol\":40748:40754  signer */\n      dup1\n        /* \"contracts/ERC20Token_flattened.sol\":40756:40776  RecoverError.NoError */\n      0x00\n        /* \"contracts/ERC20Token_flattened.sol\":40786:40787  0 */\n      dup1\n        /* \"contracts/ERC20Token_flattened.sol\":40778:40788  bytes32(0) */\n      0x00\n      shl\n        /* \"contracts/ERC20Token_flattened.sol\":40740:40789  return (signer, RecoverError.NoError, bytes32(0)) */\n      swap4\n      pop\n      swap4\n      pop\n      swap4\n      pop\n      pop\n        /* \"contracts/ERC20Token_flattened.sol\":39266:40796  function tryRecover(... */\n    tag_305:\n      swap5\n      pop\n      swap5\n      pop\n      swap5\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/ERC20Token_flattened.sol\":41322:41854  function _throwError(RecoverError error, bytes32 errorArg) private pure {... */\n    tag_274:\n        /* \"contracts/ERC20Token_flattened.sol\":41417:41437  RecoverError.NoError */\n      0x00\n        /* \"contracts/ERC20Token_flattened.sol\":41408:41437  error == RecoverError.NoError */\n      0x03\n      dup2\n      gt\n      iszero\n      tag_313\n      jumpi\n      tag_314\n      tag_315\n      jump\t// in\n    tag_314:\n    tag_313:\n        /* \"contracts/ERC20Token_flattened.sol\":41408:41413  error */\n      dup3\n        /* \"contracts/ERC20Token_flattened.sol\":41408:41437  error == RecoverError.NoError */\n      0x03\n      dup2\n      gt\n      iszero\n      tag_316\n      jumpi\n      tag_317\n      tag_315\n      jump\t// in\n    tag_317:\n    tag_316:\n      sub\n        /* \"contracts/ERC20Token_flattened.sol\":41404:41848  if (error == RecoverError.NoError) {... */\n      iszero\n        /* \"contracts/ERC20Token_flattened.sol\":41453:41460  return; */\n      tag_312\n        /* \"contracts/ERC20Token_flattened.sol\":41404:41848  if (error == RecoverError.NoError) {... */\n      jumpi\n        /* \"contracts/ERC20Token_flattened.sol\":41513:41542  RecoverError.InvalidSignature */\n      0x01\n        /* \"contracts/ERC20Token_flattened.sol\":41504:41542  error == RecoverError.InvalidSignature */\n      0x03\n      dup2\n      gt\n      iszero\n      tag_320\n      jumpi\n      tag_321\n      tag_315\n      jump\t// in\n    tag_321:\n    tag_320:\n        /* \"contracts/ERC20Token_flattened.sol\":41504:41509  error */\n      dup3\n        /* \"contracts/ERC20Token_flattened.sol\":41504:41542  error == RecoverError.InvalidSignature */\n      0x03\n      dup2\n      gt\n      iszero\n      tag_322\n      jumpi\n      tag_323\n      tag_315\n      jump\t// in\n    tag_323:\n    tag_322:\n      sub\n        /* \"contracts/ERC20Token_flattened.sol\":41500:41848  if (error == RecoverError.InvalidSignature) {... */\n      tag_324\n      jumpi\n        /* \"contracts/ERC20Token_flattened.sol\":41565:41588  ECDSAInvalidSignature() */\n      mload(0x40)\n      0xf645eedf00000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/ERC20Token_flattened.sol\":41500:41848  if (error == RecoverError.InvalidSignature) {... */\n    tag_324:\n        /* \"contracts/ERC20Token_flattened.sol\":41618:41653  RecoverError.InvalidSignatureLength */\n      0x02\n        /* \"contracts/ERC20Token_flattened.sol\":41609:41653  error == RecoverError.InvalidSignatureLength */\n      0x03\n      dup2\n      gt\n      iszero\n      tag_326\n      jumpi\n      tag_327\n      tag_315\n      jump\t// in\n    tag_327:\n    tag_326:\n        /* \"contracts/ERC20Token_flattened.sol\":41609:41614  error */\n      dup3\n        /* \"contracts/ERC20Token_flattened.sol\":41609:41653  error == RecoverError.InvalidSignatureLength */\n      0x03\n      dup2\n      gt\n      iszero\n      tag_328\n      jumpi\n      tag_329\n      tag_315\n      jump\t// in\n    tag_329:\n    tag_328:\n      sub\n        /* \"contracts/ERC20Token_flattened.sol\":41605:41848  if (error == RecoverError.InvalidSignatureLength) {... */\n      tag_330\n      jumpi\n        /* \"contracts/ERC20Token_flattened.sol\":41712:41720  errorArg */\n      dup1\n        /* \"contracts/ERC20Token_flattened.sol\":41704:41721  uint256(errorArg) */\n      0x00\n      shr\n        /* \"contracts/ERC20Token_flattened.sol\":41676:41722  ECDSAInvalidSignatureLength(uint256(errorArg)) */\n      mload(0x40)\n      0xfce698f700000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_331\n      swap2\n      swap1\n      tag_41\n      jump\t// in\n    tag_331:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/ERC20Token_flattened.sol\":41605:41848  if (error == RecoverError.InvalidSignatureLength) {... */\n    tag_330:\n        /* \"contracts/ERC20Token_flattened.sol\":41752:41782  RecoverError.InvalidSignatureS */\n      0x03\n        /* \"contracts/ERC20Token_flattened.sol\":41743:41782  error == RecoverError.InvalidSignatureS */\n      dup1\n      dup2\n      gt\n      iszero\n      tag_333\n      jumpi\n      tag_334\n      tag_315\n      jump\t// in\n    tag_334:\n    tag_333:\n        /* \"contracts/ERC20Token_flattened.sol\":41743:41748  error */\n      dup3\n        /* \"contracts/ERC20Token_flattened.sol\":41743:41782  error == RecoverError.InvalidSignatureS */\n      0x03\n      dup2\n      gt\n      iszero\n      tag_335\n      jumpi\n      tag_336\n      tag_315\n      jump\t// in\n    tag_336:\n    tag_335:\n      sub\n        /* \"contracts/ERC20Token_flattened.sol\":41739:41848  if (error == RecoverError.InvalidSignatureS) {... */\n      tag_337\n      jumpi\n        /* \"contracts/ERC20Token_flattened.sol\":41828:41836  errorArg */\n      dup1\n        /* \"contracts/ERC20Token_flattened.sol\":41805:41837  ECDSAInvalidSignatureS(errorArg) */\n      mload(0x40)\n      0xd78bce0c00000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_338\n      swap2\n      swap1\n      tag_54\n      jump\t// in\n    tag_338:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/ERC20Token_flattened.sol\":41739:41848  if (error == RecoverError.InvalidSignatureS) {... */\n    tag_337:\n        /* \"contracts/ERC20Token_flattened.sol\":41322:41854  function _throwError(RecoverError error, bytes32 errorArg) private pure {... */\n    tag_312:\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/ERC20Token_flattened.sol\":27019:27164  function _update(address from, address to, uint256 value) internal virtual override whenNotPaused {... */\n    tag_284:\n        /* \"contracts/ERC20Token_flattened.sol\":24595:24614  _requireNotPaused() */\n      tag_340\n        /* \"contracts/ERC20Token_flattened.sol\":24595:24612  _requireNotPaused */\n      tag_256\n        /* \"contracts/ERC20Token_flattened.sol\":24595:24614  _requireNotPaused() */\n      jump\t// in\n    tag_340:\n        /* \"contracts/ERC20Token_flattened.sol\":27127:27157  super._update(from, to, value) */\n      tag_342\n        /* \"contracts/ERC20Token_flattened.sol\":27141:27145  from */\n      dup4\n        /* \"contracts/ERC20Token_flattened.sol\":27147:27149  to */\n      dup4\n        /* \"contracts/ERC20Token_flattened.sol\":27151:27156  value */\n      dup4\n        /* \"contracts/ERC20Token_flattened.sol\":27127:27140  super._update */\n      tag_343\n        /* \"contracts/ERC20Token_flattened.sol\":27127:27157  super._update(from, to, value) */\n      jump\t// in\n    tag_342:\n        /* \"contracts/ERC20Token_flattened.sol\":27019:27164  function _update(address from, address to, uint256 value) internal virtual override whenNotPaused {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/ERC20Token_flattened.sol\":71103:71508  function toString(ShortString sstr) internal pure returns (string memory) {... */\n    tag_297:\n        /* \"contracts/ERC20Token_flattened.sol\":71162:71175  string memory */\n      0x60\n        /* \"contracts/ERC20Token_flattened.sol\":71187:71198  uint256 len */\n      0x00\n        /* \"contracts/ERC20Token_flattened.sol\":71201:71217  byteLength(sstr) */\n      tag_345\n        /* \"contracts/ERC20Token_flattened.sol\":71212:71216  sstr */\n      dup4\n        /* \"contracts/ERC20Token_flattened.sol\":71201:71211  byteLength */\n      tag_346\n        /* \"contracts/ERC20Token_flattened.sol\":71201:71217  byteLength(sstr) */\n      jump\t// in\n    tag_345:\n        /* \"contracts/ERC20Token_flattened.sol\":71187:71217  uint256 len = byteLength(sstr) */\n      swap1\n      pop\n        /* \"contracts/ERC20Token_flattened.sol\":71305:71322  string memory str */\n      0x00\n        /* \"contracts/ERC20Token_flattened.sol\":71336:71338  32 */\n      0x20\n        /* \"contracts/ERC20Token_flattened.sol\":71325:71339  new string(32) */\n      0xffffffffffffffff\n      dup2\n      gt\n      iszero\n      tag_347\n      jumpi\n      tag_348\n      tag_174\n      jump\t// in\n    tag_348:\n    tag_347:\n      mload(0x40)\n      swap1\n      dup1\n      dup3\n      mstore\n      dup1\n      0x1f\n      add\n      not(0x1f)\n      and\n      0x20\n      add\n      dup3\n      add\n      0x40\n      mstore\n      dup1\n      iszero\n      tag_349\n      jumpi\n      dup2\n      0x20\n      add\n      0x01\n      dup3\n      mul\n      dup1\n      calldatasize\n      dup4\n      calldatacopy\n      dup1\n      dup3\n      add\n      swap2\n      pop\n      pop\n      swap1\n      pop\n    tag_349:\n      pop\n        /* \"contracts/ERC20Token_flattened.sol\":71305:71339  string memory str = new string(32) */\n      swap1\n      pop\n        /* \"contracts/ERC20Token_flattened.sol\":71427:71430  len */\n      dup2\n        /* \"contracts/ERC20Token_flattened.sol\":71422:71425  str */\n      dup2\n        /* \"contracts/ERC20Token_flattened.sol\":71415:71431  mstore(str, len) */\n      mstore\n        /* \"contracts/ERC20Token_flattened.sol\":71467:71471  sstr */\n      dup4\n        /* \"contracts/ERC20Token_flattened.sol\":71460:71464  0x20 */\n      0x20\n        /* \"contracts/ERC20Token_flattened.sol\":71455:71458  str */\n      dup3\n        /* \"contracts/ERC20Token_flattened.sol\":71451:71465  add(str, 0x20) */\n      add\n        /* \"contracts/ERC20Token_flattened.sol\":71444:71472  mstore(add(str, 0x20), sstr) */\n      mstore\n        /* \"contracts/ERC20Token_flattened.sol\":71498:71501  str */\n      dup1\n        /* \"contracts/ERC20Token_flattened.sol\":71491:71501  return str */\n      swap3\n      pop\n      pop\n      pop\n        /* \"contracts/ERC20Token_flattened.sol\":71103:71508  function toString(ShortString sstr) internal pure returns (string memory) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/ERC20Token_flattened.sol\":17132:18239  function _update(address from, address to, uint256 value) internal virtual {... */\n    tag_343:\n        /* \"contracts/ERC20Token_flattened.sol\":17237:17238  0 */\n      0x00\n        /* \"contracts/ERC20Token_flattened.sol\":17221:17239  from == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/ERC20Token_flattened.sol\":17221:17225  from */\n      dup4\n        /* \"contracts/ERC20Token_flattened.sol\":17221:17239  from == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"contracts/ERC20Token_flattened.sol\":17217:17757  if (from == address(0)) {... */\n      tag_351\n      jumpi\n        /* \"contracts/ERC20Token_flattened.sol\":17373:17378  value */\n      dup1\n        /* \"contracts/ERC20Token_flattened.sol\":17357:17369  _totalSupply */\n      0x02\n      0x00\n        /* \"contracts/ERC20Token_flattened.sol\":17357:17378  _totalSupply += value */\n      dup3\n      dup3\n      sload\n      tag_352\n      swap2\n      swap1\n      tag_353\n      jump\t// in\n    tag_352:\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/ERC20Token_flattened.sol\":17217:17757  if (from == address(0)) {... */\n      jump(tag_354)\n    tag_351:\n        /* \"contracts/ERC20Token_flattened.sol\":17409:17428  uint256 fromBalance */\n      0x00\n        /* \"contracts/ERC20Token_flattened.sol\":17431:17440  _balances */\n      dup1\n        /* \"contracts/ERC20Token_flattened.sol\":17431:17446  _balances[from] */\n      0x00\n        /* \"contracts/ERC20Token_flattened.sol\":17441:17445  from */\n      dup6\n        /* \"contracts/ERC20Token_flattened.sol\":17431:17446  _balances[from] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"contracts/ERC20Token_flattened.sol\":17409:17446  uint256 fromBalance = _balances[from] */\n      swap1\n      pop\n        /* \"contracts/ERC20Token_flattened.sol\":17478:17483  value */\n      dup2\n        /* \"contracts/ERC20Token_flattened.sol\":17464:17475  fromBalance */\n      dup2\n        /* \"contracts/ERC20Token_flattened.sol\":17464:17483  fromBalance < value */\n      lt\n        /* \"contracts/ERC20Token_flattened.sol\":17460:17575  if (fromBalance < value) {... */\n      iszero\n      tag_355\n      jumpi\n        /* \"contracts/ERC20Token_flattened.sol\":17535:17539  from */\n      dup4\n        /* \"contracts/ERC20Token_flattened.sol\":17541:17552  fromBalance */\n      dup2\n        /* \"contracts/ERC20Token_flattened.sol\":17554:17559  value */\n      dup4\n        /* \"contracts/ERC20Token_flattened.sol\":17510:17560  ERC20InsufficientBalance(from, fromBalance, value) */\n      mload(0x40)\n      0xe450d38c00000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_356\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_217\n      jump\t// in\n    tag_356:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/ERC20Token_flattened.sol\":17460:17575  if (fromBalance < value) {... */\n    tag_355:\n        /* \"contracts/ERC20Token_flattened.sol\":17727:17732  value */\n      dup2\n        /* \"contracts/ERC20Token_flattened.sol\":17713:17724  fromBalance */\n      dup2\n        /* \"contracts/ERC20Token_flattened.sol\":17713:17732  fromBalance - value */\n      sub\n        /* \"contracts/ERC20Token_flattened.sol\":17695:17704  _balances */\n      0x00\n        /* \"contracts/ERC20Token_flattened.sol\":17695:17710  _balances[from] */\n      dup1\n        /* \"contracts/ERC20Token_flattened.sol\":17705:17709  from */\n      dup7\n        /* \"contracts/ERC20Token_flattened.sol\":17695:17710  _balances[from] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"contracts/ERC20Token_flattened.sol\":17695:17732  _balances[from] = fromBalance - value */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/ERC20Token_flattened.sol\":17395:17757  {... */\n      pop\n        /* \"contracts/ERC20Token_flattened.sol\":17217:17757  if (from == address(0)) {... */\n    tag_354:\n        /* \"contracts/ERC20Token_flattened.sol\":17785:17786  0 */\n      0x00\n        /* \"contracts/ERC20Token_flattened.sol\":17771:17787  to == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/ERC20Token_flattened.sol\":17771:17773  to */\n      dup3\n        /* \"contracts/ERC20Token_flattened.sol\":17771:17787  to == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"contracts/ERC20Token_flattened.sol\":17767:18192  if (to == address(0)) {... */\n      tag_357\n      jumpi\n        /* \"contracts/ERC20Token_flattened.sol\":17950:17955  value */\n      dup1\n        /* \"contracts/ERC20Token_flattened.sol\":17934:17946  _totalSupply */\n      0x02\n      0x00\n        /* \"contracts/ERC20Token_flattened.sol\":17934:17955  _totalSupply -= value */\n      dup3\n      dup3\n      sload\n      sub\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/ERC20Token_flattened.sol\":17767:18192  if (to == address(0)) {... */\n      jump(tag_358)\n    tag_357:\n        /* \"contracts/ERC20Token_flattened.sol\":18162:18167  value */\n      dup1\n        /* \"contracts/ERC20Token_flattened.sol\":18145:18154  _balances */\n      0x00\n        /* \"contracts/ERC20Token_flattened.sol\":18145:18158  _balances[to] */\n      dup1\n        /* \"contracts/ERC20Token_flattened.sol\":18155:18157  to */\n      dup5\n        /* \"contracts/ERC20Token_flattened.sol\":18145:18158  _balances[to] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n        /* \"contracts/ERC20Token_flattened.sol\":18145:18167  _balances[to] += value */\n      dup3\n      dup3\n      sload\n      add\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/ERC20Token_flattened.sol\":17767:18192  if (to == address(0)) {... */\n    tag_358:\n        /* \"contracts/ERC20Token_flattened.sol\":18222:18224  to */\n      dup2\n        /* \"contracts/ERC20Token_flattened.sol\":18207:18232  Transfer(from, to, value) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/ERC20Token_flattened.sol\":18216:18220  from */\n      dup4\n        /* \"contracts/ERC20Token_flattened.sol\":18207:18232  Transfer(from, to, value) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n        /* \"contracts/ERC20Token_flattened.sol\":18226:18231  value */\n      dup4\n        /* \"contracts/ERC20Token_flattened.sol\":18207:18232  Transfer(from, to, value) */\n      mload(0x40)\n      tag_359\n      swap2\n      swap1\n      tag_41\n      jump\t// in\n    tag_359:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"contracts/ERC20Token_flattened.sol\":17132:18239  function _update(address from, address to, uint256 value) internal virtual {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/ERC20Token_flattened.sol\":71580:71825  function byteLength(ShortString sstr) internal pure returns (uint256) {... */\n    tag_346:\n        /* \"contracts/ERC20Token_flattened.sol\":71641:71648  uint256 */\n      0x00\n        /* \"contracts/ERC20Token_flattened.sol\":71660:71674  uint256 result */\n      dup1\n        /* \"contracts/ERC20Token_flattened.sol\":71713:71717  0xFF */\n      0xff\n        /* \"contracts/ERC20Token_flattened.sol\":71704:71708  sstr */\n      dup4\n        /* \"contracts/ERC20Token_flattened.sol\":71677:71710  uint256(ShortString.unwrap(sstr)) */\n      0x00\n      shr\n        /* \"contracts/ERC20Token_flattened.sol\":71677:71717  uint256(ShortString.unwrap(sstr)) & 0xFF */\n      and\n        /* \"contracts/ERC20Token_flattened.sol\":71660:71717  uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF */\n      swap1\n      pop\n        /* \"contracts/ERC20Token_flattened.sol\":71740:71742  31 */\n      0x1f\n        /* \"contracts/ERC20Token_flattened.sol\":71731:71737  result */\n      dup2\n        /* \"contracts/ERC20Token_flattened.sol\":71731:71742  result > 31 */\n      gt\n        /* \"contracts/ERC20Token_flattened.sol\":71727:71796  if (result > 31) {... */\n      iszero\n      tag_361\n      jumpi\n        /* \"contracts/ERC20Token_flattened.sol\":71765:71785  InvalidShortString() */\n      mload(0x40)\n      0xb3512b0c00000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"contracts/ERC20Token_flattened.sol\":71727:71796  if (result > 31) {... */\n    tag_361:\n        /* \"contracts/ERC20Token_flattened.sol\":71812:71818  result */\n      dup1\n        /* \"contracts/ERC20Token_flattened.sol\":71805:71818  return result */\n      swap2\n      pop\n      pop\n        /* \"contracts/ERC20Token_flattened.sol\":71580:71825  function byteLength(ShortString sstr) internal pure returns (uint256) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7:106   */\n    tag_362:\n        /* \"#utility.yul\":59:65   */\n      0x00\n        /* \"#utility.yul\":93:98   */\n      dup2\n        /* \"#utility.yul\":87:99   */\n      mload\n        /* \"#utility.yul\":77:99   */\n      swap1\n      pop\n        /* \"#utility.yul\":7:106   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":112:281   */\n    tag_363:\n        /* \"#utility.yul\":196:207   */\n      0x00\n        /* \"#utility.yul\":230:236   */\n      dup3\n        /* \"#utility.yul\":225:228   */\n      dup3\n        /* \"#utility.yul\":218:237   */\n      mstore\n        /* \"#utility.yul\":270:274   */\n      0x20\n        /* \"#utility.yul\":265:268   */\n      dup3\n        /* \"#utility.yul\":261:275   */\n      add\n        /* \"#utility.yul\":246:275   */\n      swap1\n      pop\n        /* \"#utility.yul\":112:281   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":287:533   */\n    tag_364:\n        /* \"#utility.yul\":368:369   */\n      0x00\n        /* \"#utility.yul\":378:491   */\n    tag_404:\n        /* \"#utility.yul\":392:398   */\n      dup4\n        /* \"#utility.yul\":389:390   */\n      dup2\n        /* \"#utility.yul\":386:399   */\n      lt\n        /* \"#utility.yul\":378:491   */\n      iszero\n      tag_406\n      jumpi\n        /* \"#utility.yul\":477:478   */\n      dup1\n        /* \"#utility.yul\":472:475   */\n      dup3\n        /* \"#utility.yul\":468:479   */\n      add\n        /* \"#utility.yul\":462:480   */\n      mload\n        /* \"#utility.yul\":458:459   */\n      dup2\n        /* \"#utility.yul\":453:456   */\n      dup5\n        /* \"#utility.yul\":449:460   */\n      add\n        /* \"#utility.yul\":442:481   */\n      mstore\n        /* \"#utility.yul\":414:416   */\n      0x20\n        /* \"#utility.yul\":411:412   */\n      dup2\n        /* \"#utility.yul\":407:417   */\n      add\n        /* \"#utility.yul\":402:417   */\n      swap1\n      pop\n        /* \"#utility.yul\":378:491   */\n      jump(tag_404)\n    tag_406:\n        /* \"#utility.yul\":525:526   */\n      0x00\n        /* \"#utility.yul\":516:522   */\n      dup5\n        /* \"#utility.yul\":511:514   */\n      dup5\n        /* \"#utility.yul\":507:523   */\n      add\n        /* \"#utility.yul\":500:527   */\n      mstore\n        /* \"#utility.yul\":349:533   */\n      pop\n        /* \"#utility.yul\":287:533   */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":539:641   */\n    tag_365:\n        /* \"#utility.yul\":580:586   */\n      0x00\n        /* \"#utility.yul\":631:633   */\n      0x1f\n        /* \"#utility.yul\":627:634   */\n      not\n        /* \"#utility.yul\":622:624   */\n      0x1f\n        /* \"#utility.yul\":615:620   */\n      dup4\n        /* \"#utility.yul\":611:625   */\n      add\n        /* \"#utility.yul\":607:635   */\n      and\n        /* \"#utility.yul\":597:635   */\n      swap1\n      pop\n        /* \"#utility.yul\":539:641   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":647:1024   */\n    tag_366:\n        /* \"#utility.yul\":735:738   */\n      0x00\n        /* \"#utility.yul\":763:802   */\n      tag_409\n        /* \"#utility.yul\":796:801   */\n      dup3\n        /* \"#utility.yul\":763:802   */\n      tag_362\n      jump\t// in\n    tag_409:\n        /* \"#utility.yul\":818:889   */\n      tag_410\n        /* \"#utility.yul\":882:888   */\n      dup2\n        /* \"#utility.yul\":877:880   */\n      dup6\n        /* \"#utility.yul\":818:889   */\n      tag_363\n      jump\t// in\n    tag_410:\n        /* \"#utility.yul\":811:889   */\n      swap4\n      pop\n        /* \"#utility.yul\":898:963   */\n      tag_411\n        /* \"#utility.yul\":956:962   */\n      dup2\n        /* \"#utility.yul\":951:954   */\n      dup6\n        /* \"#utility.yul\":944:948   */\n      0x20\n        /* \"#utility.yul\":937:942   */\n      dup7\n        /* \"#utility.yul\":933:949   */\n      add\n        /* \"#utility.yul\":898:963   */\n      tag_364\n      jump\t// in\n    tag_411:\n        /* \"#utility.yul\":988:1017   */\n      tag_412\n        /* \"#utility.yul\":1010:1016   */\n      dup2\n        /* \"#utility.yul\":988:1017   */\n      tag_365\n      jump\t// in\n    tag_412:\n        /* \"#utility.yul\":983:986   */\n      dup5\n        /* \"#utility.yul\":979:1018   */\n      add\n        /* \"#utility.yul\":972:1018   */\n      swap2\n      pop\n        /* \"#utility.yul\":739:1024   */\n      pop\n        /* \"#utility.yul\":647:1024   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1030:1343   */\n    tag_31:\n        /* \"#utility.yul\":1143:1147   */\n      0x00\n        /* \"#utility.yul\":1181:1183   */\n      0x20\n        /* \"#utility.yul\":1170:1179   */\n      dup3\n        /* \"#utility.yul\":1166:1184   */\n      add\n        /* \"#utility.yul\":1158:1184   */\n      swap1\n      pop\n        /* \"#utility.yul\":1230:1239   */\n      dup2\n        /* \"#utility.yul\":1224:1228   */\n      dup2\n        /* \"#utility.yul\":1220:1240   */\n      sub\n        /* \"#utility.yul\":1216:1217   */\n      0x00\n        /* \"#utility.yul\":1205:1214   */\n      dup4\n        /* \"#utility.yul\":1201:1218   */\n      add\n        /* \"#utility.yul\":1194:1241   */\n      mstore\n        /* \"#utility.yul\":1258:1336   */\n      tag_414\n        /* \"#utility.yul\":1331:1335   */\n      dup2\n        /* \"#utility.yul\":1322:1328   */\n      dup5\n        /* \"#utility.yul\":1258:1336   */\n      tag_366\n      jump\t// in\n    tag_414:\n        /* \"#utility.yul\":1250:1336   */\n      swap1\n      pop\n        /* \"#utility.yul\":1030:1343   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1430:1547   */\n    tag_368:\n        /* \"#utility.yul\":1539:1540   */\n      0x00\n        /* \"#utility.yul\":1536:1537   */\n      dup1\n        /* \"#utility.yul\":1529:1541   */\n      revert\n        /* \"#utility.yul\":1676:1802   */\n    tag_370:\n        /* \"#utility.yul\":1713:1720   */\n      0x00\n        /* \"#utility.yul\":1753:1795   */\n      0xffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":1746:1751   */\n      dup3\n        /* \"#utility.yul\":1742:1796   */\n      and\n        /* \"#utility.yul\":1731:1796   */\n      swap1\n      pop\n        /* \"#utility.yul\":1676:1802   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1808:1904   */\n    tag_371:\n        /* \"#utility.yul\":1845:1852   */\n      0x00\n        /* \"#utility.yul\":1874:1898   */\n      tag_420\n        /* \"#utility.yul\":1892:1897   */\n      dup3\n        /* \"#utility.yul\":1874:1898   */\n      tag_370\n      jump\t// in\n    tag_420:\n        /* \"#utility.yul\":1863:1898   */\n      swap1\n      pop\n        /* \"#utility.yul\":1808:1904   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1910:2032   */\n    tag_372:\n        /* \"#utility.yul\":1983:2007   */\n      tag_422\n        /* \"#utility.yul\":2001:2006   */\n      dup2\n        /* \"#utility.yul\":1983:2007   */\n      tag_371\n      jump\t// in\n    tag_422:\n        /* \"#utility.yul\":1976:1981   */\n      dup2\n        /* \"#utility.yul\":1973:2008   */\n      eq\n        /* \"#utility.yul\":1963:2026   */\n      tag_423\n      jumpi\n        /* \"#utility.yul\":2022:2023   */\n      0x00\n        /* \"#utility.yul\":2019:2020   */\n      dup1\n        /* \"#utility.yul\":2012:2024   */\n      revert\n        /* \"#utility.yul\":1963:2026   */\n    tag_423:\n        /* \"#utility.yul\":1910:2032   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2038:2177   */\n    tag_373:\n        /* \"#utility.yul\":2084:2089   */\n      0x00\n        /* \"#utility.yul\":2122:2128   */\n      dup2\n        /* \"#utility.yul\":2109:2129   */\n      calldataload\n        /* \"#utility.yul\":2100:2129   */\n      swap1\n      pop\n        /* \"#utility.yul\":2138:2171   */\n      tag_425\n        /* \"#utility.yul\":2165:2170   */\n      dup2\n        /* \"#utility.yul\":2138:2171   */\n      tag_372\n      jump\t// in\n    tag_425:\n        /* \"#utility.yul\":2038:2177   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2183:2260   */\n    tag_374:\n        /* \"#utility.yul\":2220:2227   */\n      0x00\n        /* \"#utility.yul\":2249:2254   */\n      dup2\n        /* \"#utility.yul\":2238:2254   */\n      swap1\n      pop\n        /* \"#utility.yul\":2183:2260   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2266:2388   */\n    tag_375:\n        /* \"#utility.yul\":2339:2363   */\n      tag_428\n        /* \"#utility.yul\":2357:2362   */\n      dup2\n        /* \"#utility.yul\":2339:2363   */\n      tag_374\n      jump\t// in\n    tag_428:\n        /* \"#utility.yul\":2332:2337   */\n      dup2\n        /* \"#utility.yul\":2329:2364   */\n      eq\n        /* \"#utility.yul\":2319:2382   */\n      tag_429\n      jumpi\n        /* \"#utility.yul\":2378:2379   */\n      0x00\n        /* \"#utility.yul\":2375:2376   */\n      dup1\n        /* \"#utility.yul\":2368:2380   */\n      revert\n        /* \"#utility.yul\":2319:2382   */\n    tag_429:\n        /* \"#utility.yul\":2266:2388   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2394:2533   */\n    tag_376:\n        /* \"#utility.yul\":2440:2445   */\n      0x00\n        /* \"#utility.yul\":2478:2484   */\n      dup2\n        /* \"#utility.yul\":2465:2485   */\n      calldataload\n        /* \"#utility.yul\":2456:2485   */\n      swap1\n      pop\n        /* \"#utility.yul\":2494:2527   */\n      tag_431\n        /* \"#utility.yul\":2521:2526   */\n      dup2\n        /* \"#utility.yul\":2494:2527   */\n      tag_375\n      jump\t// in\n    tag_431:\n        /* \"#utility.yul\":2394:2533   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2539:3013   */\n    tag_34:\n        /* \"#utility.yul\":2607:2613   */\n      0x00\n        /* \"#utility.yul\":2615:2621   */\n      dup1\n        /* \"#utility.yul\":2664:2666   */\n      0x40\n        /* \"#utility.yul\":2652:2661   */\n      dup4\n        /* \"#utility.yul\":2643:2650   */\n      dup6\n        /* \"#utility.yul\":2639:2662   */\n      sub\n        /* \"#utility.yul\":2635:2667   */\n      slt\n        /* \"#utility.yul\":2632:2751   */\n      iszero\n      tag_433\n      jumpi\n        /* \"#utility.yul\":2670:2749   */\n      tag_434\n      tag_368\n      jump\t// in\n    tag_434:\n        /* \"#utility.yul\":2632:2751   */\n    tag_433:\n        /* \"#utility.yul\":2790:2791   */\n      0x00\n        /* \"#utility.yul\":2815:2868   */\n      tag_435\n        /* \"#utility.yul\":2860:2867   */\n      dup6\n        /* \"#utility.yul\":2851:2857   */\n      dup3\n        /* \"#utility.yul\":2840:2849   */\n      dup7\n        /* \"#utility.yul\":2836:2858   */\n      add\n        /* \"#utility.yul\":2815:2868   */\n      tag_373\n      jump\t// in\n    tag_435:\n        /* \"#utility.yul\":2805:2868   */\n      swap3\n      pop\n        /* \"#utility.yul\":2761:2878   */\n      pop\n        /* \"#utility.yul\":2917:2919   */\n      0x20\n        /* \"#utility.yul\":2943:2996   */\n      tag_436\n        /* \"#utility.yul\":2988:2995   */\n      dup6\n        /* \"#utility.yul\":2979:2985   */\n      dup3\n        /* \"#utility.yul\":2968:2977   */\n      dup7\n        /* \"#utility.yul\":2964:2986   */\n      add\n        /* \"#utility.yul\":2943:2996   */\n      tag_376\n      jump\t// in\n    tag_436:\n        /* \"#utility.yul\":2933:2996   */\n      swap2\n      pop\n        /* \"#utility.yul\":2888:3006   */\n      pop\n        /* \"#utility.yul\":2539:3013   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3019:3109   */\n    tag_377:\n        /* \"#utility.yul\":3053:3060   */\n      0x00\n        /* \"#utility.yul\":3096:3101   */\n      dup2\n        /* \"#utility.yul\":3089:3102   */\n      iszero\n        /* \"#utility.yul\":3082:3103   */\n      iszero\n        /* \"#utility.yul\":3071:3103   */\n      swap1\n      pop\n        /* \"#utility.yul\":3019:3109   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3115:3224   */\n    tag_378:\n        /* \"#utility.yul\":3196:3217   */\n      tag_439\n        /* \"#utility.yul\":3211:3216   */\n      dup2\n        /* \"#utility.yul\":3196:3217   */\n      tag_377\n      jump\t// in\n    tag_439:\n        /* \"#utility.yul\":3191:3194   */\n      dup3\n        /* \"#utility.yul\":3184:3218   */\n      mstore\n        /* \"#utility.yul\":3115:3224   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3230:3440   */\n    tag_37:\n        /* \"#utility.yul\":3317:3321   */\n      0x00\n        /* \"#utility.yul\":3355:3357   */\n      0x20\n        /* \"#utility.yul\":3344:3353   */\n      dup3\n        /* \"#utility.yul\":3340:3358   */\n      add\n        /* \"#utility.yul\":3332:3358   */\n      swap1\n      pop\n        /* \"#utility.yul\":3368:3433   */\n      tag_441\n        /* \"#utility.yul\":3430:3431   */\n      0x00\n        /* \"#utility.yul\":3419:3428   */\n      dup4\n        /* \"#utility.yul\":3415:3432   */\n      add\n        /* \"#utility.yul\":3406:3412   */\n      dup5\n        /* \"#utility.yul\":3368:3433   */\n      tag_378\n      jump\t// in\n    tag_441:\n        /* \"#utility.yul\":3230:3440   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3446:3564   */\n    tag_379:\n        /* \"#utility.yul\":3533:3557   */\n      tag_443\n        /* \"#utility.yul\":3551:3556   */\n      dup2\n        /* \"#utility.yul\":3533:3557   */\n      tag_374\n      jump\t// in\n    tag_443:\n        /* \"#utility.yul\":3528:3531   */\n      dup3\n        /* \"#utility.yul\":3521:3558   */\n      mstore\n        /* \"#utility.yul\":3446:3564   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3570:3792   */\n    tag_41:\n        /* \"#utility.yul\":3663:3667   */\n      0x00\n        /* \"#utility.yul\":3701:3703   */\n      0x20\n        /* \"#utility.yul\":3690:3699   */\n      dup3\n        /* \"#utility.yul\":3686:3704   */\n      add\n        /* \"#utility.yul\":3678:3704   */\n      swap1\n      pop\n        /* \"#utility.yul\":3714:3785   */\n      tag_445\n        /* \"#utility.yul\":3782:3783   */\n      0x00\n        /* \"#utility.yul\":3771:3780   */\n      dup4\n        /* \"#utility.yul\":3767:3784   */\n      add\n        /* \"#utility.yul\":3758:3764   */\n      dup5\n        /* \"#utility.yul\":3714:3785   */\n      tag_379\n      jump\t// in\n    tag_445:\n        /* \"#utility.yul\":3570:3792   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3798:4417   */\n    tag_44:\n        /* \"#utility.yul\":3875:3881   */\n      0x00\n        /* \"#utility.yul\":3883:3889   */\n      dup1\n        /* \"#utility.yul\":3891:3897   */\n      0x00\n        /* \"#utility.yul\":3940:3942   */\n      0x60\n        /* \"#utility.yul\":3928:3937   */\n      dup5\n        /* \"#utility.yul\":3919:3926   */\n      dup7\n        /* \"#utility.yul\":3915:3938   */\n      sub\n        /* \"#utility.yul\":3911:3943   */\n      slt\n        /* \"#utility.yul\":3908:4027   */\n      iszero\n      tag_447\n      jumpi\n        /* \"#utility.yul\":3946:4025   */\n      tag_448\n      tag_368\n      jump\t// in\n    tag_448:\n        /* \"#utility.yul\":3908:4027   */\n    tag_447:\n        /* \"#utility.yul\":4066:4067   */\n      0x00\n        /* \"#utility.yul\":4091:4144   */\n      tag_449\n        /* \"#utility.yul\":4136:4143   */\n      dup7\n        /* \"#utility.yul\":4127:4133   */\n      dup3\n        /* \"#utility.yul\":4116:4125   */\n      dup8\n        /* \"#utility.yul\":4112:4134   */\n      add\n        /* \"#utility.yul\":4091:4144   */\n      tag_373\n      jump\t// in\n    tag_449:\n        /* \"#utility.yul\":4081:4144   */\n      swap4\n      pop\n        /* \"#utility.yul\":4037:4154   */\n      pop\n        /* \"#utility.yul\":4193:4195   */\n      0x20\n        /* \"#utility.yul\":4219:4272   */\n      tag_450\n        /* \"#utility.yul\":4264:4271   */\n      dup7\n        /* \"#utility.yul\":4255:4261   */\n      dup3\n        /* \"#utility.yul\":4244:4253   */\n      dup8\n        /* \"#utility.yul\":4240:4262   */\n      add\n        /* \"#utility.yul\":4219:4272   */\n      tag_373\n      jump\t// in\n    tag_450:\n        /* \"#utility.yul\":4209:4272   */\n      swap3\n      pop\n        /* \"#utility.yul\":4164:4282   */\n      pop\n        /* \"#utility.yul\":4321:4323   */\n      0x40\n        /* \"#utility.yul\":4347:4400   */\n      tag_451\n        /* \"#utility.yul\":4392:4399   */\n      dup7\n        /* \"#utility.yul\":4383:4389   */\n      dup3\n        /* \"#utility.yul\":4372:4381   */\n      dup8\n        /* \"#utility.yul\":4368:4390   */\n      add\n        /* \"#utility.yul\":4347:4400   */\n      tag_376\n      jump\t// in\n    tag_451:\n        /* \"#utility.yul\":4337:4400   */\n      swap2\n      pop\n        /* \"#utility.yul\":4292:4410   */\n      pop\n        /* \"#utility.yul\":3798:4417   */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      jump\t// out\n        /* \"#utility.yul\":4423:4509   */\n    tag_380:\n        /* \"#utility.yul\":4458:4465   */\n      0x00\n        /* \"#utility.yul\":4498:4502   */\n      0xff\n        /* \"#utility.yul\":4491:4496   */\n      dup3\n        /* \"#utility.yul\":4487:4503   */\n      and\n        /* \"#utility.yul\":4476:4503   */\n      swap1\n      pop\n        /* \"#utility.yul\":4423:4509   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4515:4627   */\n    tag_381:\n        /* \"#utility.yul\":4598:4620   */\n      tag_454\n        /* \"#utility.yul\":4614:4619   */\n      dup2\n        /* \"#utility.yul\":4598:4620   */\n      tag_380\n      jump\t// in\n    tag_454:\n        /* \"#utility.yul\":4593:4596   */\n      dup3\n        /* \"#utility.yul\":4586:4621   */\n      mstore\n        /* \"#utility.yul\":4515:4627   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4633:4847   */\n    tag_50:\n        /* \"#utility.yul\":4722:4726   */\n      0x00\n        /* \"#utility.yul\":4760:4762   */\n      0x20\n        /* \"#utility.yul\":4749:4758   */\n      dup3\n        /* \"#utility.yul\":4745:4763   */\n      add\n        /* \"#utility.yul\":4737:4763   */\n      swap1\n      pop\n        /* \"#utility.yul\":4773:4840   */\n      tag_456\n        /* \"#utility.yul\":4837:4838   */\n      0x00\n        /* \"#utility.yul\":4826:4835   */\n      dup4\n        /* \"#utility.yul\":4822:4839   */\n      add\n        /* \"#utility.yul\":4813:4819   */\n      dup5\n        /* \"#utility.yul\":4773:4840   */\n      tag_381\n      jump\t// in\n    tag_456:\n        /* \"#utility.yul\":4633:4847   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4853:4930   */\n    tag_382:\n        /* \"#utility.yul\":4890:4897   */\n      0x00\n        /* \"#utility.yul\":4919:4924   */\n      dup2\n        /* \"#utility.yul\":4908:4924   */\n      swap1\n      pop\n        /* \"#utility.yul\":4853:4930   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4936:5054   */\n    tag_383:\n        /* \"#utility.yul\":5023:5047   */\n      tag_459\n        /* \"#utility.yul\":5041:5046   */\n      dup2\n        /* \"#utility.yul\":5023:5047   */\n      tag_382\n      jump\t// in\n    tag_459:\n        /* \"#utility.yul\":5018:5021   */\n      dup3\n        /* \"#utility.yul\":5011:5048   */\n      mstore\n        /* \"#utility.yul\":4936:5054   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5060:5282   */\n    tag_54:\n        /* \"#utility.yul\":5153:5157   */\n      0x00\n        /* \"#utility.yul\":5191:5193   */\n      0x20\n        /* \"#utility.yul\":5180:5189   */\n      dup3\n        /* \"#utility.yul\":5176:5194   */\n      add\n        /* \"#utility.yul\":5168:5194   */\n      swap1\n      pop\n        /* \"#utility.yul\":5204:5275   */\n      tag_461\n        /* \"#utility.yul\":5272:5273   */\n      0x00\n        /* \"#utility.yul\":5261:5270   */\n      dup4\n        /* \"#utility.yul\":5257:5274   */\n      add\n        /* \"#utility.yul\":5248:5254   */\n      dup5\n        /* \"#utility.yul\":5204:5275   */\n      tag_383\n      jump\t// in\n    tag_461:\n        /* \"#utility.yul\":5060:5282   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5288:5617   */\n    tag_62:\n        /* \"#utility.yul\":5347:5353   */\n      0x00\n        /* \"#utility.yul\":5396:5398   */\n      0x20\n        /* \"#utility.yul\":5384:5393   */\n      dup3\n        /* \"#utility.yul\":5375:5382   */\n      dup5\n        /* \"#utility.yul\":5371:5394   */\n      sub\n        /* \"#utility.yul\":5367:5399   */\n      slt\n        /* \"#utility.yul\":5364:5483   */\n      iszero\n      tag_463\n      jumpi\n        /* \"#utility.yul\":5402:5481   */\n      tag_464\n      tag_368\n      jump\t// in\n    tag_464:\n        /* \"#utility.yul\":5364:5483   */\n    tag_463:\n        /* \"#utility.yul\":5522:5523   */\n      0x00\n        /* \"#utility.yul\":5547:5600   */\n      tag_465\n        /* \"#utility.yul\":5592:5599   */\n      dup5\n        /* \"#utility.yul\":5583:5589   */\n      dup3\n        /* \"#utility.yul\":5572:5581   */\n      dup6\n        /* \"#utility.yul\":5568:5590   */\n      add\n        /* \"#utility.yul\":5547:5600   */\n      tag_376\n      jump\t// in\n    tag_465:\n        /* \"#utility.yul\":5537:5600   */\n      swap2\n      pop\n        /* \"#utility.yul\":5493:5610   */\n      pop\n        /* \"#utility.yul\":5288:5617   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5623:5952   */\n    tag_69:\n        /* \"#utility.yul\":5682:5688   */\n      0x00\n        /* \"#utility.yul\":5731:5733   */\n      0x20\n        /* \"#utility.yul\":5719:5728   */\n      dup3\n        /* \"#utility.yul\":5710:5717   */\n      dup5\n        /* \"#utility.yul\":5706:5729   */\n      sub\n        /* \"#utility.yul\":5702:5734   */\n      slt\n        /* \"#utility.yul\":5699:5818   */\n      iszero\n      tag_467\n      jumpi\n        /* \"#utility.yul\":5737:5816   */\n      tag_468\n      tag_368\n      jump\t// in\n    tag_468:\n        /* \"#utility.yul\":5699:5818   */\n    tag_467:\n        /* \"#utility.yul\":5857:5858   */\n      0x00\n        /* \"#utility.yul\":5882:5935   */\n      tag_469\n        /* \"#utility.yul\":5927:5934   */\n      dup5\n        /* \"#utility.yul\":5918:5924   */\n      dup3\n        /* \"#utility.yul\":5907:5916   */\n      dup6\n        /* \"#utility.yul\":5903:5925   */\n      add\n        /* \"#utility.yul\":5882:5935   */\n      tag_373\n      jump\t// in\n    tag_469:\n        /* \"#utility.yul\":5872:5935   */\n      swap2\n      pop\n        /* \"#utility.yul\":5828:5945   */\n      pop\n        /* \"#utility.yul\":5623:5952   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5958:6107   */\n    tag_384:\n        /* \"#utility.yul\":5994:6001   */\n      0x00\n        /* \"#utility.yul\":6034:6100   */\n      0xff00000000000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":6027:6032   */\n      dup3\n        /* \"#utility.yul\":6023:6101   */\n      and\n        /* \"#utility.yul\":6012:6101   */\n      swap1\n      pop\n        /* \"#utility.yul\":5958:6107   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6113:6228   */\n    tag_385:\n        /* \"#utility.yul\":6198:6221   */\n      tag_472\n        /* \"#utility.yul\":6215:6220   */\n      dup2\n        /* \"#utility.yul\":6198:6221   */\n      tag_384\n      jump\t// in\n    tag_472:\n        /* \"#utility.yul\":6193:6196   */\n      dup3\n        /* \"#utility.yul\":6186:6222   */\n      mstore\n        /* \"#utility.yul\":6113:6228   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6234:6352   */\n    tag_386:\n        /* \"#utility.yul\":6321:6345   */\n      tag_474\n        /* \"#utility.yul\":6339:6344   */\n      dup2\n        /* \"#utility.yul\":6321:6345   */\n      tag_371\n      jump\t// in\n    tag_474:\n        /* \"#utility.yul\":6316:6319   */\n      dup3\n        /* \"#utility.yul\":6309:6346   */\n      mstore\n        /* \"#utility.yul\":6234:6352   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6358:6472   */\n    tag_387:\n        /* \"#utility.yul\":6425:6431   */\n      0x00\n        /* \"#utility.yul\":6459:6464   */\n      dup2\n        /* \"#utility.yul\":6453:6465   */\n      mload\n        /* \"#utility.yul\":6443:6465   */\n      swap1\n      pop\n        /* \"#utility.yul\":6358:6472   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6478:6662   */\n    tag_388:\n        /* \"#utility.yul\":6577:6588   */\n      0x00\n        /* \"#utility.yul\":6611:6617   */\n      dup3\n        /* \"#utility.yul\":6606:6609   */\n      dup3\n        /* \"#utility.yul\":6599:6618   */\n      mstore\n        /* \"#utility.yul\":6651:6655   */\n      0x20\n        /* \"#utility.yul\":6646:6649   */\n      dup3\n        /* \"#utility.yul\":6642:6656   */\n      add\n        /* \"#utility.yul\":6627:6656   */\n      swap1\n      pop\n        /* \"#utility.yul\":6478:6662   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6668:6800   */\n    tag_389:\n        /* \"#utility.yul\":6735:6739   */\n      0x00\n        /* \"#utility.yul\":6758:6761   */\n      dup2\n        /* \"#utility.yul\":6750:6761   */\n      swap1\n      pop\n        /* \"#utility.yul\":6788:6792   */\n      0x20\n        /* \"#utility.yul\":6783:6786   */\n      dup3\n        /* \"#utility.yul\":6779:6793   */\n      add\n        /* \"#utility.yul\":6771:6793   */\n      swap1\n      pop\n        /* \"#utility.yul\":6668:6800   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6806:6914   */\n    tag_390:\n        /* \"#utility.yul\":6883:6907   */\n      tag_479\n        /* \"#utility.yul\":6901:6906   */\n      dup2\n        /* \"#utility.yul\":6883:6907   */\n      tag_374\n      jump\t// in\n    tag_479:\n        /* \"#utility.yul\":6878:6881   */\n      dup3\n        /* \"#utility.yul\":6871:6908   */\n      mstore\n        /* \"#utility.yul\":6806:6914   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6920:7099   */\n    tag_391:\n        /* \"#utility.yul\":6989:6999   */\n      0x00\n        /* \"#utility.yul\":7010:7056   */\n      tag_481\n        /* \"#utility.yul\":7052:7055   */\n      dup4\n        /* \"#utility.yul\":7044:7050   */\n      dup4\n        /* \"#utility.yul\":7010:7056   */\n      tag_390\n      jump\t// in\n    tag_481:\n        /* \"#utility.yul\":7088:7092   */\n      0x20\n        /* \"#utility.yul\":7083:7086   */\n      dup4\n        /* \"#utility.yul\":7079:7093   */\n      add\n        /* \"#utility.yul\":7065:7093   */\n      swap1\n      pop\n        /* \"#utility.yul\":6920:7099   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7105:7218   */\n    tag_392:\n        /* \"#utility.yul\":7175:7179   */\n      0x00\n        /* \"#utility.yul\":7207:7211   */\n      0x20\n        /* \"#utility.yul\":7202:7205   */\n      dup3\n        /* \"#utility.yul\":7198:7212   */\n      add\n        /* \"#utility.yul\":7190:7212   */\n      swap1\n      pop\n        /* \"#utility.yul\":7105:7218   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7254:7986   */\n    tag_393:\n        /* \"#utility.yul\":7373:7376   */\n      0x00\n        /* \"#utility.yul\":7402:7456   */\n      tag_484\n        /* \"#utility.yul\":7450:7455   */\n      dup3\n        /* \"#utility.yul\":7402:7456   */\n      tag_387\n      jump\t// in\n    tag_484:\n        /* \"#utility.yul\":7472:7558   */\n      tag_485\n        /* \"#utility.yul\":7551:7557   */\n      dup2\n        /* \"#utility.yul\":7546:7549   */\n      dup6\n        /* \"#utility.yul\":7472:7558   */\n      tag_388\n      jump\t// in\n    tag_485:\n        /* \"#utility.yul\":7465:7558   */\n      swap4\n      pop\n        /* \"#utility.yul\":7582:7638   */\n      tag_486\n        /* \"#utility.yul\":7632:7637   */\n      dup4\n        /* \"#utility.yul\":7582:7638   */\n      tag_389\n      jump\t// in\n    tag_486:\n        /* \"#utility.yul\":7661:7668   */\n      dup1\n        /* \"#utility.yul\":7692:7693   */\n      0x00\n        /* \"#utility.yul\":7677:7961   */\n    tag_487:\n        /* \"#utility.yul\":7702:7708   */\n      dup4\n        /* \"#utility.yul\":7699:7700   */\n      dup2\n        /* \"#utility.yul\":7696:7709   */\n      lt\n        /* \"#utility.yul\":7677:7961   */\n      iszero\n      tag_489\n      jumpi\n        /* \"#utility.yul\":7778:7784   */\n      dup2\n        /* \"#utility.yul\":7772:7785   */\n      mload\n        /* \"#utility.yul\":7805:7868   */\n      tag_490\n        /* \"#utility.yul\":7864:7867   */\n      dup9\n        /* \"#utility.yul\":7849:7862   */\n      dup3\n        /* \"#utility.yul\":7805:7868   */\n      tag_391\n      jump\t// in\n    tag_490:\n        /* \"#utility.yul\":7798:7868   */\n      swap8\n      pop\n        /* \"#utility.yul\":7891:7951   */\n      tag_491\n        /* \"#utility.yul\":7944:7950   */\n      dup4\n        /* \"#utility.yul\":7891:7951   */\n      tag_392\n      jump\t// in\n    tag_491:\n        /* \"#utility.yul\":7881:7951   */\n      swap3\n      pop\n        /* \"#utility.yul\":7737:7961   */\n      pop\n        /* \"#utility.yul\":7724:7725   */\n      0x01\n        /* \"#utility.yul\":7721:7722   */\n      dup2\n        /* \"#utility.yul\":7717:7726   */\n      add\n        /* \"#utility.yul\":7712:7726   */\n      swap1\n      pop\n        /* \"#utility.yul\":7677:7961   */\n      jump(tag_487)\n    tag_489:\n        /* \"#utility.yul\":7681:7695   */\n      pop\n        /* \"#utility.yul\":7977:7980   */\n      dup6\n        /* \"#utility.yul\":7970:7980   */\n      swap4\n      pop\n        /* \"#utility.yul\":7378:7986   */\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":7254:7986   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7992:9207   */\n    tag_86:\n        /* \"#utility.yul\":8341:8345   */\n      0x00\n        /* \"#utility.yul\":8379:8382   */\n      0xe0\n        /* \"#utility.yul\":8368:8377   */\n      dup3\n        /* \"#utility.yul\":8364:8383   */\n      add\n        /* \"#utility.yul\":8356:8383   */\n      swap1\n      pop\n        /* \"#utility.yul\":8393:8462   */\n      tag_493\n        /* \"#utility.yul\":8459:8460   */\n      0x00\n        /* \"#utility.yul\":8448:8457   */\n      dup4\n        /* \"#utility.yul\":8444:8461   */\n      add\n        /* \"#utility.yul\":8435:8441   */\n      dup11\n        /* \"#utility.yul\":8393:8462   */\n      tag_385\n      jump\t// in\n    tag_493:\n        /* \"#utility.yul\":8509:8518   */\n      dup2\n        /* \"#utility.yul\":8503:8507   */\n      dup2\n        /* \"#utility.yul\":8499:8519   */\n      sub\n        /* \"#utility.yul\":8494:8496   */\n      0x20\n        /* \"#utility.yul\":8483:8492   */\n      dup4\n        /* \"#utility.yul\":8479:8497   */\n      add\n        /* \"#utility.yul\":8472:8520   */\n      mstore\n        /* \"#utility.yul\":8537:8615   */\n      tag_494\n        /* \"#utility.yul\":8610:8614   */\n      dup2\n        /* \"#utility.yul\":8601:8607   */\n      dup10\n        /* \"#utility.yul\":8537:8615   */\n      tag_366\n      jump\t// in\n    tag_494:\n        /* \"#utility.yul\":8529:8615   */\n      swap1\n      pop\n        /* \"#utility.yul\":8662:8671   */\n      dup2\n        /* \"#utility.yul\":8656:8660   */\n      dup2\n        /* \"#utility.yul\":8652:8672   */\n      sub\n        /* \"#utility.yul\":8647:8649   */\n      0x40\n        /* \"#utility.yul\":8636:8645   */\n      dup4\n        /* \"#utility.yul\":8632:8650   */\n      add\n        /* \"#utility.yul\":8625:8673   */\n      mstore\n        /* \"#utility.yul\":8690:8768   */\n      tag_495\n        /* \"#utility.yul\":8763:8767   */\n      dup2\n        /* \"#utility.yul\":8754:8760   */\n      dup9\n        /* \"#utility.yul\":8690:8768   */\n      tag_366\n      jump\t// in\n    tag_495:\n        /* \"#utility.yul\":8682:8768   */\n      swap1\n      pop\n        /* \"#utility.yul\":8778:8850   */\n      tag_496\n        /* \"#utility.yul\":8846:8848   */\n      0x60\n        /* \"#utility.yul\":8835:8844   */\n      dup4\n        /* \"#utility.yul\":8831:8849   */\n      add\n        /* \"#utility.yul\":8822:8828   */\n      dup8\n        /* \"#utility.yul\":8778:8850   */\n      tag_379\n      jump\t// in\n    tag_496:\n        /* \"#utility.yul\":8860:8933   */\n      tag_497\n        /* \"#utility.yul\":8928:8931   */\n      0x80\n        /* \"#utility.yul\":8917:8926   */\n      dup4\n        /* \"#utility.yul\":8913:8932   */\n      add\n        /* \"#utility.yul\":8904:8910   */\n      dup7\n        /* \"#utility.yul\":8860:8933   */\n      tag_386\n      jump\t// in\n    tag_497:\n        /* \"#utility.yul\":8943:9016   */\n      tag_498\n        /* \"#utility.yul\":9011:9014   */\n      0xa0\n        /* \"#utility.yul\":9000:9009   */\n      dup4\n        /* \"#utility.yul\":8996:9015   */\n      add\n        /* \"#utility.yul\":8987:8993   */\n      dup6\n        /* \"#utility.yul\":8943:9016   */\n      tag_383\n      jump\t// in\n    tag_498:\n        /* \"#utility.yul\":9064:9073   */\n      dup2\n        /* \"#utility.yul\":9058:9062   */\n      dup2\n        /* \"#utility.yul\":9054:9074   */\n      sub\n        /* \"#utility.yul\":9048:9051   */\n      0xc0\n        /* \"#utility.yul\":9037:9046   */\n      dup4\n        /* \"#utility.yul\":9033:9052   */\n      add\n        /* \"#utility.yul\":9026:9075   */\n      mstore\n        /* \"#utility.yul\":9092:9200   */\n      tag_499\n        /* \"#utility.yul\":9195:9199   */\n      dup2\n        /* \"#utility.yul\":9186:9192   */\n      dup5\n        /* \"#utility.yul\":9092:9200   */\n      tag_393\n      jump\t// in\n    tag_499:\n        /* \"#utility.yul\":9084:9200   */\n      swap1\n      pop\n        /* \"#utility.yul\":7992:9207   */\n      swap9\n      swap8\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9213:9435   */\n    tag_90:\n        /* \"#utility.yul\":9306:9310   */\n      0x00\n        /* \"#utility.yul\":9344:9346   */\n      0x20\n        /* \"#utility.yul\":9333:9342   */\n      dup3\n        /* \"#utility.yul\":9329:9347   */\n      add\n        /* \"#utility.yul\":9321:9347   */\n      swap1\n      pop\n        /* \"#utility.yul\":9357:9428   */\n      tag_501\n        /* \"#utility.yul\":9425:9426   */\n      0x00\n        /* \"#utility.yul\":9414:9423   */\n      dup4\n        /* \"#utility.yul\":9410:9427   */\n      add\n        /* \"#utility.yul\":9401:9407   */\n      dup5\n        /* \"#utility.yul\":9357:9428   */\n      tag_386\n      jump\t// in\n    tag_501:\n        /* \"#utility.yul\":9213:9435   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9441:9559   */\n    tag_394:\n        /* \"#utility.yul\":9512:9534   */\n      tag_503\n        /* \"#utility.yul\":9528:9533   */\n      dup2\n        /* \"#utility.yul\":9512:9534   */\n      tag_380\n      jump\t// in\n    tag_503:\n        /* \"#utility.yul\":9505:9510   */\n      dup2\n        /* \"#utility.yul\":9502:9535   */\n      eq\n        /* \"#utility.yul\":9492:9553   */\n      tag_504\n      jumpi\n        /* \"#utility.yul\":9549:9550   */\n      0x00\n        /* \"#utility.yul\":9546:9547   */\n      dup1\n        /* \"#utility.yul\":9539:9551   */\n      revert\n        /* \"#utility.yul\":9492:9553   */\n    tag_504:\n        /* \"#utility.yul\":9441:9559   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9565:9700   */\n    tag_395:\n        /* \"#utility.yul\":9609:9614   */\n      0x00\n        /* \"#utility.yul\":9647:9653   */\n      dup2\n        /* \"#utility.yul\":9634:9654   */\n      calldataload\n        /* \"#utility.yul\":9625:9654   */\n      swap1\n      pop\n        /* \"#utility.yul\":9663:9694   */\n      tag_506\n        /* \"#utility.yul\":9688:9693   */\n      dup2\n        /* \"#utility.yul\":9663:9694   */\n      tag_394\n      jump\t// in\n    tag_506:\n        /* \"#utility.yul\":9565:9700   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9706:9828   */\n    tag_396:\n        /* \"#utility.yul\":9779:9803   */\n      tag_508\n        /* \"#utility.yul\":9797:9802   */\n      dup2\n        /* \"#utility.yul\":9779:9803   */\n      tag_382\n      jump\t// in\n    tag_508:\n        /* \"#utility.yul\":9772:9777   */\n      dup2\n        /* \"#utility.yul\":9769:9804   */\n      eq\n        /* \"#utility.yul\":9759:9822   */\n      tag_509\n      jumpi\n        /* \"#utility.yul\":9818:9819   */\n      0x00\n        /* \"#utility.yul\":9815:9816   */\n      dup1\n        /* \"#utility.yul\":9808:9820   */\n      revert\n        /* \"#utility.yul\":9759:9822   */\n    tag_509:\n        /* \"#utility.yul\":9706:9828   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9834:9973   */\n    tag_397:\n        /* \"#utility.yul\":9880:9885   */\n      0x00\n        /* \"#utility.yul\":9918:9924   */\n      dup2\n        /* \"#utility.yul\":9905:9925   */\n      calldataload\n        /* \"#utility.yul\":9896:9925   */\n      swap1\n      pop\n        /* \"#utility.yul\":9934:9967   */\n      tag_511\n        /* \"#utility.yul\":9961:9966   */\n      dup2\n        /* \"#utility.yul\":9934:9967   */\n      tag_396\n      jump\t// in\n    tag_511:\n        /* \"#utility.yul\":9834:9973   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9979:11178   */\n    tag_100:\n        /* \"#utility.yul\":10090:10096   */\n      0x00\n        /* \"#utility.yul\":10098:10104   */\n      dup1\n        /* \"#utility.yul\":10106:10112   */\n      0x00\n        /* \"#utility.yul\":10114:10120   */\n      dup1\n        /* \"#utility.yul\":10122:10128   */\n      0x00\n        /* \"#utility.yul\":10130:10136   */\n      dup1\n        /* \"#utility.yul\":10138:10144   */\n      0x00\n        /* \"#utility.yul\":10187:10190   */\n      0xe0\n        /* \"#utility.yul\":10175:10184   */\n      dup9\n        /* \"#utility.yul\":10166:10173   */\n      dup11\n        /* \"#utility.yul\":10162:10185   */\n      sub\n        /* \"#utility.yul\":10158:10191   */\n      slt\n        /* \"#utility.yul\":10155:10275   */\n      iszero\n      tag_513\n      jumpi\n        /* \"#utility.yul\":10194:10273   */\n      tag_514\n      tag_368\n      jump\t// in\n    tag_514:\n        /* \"#utility.yul\":10155:10275   */\n    tag_513:\n        /* \"#utility.yul\":10314:10315   */\n      0x00\n        /* \"#utility.yul\":10339:10392   */\n      tag_515\n        /* \"#utility.yul\":10384:10391   */\n      dup11\n        /* \"#utility.yul\":10375:10381   */\n      dup3\n        /* \"#utility.yul\":10364:10373   */\n      dup12\n        /* \"#utility.yul\":10360:10382   */\n      add\n        /* \"#utility.yul\":10339:10392   */\n      tag_373\n      jump\t// in\n    tag_515:\n        /* \"#utility.yul\":10329:10392   */\n      swap8\n      pop\n        /* \"#utility.yul\":10285:10402   */\n      pop\n        /* \"#utility.yul\":10441:10443   */\n      0x20\n        /* \"#utility.yul\":10467:10520   */\n      tag_516\n        /* \"#utility.yul\":10512:10519   */\n      dup11\n        /* \"#utility.yul\":10503:10509   */\n      dup3\n        /* \"#utility.yul\":10492:10501   */\n      dup12\n        /* \"#utility.yul\":10488:10510   */\n      add\n        /* \"#utility.yul\":10467:10520   */\n      tag_373\n      jump\t// in\n    tag_516:\n        /* \"#utility.yul\":10457:10520   */\n      swap7\n      pop\n        /* \"#utility.yul\":10412:10530   */\n      pop\n        /* \"#utility.yul\":10569:10571   */\n      0x40\n        /* \"#utility.yul\":10595:10648   */\n      tag_517\n        /* \"#utility.yul\":10640:10647   */\n      dup11\n        /* \"#utility.yul\":10631:10637   */\n      dup3\n        /* \"#utility.yul\":10620:10629   */\n      dup12\n        /* \"#utility.yul\":10616:10638   */\n      add\n        /* \"#utility.yul\":10595:10648   */\n      tag_376\n      jump\t// in\n    tag_517:\n        /* \"#utility.yul\":10585:10648   */\n      swap6\n      pop\n        /* \"#utility.yul\":10540:10658   */\n      pop\n        /* \"#utility.yul\":10697:10699   */\n      0x60\n        /* \"#utility.yul\":10723:10776   */\n      tag_518\n        /* \"#utility.yul\":10768:10775   */\n      dup11\n        /* \"#utility.yul\":10759:10765   */\n      dup3\n        /* \"#utility.yul\":10748:10757   */\n      dup12\n        /* \"#utility.yul\":10744:10766   */\n      add\n        /* \"#utility.yul\":10723:10776   */\n      tag_376\n      jump\t// in\n    tag_518:\n        /* \"#utility.yul\":10713:10776   */\n      swap5\n      pop\n        /* \"#utility.yul\":10668:10786   */\n      pop\n        /* \"#utility.yul\":10825:10828   */\n      0x80\n        /* \"#utility.yul\":10852:10903   */\n      tag_519\n        /* \"#utility.yul\":10895:10902   */\n      dup11\n        /* \"#utility.yul\":10886:10892   */\n      dup3\n        /* \"#utility.yul\":10875:10884   */\n      dup12\n        /* \"#utility.yul\":10871:10893   */\n      add\n        /* \"#utility.yul\":10852:10903   */\n      tag_395\n      jump\t// in\n    tag_519:\n        /* \"#utility.yul\":10842:10903   */\n      swap4\n      pop\n        /* \"#utility.yul\":10796:10913   */\n      pop\n        /* \"#utility.yul\":10952:10955   */\n      0xa0\n        /* \"#utility.yul\":10979:11032   */\n      tag_520\n        /* \"#utility.yul\":11024:11031   */\n      dup11\n        /* \"#utility.yul\":11015:11021   */\n      dup3\n        /* \"#utility.yul\":11004:11013   */\n      dup12\n        /* \"#utility.yul\":11000:11022   */\n      add\n        /* \"#utility.yul\":10979:11032   */\n      tag_397\n      jump\t// in\n    tag_520:\n        /* \"#utility.yul\":10969:11032   */\n      swap3\n      pop\n        /* \"#utility.yul\":10923:11042   */\n      pop\n        /* \"#utility.yul\":11081:11084   */\n      0xc0\n        /* \"#utility.yul\":11108:11161   */\n      tag_521\n        /* \"#utility.yul\":11153:11160   */\n      dup11\n        /* \"#utility.yul\":11144:11150   */\n      dup3\n        /* \"#utility.yul\":11133:11142   */\n      dup12\n        /* \"#utility.yul\":11129:11151   */\n      add\n        /* \"#utility.yul\":11108:11161   */\n      tag_397\n      jump\t// in\n    tag_521:\n        /* \"#utility.yul\":11098:11161   */\n      swap2\n      pop\n        /* \"#utility.yul\":11052:11171   */\n      pop\n        /* \"#utility.yul\":9979:11178   */\n      swap3\n      swap6\n      swap9\n      swap2\n      swap5\n      swap8\n      pop\n      swap3\n      swap6\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11184:11658   */\n    tag_104:\n        /* \"#utility.yul\":11252:11258   */\n      0x00\n        /* \"#utility.yul\":11260:11266   */\n      dup1\n        /* \"#utility.yul\":11309:11311   */\n      0x40\n        /* \"#utility.yul\":11297:11306   */\n      dup4\n        /* \"#utility.yul\":11288:11295   */\n      dup6\n        /* \"#utility.yul\":11284:11307   */\n      sub\n        /* \"#utility.yul\":11280:11312   */\n      slt\n        /* \"#utility.yul\":11277:11396   */\n      iszero\n      tag_523\n      jumpi\n        /* \"#utility.yul\":11315:11394   */\n      tag_524\n      tag_368\n      jump\t// in\n    tag_524:\n        /* \"#utility.yul\":11277:11396   */\n    tag_523:\n        /* \"#utility.yul\":11435:11436   */\n      0x00\n        /* \"#utility.yul\":11460:11513   */\n      tag_525\n        /* \"#utility.yul\":11505:11512   */\n      dup6\n        /* \"#utility.yul\":11496:11502   */\n      dup3\n        /* \"#utility.yul\":11485:11494   */\n      dup7\n        /* \"#utility.yul\":11481:11503   */\n      add\n        /* \"#utility.yul\":11460:11513   */\n      tag_373\n      jump\t// in\n    tag_525:\n        /* \"#utility.yul\":11450:11513   */\n      swap3\n      pop\n        /* \"#utility.yul\":11406:11523   */\n      pop\n        /* \"#utility.yul\":11562:11564   */\n      0x20\n        /* \"#utility.yul\":11588:11641   */\n      tag_526\n        /* \"#utility.yul\":11633:11640   */\n      dup6\n        /* \"#utility.yul\":11624:11630   */\n      dup3\n        /* \"#utility.yul\":11613:11622   */\n      dup7\n        /* \"#utility.yul\":11609:11631   */\n      add\n        /* \"#utility.yul\":11588:11641   */\n      tag_373\n      jump\t// in\n    tag_526:\n        /* \"#utility.yul\":11578:11641   */\n      swap2\n      pop\n        /* \"#utility.yul\":11533:11651   */\n      pop\n        /* \"#utility.yul\":11184:11658   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11664:11844   */\n    tag_398:\n        /* \"#utility.yul\":11712:11789   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":11709:11710   */\n      0x00\n        /* \"#utility.yul\":11702:11790   */\n      mstore\n        /* \"#utility.yul\":11809:11813   */\n      0x22\n        /* \"#utility.yul\":11806:11807   */\n      0x04\n        /* \"#utility.yul\":11799:11814   */\n      mstore\n        /* \"#utility.yul\":11833:11837   */\n      0x24\n        /* \"#utility.yul\":11830:11831   */\n      0x00\n        /* \"#utility.yul\":11823:11838   */\n      revert\n        /* \"#utility.yul\":11850:12170   */\n    tag_112:\n        /* \"#utility.yul\":11894:11900   */\n      0x00\n        /* \"#utility.yul\":11931:11932   */\n      0x02\n        /* \"#utility.yul\":11925:11929   */\n      dup3\n        /* \"#utility.yul\":11921:11933   */\n      div\n        /* \"#utility.yul\":11911:11933   */\n      swap1\n      pop\n        /* \"#utility.yul\":11978:11979   */\n      0x01\n        /* \"#utility.yul\":11972:11976   */\n      dup3\n        /* \"#utility.yul\":11968:11980   */\n      and\n        /* \"#utility.yul\":11999:12017   */\n      dup1\n        /* \"#utility.yul\":11989:12070   */\n      tag_529\n      jumpi\n        /* \"#utility.yul\":12055:12059   */\n      0x7f\n        /* \"#utility.yul\":12047:12053   */\n      dup3\n        /* \"#utility.yul\":12043:12060   */\n      and\n        /* \"#utility.yul\":12033:12060   */\n      swap2\n      pop\n        /* \"#utility.yul\":11989:12070   */\n    tag_529:\n        /* \"#utility.yul\":12117:12119   */\n      0x20\n        /* \"#utility.yul\":12109:12115   */\n      dup3\n        /* \"#utility.yul\":12106:12120   */\n      lt\n        /* \"#utility.yul\":12086:12104   */\n      dup2\n        /* \"#utility.yul\":12083:12121   */\n      sub\n        /* \"#utility.yul\":12080:12164   */\n      tag_530\n      jumpi\n        /* \"#utility.yul\":12136:12154   */\n      tag_531\n      tag_398\n      jump\t// in\n    tag_531:\n        /* \"#utility.yul\":12080:12164   */\n    tag_530:\n        /* \"#utility.yul\":11901:12170   */\n      pop\n        /* \"#utility.yul\":11850:12170   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12176:12356   */\n    tag_174:\n        /* \"#utility.yul\":12224:12301   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":12221:12222   */\n      0x00\n        /* \"#utility.yul\":12214:12302   */\n      mstore\n        /* \"#utility.yul\":12321:12325   */\n      0x41\n        /* \"#utility.yul\":12318:12319   */\n      0x04\n        /* \"#utility.yul\":12311:12326   */\n      mstore\n        /* \"#utility.yul\":12345:12349   */\n      0x24\n        /* \"#utility.yul\":12342:12343   */\n      0x00\n        /* \"#utility.yul\":12335:12350   */\n      revert\n        /* \"#utility.yul\":12362:13137   */\n    tag_192:\n        /* \"#utility.yul\":12595:12599   */\n      0x00\n        /* \"#utility.yul\":12633:12636   */\n      0xc0\n        /* \"#utility.yul\":12622:12631   */\n      dup3\n        /* \"#utility.yul\":12618:12637   */\n      add\n        /* \"#utility.yul\":12610:12637   */\n      swap1\n      pop\n        /* \"#utility.yul\":12647:12718   */\n      tag_534\n        /* \"#utility.yul\":12715:12716   */\n      0x00\n        /* \"#utility.yul\":12704:12713   */\n      dup4\n        /* \"#utility.yul\":12700:12717   */\n      add\n        /* \"#utility.yul\":12691:12697   */\n      dup10\n        /* \"#utility.yul\":12647:12718   */\n      tag_383\n      jump\t// in\n    tag_534:\n        /* \"#utility.yul\":12728:12800   */\n      tag_535\n        /* \"#utility.yul\":12796:12798   */\n      0x20\n        /* \"#utility.yul\":12785:12794   */\n      dup4\n        /* \"#utility.yul\":12781:12799   */\n      add\n        /* \"#utility.yul\":12772:12778   */\n      dup9\n        /* \"#utility.yul\":12728:12800   */\n      tag_386\n      jump\t// in\n    tag_535:\n        /* \"#utility.yul\":12810:12882   */\n      tag_536\n        /* \"#utility.yul\":12878:12880   */\n      0x40\n        /* \"#utility.yul\":12867:12876   */\n      dup4\n        /* \"#utility.yul\":12863:12881   */\n      add\n        /* \"#utility.yul\":12854:12860   */\n      dup8\n        /* \"#utility.yul\":12810:12882   */\n      tag_386\n      jump\t// in\n    tag_536:\n        /* \"#utility.yul\":12892:12964   */\n      tag_537\n        /* \"#utility.yul\":12960:12962   */\n      0x60\n        /* \"#utility.yul\":12949:12958   */\n      dup4\n        /* \"#utility.yul\":12945:12963   */\n      add\n        /* \"#utility.yul\":12936:12942   */\n      dup7\n        /* \"#utility.yul\":12892:12964   */\n      tag_379\n      jump\t// in\n    tag_537:\n        /* \"#utility.yul\":12974:13047   */\n      tag_538\n        /* \"#utility.yul\":13042:13045   */\n      0x80\n        /* \"#utility.yul\":13031:13040   */\n      dup4\n        /* \"#utility.yul\":13027:13046   */\n      add\n        /* \"#utility.yul\":13018:13024   */\n      dup6\n        /* \"#utility.yul\":12974:13047   */\n      tag_379\n      jump\t// in\n    tag_538:\n        /* \"#utility.yul\":13057:13130   */\n      tag_539\n        /* \"#utility.yul\":13125:13128   */\n      0xa0\n        /* \"#utility.yul\":13114:13123   */\n      dup4\n        /* \"#utility.yul\":13110:13129   */\n      add\n        /* \"#utility.yul\":13101:13107   */\n      dup5\n        /* \"#utility.yul\":13057:13130   */\n      tag_379\n      jump\t// in\n    tag_539:\n        /* \"#utility.yul\":12362:13137   */\n      swap8\n      swap7\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":13143:13475   */\n    tag_199:\n        /* \"#utility.yul\":13264:13268   */\n      0x00\n        /* \"#utility.yul\":13302:13304   */\n      0x40\n        /* \"#utility.yul\":13291:13300   */\n      dup3\n        /* \"#utility.yul\":13287:13305   */\n      add\n        /* \"#utility.yul\":13279:13305   */\n      swap1\n      pop\n        /* \"#utility.yul\":13315:13386   */\n      tag_541\n        /* \"#utility.yul\":13383:13384   */\n      0x00\n        /* \"#utility.yul\":13372:13381   */\n      dup4\n        /* \"#utility.yul\":13368:13385   */\n      add\n        /* \"#utility.yul\":13359:13365   */\n      dup6\n        /* \"#utility.yul\":13315:13386   */\n      tag_386\n      jump\t// in\n    tag_541:\n        /* \"#utility.yul\":13396:13468   */\n      tag_542\n        /* \"#utility.yul\":13464:13466   */\n      0x20\n        /* \"#utility.yul\":13453:13462   */\n      dup4\n        /* \"#utility.yul\":13449:13467   */\n      add\n        /* \"#utility.yul\":13440:13446   */\n      dup5\n        /* \"#utility.yul\":13396:13468   */\n      tag_386\n      jump\t// in\n    tag_542:\n        /* \"#utility.yul\":13143:13475   */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":13481:13923   */\n    tag_217:\n        /* \"#utility.yul\":13630:13634   */\n      0x00\n        /* \"#utility.yul\":13668:13670   */\n      0x60\n        /* \"#utility.yul\":13657:13666   */\n      dup3\n        /* \"#utility.yul\":13653:13671   */\n      add\n        /* \"#utility.yul\":13645:13671   */\n      swap1\n      pop\n        /* \"#utility.yul\":13681:13752   */\n      tag_544\n        /* \"#utility.yul\":13749:13750   */\n      0x00\n        /* \"#utility.yul\":13738:13747   */\n      dup4\n        /* \"#utility.yul\":13734:13751   */\n      add\n        /* \"#utility.yul\":13725:13731   */\n      dup7\n        /* \"#utility.yul\":13681:13752   */\n      tag_386\n      jump\t// in\n    tag_544:\n        /* \"#utility.yul\":13762:13834   */\n      tag_545\n        /* \"#utility.yul\":13830:13832   */\n      0x20\n        /* \"#utility.yul\":13819:13828   */\n      dup4\n        /* \"#utility.yul\":13815:13833   */\n      add\n        /* \"#utility.yul\":13806:13812   */\n      dup6\n        /* \"#utility.yul\":13762:13834   */\n      tag_379\n      jump\t// in\n    tag_545:\n        /* \"#utility.yul\":13844:13916   */\n      tag_546\n        /* \"#utility.yul\":13912:13914   */\n      0x40\n        /* \"#utility.yul\":13901:13910   */\n      dup4\n        /* \"#utility.yul\":13897:13915   */\n      add\n        /* \"#utility.yul\":13888:13894   */\n      dup5\n        /* \"#utility.yul\":13844:13916   */\n      tag_379\n      jump\t// in\n    tag_546:\n        /* \"#utility.yul\":13481:13923   */\n      swap5\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":13929:14593   */\n    tag_287:\n        /* \"#utility.yul\":14134:14138   */\n      0x00\n        /* \"#utility.yul\":14172:14175   */\n      0xa0\n        /* \"#utility.yul\":14161:14170   */\n      dup3\n        /* \"#utility.yul\":14157:14176   */\n      add\n        /* \"#utility.yul\":14149:14176   */\n      swap1\n      pop\n        /* \"#utility.yul\":14186:14257   */\n      tag_548\n        /* \"#utility.yul\":14254:14255   */\n      0x00\n        /* \"#utility.yul\":14243:14252   */\n      dup4\n        /* \"#utility.yul\":14239:14256   */\n      add\n        /* \"#utility.yul\":14230:14236   */\n      dup9\n        /* \"#utility.yul\":14186:14257   */\n      tag_383\n      jump\t// in\n    tag_548:\n        /* \"#utility.yul\":14267:14339   */\n      tag_549\n        /* \"#utility.yul\":14335:14337   */\n      0x20\n        /* \"#utility.yul\":14324:14333   */\n      dup4\n        /* \"#utility.yul\":14320:14338   */\n      add\n        /* \"#utility.yul\":14311:14317   */\n      dup8\n        /* \"#utility.yul\":14267:14339   */\n      tag_383\n      jump\t// in\n    tag_549:\n        /* \"#utility.yul\":14349:14421   */\n      tag_550\n        /* \"#utility.yul\":14417:14419   */\n      0x40\n        /* \"#utility.yul\":14406:14415   */\n      dup4\n        /* \"#utility.yul\":14402:14420   */\n      add\n        /* \"#utility.yul\":14393:14399   */\n      dup7\n        /* \"#utility.yul\":14349:14421   */\n      tag_383\n      jump\t// in\n    tag_550:\n        /* \"#utility.yul\":14431:14503   */\n      tag_551\n        /* \"#utility.yul\":14499:14501   */\n      0x60\n        /* \"#utility.yul\":14488:14497   */\n      dup4\n        /* \"#utility.yul\":14484:14502   */\n      add\n        /* \"#utility.yul\":14475:14481   */\n      dup6\n        /* \"#utility.yul\":14431:14503   */\n      tag_379\n      jump\t// in\n    tag_551:\n        /* \"#utility.yul\":14513:14586   */\n      tag_552\n        /* \"#utility.yul\":14581:14584   */\n      0x80\n        /* \"#utility.yul\":14570:14579   */\n      dup4\n        /* \"#utility.yul\":14566:14585   */\n      add\n        /* \"#utility.yul\":14557:14563   */\n      dup5\n        /* \"#utility.yul\":14513:14586   */\n      tag_386\n      jump\t// in\n    tag_552:\n        /* \"#utility.yul\":13929:14593   */\n      swap7\n      swap6\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":14599:15144   */\n    tag_308:\n        /* \"#utility.yul\":14772:14776   */\n      0x00\n        /* \"#utility.yul\":14810:14813   */\n      0x80\n        /* \"#utility.yul\":14799:14808   */\n      dup3\n        /* \"#utility.yul\":14795:14814   */\n      add\n        /* \"#utility.yul\":14787:14814   */\n      swap1\n      pop\n        /* \"#utility.yul\":14824:14895   */\n      tag_554\n        /* \"#utility.yul\":14892:14893   */\n      0x00\n        /* \"#utility.yul\":14881:14890   */\n      dup4\n        /* \"#utility.yul\":14877:14894   */\n      add\n        /* \"#utility.yul\":14868:14874   */\n      dup8\n        /* \"#utility.yul\":14824:14895   */\n      tag_383\n      jump\t// in\n    tag_554:\n        /* \"#utility.yul\":14905:14973   */\n      tag_555\n        /* \"#utility.yul\":14969:14971   */\n      0x20\n        /* \"#utility.yul\":14958:14967   */\n      dup4\n        /* \"#utility.yul\":14954:14972   */\n      add\n        /* \"#utility.yul\":14945:14951   */\n      dup7\n        /* \"#utility.yul\":14905:14973   */\n      tag_381\n      jump\t// in\n    tag_555:\n        /* \"#utility.yul\":14983:15055   */\n      tag_556\n        /* \"#utility.yul\":15051:15053   */\n      0x40\n        /* \"#utility.yul\":15040:15049   */\n      dup4\n        /* \"#utility.yul\":15036:15054   */\n      add\n        /* \"#utility.yul\":15027:15033   */\n      dup6\n        /* \"#utility.yul\":14983:15055   */\n      tag_383\n      jump\t// in\n    tag_556:\n        /* \"#utility.yul\":15065:15137   */\n      tag_557\n        /* \"#utility.yul\":15133:15135   */\n      0x60\n        /* \"#utility.yul\":15122:15131   */\n      dup4\n        /* \"#utility.yul\":15118:15136   */\n      add\n        /* \"#utility.yul\":15109:15115   */\n      dup5\n        /* \"#utility.yul\":15065:15137   */\n      tag_383\n      jump\t// in\n    tag_557:\n        /* \"#utility.yul\":14599:15144   */\n      swap6\n      swap5\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":15150:15330   */\n    tag_315:\n        /* \"#utility.yul\":15198:15275   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":15195:15196   */\n      0x00\n        /* \"#utility.yul\":15188:15276   */\n      mstore\n        /* \"#utility.yul\":15295:15299   */\n      0x21\n        /* \"#utility.yul\":15292:15293   */\n      0x04\n        /* \"#utility.yul\":15285:15300   */\n      mstore\n        /* \"#utility.yul\":15319:15323   */\n      0x24\n        /* \"#utility.yul\":15316:15317   */\n      0x00\n        /* \"#utility.yul\":15309:15324   */\n      revert\n        /* \"#utility.yul\":15336:15516   */\n    tag_399:\n        /* \"#utility.yul\":15384:15461   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":15381:15382   */\n      0x00\n        /* \"#utility.yul\":15374:15462   */\n      mstore\n        /* \"#utility.yul\":15481:15485   */\n      0x11\n        /* \"#utility.yul\":15478:15479   */\n      0x04\n        /* \"#utility.yul\":15471:15486   */\n      mstore\n        /* \"#utility.yul\":15505:15509   */\n      0x24\n        /* \"#utility.yul\":15502:15503   */\n      0x00\n        /* \"#utility.yul\":15495:15510   */\n      revert\n        /* \"#utility.yul\":15522:15713   */\n    tag_353:\n        /* \"#utility.yul\":15562:15565   */\n      0x00\n        /* \"#utility.yul\":15581:15601   */\n      tag_561\n        /* \"#utility.yul\":15599:15600   */\n      dup3\n        /* \"#utility.yul\":15581:15601   */\n      tag_374\n      jump\t// in\n    tag_561:\n        /* \"#utility.yul\":15576:15601   */\n      swap2\n      pop\n        /* \"#utility.yul\":15615:15635   */\n      tag_562\n        /* \"#utility.yul\":15633:15634   */\n      dup4\n        /* \"#utility.yul\":15615:15635   */\n      tag_374\n      jump\t// in\n    tag_562:\n        /* \"#utility.yul\":15610:15635   */\n      swap3\n      pop\n        /* \"#utility.yul\":15658:15659   */\n      dup3\n        /* \"#utility.yul\":15655:15656   */\n      dup3\n        /* \"#utility.yul\":15651:15660   */\n      add\n        /* \"#utility.yul\":15644:15660   */\n      swap1\n      pop\n        /* \"#utility.yul\":15679:15682   */\n      dup1\n        /* \"#utility.yul\":15676:15677   */\n      dup3\n        /* \"#utility.yul\":15673:15683   */\n      gt\n        /* \"#utility.yul\":15670:15706   */\n      iszero\n      tag_563\n      jumpi\n        /* \"#utility.yul\":15686:15704   */\n      tag_564\n      tag_399\n      jump\t// in\n    tag_564:\n        /* \"#utility.yul\":15670:15706   */\n    tag_563:\n        /* \"#utility.yul\":15522:15713   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n\n    auxdata: 0xa2646970667358221220ad3948f7005a1c3554453c469dc81a81de0d7522bf2b079561631841a967f48664736f6c63430008140033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_1003": {
									"entryPoint": null,
									"id": 1003,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_308": {
									"entryPoint": null,
									"id": 308,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_3396": {
									"entryPoint": null,
									"id": 3396,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_3631": {
									"entryPoint": null,
									"id": 3631,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_3774": {
									"entryPoint": null,
									"id": 3774,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_843": {
									"entryPoint": null,
									"id": 843,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_buildDomainSeparator_3443": {
									"entryPoint": 999,
									"id": 3443,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_mint_611": {
									"entryPoint": 1099,
									"id": 611,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_requireNotPaused_880": {
									"entryPoint": 1416,
									"id": 880,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_transferOwnership_1099": {
									"entryPoint": 717,
									"id": 1099,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_update_3828": {
									"entryPoint": 1352,
									"id": 3828,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_update_578": {
									"entryPoint": 1490,
									"id": 578,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_update_954": {
									"entryPoint": 1376,
									"id": 954,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@decimals_335": {
									"entryPoint": 1091,
									"id": 335,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@getStringSlot_3046": {
									"entryPoint": 1343,
									"id": 3046,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@paused_868": {
									"entryPoint": 2038,
									"id": 868,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@toShortStringWithFallback_3224": {
									"entryPoint": 914,
									"id": 3224,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@toShortString_3126": {
									"entryPoint": 1237,
									"id": 3126,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_decode_t_address_fromMemory": {
									"entryPoint": 2138,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address_fromMemory": {
									"entryPoint": 2160,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_address_to_t_address_fromStack": {
									"entryPoint": 3048,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_bytes32_to_t_bytes32_fromStack": {
									"entryPoint": 3648,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 3847,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_uint256_to_t_uint256_fromStack": {
									"entryPoint": 3665,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": 3065,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed": {
									"entryPoint": 4161,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed": {
									"entryPoint": 3682,
									"id": null,
									"parameterSlots": 6,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 3911,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": 4220,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"allocate_unbounded": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"array_dataslot_t_bytes_memory_ptr": {
									"entryPoint": 3955,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_dataslot_t_string_storage": {
									"entryPoint": 2360,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_length_t_bytes_memory_ptr": {
									"entryPoint": 3945,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_length_t_string_memory_ptr": {
									"entryPoint": 2208,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_storeLengthForEncoding_t_string_memory_ptr_fromStack": {
									"entryPoint": 3773,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 4103,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_exp_helper": {
									"entryPoint": 3149,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 2
								},
								"checked_exp_t_uint256_t_uint8": {
									"entryPoint": 3485,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_exp_unsigned": {
									"entryPoint": 3239,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"checked_mul_t_uint256": {
									"entryPoint": 3565,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"clean_up_bytearray_end_slots_t_string_storage": {
									"entryPoint": 2669,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"cleanup_t_address": {
									"entryPoint": 2094,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_bytes32": {
									"entryPoint": 3639,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint160": {
									"entryPoint": 2063,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint256": {
									"entryPoint": 2490,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint8": {
									"entryPoint": 3473,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"clear_storage_range_t_bytes1": {
									"entryPoint": 2631,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"convert_bytes_to_fixedbytes_from_t_bytes_memory_ptr_to_t_bytes32": {
									"entryPoint": 3992,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"convert_t_uint256_to_t_uint256": {
									"entryPoint": 2508,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage": {
									"entryPoint": 2820,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"copy_memory_to_memory_with_cleanup": {
									"entryPoint": 3789,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"divide_by_32_ceil": {
									"entryPoint": 2378,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"extract_byte_array_length": {
									"entryPoint": 2308,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"extract_used_part_and_set_length_of_short_byte_array": {
									"entryPoint": 2791,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"identity": {
									"entryPoint": 2499,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"mask_bytes_dynamic": {
									"entryPoint": 2761,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"panic_error_0x11": {
									"entryPoint": 3092,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x22": {
									"entryPoint": 2263,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x41": {
									"entryPoint": 2218,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"prepare_store_t_uint256": {
									"entryPoint": 2547,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"read_from_memoryt_bytes32": {
									"entryPoint": 3970,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
									"entryPoint": 2059,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"round_up_to_mul_of_32": {
									"entryPoint": 3831,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"shift_left_dynamic": {
									"entryPoint": 2393,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"shift_right_1_unsigned": {
									"entryPoint": 3137,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"shift_right_unsigned_dynamic": {
									"entryPoint": 2749,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"storage_set_to_zero_t_uint256": {
									"entryPoint": 2603,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"update_byte_slice_dynamic32": {
									"entryPoint": 2405,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"update_storage_value_t_uint256_to_t_uint256": {
									"entryPoint": 2556,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"validator_revert_t_address": {
									"entryPoint": 2113,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"zero_value_for_split_t_uint256": {
									"entryPoint": 2599,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:13897:1",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "47:35:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "57:19:1",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "73:2:1",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "67:5:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "67:9:1"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nodeType": "YulIdentifier",
																	"src": "57:6:1"
																}
															]
														}
													]
												},
												"name": "allocate_unbounded",
												"nodeType": "YulFunctionDefinition",
												"returnVariables": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "40:6:1",
														"type": ""
													}
												],
												"src": "7:75:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "177:28:1",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "194:1:1",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "197:1:1",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "187:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "187:12:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "187:12:1"
														}
													]
												},
												"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
												"nodeType": "YulFunctionDefinition",
												"src": "88:117:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "300:28:1",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "317:1:1",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "320:1:1",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "310:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "310:12:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "310:12:1"
														}
													]
												},
												"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
												"nodeType": "YulFunctionDefinition",
												"src": "211:117:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "379:81:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "389:65:1",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "404:5:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "411:42:1",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "400:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "400:54:1"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "389:7:1"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint160",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "361:5:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "371:7:1",
														"type": ""
													}
												],
												"src": "334:126:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "511:51:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "521:35:1",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "550:5:1"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nodeType": "YulIdentifier",
																	"src": "532:17:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "532:24:1"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "521:7:1"
																}
															]
														}
													]
												},
												"name": "cleanup_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "493:5:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "503:7:1",
														"type": ""
													}
												],
												"src": "466:96:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "611:79:1",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "668:16:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "677:1:1",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "680:1:1",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "670:6:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "670:12:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "670:12:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "634:5:1"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "659:5:1"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_address",
																					"nodeType": "YulIdentifier",
																					"src": "641:17:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "641:24:1"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "631:2:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "631:35:1"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "624:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "624:43:1"
															},
															"nodeType": "YulIf",
															"src": "621:63:1"
														}
													]
												},
												"name": "validator_revert_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "604:5:1",
														"type": ""
													}
												],
												"src": "568:122:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "759:80:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "769:22:1",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "784:6:1"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "778:5:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "778:13:1"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "769:5:1"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "827:5:1"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "800:26:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "800:33:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "800:33:1"
														}
													]
												},
												"name": "abi_decode_t_address_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "737:6:1",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "745:3:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "753:5:1",
														"type": ""
													}
												],
												"src": "696:143:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "922:274:1",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "968:83:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "970:77:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "970:79:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "970:79:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "943:7:1"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "952:9:1"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "939:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "939:23:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "964:2:1",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "935:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "935:32:1"
															},
															"nodeType": "YulIf",
															"src": "932:119:1"
														},
														{
															"nodeType": "YulBlock",
															"src": "1061:128:1",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1076:15:1",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1090:1:1",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1080:6:1",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1105:74:1",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1151:9:1"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1162:6:1"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1147:3:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1147:22:1"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1171:7:1"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "1115:31:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1115:64:1"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "1105:6:1"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "892:9:1",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "903:7:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "915:6:1",
														"type": ""
													}
												],
												"src": "845:351:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1261:40:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1272:22:1",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "1288:5:1"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1282:5:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "1282:12:1"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "1272:6:1"
																}
															]
														}
													]
												},
												"name": "array_length_t_string_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1244:5:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "1254:6:1",
														"type": ""
													}
												],
												"src": "1202:99:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1335:152:1",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1352:1:1",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1355:77:1",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1345:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "1345:88:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1345:88:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1449:1:1",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1452:4:1",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1442:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "1442:15:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1442:15:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1473:1:1",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1476:4:1",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "1466:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "1466:15:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1466:15:1"
														}
													]
												},
												"name": "panic_error_0x41",
												"nodeType": "YulFunctionDefinition",
												"src": "1307:180:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1521:152:1",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1538:1:1",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1541:77:1",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1531:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "1531:88:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1531:88:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1635:1:1",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1638:4:1",
																		"type": "",
																		"value": "0x22"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1628:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "1628:15:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1628:15:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1659:1:1",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1662:4:1",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "1652:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "1652:15:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1652:15:1"
														}
													]
												},
												"name": "panic_error_0x22",
												"nodeType": "YulFunctionDefinition",
												"src": "1493:180:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1730:269:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1740:22:1",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "1754:4:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1760:1:1",
																		"type": "",
																		"value": "2"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "1750:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "1750:12:1"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "1740:6:1"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1771:38:1",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "1801:4:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1807:1:1",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "1797:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "1797:12:1"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nodeType": "YulTypedName",
																	"src": "1775:18:1",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1848:51:1",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "1862:27:1",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "1876:6:1"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1884:4:1",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "1872:3:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1872:17:1"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "1862:6:1"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "1828:18:1"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "1821:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "1821:26:1"
															},
															"nodeType": "YulIf",
															"src": "1818:81:1"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1951:42:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x22",
																				"nodeType": "YulIdentifier",
																				"src": "1965:16:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1965:18:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1965:18:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "1915:18:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "1938:6:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1946:2:1",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "1935:2:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1935:14:1"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "1912:2:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "1912:38:1"
															},
															"nodeType": "YulIf",
															"src": "1909:84:1"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "1714:4:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "1723:6:1",
														"type": ""
													}
												],
												"src": "1679:320:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2059:87:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2069:11:1",
															"value": {
																"name": "ptr",
																"nodeType": "YulIdentifier",
																"src": "2077:3:1"
															},
															"variableNames": [
																{
																	"name": "data",
																	"nodeType": "YulIdentifier",
																	"src": "2069:4:1"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2097:1:1",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"name": "ptr",
																		"nodeType": "YulIdentifier",
																		"src": "2100:3:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2090:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "2090:14:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2090:14:1"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2113:26:1",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2131:1:1",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2134:4:1",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "keccak256",
																	"nodeType": "YulIdentifier",
																	"src": "2121:9:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "2121:18:1"
															},
															"variableNames": [
																{
																	"name": "data",
																	"nodeType": "YulIdentifier",
																	"src": "2113:4:1"
																}
															]
														}
													]
												},
												"name": "array_dataslot_t_string_storage",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "ptr",
														"nodeType": "YulTypedName",
														"src": "2046:3:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "2054:4:1",
														"type": ""
													}
												],
												"src": "2005:141:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2196:49:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2206:33:1",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "2224:5:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2231:2:1",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2220:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2220:14:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2236:2:1",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "2216:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "2216:23:1"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nodeType": "YulIdentifier",
																	"src": "2206:6:1"
																}
															]
														}
													]
												},
												"name": "divide_by_32_ceil",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2179:5:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "result",
														"nodeType": "YulTypedName",
														"src": "2189:6:1",
														"type": ""
													}
												],
												"src": "2152:93:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2304:54:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2314:37:1",
															"value": {
																"arguments": [
																	{
																		"name": "bits",
																		"nodeType": "YulIdentifier",
																		"src": "2339:4:1"
																	},
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "2345:5:1"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nodeType": "YulIdentifier",
																	"src": "2335:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "2335:16:1"
															},
															"variableNames": [
																{
																	"name": "newValue",
																	"nodeType": "YulIdentifier",
																	"src": "2314:8:1"
																}
															]
														}
													]
												},
												"name": "shift_left_dynamic",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "bits",
														"nodeType": "YulTypedName",
														"src": "2279:4:1",
														"type": ""
													},
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2285:5:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "newValue",
														"nodeType": "YulTypedName",
														"src": "2295:8:1",
														"type": ""
													}
												],
												"src": "2251:107:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2440:317:1",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2450:35:1",
															"value": {
																"arguments": [
																	{
																		"name": "shiftBytes",
																		"nodeType": "YulIdentifier",
																		"src": "2471:10:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2483:1:1",
																		"type": "",
																		"value": "8"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nodeType": "YulIdentifier",
																	"src": "2467:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "2467:18:1"
															},
															"variables": [
																{
																	"name": "shiftBits",
																	"nodeType": "YulTypedName",
																	"src": "2454:9:1",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2494:109:1",
															"value": {
																"arguments": [
																	{
																		"name": "shiftBits",
																		"nodeType": "YulIdentifier",
																		"src": "2525:9:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2536:66:1",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "shift_left_dynamic",
																	"nodeType": "YulIdentifier",
																	"src": "2506:18:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "2506:97:1"
															},
															"variables": [
																{
																	"name": "mask",
																	"nodeType": "YulTypedName",
																	"src": "2498:4:1",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2612:51:1",
															"value": {
																"arguments": [
																	{
																		"name": "shiftBits",
																		"nodeType": "YulIdentifier",
																		"src": "2643:9:1"
																	},
																	{
																		"name": "toInsert",
																		"nodeType": "YulIdentifier",
																		"src": "2654:8:1"
																	}
																],
																"functionName": {
																	"name": "shift_left_dynamic",
																	"nodeType": "YulIdentifier",
																	"src": "2624:18:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "2624:39:1"
															},
															"variableNames": [
																{
																	"name": "toInsert",
																	"nodeType": "YulIdentifier",
																	"src": "2612:8:1"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2672:30:1",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "2685:5:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "mask",
																				"nodeType": "YulIdentifier",
																				"src": "2696:4:1"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "2692:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2692:9:1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "2681:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "2681:21:1"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "2672:5:1"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2711:40:1",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "2724:5:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "toInsert",
																				"nodeType": "YulIdentifier",
																				"src": "2735:8:1"
																			},
																			{
																				"name": "mask",
																				"nodeType": "YulIdentifier",
																				"src": "2745:4:1"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "2731:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2731:19:1"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "2721:2:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "2721:30:1"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nodeType": "YulIdentifier",
																	"src": "2711:6:1"
																}
															]
														}
													]
												},
												"name": "update_byte_slice_dynamic32",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2401:5:1",
														"type": ""
													},
													{
														"name": "shiftBytes",
														"nodeType": "YulTypedName",
														"src": "2408:10:1",
														"type": ""
													},
													{
														"name": "toInsert",
														"nodeType": "YulTypedName",
														"src": "2420:8:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "result",
														"nodeType": "YulTypedName",
														"src": "2433:6:1",
														"type": ""
													}
												],
												"src": "2364:393:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2808:32:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2818:16:1",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "2829:5:1"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "2818:7:1"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2790:5:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "2800:7:1",
														"type": ""
													}
												],
												"src": "2763:77:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2878:28:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2888:12:1",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "2895:5:1"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nodeType": "YulIdentifier",
																	"src": "2888:3:1"
																}
															]
														}
													]
												},
												"name": "identity",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2864:5:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "ret",
														"nodeType": "YulTypedName",
														"src": "2874:3:1",
														"type": ""
													}
												],
												"src": "2846:60:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2972:82:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2982:66:1",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "3040:5:1"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint256",
																					"nodeType": "YulIdentifier",
																					"src": "3022:17:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3022:24:1"
																			}
																		],
																		"functionName": {
																			"name": "identity",
																			"nodeType": "YulIdentifier",
																			"src": "3013:8:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3013:34:1"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "2995:17:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "2995:53:1"
															},
															"variableNames": [
																{
																	"name": "converted",
																	"nodeType": "YulIdentifier",
																	"src": "2982:9:1"
																}
															]
														}
													]
												},
												"name": "convert_t_uint256_to_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2952:5:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "converted",
														"nodeType": "YulTypedName",
														"src": "2962:9:1",
														"type": ""
													}
												],
												"src": "2912:142:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3107:28:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3117:12:1",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "3124:5:1"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nodeType": "YulIdentifier",
																	"src": "3117:3:1"
																}
															]
														}
													]
												},
												"name": "prepare_store_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3093:5:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "ret",
														"nodeType": "YulTypedName",
														"src": "3103:3:1",
														"type": ""
													}
												],
												"src": "3060:75:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3217:193:1",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3227:63:1",
															"value": {
																"arguments": [
																	{
																		"name": "value_0",
																		"nodeType": "YulIdentifier",
																		"src": "3282:7:1"
																	}
																],
																"functionName": {
																	"name": "convert_t_uint256_to_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "3251:30:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "3251:39:1"
															},
															"variables": [
																{
																	"name": "convertedValue_0",
																	"nodeType": "YulTypedName",
																	"src": "3231:16:1",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "slot",
																		"nodeType": "YulIdentifier",
																		"src": "3306:4:1"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "slot",
																						"nodeType": "YulIdentifier",
																						"src": "3346:4:1"
																					}
																				],
																				"functionName": {
																					"name": "sload",
																					"nodeType": "YulIdentifier",
																					"src": "3340:5:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3340:11:1"
																			},
																			{
																				"name": "offset",
																				"nodeType": "YulIdentifier",
																				"src": "3353:6:1"
																			},
																			{
																				"arguments": [
																					{
																						"name": "convertedValue_0",
																						"nodeType": "YulIdentifier",
																						"src": "3385:16:1"
																					}
																				],
																				"functionName": {
																					"name": "prepare_store_t_uint256",
																					"nodeType": "YulIdentifier",
																					"src": "3361:23:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3361:41:1"
																			}
																		],
																		"functionName": {
																			"name": "update_byte_slice_dynamic32",
																			"nodeType": "YulIdentifier",
																			"src": "3312:27:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3312:91:1"
																	}
																],
																"functionName": {
																	"name": "sstore",
																	"nodeType": "YulIdentifier",
																	"src": "3299:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "3299:105:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3299:105:1"
														}
													]
												},
												"name": "update_storage_value_t_uint256_to_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "slot",
														"nodeType": "YulTypedName",
														"src": "3194:4:1",
														"type": ""
													},
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "3200:6:1",
														"type": ""
													},
													{
														"name": "value_0",
														"nodeType": "YulTypedName",
														"src": "3208:7:1",
														"type": ""
													}
												],
												"src": "3141:269:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3465:24:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3475:8:1",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "3482:1:1",
																"type": "",
																"value": "0"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nodeType": "YulIdentifier",
																	"src": "3475:3:1"
																}
															]
														}
													]
												},
												"name": "zero_value_for_split_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"returnVariables": [
													{
														"name": "ret",
														"nodeType": "YulTypedName",
														"src": "3461:3:1",
														"type": ""
													}
												],
												"src": "3416:73:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3548:136:1",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3558:46:1",
															"value": {
																"arguments": [],
																"functionName": {
																	"name": "zero_value_for_split_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "3572:30:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "3572:32:1"
															},
															"variables": [
																{
																	"name": "zero_0",
																	"nodeType": "YulTypedName",
																	"src": "3562:6:1",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "slot",
																		"nodeType": "YulIdentifier",
																		"src": "3657:4:1"
																	},
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "3663:6:1"
																	},
																	{
																		"name": "zero_0",
																		"nodeType": "YulIdentifier",
																		"src": "3671:6:1"
																	}
																],
																"functionName": {
																	"name": "update_storage_value_t_uint256_to_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "3613:43:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "3613:65:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3613:65:1"
														}
													]
												},
												"name": "storage_set_to_zero_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "slot",
														"nodeType": "YulTypedName",
														"src": "3534:4:1",
														"type": ""
													},
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "3540:6:1",
														"type": ""
													}
												],
												"src": "3495:189:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3740:136:1",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3807:63:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "start",
																					"nodeType": "YulIdentifier",
																					"src": "3851:5:1"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3858:1:1",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "storage_set_to_zero_t_uint256",
																				"nodeType": "YulIdentifier",
																				"src": "3821:29:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3821:39:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3821:39:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "start",
																		"nodeType": "YulIdentifier",
																		"src": "3760:5:1"
																	},
																	{
																		"name": "end",
																		"nodeType": "YulIdentifier",
																		"src": "3767:3:1"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "3757:2:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "3757:14:1"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "3772:26:1",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "3774:22:1",
																		"value": {
																			"arguments": [
																				{
																					"name": "start",
																					"nodeType": "YulIdentifier",
																					"src": "3787:5:1"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3794:1:1",
																					"type": "",
																					"value": "1"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "3783:3:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3783:13:1"
																		},
																		"variableNames": [
																			{
																				"name": "start",
																				"nodeType": "YulIdentifier",
																				"src": "3774:5:1"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "3754:2:1",
																"statements": []
															},
															"src": "3750:120:1"
														}
													]
												},
												"name": "clear_storage_range_t_bytes1",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "start",
														"nodeType": "YulTypedName",
														"src": "3728:5:1",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "3735:3:1",
														"type": ""
													}
												],
												"src": "3690:186:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3961:464:1",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3987:431:1",
																"statements": [
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "4001:54:1",
																		"value": {
																			"arguments": [
																				{
																					"name": "array",
																					"nodeType": "YulIdentifier",
																					"src": "4049:5:1"
																				}
																			],
																			"functionName": {
																				"name": "array_dataslot_t_string_storage",
																				"nodeType": "YulIdentifier",
																				"src": "4017:31:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4017:38:1"
																		},
																		"variables": [
																			{
																				"name": "dataArea",
																				"nodeType": "YulTypedName",
																				"src": "4005:8:1",
																				"type": ""
																			}
																		]
																	},
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "4068:63:1",
																		"value": {
																			"arguments": [
																				{
																					"name": "dataArea",
																					"nodeType": "YulIdentifier",
																					"src": "4091:8:1"
																				},
																				{
																					"arguments": [
																						{
																							"name": "startIndex",
																							"nodeType": "YulIdentifier",
																							"src": "4119:10:1"
																						}
																					],
																					"functionName": {
																						"name": "divide_by_32_ceil",
																						"nodeType": "YulIdentifier",
																						"src": "4101:17:1"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "4101:29:1"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "4087:3:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4087:44:1"
																		},
																		"variables": [
																			{
																				"name": "deleteStart",
																				"nodeType": "YulTypedName",
																				"src": "4072:11:1",
																				"type": ""
																			}
																		]
																	},
																	{
																		"body": {
																			"nodeType": "YulBlock",
																			"src": "4288:27:1",
																			"statements": [
																				{
																					"nodeType": "YulAssignment",
																					"src": "4290:23:1",
																					"value": {
																						"name": "dataArea",
																						"nodeType": "YulIdentifier",
																						"src": "4305:8:1"
																					},
																					"variableNames": [
																						{
																							"name": "deleteStart",
																							"nodeType": "YulIdentifier",
																							"src": "4290:11:1"
																						}
																					]
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "startIndex",
																					"nodeType": "YulIdentifier",
																					"src": "4272:10:1"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4284:2:1",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "lt",
																				"nodeType": "YulIdentifier",
																				"src": "4269:2:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4269:18:1"
																		},
																		"nodeType": "YulIf",
																		"src": "4266:49:1"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "deleteStart",
																					"nodeType": "YulIdentifier",
																					"src": "4357:11:1"
																				},
																				{
																					"arguments": [
																						{
																							"name": "dataArea",
																							"nodeType": "YulIdentifier",
																							"src": "4374:8:1"
																						},
																						{
																							"arguments": [
																								{
																									"name": "len",
																									"nodeType": "YulIdentifier",
																									"src": "4402:3:1"
																								}
																							],
																							"functionName": {
																								"name": "divide_by_32_ceil",
																								"nodeType": "YulIdentifier",
																								"src": "4384:17:1"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "4384:22:1"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "4370:3:1"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "4370:37:1"
																				}
																			],
																			"functionName": {
																				"name": "clear_storage_range_t_bytes1",
																				"nodeType": "YulIdentifier",
																				"src": "4328:28:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4328:80:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4328:80:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "len",
																		"nodeType": "YulIdentifier",
																		"src": "3978:3:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3983:2:1",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "3975:2:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "3975:11:1"
															},
															"nodeType": "YulIf",
															"src": "3972:446:1"
														}
													]
												},
												"name": "clean_up_bytearray_end_slots_t_string_storage",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "array",
														"nodeType": "YulTypedName",
														"src": "3937:5:1",
														"type": ""
													},
													{
														"name": "len",
														"nodeType": "YulTypedName",
														"src": "3944:3:1",
														"type": ""
													},
													{
														"name": "startIndex",
														"nodeType": "YulTypedName",
														"src": "3949:10:1",
														"type": ""
													}
												],
												"src": "3882:543:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4494:54:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4504:37:1",
															"value": {
																"arguments": [
																	{
																		"name": "bits",
																		"nodeType": "YulIdentifier",
																		"src": "4529:4:1"
																	},
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "4535:5:1"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "4525:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "4525:16:1"
															},
															"variableNames": [
																{
																	"name": "newValue",
																	"nodeType": "YulIdentifier",
																	"src": "4504:8:1"
																}
															]
														}
													]
												},
												"name": "shift_right_unsigned_dynamic",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "bits",
														"nodeType": "YulTypedName",
														"src": "4469:4:1",
														"type": ""
													},
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "4475:5:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "newValue",
														"nodeType": "YulTypedName",
														"src": "4485:8:1",
														"type": ""
													}
												],
												"src": "4431:117:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4605:118:1",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4615:68:1",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "4664:1:1",
																						"type": "",
																						"value": "8"
																					},
																					{
																						"name": "bytes",
																						"nodeType": "YulIdentifier",
																						"src": "4667:5:1"
																					}
																				],
																				"functionName": {
																					"name": "mul",
																					"nodeType": "YulIdentifier",
																					"src": "4660:3:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4660:13:1"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "4679:1:1",
																						"type": "",
																						"value": "0"
																					}
																				],
																				"functionName": {
																					"name": "not",
																					"nodeType": "YulIdentifier",
																					"src": "4675:3:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4675:6:1"
																			}
																		],
																		"functionName": {
																			"name": "shift_right_unsigned_dynamic",
																			"nodeType": "YulIdentifier",
																			"src": "4631:28:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4631:51:1"
																	}
																],
																"functionName": {
																	"name": "not",
																	"nodeType": "YulIdentifier",
																	"src": "4627:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "4627:56:1"
															},
															"variables": [
																{
																	"name": "mask",
																	"nodeType": "YulTypedName",
																	"src": "4619:4:1",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "4692:25:1",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "4706:4:1"
																	},
																	{
																		"name": "mask",
																		"nodeType": "YulIdentifier",
																		"src": "4712:4:1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "4702:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "4702:15:1"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nodeType": "YulIdentifier",
																	"src": "4692:6:1"
																}
															]
														}
													]
												},
												"name": "mask_bytes_dynamic",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "4582:4:1",
														"type": ""
													},
													{
														"name": "bytes",
														"nodeType": "YulTypedName",
														"src": "4588:5:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "result",
														"nodeType": "YulTypedName",
														"src": "4598:6:1",
														"type": ""
													}
												],
												"src": "4554:169:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4809:214:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4942:37:1",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "4969:4:1"
																	},
																	{
																		"name": "len",
																		"nodeType": "YulIdentifier",
																		"src": "4975:3:1"
																	}
																],
																"functionName": {
																	"name": "mask_bytes_dynamic",
																	"nodeType": "YulIdentifier",
																	"src": "4950:18:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "4950:29:1"
															},
															"variableNames": [
																{
																	"name": "data",
																	"nodeType": "YulIdentifier",
																	"src": "4942:4:1"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "4988:29:1",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "4999:4:1"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5009:1:1",
																				"type": "",
																				"value": "2"
																			},
																			{
																				"name": "len",
																				"nodeType": "YulIdentifier",
																				"src": "5012:3:1"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nodeType": "YulIdentifier",
																			"src": "5005:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5005:11:1"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "4996:2:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "4996:21:1"
															},
															"variableNames": [
																{
																	"name": "used",
																	"nodeType": "YulIdentifier",
																	"src": "4988:4:1"
																}
															]
														}
													]
												},
												"name": "extract_used_part_and_set_length_of_short_byte_array",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "4790:4:1",
														"type": ""
													},
													{
														"name": "len",
														"nodeType": "YulTypedName",
														"src": "4796:3:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "used",
														"nodeType": "YulTypedName",
														"src": "4804:4:1",
														"type": ""
													}
												],
												"src": "4728:295:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5120:1303:1",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5131:51:1",
															"value": {
																"arguments": [
																	{
																		"name": "src",
																		"nodeType": "YulIdentifier",
																		"src": "5178:3:1"
																	}
																],
																"functionName": {
																	"name": "array_length_t_string_memory_ptr",
																	"nodeType": "YulIdentifier",
																	"src": "5145:32:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "5145:37:1"
															},
															"variables": [
																{
																	"name": "newLen",
																	"nodeType": "YulTypedName",
																	"src": "5135:6:1",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5267:22:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "5269:16:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5269:18:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5269:18:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "newLen",
																		"nodeType": "YulIdentifier",
																		"src": "5239:6:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5247:18:1",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "5236:2:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "5236:30:1"
															},
															"nodeType": "YulIf",
															"src": "5233:56:1"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5299:52:1",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "slot",
																				"nodeType": "YulIdentifier",
																				"src": "5345:4:1"
																			}
																		],
																		"functionName": {
																			"name": "sload",
																			"nodeType": "YulIdentifier",
																			"src": "5339:5:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5339:11:1"
																	}
																],
																"functionName": {
																	"name": "extract_byte_array_length",
																	"nodeType": "YulIdentifier",
																	"src": "5313:25:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "5313:38:1"
															},
															"variables": [
																{
																	"name": "oldLen",
																	"nodeType": "YulTypedName",
																	"src": "5303:6:1",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "slot",
																		"nodeType": "YulIdentifier",
																		"src": "5444:4:1"
																	},
																	{
																		"name": "oldLen",
																		"nodeType": "YulIdentifier",
																		"src": "5450:6:1"
																	},
																	{
																		"name": "newLen",
																		"nodeType": "YulIdentifier",
																		"src": "5458:6:1"
																	}
																],
																"functionName": {
																	"name": "clean_up_bytearray_end_slots_t_string_storage",
																	"nodeType": "YulIdentifier",
																	"src": "5398:45:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "5398:67:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5398:67:1"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5475:18:1",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "5492:1:1",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "srcOffset",
																	"nodeType": "YulTypedName",
																	"src": "5479:9:1",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5503:17:1",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "5516:4:1",
																"type": "",
																"value": "0x20"
															},
															"variableNames": [
																{
																	"name": "srcOffset",
																	"nodeType": "YulIdentifier",
																	"src": "5503:9:1"
																}
															]
														},
														{
															"cases": [
																{
																	"body": {
																		"nodeType": "YulBlock",
																		"src": "5567:611:1",
																		"statements": [
																			{
																				"nodeType": "YulVariableDeclaration",
																				"src": "5581:37:1",
																				"value": {
																					"arguments": [
																						{
																							"name": "newLen",
																							"nodeType": "YulIdentifier",
																							"src": "5600:6:1"
																						},
																						{
																							"arguments": [
																								{
																									"kind": "number",
																									"nodeType": "YulLiteral",
																									"src": "5612:4:1",
																									"type": "",
																									"value": "0x1f"
																								}
																							],
																							"functionName": {
																								"name": "not",
																								"nodeType": "YulIdentifier",
																								"src": "5608:3:1"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "5608:9:1"
																						}
																					],
																					"functionName": {
																						"name": "and",
																						"nodeType": "YulIdentifier",
																						"src": "5596:3:1"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "5596:22:1"
																				},
																				"variables": [
																					{
																						"name": "loopEnd",
																						"nodeType": "YulTypedName",
																						"src": "5585:7:1",
																						"type": ""
																					}
																				]
																			},
																			{
																				"nodeType": "YulVariableDeclaration",
																				"src": "5632:51:1",
																				"value": {
																					"arguments": [
																						{
																							"name": "slot",
																							"nodeType": "YulIdentifier",
																							"src": "5678:4:1"
																						}
																					],
																					"functionName": {
																						"name": "array_dataslot_t_string_storage",
																						"nodeType": "YulIdentifier",
																						"src": "5646:31:1"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "5646:37:1"
																				},
																				"variables": [
																					{
																						"name": "dstPtr",
																						"nodeType": "YulTypedName",
																						"src": "5636:6:1",
																						"type": ""
																					}
																				]
																			},
																			{
																				"nodeType": "YulVariableDeclaration",
																				"src": "5696:10:1",
																				"value": {
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5705:1:1",
																					"type": "",
																					"value": "0"
																				},
																				"variables": [
																					{
																						"name": "i",
																						"nodeType": "YulTypedName",
																						"src": "5700:1:1",
																						"type": ""
																					}
																				]
																			},
																			{
																				"body": {
																					"nodeType": "YulBlock",
																					"src": "5764:163:1",
																					"statements": [
																						{
																							"expression": {
																								"arguments": [
																									{
																										"name": "dstPtr",
																										"nodeType": "YulIdentifier",
																										"src": "5789:6:1"
																									},
																									{
																										"arguments": [
																											{
																												"arguments": [
																													{
																														"name": "src",
																														"nodeType": "YulIdentifier",
																														"src": "5807:3:1"
																													},
																													{
																														"name": "srcOffset",
																														"nodeType": "YulIdentifier",
																														"src": "5812:9:1"
																													}
																												],
																												"functionName": {
																													"name": "add",
																													"nodeType": "YulIdentifier",
																													"src": "5803:3:1"
																												},
																												"nodeType": "YulFunctionCall",
																												"src": "5803:19:1"
																											}
																										],
																										"functionName": {
																											"name": "mload",
																											"nodeType": "YulIdentifier",
																											"src": "5797:5:1"
																										},
																										"nodeType": "YulFunctionCall",
																										"src": "5797:26:1"
																									}
																								],
																								"functionName": {
																									"name": "sstore",
																									"nodeType": "YulIdentifier",
																									"src": "5782:6:1"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "5782:42:1"
																							},
																							"nodeType": "YulExpressionStatement",
																							"src": "5782:42:1"
																						},
																						{
																							"nodeType": "YulAssignment",
																							"src": "5841:24:1",
																							"value": {
																								"arguments": [
																									{
																										"name": "dstPtr",
																										"nodeType": "YulIdentifier",
																										"src": "5855:6:1"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "5863:1:1",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "5851:3:1"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "5851:14:1"
																							},
																							"variableNames": [
																								{
																									"name": "dstPtr",
																									"nodeType": "YulIdentifier",
																									"src": "5841:6:1"
																								}
																							]
																						},
																						{
																							"nodeType": "YulAssignment",
																							"src": "5882:31:1",
																							"value": {
																								"arguments": [
																									{
																										"name": "srcOffset",
																										"nodeType": "YulIdentifier",
																										"src": "5899:9:1"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "5910:2:1",
																										"type": "",
																										"value": "32"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "5895:3:1"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "5895:18:1"
																							},
																							"variableNames": [
																								{
																									"name": "srcOffset",
																									"nodeType": "YulIdentifier",
																									"src": "5882:9:1"
																								}
																							]
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "i",
																							"nodeType": "YulIdentifier",
																							"src": "5730:1:1"
																						},
																						{
																							"name": "loopEnd",
																							"nodeType": "YulIdentifier",
																							"src": "5733:7:1"
																						}
																					],
																					"functionName": {
																						"name": "lt",
																						"nodeType": "YulIdentifier",
																						"src": "5727:2:1"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "5727:14:1"
																				},
																				"nodeType": "YulForLoop",
																				"post": {
																					"nodeType": "YulBlock",
																					"src": "5742:21:1",
																					"statements": [
																						{
																							"nodeType": "YulAssignment",
																							"src": "5744:17:1",
																							"value": {
																								"arguments": [
																									{
																										"name": "i",
																										"nodeType": "YulIdentifier",
																										"src": "5753:1:1"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "5756:4:1",
																										"type": "",
																										"value": "0x20"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "5749:3:1"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "5749:12:1"
																							},
																							"variableNames": [
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "5744:1:1"
																								}
																							]
																						}
																					]
																				},
																				"pre": {
																					"nodeType": "YulBlock",
																					"src": "5723:3:1",
																					"statements": []
																				},
																				"src": "5719:208:1"
																			},
																			{
																				"body": {
																					"nodeType": "YulBlock",
																					"src": "5963:156:1",
																					"statements": [
																						{
																							"nodeType": "YulVariableDeclaration",
																							"src": "5981:43:1",
																							"value": {
																								"arguments": [
																									{
																										"arguments": [
																											{
																												"name": "src",
																												"nodeType": "YulIdentifier",
																												"src": "6008:3:1"
																											},
																											{
																												"name": "srcOffset",
																												"nodeType": "YulIdentifier",
																												"src": "6013:9:1"
																											}
																										],
																										"functionName": {
																											"name": "add",
																											"nodeType": "YulIdentifier",
																											"src": "6004:3:1"
																										},
																										"nodeType": "YulFunctionCall",
																										"src": "6004:19:1"
																									}
																								],
																								"functionName": {
																									"name": "mload",
																									"nodeType": "YulIdentifier",
																									"src": "5998:5:1"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "5998:26:1"
																							},
																							"variables": [
																								{
																									"name": "lastValue",
																									"nodeType": "YulTypedName",
																									"src": "5985:9:1",
																									"type": ""
																								}
																							]
																						},
																						{
																							"expression": {
																								"arguments": [
																									{
																										"name": "dstPtr",
																										"nodeType": "YulIdentifier",
																										"src": "6048:6:1"
																									},
																									{
																										"arguments": [
																											{
																												"name": "lastValue",
																												"nodeType": "YulIdentifier",
																												"src": "6075:9:1"
																											},
																											{
																												"arguments": [
																													{
																														"name": "newLen",
																														"nodeType": "YulIdentifier",
																														"src": "6090:6:1"
																													},
																													{
																														"kind": "number",
																														"nodeType": "YulLiteral",
																														"src": "6098:4:1",
																														"type": "",
																														"value": "0x1f"
																													}
																												],
																												"functionName": {
																													"name": "and",
																													"nodeType": "YulIdentifier",
																													"src": "6086:3:1"
																												},
																												"nodeType": "YulFunctionCall",
																												"src": "6086:17:1"
																											}
																										],
																										"functionName": {
																											"name": "mask_bytes_dynamic",
																											"nodeType": "YulIdentifier",
																											"src": "6056:18:1"
																										},
																										"nodeType": "YulFunctionCall",
																										"src": "6056:48:1"
																									}
																								],
																								"functionName": {
																									"name": "sstore",
																									"nodeType": "YulIdentifier",
																									"src": "6041:6:1"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "6041:64:1"
																							},
																							"nodeType": "YulExpressionStatement",
																							"src": "6041:64:1"
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "loopEnd",
																							"nodeType": "YulIdentifier",
																							"src": "5946:7:1"
																						},
																						{
																							"name": "newLen",
																							"nodeType": "YulIdentifier",
																							"src": "5955:6:1"
																						}
																					],
																					"functionName": {
																						"name": "lt",
																						"nodeType": "YulIdentifier",
																						"src": "5943:2:1"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "5943:19:1"
																				},
																				"nodeType": "YulIf",
																				"src": "5940:179:1"
																			},
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "slot",
																							"nodeType": "YulIdentifier",
																							"src": "6139:4:1"
																						},
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "newLen",
																											"nodeType": "YulIdentifier",
																											"src": "6153:6:1"
																										},
																										{
																											"kind": "number",
																											"nodeType": "YulLiteral",
																											"src": "6161:1:1",
																											"type": "",
																											"value": "2"
																										}
																									],
																									"functionName": {
																										"name": "mul",
																										"nodeType": "YulIdentifier",
																										"src": "6149:3:1"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "6149:14:1"
																								},
																								{
																									"kind": "number",
																									"nodeType": "YulLiteral",
																									"src": "6165:1:1",
																									"type": "",
																									"value": "1"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "6145:3:1"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "6145:22:1"
																						}
																					],
																					"functionName": {
																						"name": "sstore",
																						"nodeType": "YulIdentifier",
																						"src": "6132:6:1"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "6132:36:1"
																				},
																				"nodeType": "YulExpressionStatement",
																				"src": "6132:36:1"
																			}
																		]
																	},
																	"nodeType": "YulCase",
																	"src": "5560:618:1",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5565:1:1",
																		"type": "",
																		"value": "1"
																	}
																},
																{
																	"body": {
																		"nodeType": "YulBlock",
																		"src": "6195:222:1",
																		"statements": [
																			{
																				"nodeType": "YulVariableDeclaration",
																				"src": "6209:14:1",
																				"value": {
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6222:1:1",
																					"type": "",
																					"value": "0"
																				},
																				"variables": [
																					{
																						"name": "value",
																						"nodeType": "YulTypedName",
																						"src": "6213:5:1",
																						"type": ""
																					}
																				]
																			},
																			{
																				"body": {
																					"nodeType": "YulBlock",
																					"src": "6246:67:1",
																					"statements": [
																						{
																							"nodeType": "YulAssignment",
																							"src": "6264:35:1",
																							"value": {
																								"arguments": [
																									{
																										"arguments": [
																											{
																												"name": "src",
																												"nodeType": "YulIdentifier",
																												"src": "6283:3:1"
																											},
																											{
																												"name": "srcOffset",
																												"nodeType": "YulIdentifier",
																												"src": "6288:9:1"
																											}
																										],
																										"functionName": {
																											"name": "add",
																											"nodeType": "YulIdentifier",
																											"src": "6279:3:1"
																										},
																										"nodeType": "YulFunctionCall",
																										"src": "6279:19:1"
																									}
																								],
																								"functionName": {
																									"name": "mload",
																									"nodeType": "YulIdentifier",
																									"src": "6273:5:1"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "6273:26:1"
																							},
																							"variableNames": [
																								{
																									"name": "value",
																									"nodeType": "YulIdentifier",
																									"src": "6264:5:1"
																								}
																							]
																						}
																					]
																				},
																				"condition": {
																					"name": "newLen",
																					"nodeType": "YulIdentifier",
																					"src": "6239:6:1"
																				},
																				"nodeType": "YulIf",
																				"src": "6236:77:1"
																			},
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "slot",
																							"nodeType": "YulIdentifier",
																							"src": "6333:4:1"
																						},
																						{
																							"arguments": [
																								{
																									"name": "value",
																									"nodeType": "YulIdentifier",
																									"src": "6392:5:1"
																								},
																								{
																									"name": "newLen",
																									"nodeType": "YulIdentifier",
																									"src": "6399:6:1"
																								}
																							],
																							"functionName": {
																								"name": "extract_used_part_and_set_length_of_short_byte_array",
																								"nodeType": "YulIdentifier",
																								"src": "6339:52:1"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "6339:67:1"
																						}
																					],
																					"functionName": {
																						"name": "sstore",
																						"nodeType": "YulIdentifier",
																						"src": "6326:6:1"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "6326:81:1"
																				},
																				"nodeType": "YulExpressionStatement",
																				"src": "6326:81:1"
																			}
																		]
																	},
																	"nodeType": "YulCase",
																	"src": "6187:230:1",
																	"value": "default"
																}
															],
															"expression": {
																"arguments": [
																	{
																		"name": "newLen",
																		"nodeType": "YulIdentifier",
																		"src": "5540:6:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5548:2:1",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "5537:2:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "5537:14:1"
															},
															"nodeType": "YulSwitch",
															"src": "5530:887:1"
														}
													]
												},
												"name": "copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "slot",
														"nodeType": "YulTypedName",
														"src": "5109:4:1",
														"type": ""
													},
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "5115:3:1",
														"type": ""
													}
												],
												"src": "5028:1395:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6494:53:1",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "6511:3:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "6534:5:1"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "6516:17:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6516:24:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6504:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "6504:37:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6504:37:1"
														}
													]
												},
												"name": "abi_encode_t_address_to_t_address_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "6482:5:1",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "6489:3:1",
														"type": ""
													}
												],
												"src": "6429:118:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6651:124:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6661:26:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6673:9:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6684:2:1",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6669:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "6669:18:1"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6661:4:1"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "6741:6:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6754:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6765:1:1",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6750:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6750:17:1"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "6697:43:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "6697:71:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6697:71:1"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6623:9:1",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "6635:6:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6646:4:1",
														"type": ""
													}
												],
												"src": "6553:222:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6809:152:1",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6826:1:1",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6829:77:1",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6819:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "6819:88:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6819:88:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6923:1:1",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6926:4:1",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6916:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "6916:15:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6916:15:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6947:1:1",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6950:4:1",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "6940:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "6940:15:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6940:15:1"
														}
													]
												},
												"name": "panic_error_0x11",
												"nodeType": "YulFunctionDefinition",
												"src": "6781:180:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7018:51:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7028:34:1",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7053:1:1",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "7056:5:1"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "7049:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "7049:13:1"
															},
															"variableNames": [
																{
																	"name": "newValue",
																	"nodeType": "YulIdentifier",
																	"src": "7028:8:1"
																}
															]
														}
													]
												},
												"name": "shift_right_1_unsigned",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "6999:5:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "newValue",
														"nodeType": "YulTypedName",
														"src": "7009:8:1",
														"type": ""
													}
												],
												"src": "6967:102:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7148:775:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7158:15:1",
															"value": {
																"name": "_power",
																"nodeType": "YulIdentifier",
																"src": "7167:6:1"
															},
															"variableNames": [
																{
																	"name": "power",
																	"nodeType": "YulIdentifier",
																	"src": "7158:5:1"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7182:14:1",
															"value": {
																"name": "_base",
																"nodeType": "YulIdentifier",
																"src": "7191:5:1"
															},
															"variableNames": [
																{
																	"name": "base",
																	"nodeType": "YulIdentifier",
																	"src": "7182:4:1"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "7240:677:1",
																"statements": [
																	{
																		"body": {
																			"nodeType": "YulBlock",
																			"src": "7328:22:1",
																			"statements": [
																				{
																					"expression": {
																						"arguments": [],
																						"functionName": {
																							"name": "panic_error_0x11",
																							"nodeType": "YulIdentifier",
																							"src": "7330:16:1"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "7330:18:1"
																					},
																					"nodeType": "YulExpressionStatement",
																					"src": "7330:18:1"
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "base",
																					"nodeType": "YulIdentifier",
																					"src": "7306:4:1"
																				},
																				{
																					"arguments": [
																						{
																							"name": "max",
																							"nodeType": "YulIdentifier",
																							"src": "7316:3:1"
																						},
																						{
																							"name": "base",
																							"nodeType": "YulIdentifier",
																							"src": "7321:4:1"
																						}
																					],
																					"functionName": {
																						"name": "div",
																						"nodeType": "YulIdentifier",
																						"src": "7312:3:1"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "7312:14:1"
																				}
																			],
																			"functionName": {
																				"name": "gt",
																				"nodeType": "YulIdentifier",
																				"src": "7303:2:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7303:24:1"
																		},
																		"nodeType": "YulIf",
																		"src": "7300:50:1"
																	},
																	{
																		"body": {
																			"nodeType": "YulBlock",
																			"src": "7395:419:1",
																			"statements": [
																				{
																					"nodeType": "YulAssignment",
																					"src": "7775:25:1",
																					"value": {
																						"arguments": [
																							{
																								"name": "power",
																								"nodeType": "YulIdentifier",
																								"src": "7788:5:1"
																							},
																							{
																								"name": "base",
																								"nodeType": "YulIdentifier",
																								"src": "7795:4:1"
																							}
																						],
																						"functionName": {
																							"name": "mul",
																							"nodeType": "YulIdentifier",
																							"src": "7784:3:1"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "7784:16:1"
																					},
																					"variableNames": [
																						{
																							"name": "power",
																							"nodeType": "YulIdentifier",
																							"src": "7775:5:1"
																						}
																					]
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "exponent",
																					"nodeType": "YulIdentifier",
																					"src": "7370:8:1"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "7380:1:1",
																					"type": "",
																					"value": "1"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "7366:3:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7366:16:1"
																		},
																		"nodeType": "YulIf",
																		"src": "7363:451:1"
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "7827:23:1",
																		"value": {
																			"arguments": [
																				{
																					"name": "base",
																					"nodeType": "YulIdentifier",
																					"src": "7839:4:1"
																				},
																				{
																					"name": "base",
																					"nodeType": "YulIdentifier",
																					"src": "7845:4:1"
																				}
																			],
																			"functionName": {
																				"name": "mul",
																				"nodeType": "YulIdentifier",
																				"src": "7835:3:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7835:15:1"
																		},
																		"variableNames": [
																			{
																				"name": "base",
																				"nodeType": "YulIdentifier",
																				"src": "7827:4:1"
																			}
																		]
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "7863:44:1",
																		"value": {
																			"arguments": [
																				{
																					"name": "exponent",
																					"nodeType": "YulIdentifier",
																					"src": "7898:8:1"
																				}
																			],
																			"functionName": {
																				"name": "shift_right_1_unsigned",
																				"nodeType": "YulIdentifier",
																				"src": "7875:22:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7875:32:1"
																		},
																		"variableNames": [
																			{
																				"name": "exponent",
																				"nodeType": "YulIdentifier",
																				"src": "7863:8:1"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "exponent",
																		"nodeType": "YulIdentifier",
																		"src": "7216:8:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7226:1:1",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "7213:2:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "7213:15:1"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "7229:2:1",
																"statements": []
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "7209:3:1",
																"statements": []
															},
															"src": "7205:712:1"
														}
													]
												},
												"name": "checked_exp_helper",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "_power",
														"nodeType": "YulTypedName",
														"src": "7103:6:1",
														"type": ""
													},
													{
														"name": "_base",
														"nodeType": "YulTypedName",
														"src": "7111:5:1",
														"type": ""
													},
													{
														"name": "exponent",
														"nodeType": "YulTypedName",
														"src": "7118:8:1",
														"type": ""
													},
													{
														"name": "max",
														"nodeType": "YulTypedName",
														"src": "7128:3:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "power",
														"nodeType": "YulTypedName",
														"src": "7136:5:1",
														"type": ""
													},
													{
														"name": "base",
														"nodeType": "YulTypedName",
														"src": "7143:4:1",
														"type": ""
													}
												],
												"src": "7075:848:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7989:1013:1",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "8184:20:1",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "8186:10:1",
																		"value": {
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "8195:1:1",
																			"type": "",
																			"value": "1"
																		},
																		"variableNames": [
																			{
																				"name": "power",
																				"nodeType": "YulIdentifier",
																				"src": "8186:5:1"
																			}
																		]
																	},
																	{
																		"nodeType": "YulLeave",
																		"src": "8197:5:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "exponent",
																		"nodeType": "YulIdentifier",
																		"src": "8174:8:1"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "8167:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "8167:16:1"
															},
															"nodeType": "YulIf",
															"src": "8164:40:1"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "8229:20:1",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "8231:10:1",
																		"value": {
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "8240:1:1",
																			"type": "",
																			"value": "0"
																		},
																		"variableNames": [
																			{
																				"name": "power",
																				"nodeType": "YulIdentifier",
																				"src": "8231:5:1"
																			}
																		]
																	},
																	{
																		"nodeType": "YulLeave",
																		"src": "8242:5:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "base",
																		"nodeType": "YulIdentifier",
																		"src": "8223:4:1"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "8216:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "8216:12:1"
															},
															"nodeType": "YulIf",
															"src": "8213:36:1"
														},
														{
															"cases": [
																{
																	"body": {
																		"nodeType": "YulBlock",
																		"src": "8359:20:1",
																		"statements": [
																			{
																				"nodeType": "YulAssignment",
																				"src": "8361:10:1",
																				"value": {
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "8370:1:1",
																					"type": "",
																					"value": "1"
																				},
																				"variableNames": [
																					{
																						"name": "power",
																						"nodeType": "YulIdentifier",
																						"src": "8361:5:1"
																					}
																				]
																			},
																			{
																				"nodeType": "YulLeave",
																				"src": "8372:5:1"
																			}
																		]
																	},
																	"nodeType": "YulCase",
																	"src": "8352:27:1",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8357:1:1",
																		"type": "",
																		"value": "1"
																	}
																},
																{
																	"body": {
																		"nodeType": "YulBlock",
																		"src": "8403:176:1",
																		"statements": [
																			{
																				"body": {
																					"nodeType": "YulBlock",
																					"src": "8438:22:1",
																					"statements": [
																						{
																							"expression": {
																								"arguments": [],
																								"functionName": {
																									"name": "panic_error_0x11",
																									"nodeType": "YulIdentifier",
																									"src": "8440:16:1"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "8440:18:1"
																							},
																							"nodeType": "YulExpressionStatement",
																							"src": "8440:18:1"
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "exponent",
																							"nodeType": "YulIdentifier",
																							"src": "8423:8:1"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "8433:3:1",
																							"type": "",
																							"value": "255"
																						}
																					],
																					"functionName": {
																						"name": "gt",
																						"nodeType": "YulIdentifier",
																						"src": "8420:2:1"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "8420:17:1"
																				},
																				"nodeType": "YulIf",
																				"src": "8417:43:1"
																			},
																			{
																				"nodeType": "YulAssignment",
																				"src": "8473:25:1",
																				"value": {
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "8486:1:1",
																							"type": "",
																							"value": "2"
																						},
																						{
																							"name": "exponent",
																							"nodeType": "YulIdentifier",
																							"src": "8489:8:1"
																						}
																					],
																					"functionName": {
																						"name": "exp",
																						"nodeType": "YulIdentifier",
																						"src": "8482:3:1"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "8482:16:1"
																				},
																				"variableNames": [
																					{
																						"name": "power",
																						"nodeType": "YulIdentifier",
																						"src": "8473:5:1"
																					}
																				]
																			},
																			{
																				"body": {
																					"nodeType": "YulBlock",
																					"src": "8529:22:1",
																					"statements": [
																						{
																							"expression": {
																								"arguments": [],
																								"functionName": {
																									"name": "panic_error_0x11",
																									"nodeType": "YulIdentifier",
																									"src": "8531:16:1"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "8531:18:1"
																							},
																							"nodeType": "YulExpressionStatement",
																							"src": "8531:18:1"
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "power",
																							"nodeType": "YulIdentifier",
																							"src": "8517:5:1"
																						},
																						{
																							"name": "max",
																							"nodeType": "YulIdentifier",
																							"src": "8524:3:1"
																						}
																					],
																					"functionName": {
																						"name": "gt",
																						"nodeType": "YulIdentifier",
																						"src": "8514:2:1"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "8514:14:1"
																				},
																				"nodeType": "YulIf",
																				"src": "8511:40:1"
																			},
																			{
																				"nodeType": "YulLeave",
																				"src": "8564:5:1"
																			}
																		]
																	},
																	"nodeType": "YulCase",
																	"src": "8388:191:1",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8393:1:1",
																		"type": "",
																		"value": "2"
																	}
																}
															],
															"expression": {
																"name": "base",
																"nodeType": "YulIdentifier",
																"src": "8309:4:1"
															},
															"nodeType": "YulSwitch",
															"src": "8302:277:1"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "8711:123:1",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "8725:28:1",
																		"value": {
																			"arguments": [
																				{
																					"name": "base",
																					"nodeType": "YulIdentifier",
																					"src": "8738:4:1"
																				},
																				{
																					"name": "exponent",
																					"nodeType": "YulIdentifier",
																					"src": "8744:8:1"
																				}
																			],
																			"functionName": {
																				"name": "exp",
																				"nodeType": "YulIdentifier",
																				"src": "8734:3:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8734:19:1"
																		},
																		"variableNames": [
																			{
																				"name": "power",
																				"nodeType": "YulIdentifier",
																				"src": "8725:5:1"
																			}
																		]
																	},
																	{
																		"body": {
																			"nodeType": "YulBlock",
																			"src": "8784:22:1",
																			"statements": [
																				{
																					"expression": {
																						"arguments": [],
																						"functionName": {
																							"name": "panic_error_0x11",
																							"nodeType": "YulIdentifier",
																							"src": "8786:16:1"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "8786:18:1"
																					},
																					"nodeType": "YulExpressionStatement",
																					"src": "8786:18:1"
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "power",
																					"nodeType": "YulIdentifier",
																					"src": "8772:5:1"
																				},
																				{
																					"name": "max",
																					"nodeType": "YulIdentifier",
																					"src": "8779:3:1"
																				}
																			],
																			"functionName": {
																				"name": "gt",
																				"nodeType": "YulIdentifier",
																				"src": "8769:2:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8769:14:1"
																		},
																		"nodeType": "YulIf",
																		"src": "8766:40:1"
																	},
																	{
																		"nodeType": "YulLeave",
																		"src": "8819:5:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "base",
																						"nodeType": "YulIdentifier",
																						"src": "8614:4:1"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "8620:2:1",
																						"type": "",
																						"value": "11"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nodeType": "YulIdentifier",
																					"src": "8611:2:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "8611:12:1"
																			},
																			{
																				"arguments": [
																					{
																						"name": "exponent",
																						"nodeType": "YulIdentifier",
																						"src": "8628:8:1"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "8638:2:1",
																						"type": "",
																						"value": "78"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nodeType": "YulIdentifier",
																					"src": "8625:2:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "8625:16:1"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "8607:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8607:35:1"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "base",
																						"nodeType": "YulIdentifier",
																						"src": "8663:4:1"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "8669:3:1",
																						"type": "",
																						"value": "307"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nodeType": "YulIdentifier",
																					"src": "8660:2:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "8660:13:1"
																			},
																			{
																				"arguments": [
																					{
																						"name": "exponent",
																						"nodeType": "YulIdentifier",
																						"src": "8678:8:1"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "8688:2:1",
																						"type": "",
																						"value": "32"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nodeType": "YulIdentifier",
																					"src": "8675:2:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "8675:16:1"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "8656:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8656:36:1"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "8591:2:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "8591:111:1"
															},
															"nodeType": "YulIf",
															"src": "8588:246:1"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8844:57:1",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8878:1:1",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"name": "base",
																		"nodeType": "YulIdentifier",
																		"src": "8881:4:1"
																	},
																	{
																		"name": "exponent",
																		"nodeType": "YulIdentifier",
																		"src": "8887:8:1"
																	},
																	{
																		"name": "max",
																		"nodeType": "YulIdentifier",
																		"src": "8897:3:1"
																	}
																],
																"functionName": {
																	"name": "checked_exp_helper",
																	"nodeType": "YulIdentifier",
																	"src": "8859:18:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "8859:42:1"
															},
															"variableNames": [
																{
																	"name": "power",
																	"nodeType": "YulIdentifier",
																	"src": "8844:5:1"
																},
																{
																	"name": "base",
																	"nodeType": "YulIdentifier",
																	"src": "8851:4:1"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "8940:22:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "8942:16:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8942:18:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "8942:18:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "power",
																		"nodeType": "YulIdentifier",
																		"src": "8917:5:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "max",
																				"nodeType": "YulIdentifier",
																				"src": "8928:3:1"
																			},
																			{
																				"name": "base",
																				"nodeType": "YulIdentifier",
																				"src": "8933:4:1"
																			}
																		],
																		"functionName": {
																			"name": "div",
																			"nodeType": "YulIdentifier",
																			"src": "8924:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8924:14:1"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "8914:2:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "8914:25:1"
															},
															"nodeType": "YulIf",
															"src": "8911:51:1"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8971:25:1",
															"value": {
																"arguments": [
																	{
																		"name": "power",
																		"nodeType": "YulIdentifier",
																		"src": "8984:5:1"
																	},
																	{
																		"name": "base",
																		"nodeType": "YulIdentifier",
																		"src": "8991:4:1"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nodeType": "YulIdentifier",
																	"src": "8980:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "8980:16:1"
															},
															"variableNames": [
																{
																	"name": "power",
																	"nodeType": "YulIdentifier",
																	"src": "8971:5:1"
																}
															]
														}
													]
												},
												"name": "checked_exp_unsigned",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "base",
														"nodeType": "YulTypedName",
														"src": "7959:4:1",
														"type": ""
													},
													{
														"name": "exponent",
														"nodeType": "YulTypedName",
														"src": "7965:8:1",
														"type": ""
													},
													{
														"name": "max",
														"nodeType": "YulTypedName",
														"src": "7975:3:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "power",
														"nodeType": "YulTypedName",
														"src": "7983:5:1",
														"type": ""
													}
												],
												"src": "7929:1073:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9051:43:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "9061:27:1",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "9076:5:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9083:4:1",
																		"type": "",
																		"value": "0xff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "9072:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "9072:16:1"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "9061:7:1"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint8",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "9033:5:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "9043:7:1",
														"type": ""
													}
												],
												"src": "9008:86:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9164:217:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "9174:31:1",
															"value": {
																"arguments": [
																	{
																		"name": "base",
																		"nodeType": "YulIdentifier",
																		"src": "9200:4:1"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "9182:17:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "9182:23:1"
															},
															"variableNames": [
																{
																	"name": "base",
																	"nodeType": "YulIdentifier",
																	"src": "9174:4:1"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "9214:37:1",
															"value": {
																"arguments": [
																	{
																		"name": "exponent",
																		"nodeType": "YulIdentifier",
																		"src": "9242:8:1"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint8",
																	"nodeType": "YulIdentifier",
																	"src": "9226:15:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "9226:25:1"
															},
															"variableNames": [
																{
																	"name": "exponent",
																	"nodeType": "YulIdentifier",
																	"src": "9214:8:1"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "9261:113:1",
															"value": {
																"arguments": [
																	{
																		"name": "base",
																		"nodeType": "YulIdentifier",
																		"src": "9291:4:1"
																	},
																	{
																		"name": "exponent",
																		"nodeType": "YulIdentifier",
																		"src": "9297:8:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9307:66:1",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "checked_exp_unsigned",
																	"nodeType": "YulIdentifier",
																	"src": "9270:20:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "9270:104:1"
															},
															"variableNames": [
																{
																	"name": "power",
																	"nodeType": "YulIdentifier",
																	"src": "9261:5:1"
																}
															]
														}
													]
												},
												"name": "checked_exp_t_uint256_t_uint8",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "base",
														"nodeType": "YulTypedName",
														"src": "9139:4:1",
														"type": ""
													},
													{
														"name": "exponent",
														"nodeType": "YulTypedName",
														"src": "9145:8:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "power",
														"nodeType": "YulTypedName",
														"src": "9158:5:1",
														"type": ""
													}
												],
												"src": "9100:281:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9435:362:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "9445:25:1",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "9468:1:1"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "9450:17:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "9450:20:1"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nodeType": "YulIdentifier",
																	"src": "9445:1:1"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "9479:25:1",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "9502:1:1"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "9484:17:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "9484:20:1"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nodeType": "YulIdentifier",
																	"src": "9479:1:1"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "9513:28:1",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "9536:1:1"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "9539:1:1"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nodeType": "YulIdentifier",
																	"src": "9532:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "9532:9:1"
															},
															"variables": [
																{
																	"name": "product_raw",
																	"nodeType": "YulTypedName",
																	"src": "9517:11:1",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "9550:41:1",
															"value": {
																"arguments": [
																	{
																		"name": "product_raw",
																		"nodeType": "YulIdentifier",
																		"src": "9579:11:1"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "9561:17:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "9561:30:1"
															},
															"variableNames": [
																{
																	"name": "product",
																	"nodeType": "YulIdentifier",
																	"src": "9550:7:1"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "9768:22:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "9770:16:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9770:18:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "9770:18:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "9701:1:1"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "9694:6:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "9694:9:1"
																			},
																			{
																				"arguments": [
																					{
																						"name": "y",
																						"nodeType": "YulIdentifier",
																						"src": "9724:1:1"
																					},
																					{
																						"arguments": [
																							{
																								"name": "product",
																								"nodeType": "YulIdentifier",
																								"src": "9731:7:1"
																							},
																							{
																								"name": "x",
																								"nodeType": "YulIdentifier",
																								"src": "9740:1:1"
																							}
																						],
																						"functionName": {
																							"name": "div",
																							"nodeType": "YulIdentifier",
																							"src": "9727:3:1"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "9727:15:1"
																					}
																				],
																				"functionName": {
																					"name": "eq",
																					"nodeType": "YulIdentifier",
																					"src": "9721:2:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "9721:22:1"
																			}
																		],
																		"functionName": {
																			"name": "or",
																			"nodeType": "YulIdentifier",
																			"src": "9674:2:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9674:83:1"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "9654:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "9654:113:1"
															},
															"nodeType": "YulIf",
															"src": "9651:139:1"
														}
													]
												},
												"name": "checked_mul_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "9418:1:1",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "9421:1:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "product",
														"nodeType": "YulTypedName",
														"src": "9427:7:1",
														"type": ""
													}
												],
												"src": "9387:410:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9848:32:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "9858:16:1",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "9869:5:1"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "9858:7:1"
																}
															]
														}
													]
												},
												"name": "cleanup_t_bytes32",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "9830:5:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "9840:7:1",
														"type": ""
													}
												],
												"src": "9803:77:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9951:53:1",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "9968:3:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "9991:5:1"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_bytes32",
																			"nodeType": "YulIdentifier",
																			"src": "9973:17:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9973:24:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9961:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "9961:37:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9961:37:1"
														}
													]
												},
												"name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "9939:5:1",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "9946:3:1",
														"type": ""
													}
												],
												"src": "9886:118:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10075:53:1",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "10092:3:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "10115:5:1"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "10097:17:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10097:24:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10085:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "10085:37:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10085:37:1"
														}
													]
												},
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "10063:5:1",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "10070:3:1",
														"type": ""
													}
												],
												"src": "10010:118:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10344:454:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "10354:27:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10366:9:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10377:3:1",
																		"type": "",
																		"value": "160"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10362:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "10362:19:1"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "10354:4:1"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "10435:6:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10448:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10459:1:1",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10444:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10444:17:1"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "10391:43:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "10391:71:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10391:71:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "10516:6:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10529:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10540:2:1",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10525:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10525:18:1"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "10472:43:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "10472:72:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10472:72:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "10598:6:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10611:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10622:2:1",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10607:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10607:18:1"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "10554:43:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "10554:72:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10554:72:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value3",
																		"nodeType": "YulIdentifier",
																		"src": "10680:6:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10693:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10704:2:1",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10689:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10689:18:1"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "10636:43:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "10636:72:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10636:72:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value4",
																		"nodeType": "YulIdentifier",
																		"src": "10762:6:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10775:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10786:3:1",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10771:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10771:19:1"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "10718:43:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "10718:73:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10718:73:1"
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "10284:9:1",
														"type": ""
													},
													{
														"name": "value4",
														"nodeType": "YulTypedName",
														"src": "10296:6:1",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "10304:6:1",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "10312:6:1",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "10320:6:1",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "10328:6:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "10339:4:1",
														"type": ""
													}
												],
												"src": "10134:664:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10900:73:1",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "10917:3:1"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "10922:6:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10910:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "10910:19:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10910:19:1"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10938:29:1",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "10957:3:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10962:4:1",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10953:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "10953:14:1"
															},
															"variableNames": [
																{
																	"name": "updated_pos",
																	"nodeType": "YulIdentifier",
																	"src": "10938:11:1"
																}
															]
														}
													]
												},
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "10872:3:1",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "10877:6:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updated_pos",
														"nodeType": "YulTypedName",
														"src": "10888:11:1",
														"type": ""
													}
												],
												"src": "10804:169:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11041:184:1",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "11051:10:1",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "11060:1:1",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "11055:1:1",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "11120:63:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "11145:3:1"
																						},
																						{
																							"name": "i",
																							"nodeType": "YulIdentifier",
																							"src": "11150:1:1"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "11141:3:1"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "11141:11:1"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "src",
																									"nodeType": "YulIdentifier",
																									"src": "11164:3:1"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "11169:1:1"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "11160:3:1"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "11160:11:1"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "11154:5:1"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "11154:18:1"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "11134:6:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "11134:39:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "11134:39:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "11081:1:1"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "11084:6:1"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "11078:2:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "11078:13:1"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "11092:19:1",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "11094:15:1",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "11103:1:1"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "11106:2:1",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "11099:3:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "11099:10:1"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "11094:1:1"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "11074:3:1",
																"statements": []
															},
															"src": "11070:113:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dst",
																				"nodeType": "YulIdentifier",
																				"src": "11203:3:1"
																			},
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "11208:6:1"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11199:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11199:16:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11217:1:1",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11192:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "11192:27:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11192:27:1"
														}
													]
												},
												"name": "copy_memory_to_memory_with_cleanup",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "11023:3:1",
														"type": ""
													},
													{
														"name": "dst",
														"nodeType": "YulTypedName",
														"src": "11028:3:1",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "11033:6:1",
														"type": ""
													}
												],
												"src": "10979:246:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11279:54:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "11289:38:1",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "11307:5:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11314:2:1",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11303:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11303:14:1"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11323:2:1",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "11319:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11319:7:1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "11299:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "11299:28:1"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nodeType": "YulIdentifier",
																	"src": "11289:6:1"
																}
															]
														}
													]
												},
												"name": "round_up_to_mul_of_32",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "11262:5:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "result",
														"nodeType": "YulTypedName",
														"src": "11272:6:1",
														"type": ""
													}
												],
												"src": "11231:102:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11431:285:1",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "11441:53:1",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "11488:5:1"
																	}
																],
																"functionName": {
																	"name": "array_length_t_string_memory_ptr",
																	"nodeType": "YulIdentifier",
																	"src": "11455:32:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "11455:39:1"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "11445:6:1",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "11503:78:1",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "11569:3:1"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "11574:6:1"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "11510:58:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "11510:71:1"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "11503:3:1"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "11629:5:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11636:4:1",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11625:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11625:16:1"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "11643:3:1"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "11648:6:1"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory_with_cleanup",
																	"nodeType": "YulIdentifier",
																	"src": "11590:34:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "11590:65:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11590:65:1"
														},
														{
															"nodeType": "YulAssignment",
															"src": "11664:46:1",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "11675:3:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "11702:6:1"
																			}
																		],
																		"functionName": {
																			"name": "round_up_to_mul_of_32",
																			"nodeType": "YulIdentifier",
																			"src": "11680:21:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11680:29:1"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "11671:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "11671:39:1"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "11664:3:1"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "11412:5:1",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "11419:3:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "11427:3:1",
														"type": ""
													}
												],
												"src": "11339:377:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11840:195:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "11850:26:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11862:9:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11873:2:1",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "11858:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "11858:18:1"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "11850:4:1"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11897:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11908:1:1",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11893:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11893:17:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "11916:4:1"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11922:9:1"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "11912:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11912:20:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11886:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "11886:47:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11886:47:1"
														},
														{
															"nodeType": "YulAssignment",
															"src": "11942:86:1",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "12014:6:1"
																	},
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "12023:4:1"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "11950:63:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "11950:78:1"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "11942:4:1"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "11812:9:1",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "11824:6:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "11835:4:1",
														"type": ""
													}
												],
												"src": "11722:313:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12099:40:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "12110:22:1",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "12126:5:1"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "12120:5:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "12120:12:1"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "12110:6:1"
																}
															]
														}
													]
												},
												"name": "array_length_t_bytes_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "12082:5:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "12092:6:1",
														"type": ""
													}
												],
												"src": "12041:98:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12201:60:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "12211:11:1",
															"value": {
																"name": "ptr",
																"nodeType": "YulIdentifier",
																"src": "12219:3:1"
															},
															"variableNames": [
																{
																	"name": "data",
																	"nodeType": "YulIdentifier",
																	"src": "12211:4:1"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "12232:22:1",
															"value": {
																"arguments": [
																	{
																		"name": "ptr",
																		"nodeType": "YulIdentifier",
																		"src": "12244:3:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12249:4:1",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "12240:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "12240:14:1"
															},
															"variableNames": [
																{
																	"name": "data",
																	"nodeType": "YulIdentifier",
																	"src": "12232:4:1"
																}
															]
														}
													]
												},
												"name": "array_dataslot_t_bytes_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "ptr",
														"nodeType": "YulTypedName",
														"src": "12188:3:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "12196:4:1",
														"type": ""
													}
												],
												"src": "12145:116:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12322:99:1",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "12333:42:1",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "ptr",
																				"nodeType": "YulIdentifier",
																				"src": "12370:3:1"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "12364:5:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12364:10:1"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_bytes32",
																	"nodeType": "YulIdentifier",
																	"src": "12346:17:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "12346:29:1"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "12337:5:1",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "12385:29:1",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "12409:5:1"
															},
															"variableNames": [
																{
																	"name": "returnValue",
																	"nodeType": "YulIdentifier",
																	"src": "12385:11:1"
																}
															]
														}
													]
												},
												"name": "read_from_memoryt_bytes32",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "ptr",
														"nodeType": "YulTypedName",
														"src": "12302:3:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "returnValue",
														"nodeType": "YulTypedName",
														"src": "12310:11:1",
														"type": ""
													}
												],
												"src": "12267:154:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12517:504:1",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "12528:52:1",
															"value": {
																"arguments": [
																	{
																		"name": "array",
																		"nodeType": "YulIdentifier",
																		"src": "12574:5:1"
																	}
																],
																"functionName": {
																	"name": "array_length_t_bytes_memory_ptr",
																	"nodeType": "YulIdentifier",
																	"src": "12542:31:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "12542:38:1"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "12532:6:1",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "12589:21:1",
															"value": {
																"name": "array",
																"nodeType": "YulIdentifier",
																"src": "12605:5:1"
															},
															"variables": [
																{
																	"name": "dataArea",
																	"nodeType": "YulTypedName",
																	"src": "12593:8:1",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "12620:52:1",
															"value": {
																"arguments": [
																	{
																		"name": "array",
																		"nodeType": "YulIdentifier",
																		"src": "12666:5:1"
																	}
																],
																"functionName": {
																	"name": "array_dataslot_t_bytes_memory_ptr",
																	"nodeType": "YulIdentifier",
																	"src": "12632:33:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "12632:40:1"
															},
															"variableNames": [
																{
																	"name": "dataArea",
																	"nodeType": "YulIdentifier",
																	"src": "12620:8:1"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "12682:44:1",
															"value": {
																"arguments": [
																	{
																		"name": "dataArea",
																		"nodeType": "YulIdentifier",
																		"src": "12717:8:1"
																	}
																],
																"functionName": {
																	"name": "read_from_memoryt_bytes32",
																	"nodeType": "YulIdentifier",
																	"src": "12691:25:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "12691:35:1"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "12682:5:1"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "12754:260:1",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "12768:236:1",
																		"value": {
																			"arguments": [
																				{
																					"name": "value",
																					"nodeType": "YulIdentifier",
																					"src": "12798:5:1"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"kind": "number",
																									"nodeType": "YulLiteral",
																									"src": "12865:1:1",
																									"type": "",
																									"value": "8"
																								},
																								{
																									"arguments": [
																										{
																											"kind": "number",
																											"nodeType": "YulLiteral",
																											"src": "12872:2:1",
																											"type": "",
																											"value": "32"
																										},
																										{
																											"name": "length",
																											"nodeType": "YulIdentifier",
																											"src": "12876:6:1"
																										}
																									],
																									"functionName": {
																										"name": "sub",
																										"nodeType": "YulIdentifier",
																										"src": "12868:3:1"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "12868:15:1"
																								}
																							],
																							"functionName": {
																								"name": "mul",
																								"nodeType": "YulIdentifier",
																								"src": "12861:3:1"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "12861:23:1"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "12906:66:1",
																							"type": "",
																							"value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
																						}
																					],
																					"functionName": {
																						"name": "shift_left_dynamic",
																						"nodeType": "YulIdentifier",
																						"src": "12821:18:1"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "12821:169:1"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "12777:3:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "12777:227:1"
																		},
																		"variableNames": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "12768:5:1"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "12742:6:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12750:2:1",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "12739:2:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "12739:14:1"
															},
															"nodeType": "YulIf",
															"src": "12736:278:1"
														}
													]
												},
												"name": "convert_bytes_to_fixedbytes_from_t_bytes_memory_ptr_to_t_bytes32",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "array",
														"nodeType": "YulTypedName",
														"src": "12501:5:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "12511:5:1",
														"type": ""
													}
												],
												"src": "12427:594:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13071:147:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "13081:25:1",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "13104:1:1"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "13086:17:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "13086:20:1"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nodeType": "YulIdentifier",
																	"src": "13081:1:1"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "13115:25:1",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "13138:1:1"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "13120:17:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "13120:20:1"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nodeType": "YulIdentifier",
																	"src": "13115:1:1"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "13149:16:1",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "13160:1:1"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "13163:1:1"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "13156:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "13156:9:1"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "13149:3:1"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "13189:22:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "13191:16:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "13191:18:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "13191:18:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "13181:1:1"
																	},
																	{
																		"name": "sum",
																		"nodeType": "YulIdentifier",
																		"src": "13184:3:1"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "13178:2:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "13178:10:1"
															},
															"nodeType": "YulIf",
															"src": "13175:36:1"
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "13058:1:1",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "13061:1:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "13067:3:1",
														"type": ""
													}
												],
												"src": "13027:191:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13378:288:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "13388:26:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "13400:9:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13411:2:1",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "13396:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "13396:18:1"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "13388:4:1"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "13468:6:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13481:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13492:1:1",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13477:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13477:17:1"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "13424:43:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "13424:71:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13424:71:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "13549:6:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13562:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13573:2:1",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13558:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13558:18:1"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "13505:43:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "13505:72:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13505:72:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "13631:6:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13644:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13655:2:1",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13640:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13640:18:1"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "13587:43:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "13587:72:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13587:72:1"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "13334:9:1",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "13346:6:1",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "13354:6:1",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "13362:6:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "13373:4:1",
														"type": ""
													}
												],
												"src": "13224:442:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13770:124:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "13780:26:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "13792:9:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13803:2:1",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "13788:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "13788:18:1"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "13780:4:1"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "13860:6:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13873:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13884:1:1",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13869:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13869:17:1"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "13816:43:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "13816:71:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13816:71:1"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "13742:9:1",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "13754:6:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "13765:4:1",
														"type": ""
													}
												],
												"src": "13672:222:1"
											}
										]
									},
									"contents": "{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function array_dataslot_t_string_storage(ptr) -> data {\n        data := ptr\n\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n\n    }\n\n    function divide_by_32_ceil(value) -> result {\n        result := div(add(value, 31), 32)\n    }\n\n    function shift_left_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shl(bits, value)\n\n    }\n\n    function update_byte_slice_dynamic32(value, shiftBytes, toInsert) -> result {\n        let shiftBits := mul(shiftBytes, 8)\n        let mask := shift_left_dynamic(shiftBits, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n        toInsert := shift_left_dynamic(shiftBits, toInsert)\n        value := and(value, not(mask))\n        result := or(value, and(toInsert, mask))\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_uint256_to_t_uint256(value) -> converted {\n        converted := cleanup_t_uint256(identity(cleanup_t_uint256(value)))\n    }\n\n    function prepare_store_t_uint256(value) -> ret {\n        ret := value\n    }\n\n    function update_storage_value_t_uint256_to_t_uint256(slot, offset, value_0) {\n        let convertedValue_0 := convert_t_uint256_to_t_uint256(value_0)\n        sstore(slot, update_byte_slice_dynamic32(sload(slot), offset, prepare_store_t_uint256(convertedValue_0)))\n    }\n\n    function zero_value_for_split_t_uint256() -> ret {\n        ret := 0\n    }\n\n    function storage_set_to_zero_t_uint256(slot, offset) {\n        let zero_0 := zero_value_for_split_t_uint256()\n        update_storage_value_t_uint256_to_t_uint256(slot, offset, zero_0)\n    }\n\n    function clear_storage_range_t_bytes1(start, end) {\n        for {} lt(start, end) { start := add(start, 1) }\n        {\n            storage_set_to_zero_t_uint256(start, 0)\n        }\n    }\n\n    function clean_up_bytearray_end_slots_t_string_storage(array, len, startIndex) {\n\n        if gt(len, 31) {\n            let dataArea := array_dataslot_t_string_storage(array)\n            let deleteStart := add(dataArea, divide_by_32_ceil(startIndex))\n            // If we are clearing array to be short byte array, we want to clear only data starting from array data area.\n            if lt(startIndex, 32) { deleteStart := dataArea }\n            clear_storage_range_t_bytes1(deleteStart, add(dataArea, divide_by_32_ceil(len)))\n        }\n\n    }\n\n    function shift_right_unsigned_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shr(bits, value)\n\n    }\n\n    function mask_bytes_dynamic(data, bytes) -> result {\n        let mask := not(shift_right_unsigned_dynamic(mul(8, bytes), not(0)))\n        result := and(data, mask)\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used {\n        // we want to save only elements that are part of the array after resizing\n        // others should be set to zero\n        data := mask_bytes_dynamic(data, len)\n        used := or(data, mul(2, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src) {\n\n        let newLen := array_length_t_string_memory_ptr(src)\n        // Make sure array length is sane\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n\n        let oldLen := extract_byte_array_length(sload(slot))\n\n        // potentially truncate data\n        clean_up_bytearray_end_slots_t_string_storage(slot, oldLen, newLen)\n\n        let srcOffset := 0\n\n        srcOffset := 0x20\n\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(0x1f))\n\n            let dstPtr := array_dataslot_t_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, 0x20) } {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, 32)\n            }\n            if lt(loopEnd, newLen) {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, mask_bytes_dynamic(lastValue, and(newLen, 0x1f)))\n            }\n            sstore(slot, add(mul(newLen, 2), 1))\n        }\n        default {\n            let value := 0\n            if newLen {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function shift_right_1_unsigned(value) -> newValue {\n        newValue :=\n\n        shr(1, value)\n\n    }\n\n    function checked_exp_helper(_power, _base, exponent, max) -> power, base {\n        power := _power\n        base  := _base\n        for { } gt(exponent, 1) {}\n        {\n            // overflow check for base * base\n            if gt(base, div(max, base)) { panic_error_0x11() }\n            if and(exponent, 1)\n            {\n                // No checks for power := mul(power, base) needed, because the check\n                // for base * base above is sufficient, since:\n                // |power| <= base (proof by induction) and thus:\n                // |power * base| <= base * base <= max <= |min| (for signed)\n                // (this is equally true for signed and unsigned exp)\n                power := mul(power, base)\n            }\n            base := mul(base, base)\n            exponent := shift_right_1_unsigned(exponent)\n        }\n    }\n\n    function checked_exp_unsigned(base, exponent, max) -> power {\n        // This function currently cannot be inlined because of the\n        // \"leave\" statements. We have to improve the optimizer.\n\n        // Note that 0**0 == 1\n        if iszero(exponent) { power := 1 leave }\n        if iszero(base) { power := 0 leave }\n\n        // Specializations for small bases\n        switch base\n        // 0 is handled above\n        case 1 { power := 1 leave }\n        case 2\n        {\n            if gt(exponent, 255) { panic_error_0x11() }\n            power := exp(2, exponent)\n            if gt(power, max) { panic_error_0x11() }\n            leave\n        }\n        if or(\n            and(lt(base, 11), lt(exponent, 78)),\n            and(lt(base, 307), lt(exponent, 32))\n        )\n        {\n            power := exp(base, exponent)\n            if gt(power, max) { panic_error_0x11() }\n            leave\n        }\n\n        power, base := checked_exp_helper(1, base, exponent, max)\n\n        if gt(power, div(max, base)) { panic_error_0x11() }\n        power := mul(power, base)\n    }\n\n    function cleanup_t_uint8(value) -> cleaned {\n        cleaned := and(value, 0xff)\n    }\n\n    function checked_exp_t_uint256_t_uint8(base, exponent) -> power {\n        base := cleanup_t_uint256(base)\n        exponent := cleanup_t_uint8(exponent)\n\n        power := checked_exp_unsigned(base, exponent, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n\n    }\n\n    function checked_mul_t_uint256(x, y) -> product {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        let product_raw := mul(x, y)\n        product := cleanup_t_uint256(product_raw)\n\n        // overflow, if x != 0 and y != product/x\n        if iszero(\n            or(\n                iszero(x),\n                eq(y, div(product, x))\n            )\n        ) { panic_error_0x11() }\n\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed(headStart , value4, value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 160)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value3,  add(headStart, 96))\n\n        abi_encode_t_address_to_t_address_fromStack(value4,  add(headStart, 128))\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_dataslot_t_bytes_memory_ptr(ptr) -> data {\n        data := ptr\n\n        data := add(ptr, 0x20)\n\n    }\n\n    function read_from_memoryt_bytes32(ptr) -> returnValue {\n\n        let value := cleanup_t_bytes32(mload(ptr))\n\n        returnValue :=\n\n        value\n\n    }\n\n    function convert_bytes_to_fixedbytes_from_t_bytes_memory_ptr_to_t_bytes32(array) -> value {\n\n        let length := array_length_t_bytes_memory_ptr(array)\n        let dataArea := array\n\n        dataArea := array_dataslot_t_bytes_memory_ptr(array)\n\n        value := read_from_memoryt_bytes32(dataArea)\n\n        if lt(length, 32) {\n            value := and(\n                value,\n                shift_left_dynamic(\n                    mul(8, sub(32, length)),\n                    0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n                )\n            )\n        }\n\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        sum := add(x, y)\n\n        if gt(x, sum) { panic_error_0x11() }\n\n    }\n\n    function abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n}\n",
									"id": 1,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "61016060405234801562000011575f80fd5b50604051620032b8380380620032b8833981810160405281019062000037919062000870565b6040518060400160405280600581526020017f564547414e000000000000000000000000000000000000000000000000000000815250806040518060400160405280600181526020017f3100000000000000000000000000000000000000000000000000000000000000815250836040518060400160405280600581526020017f564547414e0000000000000000000000000000000000000000000000000000008152506040518060400160405280600381526020017f56474e0000000000000000000000000000000000000000000000000000000000815250816003908162000122919062000b04565b50806004908162000134919062000b04565b5050505f60055f6101000a81548160ff0219169083151502179055505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620001c3575f6040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401620001ba919062000bf9565b60405180910390fd5b620001d481620002cd60201b60201c565b50620001eb6006836200039260201b90919060201c565b6101208181525050620002096007826200039260201b90919060201c565b6101408181525050818051906020012060e08181525050808051906020012061010081815250504660a0818152505062000248620003e760201b60201c565b608081815250503073ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff1681525050505050620002c6336200029b6200044360201b60201c565b600a620002a9919062000d9d565b6301406f40620002ba919062000ded565b6200044b60201b60201c565b5062001097565b5f600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f602083511015620003b757620003af83620004d560201b60201c565b9050620003e1565b82620003c9836200053f60201b60201c565b5f019081620003d9919062000b04565b5060ff5f1b90505b92915050565b5f7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60e0516101005146306040516020016200042895949392919062000e62565b60405160208183030381529060405280519060200120905090565b5f6012905090565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603620004be575f6040517fec442f05000000000000000000000000000000000000000000000000000000008152600401620004b5919062000bf9565b60405180910390fd5b620004d15f83836200054860201b60201c565b5050565b5f80829050601f815111156200052457826040517f305a27a90000000000000000000000000000000000000000000000000000000081526004016200051b919062000f47565b60405180910390fd5b805181620005329062000f98565b5f1c175f1b915050919050565b5f819050919050565b6200055b8383836200056060201b60201c565b505050565b620005706200058860201b60201c565b62000583838383620005d260201b60201c565b505050565b62000598620007f660201b60201c565b15620005d0576040517fd93c066500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160362000626578060025f82825462000619919062001007565b92505081905550620006f7565b5f805f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905081811015620006b2578381836040517fe450d38c000000000000000000000000000000000000000000000000000000008152600401620006a99392919062001041565b60405180910390fd5b8181035f808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081905550505b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160362000740578060025f82825403925050819055506200078a565b805f808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051620007e991906200107c565b60405180910390a3505050565b5f60055f9054906101000a900460ff16905090565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6200083a826200080f565b9050919050565b6200084c816200082e565b811462000857575f80fd5b50565b5f815190506200086a8162000841565b92915050565b5f602082840312156200088857620008876200080b565b5b5f62000897848285016200085a565b91505092915050565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806200091c57607f821691505b602082108103620009325762000931620008d7565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f60088302620009967fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000959565b620009a2868362000959565b95508019841693508086168417925050509392505050565b5f819050919050565b5f819050919050565b5f620009ec620009e6620009e084620009ba565b620009c3565b620009ba565b9050919050565b5f819050919050565b62000a0783620009cc565b62000a1f62000a1682620009f3565b84845462000965565b825550505050565b5f90565b62000a3562000a27565b62000a42818484620009fc565b505050565b5b8181101562000a695762000a5d5f8262000a2b565b60018101905062000a48565b5050565b601f82111562000ab85762000a828162000938565b62000a8d846200094a565b8101602085101562000a9d578190505b62000ab562000aac856200094a565b83018262000a47565b50505b505050565b5f82821c905092915050565b5f62000ada5f198460080262000abd565b1980831691505092915050565b5f62000af4838362000ac9565b9150826002028217905092915050565b62000b0f82620008a0565b67ffffffffffffffff81111562000b2b5762000b2a620008aa565b5b62000b37825462000904565b62000b4482828562000a6d565b5f60209050601f83116001811462000b7a575f841562000b65578287015190505b62000b71858262000ae7565b86555062000be0565b601f19841662000b8a8662000938565b5f5b8281101562000bb35784890151825560018201915060208501945060208101905062000b8c565b8683101562000bd3578489015162000bcf601f89168262000ac9565b8355505b6001600288020188555050505b505050505050565b62000bf3816200082e565b82525050565b5f60208201905062000c0e5f83018462000be8565b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f8160011c9050919050565b5f808291508390505b600185111562000c9e5780860481111562000c765762000c7562000c14565b5b600185161562000c865780820291505b808102905062000c968562000c41565b945062000c56565b94509492505050565b5f8262000cb8576001905062000d8a565b8162000cc7575f905062000d8a565b816001811462000ce0576002811462000ceb5762000d21565b600191505062000d8a565b60ff84111562000d005762000cff62000c14565b5b8360020a91508482111562000d1a5762000d1962000c14565b5b5062000d8a565b5060208310610133831016604e8410600b841016171562000d5b5782820a90508381111562000d555762000d5462000c14565b5b62000d8a565b62000d6a848484600162000c4d565b9250905081840481111562000d845762000d8362000c14565b5b81810290505b9392505050565b5f60ff82169050919050565b5f62000da982620009ba565b915062000db68362000d91565b925062000de57fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff848462000ca7565b905092915050565b5f62000df982620009ba565b915062000e0683620009ba565b925082820262000e1681620009ba565b9150828204841483151762000e305762000e2f62000c14565b5b5092915050565b5f819050919050565b62000e4b8162000e37565b82525050565b62000e5c81620009ba565b82525050565b5f60a08201905062000e775f83018862000e40565b62000e86602083018762000e40565b62000e95604083018662000e40565b62000ea4606083018562000e51565b62000eb3608083018462000be8565b9695505050505050565b5f82825260208201905092915050565b5f5b8381101562000eec57808201518184015260208101905062000ecf565b5f8484015250505050565b5f601f19601f8301169050919050565b5f62000f1382620008a0565b62000f1f818562000ebd565b935062000f3181856020860162000ecd565b62000f3c8162000ef7565b840191505092915050565b5f6020820190508181035f83015262000f61818462000f07565b905092915050565b5f81519050919050565b5f819050602082019050919050565b5f62000f8f825162000e37565b80915050919050565b5f62000fa48262000f69565b8262000fb08462000f73565b905062000fbd8162000f82565b92506020821015620010005762000ffb7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8360200360080262000959565b831692505b5050919050565b5f6200101382620009ba565b91506200102083620009ba565b92508282019050808211156200103b576200103a62000c14565b5b92915050565b5f606082019050620010565f83018662000be8565b62001065602083018562000e51565b62001074604083018462000e51565b949350505050565b5f602082019050620010915f83018462000e51565b92915050565b60805160a05160c05160e0516101005161012051610140516121cf620010e95f395f610fa201525f610f6701525f61129201525f61127101525f610b5801525f610bae01525f610bd701526121cf5ff3fe608060405234801561000f575f80fd5b5060043610610140575f3560e01c8063715018a6116100b65780638da5cb5b1161007a5780638da5cb5b1461033057806395d89b411461034e578063a9059cbb1461036c578063d505accf1461039c578063dd62ed3e146103b8578063f2fde38b146103e857610140565b8063715018a6146102ac57806379cc6790146102b65780637ecebe00146102d25780638456cb591461030257806384b0196e1461030c57610140565b80633644e515116101085780633644e515146101fe5780633f4ba83a1461021c57806340c10f191461022657806342966c68146102425780635c975abb1461025e57806370a082311461027c57610140565b806306fdde0314610144578063095ea7b31461016257806318160ddd1461019257806323b872dd146101b0578063313ce567146101e0575b5f80fd5b61014c610404565b6040516101599190611a14565b60405180910390f35b61017c60048036038101906101779190611ac5565b610494565b6040516101899190611b1d565b60405180910390f35b61019a6104b6565b6040516101a79190611b45565b60405180910390f35b6101ca60048036038101906101c59190611b5e565b6104bf565b6040516101d79190611b1d565b60405180910390f35b6101e86104ed565b6040516101f59190611bc9565b60405180910390f35b6102066104f5565b6040516102139190611bfa565b60405180910390f35b610224610503565b005b610240600480360381019061023b9190611ac5565b610515565b005b61025c60048036038101906102579190611c13565b61052b565b005b61026661053f565b6040516102739190611b1d565b60405180910390f35b61029660048036038101906102919190611c3e565b610554565b6040516102a39190611b45565b60405180910390f35b6102b4610599565b005b6102d060048036038101906102cb9190611ac5565b6105ac565b005b6102ec60048036038101906102e79190611c3e565b6105cc565b6040516102f99190611b45565b60405180910390f35b61030a6105dd565b005b6103146105ef565b6040516103279796959493929190611d69565b60405180910390f35b610338610694565b6040516103459190611deb565b60405180910390f35b6103566106bd565b6040516103639190611a14565b60405180910390f35b61038660048036038101906103819190611ac5565b61074d565b6040516103939190611b1d565b60405180910390f35b6103b660048036038101906103b19190611e58565b61076f565b005b6103d260048036038101906103cd9190611ef5565b6108b4565b6040516103df9190611b45565b60405180910390f35b61040260048036038101906103fd9190611c3e565b610936565b005b60606003805461041390611f60565b80601f016020809104026020016040519081016040528092919081815260200182805461043f90611f60565b801561048a5780601f106104615761010080835404028352916020019161048a565b820191905f5260205f20905b81548152906001019060200180831161046d57829003601f168201915b5050505050905090565b5f8061049e6109ba565b90506104ab8185856109c1565b600191505092915050565b5f600254905090565b5f806104c96109ba565b90506104d68582856109d3565b6104e1858585610a65565b60019150509392505050565b5f6012905090565b5f6104fe610b55565b905090565b61050b610c0b565b610513610c92565b565b61051d610c0b565b6105278282610cf3565b5050565b61053c6105366109ba565b82610d72565b50565b5f60055f9054906101000a900460ff16905090565b5f805f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b6105a1610c0b565b6105aa5f610df1565b565b6105be826105b86109ba565b836109d3565b6105c88282610d72565b5050565b5f6105d682610eb6565b9050919050565b6105e5610c0b565b6105ed610efc565b565b5f6060805f805f6060610600610f5e565b610608610f99565b46305f801b5f67ffffffffffffffff81111561062757610626611f90565b5b6040519080825280602002602001820160405280156106555781602001602082028036833780820191505090505b507f0f00000000000000000000000000000000000000000000000000000000000000959493929190965096509650965096509650965090919293949596565b5f600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600480546106cc90611f60565b80601f01602080910402602001604051908101604052809291908181526020018280546106f890611f60565b80156107435780601f1061071a57610100808354040283529160200191610743565b820191905f5260205f20905b81548152906001019060200180831161072657829003601f168201915b5050505050905090565b5f806107576109ba565b9050610764818585610a65565b600191505092915050565b834211156107b457836040517f627913020000000000000000000000000000000000000000000000000000000081526004016107ab9190611b45565b60405180910390fd5b5f7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98888886107e28c610fd4565b896040516020016107f896959493929190611fbd565b6040516020818303038152906040528051906020012090505f61081a82611027565b90505f61082982878787611040565b90508973ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461089d57808a6040517f4b800e4600000000000000000000000000000000000000000000000000000000815260040161089492919061201c565b60405180910390fd5b6108a88a8a8a6109c1565b50505050505050505050565b5f60015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905092915050565b61093e610c0b565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036109ae575f6040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016109a59190611deb565b60405180910390fd5b6109b781610df1565b50565b5f33905090565b6109ce838383600161106e565b505050565b5f6109de84846108b4565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610a5f5781811015610a50578281836040517ffb8f41b2000000000000000000000000000000000000000000000000000000008152600401610a4793929190612043565b60405180910390fd5b610a5e84848484035f61106e565b5b50505050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610ad5575f6040517f96c6fd1e000000000000000000000000000000000000000000000000000000008152600401610acc9190611deb565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610b45575f6040517fec442f05000000000000000000000000000000000000000000000000000000008152600401610b3c9190611deb565b60405180910390fd5b610b5083838361123d565b505050565b5f7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16148015610bd057507f000000000000000000000000000000000000000000000000000000000000000046145b15610bfd577f00000000000000000000000000000000000000000000000000000000000000009050610c08565b610c0561124d565b90505b90565b610c136109ba565b73ffffffffffffffffffffffffffffffffffffffff16610c31610694565b73ffffffffffffffffffffffffffffffffffffffff1614610c9057610c546109ba565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401610c879190611deb565b60405180910390fd5b565b610c9a6112e2565b5f60055f6101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa610cdc6109ba565b604051610ce99190611deb565b60405180910390a1565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610d63575f6040517fec442f05000000000000000000000000000000000000000000000000000000008152600401610d5a9190611deb565b60405180910390fd5b610d6e5f838361123d565b5050565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610de2575f6040517f96c6fd1e000000000000000000000000000000000000000000000000000000008152600401610dd99190611deb565b60405180910390fd5b610ded825f8361123d565b5050565b5f600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f60085f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b610f04611322565b600160055f6101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610f476109ba565b604051610f549190611deb565b60405180910390a1565b6060610f9460067f000000000000000000000000000000000000000000000000000000000000000061136390919063ffffffff16565b905090565b6060610fcf60077f000000000000000000000000000000000000000000000000000000000000000061136390919063ffffffff16565b905090565b5f60085f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f815480929190600101919050559050919050565b5f611039611033610b55565b83611410565b9050919050565b5f805f8061105088888888611450565b9250925092506110608282611537565b829350505050949350505050565b5f73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036110de575f6040517fe602df050000000000000000000000000000000000000000000000000000000081526004016110d59190611deb565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361114e575f6040517f94280d620000000000000000000000000000000000000000000000000000000081526004016111459190611deb565b60405180910390fd5b8160015f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055508015611237578273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161122e9190611b45565b60405180910390a35b50505050565b611248838383611699565b505050565b5f7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f7f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000046306040516020016112c7959493929190612078565b60405160208183030381529060405280519060200120905090565b6112ea61053f565b611320576040517f8dfc202b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b61132a61053f565b15611361576040517fd93c066500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b606060ff5f1b831461137f57611378836116b1565b905061140a565b81805461138b90611f60565b80601f01602080910402602001604051908101604052809291908181526020018280546113b790611f60565b80156114025780601f106113d957610100808354040283529160200191611402565b820191905f5260205f20905b8154815290600101906020018083116113e557829003601f168201915b505050505090505b92915050565b5f6040517f190100000000000000000000000000000000000000000000000000000000000081528360028201528260228201526042812091505092915050565b5f805f7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0845f1c111561148c575f60038592509250925061152d565b5f6001888888886040515f81526020016040526040516114af94939291906120c9565b6020604051602081039080840390855afa1580156114cf573d5f803e3d5ffd5b5050506020604051035190505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611520575f60015f801b9350935093505061152d565b805f805f1b935093509350505b9450945094915050565b5f600381111561154a5761154961210c565b5b82600381111561155d5761155c61210c565b5b031561169557600160038111156115775761157661210c565b5b82600381111561158a5761158961210c565b5b036115c1576040517ff645eedf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260038111156115d5576115d461210c565b5b8260038111156115e8576115e761210c565b5b0361162c57805f1c6040517ffce698f70000000000000000000000000000000000000000000000000000000081526004016116239190611b45565b60405180910390fd5b60038081111561163f5761163e61210c565b5b8260038111156116525761165161210c565b5b0361169457806040517fd78bce0c00000000000000000000000000000000000000000000000000000000815260040161168b9190611bfa565b60405180910390fd5b5b5050565b6116a1611322565b6116ac838383611723565b505050565b60605f6116bd8361193c565b90505f602067ffffffffffffffff8111156116db576116da611f90565b5b6040519080825280601f01601f19166020018201604052801561170d5781602001600182028036833780820191505090505b5090508181528360208201528092505050919050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611773578060025f8282546117679190612166565b92505081905550611841565b5f805f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050818110156117fc578381836040517fe450d38c0000000000000000000000000000000000000000000000000000000081526004016117f393929190612043565b60405180910390fd5b8181035f808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081905550505b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611888578060025f82825403925050819055506118d2565b805f808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161192f9190611b45565b60405180910390a3505050565b5f8060ff835f1c169050601f811115611981576040517fb3512b0c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80915050919050565b5f81519050919050565b5f82825260208201905092915050565b5f5b838110156119c15780820151818401526020810190506119a6565b5f8484015250505050565b5f601f19601f8301169050919050565b5f6119e68261198a565b6119f08185611994565b9350611a008185602086016119a4565b611a09816119cc565b840191505092915050565b5f6020820190508181035f830152611a2c81846119dc565b905092915050565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f611a6182611a38565b9050919050565b611a7181611a57565b8114611a7b575f80fd5b50565b5f81359050611a8c81611a68565b92915050565b5f819050919050565b611aa481611a92565b8114611aae575f80fd5b50565b5f81359050611abf81611a9b565b92915050565b5f8060408385031215611adb57611ada611a34565b5b5f611ae885828601611a7e565b9250506020611af985828601611ab1565b9150509250929050565b5f8115159050919050565b611b1781611b03565b82525050565b5f602082019050611b305f830184611b0e565b92915050565b611b3f81611a92565b82525050565b5f602082019050611b585f830184611b36565b92915050565b5f805f60608486031215611b7557611b74611a34565b5b5f611b8286828701611a7e565b9350506020611b9386828701611a7e565b9250506040611ba486828701611ab1565b9150509250925092565b5f60ff82169050919050565b611bc381611bae565b82525050565b5f602082019050611bdc5f830184611bba565b92915050565b5f819050919050565b611bf481611be2565b82525050565b5f602082019050611c0d5f830184611beb565b92915050565b5f60208284031215611c2857611c27611a34565b5b5f611c3584828501611ab1565b91505092915050565b5f60208284031215611c5357611c52611a34565b5b5f611c6084828501611a7e565b91505092915050565b5f7fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b611c9d81611c69565b82525050565b611cac81611a57565b82525050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b611ce481611a92565b82525050565b5f611cf58383611cdb565b60208301905092915050565b5f602082019050919050565b5f611d1782611cb2565b611d218185611cbc565b9350611d2c83611ccc565b805f5b83811015611d5c578151611d438882611cea565b9750611d4e83611d01565b925050600181019050611d2f565b5085935050505092915050565b5f60e082019050611d7c5f83018a611c94565b8181036020830152611d8e81896119dc565b90508181036040830152611da281886119dc565b9050611db16060830187611b36565b611dbe6080830186611ca3565b611dcb60a0830185611beb565b81810360c0830152611ddd8184611d0d565b905098975050505050505050565b5f602082019050611dfe5f830184611ca3565b92915050565b611e0d81611bae565b8114611e17575f80fd5b50565b5f81359050611e2881611e04565b92915050565b611e3781611be2565b8114611e41575f80fd5b50565b5f81359050611e5281611e2e565b92915050565b5f805f805f805f60e0888a031215611e7357611e72611a34565b5b5f611e808a828b01611a7e565b9750506020611e918a828b01611a7e565b9650506040611ea28a828b01611ab1565b9550506060611eb38a828b01611ab1565b9450506080611ec48a828b01611e1a565b93505060a0611ed58a828b01611e44565b92505060c0611ee68a828b01611e44565b91505092959891949750929550565b5f8060408385031215611f0b57611f0a611a34565b5b5f611f1885828601611a7e565b9250506020611f2985828601611a7e565b9150509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f6002820490506001821680611f7757607f821691505b602082108103611f8a57611f89611f33565b5b50919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b5f60c082019050611fd05f830189611beb565b611fdd6020830188611ca3565b611fea6040830187611ca3565b611ff76060830186611b36565b6120046080830185611b36565b61201160a0830184611b36565b979650505050505050565b5f60408201905061202f5f830185611ca3565b61203c6020830184611ca3565b9392505050565b5f6060820190506120565f830186611ca3565b6120636020830185611b36565b6120706040830184611b36565b949350505050565b5f60a08201905061208b5f830188611beb565b6120986020830187611beb565b6120a56040830186611beb565b6120b26060830185611b36565b6120bf6080830184611ca3565b9695505050505050565b5f6080820190506120dc5f830187611beb565b6120e96020830186611bba565b6120f66040830185611beb565b6121036060830184611beb565b95945050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61217082611a92565b915061217b83611a92565b925082820190508082111561219357612192612139565b5b9291505056fea2646970667358221220ad3948f7005a1c3554453c469dc81a81de0d7522bf2b079561631841a967f48664736f6c63430008140033",
							"opcodes": "PUSH2 0x160 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x32B8 CODESIZE SUB DUP1 PUSH3 0x32B8 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH3 0x37 SWAP2 SWAP1 PUSH3 0x870 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x5 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x564547414E000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP DUP1 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x3100000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x5 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x564547414E000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x56474E0000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP DUP2 PUSH1 0x3 SWAP1 DUP2 PUSH3 0x122 SWAP2 SWAP1 PUSH3 0xB04 JUMP JUMPDEST POP DUP1 PUSH1 0x4 SWAP1 DUP2 PUSH3 0x134 SWAP2 SWAP1 PUSH3 0xB04 JUMP JUMPDEST POP POP POP PUSH0 PUSH1 0x5 PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH3 0x1C3 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x1E4FBDF700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x1BA SWAP2 SWAP1 PUSH3 0xBF9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH3 0x1D4 DUP2 PUSH3 0x2CD PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST POP PUSH3 0x1EB PUSH1 0x6 DUP4 PUSH3 0x392 PUSH1 0x20 SHL SWAP1 SWAP2 SWAP1 PUSH1 0x20 SHR JUMP JUMPDEST PUSH2 0x120 DUP2 DUP2 MSTORE POP POP PUSH3 0x209 PUSH1 0x7 DUP3 PUSH3 0x392 PUSH1 0x20 SHL SWAP1 SWAP2 SWAP1 PUSH1 0x20 SHR JUMP JUMPDEST PUSH2 0x140 DUP2 DUP2 MSTORE POP POP DUP2 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0xE0 DUP2 DUP2 MSTORE POP POP DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH2 0x100 DUP2 DUP2 MSTORE POP POP CHAINID PUSH1 0xA0 DUP2 DUP2 MSTORE POP POP PUSH3 0x248 PUSH3 0x3E7 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH1 0x80 DUP2 DUP2 MSTORE POP POP ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0xC0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP POP POP POP PUSH3 0x2C6 CALLER PUSH3 0x29B PUSH3 0x443 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH1 0xA PUSH3 0x2A9 SWAP2 SWAP1 PUSH3 0xD9D JUMP JUMPDEST PUSH4 0x1406F40 PUSH3 0x2BA SWAP2 SWAP1 PUSH3 0xDED JUMP JUMPDEST PUSH3 0x44B PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST POP PUSH3 0x1097 JUMP JUMPDEST PUSH0 PUSH1 0x5 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x5 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP4 MLOAD LT ISZERO PUSH3 0x3B7 JUMPI PUSH3 0x3AF DUP4 PUSH3 0x4D5 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST SWAP1 POP PUSH3 0x3E1 JUMP JUMPDEST DUP3 PUSH3 0x3C9 DUP4 PUSH3 0x53F PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH0 ADD SWAP1 DUP2 PUSH3 0x3D9 SWAP2 SWAP1 PUSH3 0xB04 JUMP JUMPDEST POP PUSH1 0xFF PUSH0 SHL SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F PUSH1 0xE0 MLOAD PUSH2 0x100 MLOAD CHAINID ADDRESS PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH3 0x428 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH3 0xE62 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 PUSH1 0x12 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH3 0x4BE JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0xEC442F0500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x4B5 SWAP2 SWAP1 PUSH3 0xBF9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH3 0x4D1 PUSH0 DUP4 DUP4 PUSH3 0x548 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH0 DUP1 DUP3 SWAP1 POP PUSH1 0x1F DUP2 MLOAD GT ISZERO PUSH3 0x524 JUMPI DUP3 PUSH1 0x40 MLOAD PUSH32 0x305A27A900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x51B SWAP2 SWAP1 PUSH3 0xF47 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH3 0x532 SWAP1 PUSH3 0xF98 JUMP JUMPDEST PUSH0 SHR OR PUSH0 SHL SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x55B DUP4 DUP4 DUP4 PUSH3 0x560 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH3 0x570 PUSH3 0x588 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x583 DUP4 DUP4 DUP4 PUSH3 0x5D2 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH3 0x598 PUSH3 0x7F6 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST ISZERO PUSH3 0x5D0 JUMPI PUSH1 0x40 MLOAD PUSH32 0xD93C066500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH3 0x626 JUMPI DUP1 PUSH1 0x2 PUSH0 DUP3 DUP3 SLOAD PUSH3 0x619 SWAP2 SWAP1 PUSH3 0x1007 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH3 0x6F7 JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD SWAP1 POP DUP2 DUP2 LT ISZERO PUSH3 0x6B2 JUMPI DUP4 DUP2 DUP4 PUSH1 0x40 MLOAD PUSH32 0xE450D38C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x6A9 SWAP4 SWAP3 SWAP2 SWAP1 PUSH3 0x1041 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 SUB PUSH0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 DUP2 SWAP1 SSTORE POP POP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH3 0x740 JUMPI DUP1 PUSH1 0x2 PUSH0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH3 0x78A JUMP JUMPDEST DUP1 PUSH0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD PUSH3 0x7E9 SWAP2 SWAP1 PUSH3 0x107C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x5 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH3 0x83A DUP3 PUSH3 0x80F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x84C DUP2 PUSH3 0x82E JUMP JUMPDEST DUP2 EQ PUSH3 0x857 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP PUSH3 0x86A DUP2 PUSH3 0x841 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x888 JUMPI PUSH3 0x887 PUSH3 0x80B JUMP JUMPDEST JUMPDEST PUSH0 PUSH3 0x897 DUP5 DUP3 DUP6 ADD PUSH3 0x85A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH3 0x91C JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x932 JUMPI PUSH3 0x931 PUSH3 0x8D7 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP DUP2 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x8 DUP4 MUL PUSH3 0x996 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH3 0x959 JUMP JUMPDEST PUSH3 0x9A2 DUP7 DUP4 PUSH3 0x959 JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH3 0x9EC PUSH3 0x9E6 PUSH3 0x9E0 DUP5 PUSH3 0x9BA JUMP JUMPDEST PUSH3 0x9C3 JUMP JUMPDEST PUSH3 0x9BA JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0xA07 DUP4 PUSH3 0x9CC JUMP JUMPDEST PUSH3 0xA1F PUSH3 0xA16 DUP3 PUSH3 0x9F3 JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH3 0x965 JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH0 SWAP1 JUMP JUMPDEST PUSH3 0xA35 PUSH3 0xA27 JUMP JUMPDEST PUSH3 0xA42 DUP2 DUP5 DUP5 PUSH3 0x9FC JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0xA69 JUMPI PUSH3 0xA5D PUSH0 DUP3 PUSH3 0xA2B JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH3 0xA48 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH3 0xAB8 JUMPI PUSH3 0xA82 DUP2 PUSH3 0x938 JUMP JUMPDEST PUSH3 0xA8D DUP5 PUSH3 0x94A JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH3 0xA9D JUMPI DUP2 SWAP1 POP JUMPDEST PUSH3 0xAB5 PUSH3 0xAAC DUP6 PUSH3 0x94A JUMP JUMPDEST DUP4 ADD DUP3 PUSH3 0xA47 JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH3 0xADA PUSH0 NOT DUP5 PUSH1 0x8 MUL PUSH3 0xABD JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH3 0xAF4 DUP4 DUP4 PUSH3 0xAC9 JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH3 0xB0F DUP3 PUSH3 0x8A0 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0xB2B JUMPI PUSH3 0xB2A PUSH3 0x8AA JUMP JUMPDEST JUMPDEST PUSH3 0xB37 DUP3 SLOAD PUSH3 0x904 JUMP JUMPDEST PUSH3 0xB44 DUP3 DUP3 DUP6 PUSH3 0xA6D JUMP JUMPDEST PUSH0 PUSH1 0x20 SWAP1 POP PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH3 0xB7A JUMPI PUSH0 DUP5 ISZERO PUSH3 0xB65 JUMPI DUP3 DUP8 ADD MLOAD SWAP1 POP JUMPDEST PUSH3 0xB71 DUP6 DUP3 PUSH3 0xAE7 JUMP JUMPDEST DUP7 SSTORE POP PUSH3 0xBE0 JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH3 0xB8A DUP7 PUSH3 0x938 JUMP JUMPDEST PUSH0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0xBB3 JUMPI DUP5 DUP10 ADD MLOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH3 0xB8C JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH3 0xBD3 JUMPI DUP5 DUP10 ADD MLOAD PUSH3 0xBCF PUSH1 0x1F DUP10 AND DUP3 PUSH3 0xAC9 JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH3 0xBF3 DUP2 PUSH3 0x82E JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH3 0xC0E PUSH0 DUP4 ADD DUP5 PUSH3 0xBE8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 DUP2 PUSH1 0x1 SHR SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 DUP3 SWAP2 POP DUP4 SWAP1 POP JUMPDEST PUSH1 0x1 DUP6 GT ISZERO PUSH3 0xC9E JUMPI DUP1 DUP7 DIV DUP2 GT ISZERO PUSH3 0xC76 JUMPI PUSH3 0xC75 PUSH3 0xC14 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP6 AND ISZERO PUSH3 0xC86 JUMPI DUP1 DUP3 MUL SWAP2 POP JUMPDEST DUP1 DUP2 MUL SWAP1 POP PUSH3 0xC96 DUP6 PUSH3 0xC41 JUMP JUMPDEST SWAP5 POP PUSH3 0xC56 JUMP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 DUP3 PUSH3 0xCB8 JUMPI PUSH1 0x1 SWAP1 POP PUSH3 0xD8A JUMP JUMPDEST DUP2 PUSH3 0xCC7 JUMPI PUSH0 SWAP1 POP PUSH3 0xD8A JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH3 0xCE0 JUMPI PUSH1 0x2 DUP2 EQ PUSH3 0xCEB JUMPI PUSH3 0xD21 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH3 0xD8A JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH3 0xD00 JUMPI PUSH3 0xCFF PUSH3 0xC14 JUMP JUMPDEST JUMPDEST DUP4 PUSH1 0x2 EXP SWAP2 POP DUP5 DUP3 GT ISZERO PUSH3 0xD1A JUMPI PUSH3 0xD19 PUSH3 0xC14 JUMP JUMPDEST JUMPDEST POP PUSH3 0xD8A JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH3 0xD5B JUMPI DUP3 DUP3 EXP SWAP1 POP DUP4 DUP2 GT ISZERO PUSH3 0xD55 JUMPI PUSH3 0xD54 PUSH3 0xC14 JUMP JUMPDEST JUMPDEST PUSH3 0xD8A JUMP JUMPDEST PUSH3 0xD6A DUP5 DUP5 DUP5 PUSH1 0x1 PUSH3 0xC4D JUMP JUMPDEST SWAP3 POP SWAP1 POP DUP2 DUP5 DIV DUP2 GT ISZERO PUSH3 0xD84 JUMPI PUSH3 0xD83 PUSH3 0xC14 JUMP JUMPDEST JUMPDEST DUP2 DUP2 MUL SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH3 0xDA9 DUP3 PUSH3 0x9BA JUMP JUMPDEST SWAP2 POP PUSH3 0xDB6 DUP4 PUSH3 0xD91 JUMP JUMPDEST SWAP3 POP PUSH3 0xDE5 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP5 PUSH3 0xCA7 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH3 0xDF9 DUP3 PUSH3 0x9BA JUMP JUMPDEST SWAP2 POP PUSH3 0xE06 DUP4 PUSH3 0x9BA JUMP JUMPDEST SWAP3 POP DUP3 DUP3 MUL PUSH3 0xE16 DUP2 PUSH3 0x9BA JUMP JUMPDEST SWAP2 POP DUP3 DUP3 DIV DUP5 EQ DUP4 ISZERO OR PUSH3 0xE30 JUMPI PUSH3 0xE2F PUSH3 0xC14 JUMP JUMPDEST JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0xE4B DUP2 PUSH3 0xE37 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH3 0xE5C DUP2 PUSH3 0x9BA JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0xA0 DUP3 ADD SWAP1 POP PUSH3 0xE77 PUSH0 DUP4 ADD DUP9 PUSH3 0xE40 JUMP JUMPDEST PUSH3 0xE86 PUSH1 0x20 DUP4 ADD DUP8 PUSH3 0xE40 JUMP JUMPDEST PUSH3 0xE95 PUSH1 0x40 DUP4 ADD DUP7 PUSH3 0xE40 JUMP JUMPDEST PUSH3 0xEA4 PUSH1 0x60 DUP4 ADD DUP6 PUSH3 0xE51 JUMP JUMPDEST PUSH3 0xEB3 PUSH1 0x80 DUP4 ADD DUP5 PUSH3 0xBE8 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0xEEC JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH3 0xECF JUMP JUMPDEST PUSH0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH3 0xF13 DUP3 PUSH3 0x8A0 JUMP JUMPDEST PUSH3 0xF1F DUP2 DUP6 PUSH3 0xEBD JUMP JUMPDEST SWAP4 POP PUSH3 0xF31 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH3 0xECD JUMP JUMPDEST PUSH3 0xF3C DUP2 PUSH3 0xEF7 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH3 0xF61 DUP2 DUP5 PUSH3 0xF07 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH3 0xF8F DUP3 MLOAD PUSH3 0xE37 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH3 0xFA4 DUP3 PUSH3 0xF69 JUMP JUMPDEST DUP3 PUSH3 0xFB0 DUP5 PUSH3 0xF73 JUMP JUMPDEST SWAP1 POP PUSH3 0xFBD DUP2 PUSH3 0xF82 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP3 LT ISZERO PUSH3 0x1000 JUMPI PUSH3 0xFFB PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 PUSH1 0x20 SUB PUSH1 0x8 MUL PUSH3 0x959 JUMP JUMPDEST DUP4 AND SWAP3 POP JUMPDEST POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH3 0x1013 DUP3 PUSH3 0x9BA JUMP JUMPDEST SWAP2 POP PUSH3 0x1020 DUP4 PUSH3 0x9BA JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH3 0x103B JUMPI PUSH3 0x103A PUSH3 0xC14 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH3 0x1056 PUSH0 DUP4 ADD DUP7 PUSH3 0xBE8 JUMP JUMPDEST PUSH3 0x1065 PUSH1 0x20 DUP4 ADD DUP6 PUSH3 0xE51 JUMP JUMPDEST PUSH3 0x1074 PUSH1 0x40 DUP4 ADD DUP5 PUSH3 0xE51 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH3 0x1091 PUSH0 DUP4 ADD DUP5 PUSH3 0xE51 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH1 0xC0 MLOAD PUSH1 0xE0 MLOAD PUSH2 0x100 MLOAD PUSH2 0x120 MLOAD PUSH2 0x140 MLOAD PUSH2 0x21CF PUSH3 0x10E9 PUSH0 CODECOPY PUSH0 PUSH2 0xFA2 ADD MSTORE PUSH0 PUSH2 0xF67 ADD MSTORE PUSH0 PUSH2 0x1292 ADD MSTORE PUSH0 PUSH2 0x1271 ADD MSTORE PUSH0 PUSH2 0xB58 ADD MSTORE PUSH0 PUSH2 0xBAE ADD MSTORE PUSH0 PUSH2 0xBD7 ADD MSTORE PUSH2 0x21CF PUSH0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x140 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x715018A6 GT PUSH2 0xB6 JUMPI DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x7A JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x330 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x34E JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x36C JUMPI DUP1 PUSH4 0xD505ACCF EQ PUSH2 0x39C JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x3B8 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x3E8 JUMPI PUSH2 0x140 JUMP JUMPDEST DUP1 PUSH4 0x715018A6 EQ PUSH2 0x2AC JUMPI DUP1 PUSH4 0x79CC6790 EQ PUSH2 0x2B6 JUMPI DUP1 PUSH4 0x7ECEBE00 EQ PUSH2 0x2D2 JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x302 JUMPI DUP1 PUSH4 0x84B0196E EQ PUSH2 0x30C JUMPI PUSH2 0x140 JUMP JUMPDEST DUP1 PUSH4 0x3644E515 GT PUSH2 0x108 JUMPI DUP1 PUSH4 0x3644E515 EQ PUSH2 0x1FE JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x21C JUMPI DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x226 JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x242 JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x25E JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x27C JUMPI PUSH2 0x140 JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x144 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x162 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x192 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x1B0 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x1E0 JUMPI JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x14C PUSH2 0x404 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x159 SWAP2 SWAP1 PUSH2 0x1A14 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x17C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x177 SWAP2 SWAP1 PUSH2 0x1AC5 JUMP JUMPDEST PUSH2 0x494 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x189 SWAP2 SWAP1 PUSH2 0x1B1D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x19A PUSH2 0x4B6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1A7 SWAP2 SWAP1 PUSH2 0x1B45 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1CA PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1C5 SWAP2 SWAP1 PUSH2 0x1B5E JUMP JUMPDEST PUSH2 0x4BF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1D7 SWAP2 SWAP1 PUSH2 0x1B1D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1E8 PUSH2 0x4ED JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1F5 SWAP2 SWAP1 PUSH2 0x1BC9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x206 PUSH2 0x4F5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x213 SWAP2 SWAP1 PUSH2 0x1BFA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x224 PUSH2 0x503 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x240 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x23B SWAP2 SWAP1 PUSH2 0x1AC5 JUMP JUMPDEST PUSH2 0x515 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x25C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x257 SWAP2 SWAP1 PUSH2 0x1C13 JUMP JUMPDEST PUSH2 0x52B JUMP JUMPDEST STOP JUMPDEST PUSH2 0x266 PUSH2 0x53F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x273 SWAP2 SWAP1 PUSH2 0x1B1D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x296 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x291 SWAP2 SWAP1 PUSH2 0x1C3E JUMP JUMPDEST PUSH2 0x554 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2A3 SWAP2 SWAP1 PUSH2 0x1B45 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2B4 PUSH2 0x599 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2D0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2CB SWAP2 SWAP1 PUSH2 0x1AC5 JUMP JUMPDEST PUSH2 0x5AC JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2EC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2E7 SWAP2 SWAP1 PUSH2 0x1C3E JUMP JUMPDEST PUSH2 0x5CC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2F9 SWAP2 SWAP1 PUSH2 0x1B45 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x30A PUSH2 0x5DD JUMP JUMPDEST STOP JUMPDEST PUSH2 0x314 PUSH2 0x5EF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x327 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1D69 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x338 PUSH2 0x694 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x345 SWAP2 SWAP1 PUSH2 0x1DEB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x356 PUSH2 0x6BD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x363 SWAP2 SWAP1 PUSH2 0x1A14 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x386 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x381 SWAP2 SWAP1 PUSH2 0x1AC5 JUMP JUMPDEST PUSH2 0x74D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x393 SWAP2 SWAP1 PUSH2 0x1B1D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3B6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3B1 SWAP2 SWAP1 PUSH2 0x1E58 JUMP JUMPDEST PUSH2 0x76F JUMP JUMPDEST STOP JUMPDEST PUSH2 0x3D2 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3CD SWAP2 SWAP1 PUSH2 0x1EF5 JUMP JUMPDEST PUSH2 0x8B4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3DF SWAP2 SWAP1 PUSH2 0x1B45 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x402 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3FD SWAP2 SWAP1 PUSH2 0x1C3E JUMP JUMPDEST PUSH2 0x936 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x413 SWAP1 PUSH2 0x1F60 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x43F SWAP1 PUSH2 0x1F60 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x48A JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x461 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x48A JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x46D JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x49E PUSH2 0x9BA JUMP JUMPDEST SWAP1 POP PUSH2 0x4AB DUP2 DUP6 DUP6 PUSH2 0x9C1 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x2 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x4C9 PUSH2 0x9BA JUMP JUMPDEST SWAP1 POP PUSH2 0x4D6 DUP6 DUP3 DUP6 PUSH2 0x9D3 JUMP JUMPDEST PUSH2 0x4E1 DUP6 DUP6 DUP6 PUSH2 0xA65 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x12 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 PUSH2 0x4FE PUSH2 0xB55 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x50B PUSH2 0xC0B JUMP JUMPDEST PUSH2 0x513 PUSH2 0xC92 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x51D PUSH2 0xC0B JUMP JUMPDEST PUSH2 0x527 DUP3 DUP3 PUSH2 0xCF3 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x53C PUSH2 0x536 PUSH2 0x9BA JUMP JUMPDEST DUP3 PUSH2 0xD72 JUMP JUMPDEST POP JUMP JUMPDEST PUSH0 PUSH1 0x5 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x5A1 PUSH2 0xC0B JUMP JUMPDEST PUSH2 0x5AA PUSH0 PUSH2 0xDF1 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x5BE DUP3 PUSH2 0x5B8 PUSH2 0x9BA JUMP JUMPDEST DUP4 PUSH2 0x9D3 JUMP JUMPDEST PUSH2 0x5C8 DUP3 DUP3 PUSH2 0xD72 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH0 PUSH2 0x5D6 DUP3 PUSH2 0xEB6 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x5E5 PUSH2 0xC0B JUMP JUMPDEST PUSH2 0x5ED PUSH2 0xEFC JUMP JUMPDEST JUMP JUMPDEST PUSH0 PUSH1 0x60 DUP1 PUSH0 DUP1 PUSH0 PUSH1 0x60 PUSH2 0x600 PUSH2 0xF5E JUMP JUMPDEST PUSH2 0x608 PUSH2 0xF99 JUMP JUMPDEST CHAINID ADDRESS PUSH0 DUP1 SHL PUSH0 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x627 JUMPI PUSH2 0x626 PUSH2 0x1F90 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x655 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP PUSH32 0xF00000000000000000000000000000000000000000000000000000000000000 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 POP SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 SWAP6 SWAP7 JUMP JUMPDEST PUSH0 PUSH1 0x5 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x6CC SWAP1 PUSH2 0x1F60 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x6F8 SWAP1 PUSH2 0x1F60 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x743 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x71A JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x743 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x726 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x757 PUSH2 0x9BA JUMP JUMPDEST SWAP1 POP PUSH2 0x764 DUP2 DUP6 DUP6 PUSH2 0xA65 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP4 TIMESTAMP GT ISZERO PUSH2 0x7B4 JUMPI DUP4 PUSH1 0x40 MLOAD PUSH32 0x6279130200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7AB SWAP2 SWAP1 PUSH2 0x1B45 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH32 0x6E71EDAE12B1B97F4D1F60370FEF10105FA2FAAE0126114A169C64845D6126C9 DUP9 DUP9 DUP9 PUSH2 0x7E2 DUP13 PUSH2 0xFD4 JUMP JUMPDEST DUP10 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x7F8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1FBD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH0 PUSH2 0x81A DUP3 PUSH2 0x1027 JUMP JUMPDEST SWAP1 POP PUSH0 PUSH2 0x829 DUP3 DUP8 DUP8 DUP8 PUSH2 0x1040 JUMP JUMPDEST SWAP1 POP DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x89D JUMPI DUP1 DUP11 PUSH1 0x40 MLOAD PUSH32 0x4B800E4600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x894 SWAP3 SWAP2 SWAP1 PUSH2 0x201C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x8A8 DUP11 DUP11 DUP11 PUSH2 0x9C1 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x1 PUSH0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x93E PUSH2 0xC0B JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x9AE JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x1E4FBDF700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9A5 SWAP2 SWAP1 PUSH2 0x1DEB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x9B7 DUP2 PUSH2 0xDF1 JUMP JUMPDEST POP JUMP JUMPDEST PUSH0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x9CE DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x106E JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x9DE DUP5 DUP5 PUSH2 0x8B4 JUMP JUMPDEST SWAP1 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 EQ PUSH2 0xA5F JUMPI DUP2 DUP2 LT ISZERO PUSH2 0xA50 JUMPI DUP3 DUP2 DUP4 PUSH1 0x40 MLOAD PUSH32 0xFB8F41B200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA47 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2043 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xA5E DUP5 DUP5 DUP5 DUP5 SUB PUSH0 PUSH2 0x106E JUMP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xAD5 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x96C6FD1E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xACC SWAP2 SWAP1 PUSH2 0x1DEB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xB45 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0xEC442F0500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xB3C SWAP2 SWAP1 PUSH2 0x1DEB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xB50 DUP4 DUP4 DUP4 PUSH2 0x123D JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0xBD0 JUMPI POP PUSH32 0x0 CHAINID EQ JUMPDEST ISZERO PUSH2 0xBFD JUMPI PUSH32 0x0 SWAP1 POP PUSH2 0xC08 JUMP JUMPDEST PUSH2 0xC05 PUSH2 0x124D JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xC13 PUSH2 0x9BA JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xC31 PUSH2 0x694 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xC90 JUMPI PUSH2 0xC54 PUSH2 0x9BA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x118CDAA700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC87 SWAP2 SWAP1 PUSH2 0x1DEB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH2 0xC9A PUSH2 0x12E2 JUMP JUMPDEST PUSH0 PUSH1 0x5 PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA PUSH2 0xCDC PUSH2 0x9BA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xCE9 SWAP2 SWAP1 PUSH2 0x1DEB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xD63 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0xEC442F0500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD5A SWAP2 SWAP1 PUSH2 0x1DEB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xD6E PUSH0 DUP4 DUP4 PUSH2 0x123D JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xDE2 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x96C6FD1E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xDD9 SWAP2 SWAP1 PUSH2 0x1DEB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xDED DUP3 PUSH0 DUP4 PUSH2 0x123D JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH0 PUSH1 0x5 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x5 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x8 PUSH0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xF04 PUSH2 0x1322 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x5 PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH2 0xF47 PUSH2 0x9BA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xF54 SWAP2 SWAP1 PUSH2 0x1DEB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0xF94 PUSH1 0x6 PUSH32 0x0 PUSH2 0x1363 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0xFCF PUSH1 0x7 PUSH32 0x0 PUSH2 0x1363 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 PUSH1 0x8 PUSH0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH1 0x1 ADD SWAP2 SWAP1 POP SSTORE SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x1039 PUSH2 0x1033 PUSH2 0xB55 JUMP JUMPDEST DUP4 PUSH2 0x1410 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH2 0x1050 DUP9 DUP9 DUP9 DUP9 PUSH2 0x1450 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP PUSH2 0x1060 DUP3 DUP3 PUSH2 0x1537 JUMP JUMPDEST DUP3 SWAP4 POP POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x10DE JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0xE602DF0500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x10D5 SWAP2 SWAP1 PUSH2 0x1DEB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x114E JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x94280D6200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1145 SWAP2 SWAP1 PUSH2 0x1DEB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x1 PUSH0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP1 ISZERO PUSH2 0x1237 JUMPI DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP5 PUSH1 0x40 MLOAD PUSH2 0x122E SWAP2 SWAP1 PUSH2 0x1B45 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x1248 DUP4 DUP4 DUP4 PUSH2 0x1699 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F PUSH32 0x0 PUSH32 0x0 CHAINID ADDRESS PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x12C7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2078 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x12EA PUSH2 0x53F JUMP JUMPDEST PUSH2 0x1320 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8DFC202B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH2 0x132A PUSH2 0x53F JUMP JUMPDEST ISZERO PUSH2 0x1361 JUMPI PUSH1 0x40 MLOAD PUSH32 0xD93C066500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x60 PUSH1 0xFF PUSH0 SHL DUP4 EQ PUSH2 0x137F JUMPI PUSH2 0x1378 DUP4 PUSH2 0x16B1 JUMP JUMPDEST SWAP1 POP PUSH2 0x140A JUMP JUMPDEST DUP2 DUP1 SLOAD PUSH2 0x138B SWAP1 PUSH2 0x1F60 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x13B7 SWAP1 PUSH2 0x1F60 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1402 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x13D9 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1402 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x13E5 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD PUSH32 0x1901000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE DUP4 PUSH1 0x2 DUP3 ADD MSTORE DUP3 PUSH1 0x22 DUP3 ADD MSTORE PUSH1 0x42 DUP2 KECCAK256 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP5 PUSH0 SHR GT ISZERO PUSH2 0x148C JUMPI PUSH0 PUSH1 0x3 DUP6 SWAP3 POP SWAP3 POP SWAP3 POP PUSH2 0x152D JUMP JUMPDEST PUSH0 PUSH1 0x1 DUP9 DUP9 DUP9 DUP9 PUSH1 0x40 MLOAD PUSH0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH2 0x14AF SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x20C9 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x14CF JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD SUB MLOAD SWAP1 POP PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1520 JUMPI PUSH0 PUSH1 0x1 PUSH0 DUP1 SHL SWAP4 POP SWAP4 POP SWAP4 POP POP PUSH2 0x152D JUMP JUMPDEST DUP1 PUSH0 DUP1 PUSH0 SHL SWAP4 POP SWAP4 POP SWAP4 POP POP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x154A JUMPI PUSH2 0x1549 PUSH2 0x210C JUMP JUMPDEST JUMPDEST DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x155D JUMPI PUSH2 0x155C PUSH2 0x210C JUMP JUMPDEST JUMPDEST SUB ISZERO PUSH2 0x1695 JUMPI PUSH1 0x1 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1577 JUMPI PUSH2 0x1576 PUSH2 0x210C JUMP JUMPDEST JUMPDEST DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x158A JUMPI PUSH2 0x1589 PUSH2 0x210C JUMP JUMPDEST JUMPDEST SUB PUSH2 0x15C1 JUMPI PUSH1 0x40 MLOAD PUSH32 0xF645EEDF00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x15D5 JUMPI PUSH2 0x15D4 PUSH2 0x210C JUMP JUMPDEST JUMPDEST DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x15E8 JUMPI PUSH2 0x15E7 PUSH2 0x210C JUMP JUMPDEST JUMPDEST SUB PUSH2 0x162C JUMPI DUP1 PUSH0 SHR PUSH1 0x40 MLOAD PUSH32 0xFCE698F700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1623 SWAP2 SWAP1 PUSH2 0x1B45 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 DUP1 DUP2 GT ISZERO PUSH2 0x163F JUMPI PUSH2 0x163E PUSH2 0x210C JUMP JUMPDEST JUMPDEST DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1652 JUMPI PUSH2 0x1651 PUSH2 0x210C JUMP JUMPDEST JUMPDEST SUB PUSH2 0x1694 JUMPI DUP1 PUSH1 0x40 MLOAD PUSH32 0xD78BCE0C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x168B SWAP2 SWAP1 PUSH2 0x1BFA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x16A1 PUSH2 0x1322 JUMP JUMPDEST PUSH2 0x16AC DUP4 DUP4 DUP4 PUSH2 0x1723 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH0 PUSH2 0x16BD DUP4 PUSH2 0x193C JUMP JUMPDEST SWAP1 POP PUSH0 PUSH1 0x20 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x16DB JUMPI PUSH2 0x16DA PUSH2 0x1F90 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x170D JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 DUP2 MSTORE DUP4 PUSH1 0x20 DUP3 ADD MSTORE DUP1 SWAP3 POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1773 JUMPI DUP1 PUSH1 0x2 PUSH0 DUP3 DUP3 SLOAD PUSH2 0x1767 SWAP2 SWAP1 PUSH2 0x2166 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0x1841 JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0x17FC JUMPI DUP4 DUP2 DUP4 PUSH1 0x40 MLOAD PUSH32 0xE450D38C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x17F3 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2043 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 SUB PUSH0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 DUP2 SWAP1 SSTORE POP POP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1888 JUMPI DUP1 PUSH1 0x2 PUSH0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0x18D2 JUMP JUMPDEST DUP1 PUSH0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD PUSH2 0x192F SWAP2 SWAP1 PUSH2 0x1B45 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0xFF DUP4 PUSH0 SHR AND SWAP1 POP PUSH1 0x1F DUP2 GT ISZERO PUSH2 0x1981 JUMPI PUSH1 0x40 MLOAD PUSH32 0xB3512B0C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x19C1 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x19A6 JUMP JUMPDEST PUSH0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x19E6 DUP3 PUSH2 0x198A JUMP JUMPDEST PUSH2 0x19F0 DUP2 DUP6 PUSH2 0x1994 JUMP JUMPDEST SWAP4 POP PUSH2 0x1A00 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x19A4 JUMP JUMPDEST PUSH2 0x1A09 DUP2 PUSH2 0x19CC JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0x1A2C DUP2 DUP5 PUSH2 0x19DC JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x1A61 DUP3 PUSH2 0x1A38 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1A71 DUP2 PUSH2 0x1A57 JUMP JUMPDEST DUP2 EQ PUSH2 0x1A7B JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1A8C DUP2 PUSH2 0x1A68 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1AA4 DUP2 PUSH2 0x1A92 JUMP JUMPDEST DUP2 EQ PUSH2 0x1AAE JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1ABF DUP2 PUSH2 0x1A9B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1ADB JUMPI PUSH2 0x1ADA PUSH2 0x1A34 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1AE8 DUP6 DUP3 DUP7 ADD PUSH2 0x1A7E JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1AF9 DUP6 DUP3 DUP7 ADD PUSH2 0x1AB1 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1B17 DUP2 PUSH2 0x1B03 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1B30 PUSH0 DUP4 ADD DUP5 PUSH2 0x1B0E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1B3F DUP2 PUSH2 0x1A92 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1B58 PUSH0 DUP4 ADD DUP5 PUSH2 0x1B36 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1B75 JUMPI PUSH2 0x1B74 PUSH2 0x1A34 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1B82 DUP7 DUP3 DUP8 ADD PUSH2 0x1A7E JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x1B93 DUP7 DUP3 DUP8 ADD PUSH2 0x1A7E JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x1BA4 DUP7 DUP3 DUP8 ADD PUSH2 0x1AB1 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1BC3 DUP2 PUSH2 0x1BAE JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1BDC PUSH0 DUP4 ADD DUP5 PUSH2 0x1BBA JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1BF4 DUP2 PUSH2 0x1BE2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1C0D PUSH0 DUP4 ADD DUP5 PUSH2 0x1BEB JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1C28 JUMPI PUSH2 0x1C27 PUSH2 0x1A34 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1C35 DUP5 DUP3 DUP6 ADD PUSH2 0x1AB1 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1C53 JUMPI PUSH2 0x1C52 PUSH2 0x1A34 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1C60 DUP5 DUP3 DUP6 ADD PUSH2 0x1A7E JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1C9D DUP2 PUSH2 0x1C69 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x1CAC DUP2 PUSH2 0x1A57 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1CE4 DUP2 PUSH2 0x1A92 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH2 0x1CF5 DUP4 DUP4 PUSH2 0x1CDB JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x1D17 DUP3 PUSH2 0x1CB2 JUMP JUMPDEST PUSH2 0x1D21 DUP2 DUP6 PUSH2 0x1CBC JUMP JUMPDEST SWAP4 POP PUSH2 0x1D2C DUP4 PUSH2 0x1CCC JUMP JUMPDEST DUP1 PUSH0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1D5C JUMPI DUP2 MLOAD PUSH2 0x1D43 DUP9 DUP3 PUSH2 0x1CEA JUMP JUMPDEST SWAP8 POP PUSH2 0x1D4E DUP4 PUSH2 0x1D01 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x1D2F JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0xE0 DUP3 ADD SWAP1 POP PUSH2 0x1D7C PUSH0 DUP4 ADD DUP11 PUSH2 0x1C94 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x1D8E DUP2 DUP10 PUSH2 0x19DC JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x1DA2 DUP2 DUP9 PUSH2 0x19DC JUMP JUMPDEST SWAP1 POP PUSH2 0x1DB1 PUSH1 0x60 DUP4 ADD DUP8 PUSH2 0x1B36 JUMP JUMPDEST PUSH2 0x1DBE PUSH1 0x80 DUP4 ADD DUP7 PUSH2 0x1CA3 JUMP JUMPDEST PUSH2 0x1DCB PUSH1 0xA0 DUP4 ADD DUP6 PUSH2 0x1BEB JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0xC0 DUP4 ADD MSTORE PUSH2 0x1DDD DUP2 DUP5 PUSH2 0x1D0D JUMP JUMPDEST SWAP1 POP SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1DFE PUSH0 DUP4 ADD DUP5 PUSH2 0x1CA3 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1E0D DUP2 PUSH2 0x1BAE JUMP JUMPDEST DUP2 EQ PUSH2 0x1E17 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1E28 DUP2 PUSH2 0x1E04 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1E37 DUP2 PUSH2 0x1BE2 JUMP JUMPDEST DUP2 EQ PUSH2 0x1E41 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1E52 DUP2 PUSH2 0x1E2E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH0 DUP1 PUSH0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x1E73 JUMPI PUSH2 0x1E72 PUSH2 0x1A34 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1E80 DUP11 DUP3 DUP12 ADD PUSH2 0x1A7E JUMP JUMPDEST SWAP8 POP POP PUSH1 0x20 PUSH2 0x1E91 DUP11 DUP3 DUP12 ADD PUSH2 0x1A7E JUMP JUMPDEST SWAP7 POP POP PUSH1 0x40 PUSH2 0x1EA2 DUP11 DUP3 DUP12 ADD PUSH2 0x1AB1 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x60 PUSH2 0x1EB3 DUP11 DUP3 DUP12 ADD PUSH2 0x1AB1 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x80 PUSH2 0x1EC4 DUP11 DUP3 DUP12 ADD PUSH2 0x1E1A JUMP JUMPDEST SWAP4 POP POP PUSH1 0xA0 PUSH2 0x1ED5 DUP11 DUP3 DUP12 ADD PUSH2 0x1E44 JUMP JUMPDEST SWAP3 POP POP PUSH1 0xC0 PUSH2 0x1EE6 DUP11 DUP3 DUP12 ADD PUSH2 0x1E44 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1F0B JUMPI PUSH2 0x1F0A PUSH2 0x1A34 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1F18 DUP6 DUP3 DUP7 ADD PUSH2 0x1A7E JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1F29 DUP6 DUP3 DUP7 ADD PUSH2 0x1A7E JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x1F77 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1F8A JUMPI PUSH2 0x1F89 PUSH2 0x1F33 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH1 0xC0 DUP3 ADD SWAP1 POP PUSH2 0x1FD0 PUSH0 DUP4 ADD DUP10 PUSH2 0x1BEB JUMP JUMPDEST PUSH2 0x1FDD PUSH1 0x20 DUP4 ADD DUP9 PUSH2 0x1CA3 JUMP JUMPDEST PUSH2 0x1FEA PUSH1 0x40 DUP4 ADD DUP8 PUSH2 0x1CA3 JUMP JUMPDEST PUSH2 0x1FF7 PUSH1 0x60 DUP4 ADD DUP7 PUSH2 0x1B36 JUMP JUMPDEST PUSH2 0x2004 PUSH1 0x80 DUP4 ADD DUP6 PUSH2 0x1B36 JUMP JUMPDEST PUSH2 0x2011 PUSH1 0xA0 DUP4 ADD DUP5 PUSH2 0x1B36 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x202F PUSH0 DUP4 ADD DUP6 PUSH2 0x1CA3 JUMP JUMPDEST PUSH2 0x203C PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1CA3 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x2056 PUSH0 DUP4 ADD DUP7 PUSH2 0x1CA3 JUMP JUMPDEST PUSH2 0x2063 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x1B36 JUMP JUMPDEST PUSH2 0x2070 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x1B36 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0xA0 DUP3 ADD SWAP1 POP PUSH2 0x208B PUSH0 DUP4 ADD DUP9 PUSH2 0x1BEB JUMP JUMPDEST PUSH2 0x2098 PUSH1 0x20 DUP4 ADD DUP8 PUSH2 0x1BEB JUMP JUMPDEST PUSH2 0x20A5 PUSH1 0x40 DUP4 ADD DUP7 PUSH2 0x1BEB JUMP JUMPDEST PUSH2 0x20B2 PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x1B36 JUMP JUMPDEST PUSH2 0x20BF PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x1CA3 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x20DC PUSH0 DUP4 ADD DUP8 PUSH2 0x1BEB JUMP JUMPDEST PUSH2 0x20E9 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x1BBA JUMP JUMPDEST PUSH2 0x20F6 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x1BEB JUMP JUMPDEST PUSH2 0x2103 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x1BEB JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH2 0x2170 DUP3 PUSH2 0x1A92 JUMP JUMPDEST SWAP2 POP PUSH2 0x217B DUP4 PUSH2 0x1A92 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x2193 JUMPI PUSH2 0x2192 PUSH2 0x2139 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAD CODECOPY BASEFEE 0xF7 STOP GAS SHR CALLDATALOAD SLOAD GASLIMIT EXTCODECOPY CHAINID SWAP14 0xC8 BYTE DUP2 0xDE 0xD PUSH22 0x22BF2B079561631841A967F48664736F6C6343000814 STOP CALLER ",
							"sourceMap": "84759:746:0:-:0;;;84841:190;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;83445:52;;;;;;;;;;;;;;;;;83484:4;77289:431;;;;;;;;;;;;;;;;;84921:12;12757:113;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12831:5;12823;:13;;;;;;:::i;:::-;;12856:7;12846;:17;;;;;;:::i;:::-;;12757:113;;24362:5;24352:7;;:15;;;;;;;;;;;;;;;;;;28441:1;28417:26;;:12;:26;;;28413:95;;28494:1;28466:31;;;;;;;;;;;:::i;:::-;;;;;;;;28413:95;28517:32;28536:12;28517:18;;;:32;;:::i;:::-;28369:187;77362:45;77393:13;77362:4;:30;;;;:45;;;;:::i;:::-;77354:53;;;;;;77428:51;77462:16;77428:7;:33;;;;:51;;;;:::i;:::-;77417:62;;;;;;77519:4;77503:22;;;;;;77489:36;;;;;;77568:7;77552:25;;;;;;77535:42;;;;;;77605:13;77588:30;;;;;;77653:23;:21;;;:23;;:::i;:::-;77628:48;;;;;;77708:4;77686:27;;;;;;;;;;77289:431;;83445:52;84978:46:::3;84984:10;85013;:8;;;:10;;:::i;:::-;85007:2;:16;;;;:::i;:::-;84996:8;:27;;;;:::i;:::-;84978:5;;;:46;;:::i;:::-;84841:190:::0;84759:746;;30056:187;30129:16;30148:6;;;;;;;;;;;30129:25;;30173:8;30164:6;;:17;;;;;;;;;;;;;;;;;;30227:8;30196:40;;30217:8;30196:40;;;;;;;;;;;;30119:124;30056:187;:::o;71939:340::-;72035:11;72084:2;72068:5;72062:19;:24;72058:215;;;72109:20;72123:5;72109:13;;;:20;;:::i;:::-;72102:27;;;;72058:215;72201:5;72160:32;72186:5;72160:25;;;:32;;:::i;:::-;:38;;:46;;;;;;:::i;:::-;;70415:66;72244:17;;72220:42;;71939:340;;;;;:::o;78074:179::-;78129:7;76040:95;78187:11;;78200:14;;78216:13;78239:4;78165:80;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;78155:91;;;;;;78148:98;;78074:179;:::o;13863:82::-;13912:5;13936:2;13929:9;;13863:82;:::o;18582:208::-;18671:1;18652:21;;:7;:21;;;18648:91;;18725:1;18696:32;;;;;;;;;;;:::i;:::-;;;;;;;;18648:91;18748:35;18764:1;18768:7;18777:5;18748:7;;;:35;;:::i;:::-;18582:208;;:::o;70733:286::-;70798:11;70821:17;70847:3;70821:30;;70879:2;70865:4;:11;:16;70861:72;;;70918:3;70904:18;;;;;;;;;;;:::i;:::-;;;;;;;;70861:72;70999:4;:11;70990:4;70982:13;;;:::i;:::-;70974:22;;:36;70966:45;;70942:70;;;70733:286;;;:::o;68249:202::-;68317:20;68425:10;68415:20;;68249:202;;;:::o;85338:165::-;85466:30;85480:4;85486:2;85490:5;85466:13;;;:30;;:::i;:::-;85338:165;;;:::o;27019:145::-;24595:19;:17;;;:19;;:::i;:::-;27127:30:::1;27141:4;27147:2;27151:5;27127:13;;;:30;;:::i;:::-;27019:145:::0;;;:::o;25123:128::-;25188:8;:6;;;:8;;:::i;:::-;25184:61;;;25219:15;;;;;;;;;;;;;;25184:61;25123:128::o;17132:1107::-;17237:1;17221:18;;:4;:18;;;17217:540;;17373:5;17357:12;;:21;;;;;;;:::i;:::-;;;;;;;;17217:540;;;17409:19;17431:9;:15;17441:4;17431:15;;;;;;;;;;;;;;;;17409:37;;17478:5;17464:11;:19;17460:115;;;17535:4;17541:11;17554:5;17510:50;;;;;;;;;;;;;:::i;:::-;;;;;;;;17460:115;17727:5;17713:11;:19;17695:9;:15;17705:4;17695:15;;;;;;;;;;;;;;;:37;;;;17395:362;17217:540;17785:1;17771:16;;:2;:16;;;17767:425;;17950:5;17934:12;;:21;;;;;;;;;;;17767:425;;;18162:5;18145:9;:13;18155:2;18145:13;;;;;;;;;;;;;;;;:22;;;;;;;;;;;17767:425;18222:2;18207:25;;18216:4;18207:25;;;18226:5;18207:25;;;;;;:::i;:::-;;;;;;;;17132:1107;;;:::o;24971:84::-;25018:4;25041:7;;;;;;;;;;;25034:14;;24971:84;:::o;88:117:1:-;197:1;194;187:12;334:126;371:7;411:42;404:5;400:54;389:65;;334:126;;;:::o;466:96::-;503:7;532:24;550:5;532:24;:::i;:::-;521:35;;466:96;;;:::o;568:122::-;641:24;659:5;641:24;:::i;:::-;634:5;631:35;621:63;;680:1;677;670:12;621:63;568:122;:::o;696:143::-;753:5;784:6;778:13;769:22;;800:33;827:5;800:33;:::i;:::-;696:143;;;;:::o;845:351::-;915:6;964:2;952:9;943:7;939:23;935:32;932:119;;;970:79;;:::i;:::-;932:119;1090:1;1115:64;1171:7;1162:6;1151:9;1147:22;1115:64;:::i;:::-;1105:74;;1061:128;845:351;;;;:::o;1202:99::-;1254:6;1288:5;1282:12;1272:22;;1202:99;;;:::o;1307:180::-;1355:77;1352:1;1345:88;1452:4;1449:1;1442:15;1476:4;1473:1;1466:15;1493:180;1541:77;1538:1;1531:88;1638:4;1635:1;1628:15;1662:4;1659:1;1652:15;1679:320;1723:6;1760:1;1754:4;1750:12;1740:22;;1807:1;1801:4;1797:12;1828:18;1818:81;;1884:4;1876:6;1872:17;1862:27;;1818:81;1946:2;1938:6;1935:14;1915:18;1912:38;1909:84;;1965:18;;:::i;:::-;1909:84;1730:269;1679:320;;;:::o;2005:141::-;2054:4;2077:3;2069:11;;2100:3;2097:1;2090:14;2134:4;2131:1;2121:18;2113:26;;2005:141;;;:::o;2152:93::-;2189:6;2236:2;2231;2224:5;2220:14;2216:23;2206:33;;2152:93;;;:::o;2251:107::-;2295:8;2345:5;2339:4;2335:16;2314:37;;2251:107;;;;:::o;2364:393::-;2433:6;2483:1;2471:10;2467:18;2506:97;2536:66;2525:9;2506:97;:::i;:::-;2624:39;2654:8;2643:9;2624:39;:::i;:::-;2612:51;;2696:4;2692:9;2685:5;2681:21;2672:30;;2745:4;2735:8;2731:19;2724:5;2721:30;2711:40;;2440:317;;2364:393;;;;;:::o;2763:77::-;2800:7;2829:5;2818:16;;2763:77;;;:::o;2846:60::-;2874:3;2895:5;2888:12;;2846:60;;;:::o;2912:142::-;2962:9;2995:53;3013:34;3022:24;3040:5;3022:24;:::i;:::-;3013:34;:::i;:::-;2995:53;:::i;:::-;2982:66;;2912:142;;;:::o;3060:75::-;3103:3;3124:5;3117:12;;3060:75;;;:::o;3141:269::-;3251:39;3282:7;3251:39;:::i;:::-;3312:91;3361:41;3385:16;3361:41;:::i;:::-;3353:6;3346:4;3340:11;3312:91;:::i;:::-;3306:4;3299:105;3217:193;3141:269;;;:::o;3416:73::-;3461:3;3416:73;:::o;3495:189::-;3572:32;;:::i;:::-;3613:65;3671:6;3663;3657:4;3613:65;:::i;:::-;3548:136;3495:189;;:::o;3690:186::-;3750:120;3767:3;3760:5;3757:14;3750:120;;;3821:39;3858:1;3851:5;3821:39;:::i;:::-;3794:1;3787:5;3783:13;3774:22;;3750:120;;;3690:186;;:::o;3882:543::-;3983:2;3978:3;3975:11;3972:446;;;4017:38;4049:5;4017:38;:::i;:::-;4101:29;4119:10;4101:29;:::i;:::-;4091:8;4087:44;4284:2;4272:10;4269:18;4266:49;;;4305:8;4290:23;;4266:49;4328:80;4384:22;4402:3;4384:22;:::i;:::-;4374:8;4370:37;4357:11;4328:80;:::i;:::-;3987:431;;3972:446;3882:543;;;:::o;4431:117::-;4485:8;4535:5;4529:4;4525:16;4504:37;;4431:117;;;;:::o;4554:169::-;4598:6;4631:51;4679:1;4675:6;4667:5;4664:1;4660:13;4631:51;:::i;:::-;4627:56;4712:4;4706;4702:15;4692:25;;4605:118;4554:169;;;;:::o;4728:295::-;4804:4;4950:29;4975:3;4969:4;4950:29;:::i;:::-;4942:37;;5012:3;5009:1;5005:11;4999:4;4996:21;4988:29;;4728:295;;;;:::o;5028:1395::-;5145:37;5178:3;5145:37;:::i;:::-;5247:18;5239:6;5236:30;5233:56;;;5269:18;;:::i;:::-;5233:56;5313:38;5345:4;5339:11;5313:38;:::i;:::-;5398:67;5458:6;5450;5444:4;5398:67;:::i;:::-;5492:1;5516:4;5503:17;;5548:2;5540:6;5537:14;5565:1;5560:618;;;;6222:1;6239:6;6236:77;;;6288:9;6283:3;6279:19;6273:26;6264:35;;6236:77;6339:67;6399:6;6392:5;6339:67;:::i;:::-;6333:4;6326:81;6195:222;5530:887;;5560:618;5612:4;5608:9;5600:6;5596:22;5646:37;5678:4;5646:37;:::i;:::-;5705:1;5719:208;5733:7;5730:1;5727:14;5719:208;;;5812:9;5807:3;5803:19;5797:26;5789:6;5782:42;5863:1;5855:6;5851:14;5841:24;;5910:2;5899:9;5895:18;5882:31;;5756:4;5753:1;5749:12;5744:17;;5719:208;;;5955:6;5946:7;5943:19;5940:179;;;6013:9;6008:3;6004:19;5998:26;6056:48;6098:4;6090:6;6086:17;6075:9;6056:48;:::i;:::-;6048:6;6041:64;5963:156;5940:179;6165:1;6161;6153:6;6149:14;6145:22;6139:4;6132:36;5567:611;;;5530:887;;5120:1303;;;5028:1395;;:::o;6429:118::-;6516:24;6534:5;6516:24;:::i;:::-;6511:3;6504:37;6429:118;;:::o;6553:222::-;6646:4;6684:2;6673:9;6669:18;6661:26;;6697:71;6765:1;6754:9;6750:17;6741:6;6697:71;:::i;:::-;6553:222;;;;:::o;6781:180::-;6829:77;6826:1;6819:88;6926:4;6923:1;6916:15;6950:4;6947:1;6940:15;6967:102;7009:8;7056:5;7053:1;7049:13;7028:34;;6967:102;;;:::o;7075:848::-;7136:5;7143:4;7167:6;7158:15;;7191:5;7182:14;;7205:712;7226:1;7216:8;7213:15;7205:712;;;7321:4;7316:3;7312:14;7306:4;7303:24;7300:50;;;7330:18;;:::i;:::-;7300:50;7380:1;7370:8;7366:16;7363:451;;;7795:4;7788:5;7784:16;7775:25;;7363:451;7845:4;7839;7835:15;7827:23;;7875:32;7898:8;7875:32;:::i;:::-;7863:44;;7205:712;;;7075:848;;;;;;;:::o;7929:1073::-;7983:5;8174:8;8164:40;;8195:1;8186:10;;8197:5;;8164:40;8223:4;8213:36;;8240:1;8231:10;;8242:5;;8213:36;8309:4;8357:1;8352:27;;;;8393:1;8388:191;;;;8302:277;;8352:27;8370:1;8361:10;;8372:5;;;8388:191;8433:3;8423:8;8420:17;8417:43;;;8440:18;;:::i;:::-;8417:43;8489:8;8486:1;8482:16;8473:25;;8524:3;8517:5;8514:14;8511:40;;;8531:18;;:::i;:::-;8511:40;8564:5;;;8302:277;;8688:2;8678:8;8675:16;8669:3;8663:4;8660:13;8656:36;8638:2;8628:8;8625:16;8620:2;8614:4;8611:12;8607:35;8591:111;8588:246;;;8744:8;8738:4;8734:19;8725:28;;8779:3;8772:5;8769:14;8766:40;;;8786:18;;:::i;:::-;8766:40;8819:5;;8588:246;8859:42;8897:3;8887:8;8881:4;8878:1;8859:42;:::i;:::-;8844:57;;;;8933:4;8928:3;8924:14;8917:5;8914:25;8911:51;;;8942:18;;:::i;:::-;8911:51;8991:4;8984:5;8980:16;8971:25;;7929:1073;;;;;;:::o;9008:86::-;9043:7;9083:4;9076:5;9072:16;9061:27;;9008:86;;;:::o;9100:281::-;9158:5;9182:23;9200:4;9182:23;:::i;:::-;9174:31;;9226:25;9242:8;9226:25;:::i;:::-;9214:37;;9270:104;9307:66;9297:8;9291:4;9270:104;:::i;:::-;9261:113;;9100:281;;;;:::o;9387:410::-;9427:7;9450:20;9468:1;9450:20;:::i;:::-;9445:25;;9484:20;9502:1;9484:20;:::i;:::-;9479:25;;9539:1;9536;9532:9;9561:30;9579:11;9561:30;:::i;:::-;9550:41;;9740:1;9731:7;9727:15;9724:1;9721:22;9701:1;9694:9;9674:83;9651:139;;9770:18;;:::i;:::-;9651:139;9435:362;9387:410;;;;:::o;9803:77::-;9840:7;9869:5;9858:16;;9803:77;;;:::o;9886:118::-;9973:24;9991:5;9973:24;:::i;:::-;9968:3;9961:37;9886:118;;:::o;10010:::-;10097:24;10115:5;10097:24;:::i;:::-;10092:3;10085:37;10010:118;;:::o;10134:664::-;10339:4;10377:3;10366:9;10362:19;10354:27;;10391:71;10459:1;10448:9;10444:17;10435:6;10391:71;:::i;:::-;10472:72;10540:2;10529:9;10525:18;10516:6;10472:72;:::i;:::-;10554;10622:2;10611:9;10607:18;10598:6;10554:72;:::i;:::-;10636;10704:2;10693:9;10689:18;10680:6;10636:72;:::i;:::-;10718:73;10786:3;10775:9;10771:19;10762:6;10718:73;:::i;:::-;10134:664;;;;;;;;:::o;10804:169::-;10888:11;10922:6;10917:3;10910:19;10962:4;10957:3;10953:14;10938:29;;10804:169;;;;:::o;10979:246::-;11060:1;11070:113;11084:6;11081:1;11078:13;11070:113;;;11169:1;11164:3;11160:11;11154:18;11150:1;11145:3;11141:11;11134:39;11106:2;11103:1;11099:10;11094:15;;11070:113;;;11217:1;11208:6;11203:3;11199:16;11192:27;11041:184;10979:246;;;:::o;11231:102::-;11272:6;11323:2;11319:7;11314:2;11307:5;11303:14;11299:28;11289:38;;11231:102;;;:::o;11339:377::-;11427:3;11455:39;11488:5;11455:39;:::i;:::-;11510:71;11574:6;11569:3;11510:71;:::i;:::-;11503:78;;11590:65;11648:6;11643:3;11636:4;11629:5;11625:16;11590:65;:::i;:::-;11680:29;11702:6;11680:29;:::i;:::-;11675:3;11671:39;11664:46;;11431:285;11339:377;;;;:::o;11722:313::-;11835:4;11873:2;11862:9;11858:18;11850:26;;11922:9;11916:4;11912:20;11908:1;11897:9;11893:17;11886:47;11950:78;12023:4;12014:6;11950:78;:::i;:::-;11942:86;;11722:313;;;;:::o;12041:98::-;12092:6;12126:5;12120:12;12110:22;;12041:98;;;:::o;12145:116::-;12196:4;12219:3;12211:11;;12249:4;12244:3;12240:14;12232:22;;12145:116;;;:::o;12267:154::-;12310:11;12346:29;12370:3;12364:10;12346:29;:::i;:::-;12409:5;12385:29;;12322:99;12267:154;;;:::o;12427:594::-;12511:5;12542:38;12574:5;12542:38;:::i;:::-;12605:5;12632:40;12666:5;12632:40;:::i;:::-;12620:52;;12691:35;12717:8;12691:35;:::i;:::-;12682:44;;12750:2;12742:6;12739:14;12736:278;;;12821:169;12906:66;12876:6;12872:2;12868:15;12865:1;12861:23;12821:169;:::i;:::-;12798:5;12777:227;12768:236;;12736:278;12517:504;;12427:594;;;:::o;13027:191::-;13067:3;13086:20;13104:1;13086:20;:::i;:::-;13081:25;;13120:20;13138:1;13120:20;:::i;:::-;13115:25;;13163:1;13160;13156:9;13149:16;;13184:3;13181:1;13178:10;13175:36;;;13191:18;;:::i;:::-;13175:36;13027:191;;;;:::o;13224:442::-;13373:4;13411:2;13400:9;13396:18;13388:26;;13424:71;13492:1;13481:9;13477:17;13468:6;13424:71;:::i;:::-;13505:72;13573:2;13562:9;13558:18;13549:6;13505:72;:::i;:::-;13587;13655:2;13644:9;13640:18;13631:6;13587:72;:::i;:::-;13224:442;;;;;;:::o;13672:222::-;13765:4;13803:2;13792:9;13788:18;13780:26;;13816:71;13884:1;13873:9;13869:17;13860:6;13816:71;:::i;:::-;13672:222;;;;:::o;84759:746:0:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@DOMAIN_SEPARATOR_3735": {
									"entryPoint": 1269,
									"id": 3735,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_EIP712Name_3513": {
									"entryPoint": 3934,
									"id": 3513,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_EIP712Version_3525": {
									"entryPoint": 3993,
									"id": 3525,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_approve_662": {
									"entryPoint": 2497,
									"id": 662,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_approve_722": {
									"entryPoint": 4206,
									"id": 722,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"@_buildDomainSeparator_3443": {
									"entryPoint": 4685,
									"id": 3443,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_burn_644": {
									"entryPoint": 3442,
									"id": 644,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_checkOwner_1037": {
									"entryPoint": 3083,
									"id": 1037,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_domainSeparatorV4_3422": {
									"entryPoint": 2901,
									"id": 3422,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_hashTypedDataV4_3459": {
									"entryPoint": 4135,
									"id": 3459,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@_mint_611": {
									"entryPoint": 3315,
									"id": 611,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_msgSender_111": {
									"entryPoint": 2490,
									"id": 111,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_pause_909": {
									"entryPoint": 3836,
									"id": 909,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_requireNotPaused_880": {
									"entryPoint": 4898,
									"id": 880,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_requirePaused_893": {
									"entryPoint": 4834,
									"id": 893,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_spendAllowance_770": {
									"entryPoint": 2515,
									"id": 770,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_throwError_1481": {
									"entryPoint": 5431,
									"id": 1481,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_transferOwnership_1099": {
									"entryPoint": 3569,
									"id": 1099,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_transfer_501": {
									"entryPoint": 2661,
									"id": 501,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_unpause_925": {
									"entryPoint": 3218,
									"id": 925,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_update_3828": {
									"entryPoint": 4669,
									"id": 3828,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_update_578": {
									"entryPoint": 5923,
									"id": 578,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_update_954": {
									"entryPoint": 5785,
									"id": 954,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_useNonce_3567": {
									"entryPoint": 4052,
									"id": 3567,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@allowance_398": {
									"entryPoint": 2228,
									"id": 398,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@approve_422": {
									"entryPoint": 1172,
									"id": 422,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@balanceOf_357": {
									"entryPoint": 1364,
									"id": 357,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@burnFrom_811": {
									"entryPoint": 1452,
									"id": 811,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@burn_790": {
									"entryPoint": 1323,
									"id": 790,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@byteLength_3184": {
									"entryPoint": 6460,
									"id": 3184,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@decimals_335": {
									"entryPoint": 1261,
									"id": 335,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@eip712Domain_3501": {
									"entryPoint": 1519,
									"id": 3501,
									"parameterSlots": 0,
									"returnSlots": 7
								},
								"@mint_3807": {
									"entryPoint": 1301,
									"id": 3807,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@name_317": {
									"entryPoint": 1028,
									"id": 317,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@nonces_3552": {
									"entryPoint": 3766,
									"id": 3552,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@nonces_3725": {
									"entryPoint": 1484,
									"id": 3725,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@owner_1020": {
									"entryPoint": 1684,
									"id": 1020,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@pause_3783": {
									"entryPoint": 1501,
									"id": 3783,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@paused_868": {
									"entryPoint": 1343,
									"id": 868,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@permit_3708": {
									"entryPoint": 1903,
									"id": 3708,
									"parameterSlots": 7,
									"returnSlots": 0
								},
								"@recover_1432": {
									"entryPoint": 4160,
									"id": 1432,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"@renounceOwnership_1051": {
									"entryPoint": 1433,
									"id": 1051,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@symbol_326": {
									"entryPoint": 1725,
									"id": 326,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@toStringWithFallback_3251": {
									"entryPoint": 4963,
									"id": 3251,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@toString_3152": {
									"entryPoint": 5809,
									"id": 3152,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@toTypedDataHash_2959": {
									"entryPoint": 5136,
									"id": 2959,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@totalSupply_344": {
									"entryPoint": 1206,
									"id": 344,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@transferFrom_454": {
									"entryPoint": 1215,
									"id": 454,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@transferOwnership_1079": {
									"entryPoint": 2358,
									"id": 1079,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@transfer_381": {
									"entryPoint": 1869,
									"id": 381,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@tryRecover_1396": {
									"entryPoint": 5200,
									"id": 1396,
									"parameterSlots": 4,
									"returnSlots": 3
								},
								"@unpause_3792": {
									"entryPoint": 1283,
									"id": 3792,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"abi_decode_t_address": {
									"entryPoint": 6782,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_bytes32": {
									"entryPoint": 7748,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_uint256": {
									"entryPoint": 6833,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_uint8": {
									"entryPoint": 7706,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 7230,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_address": {
									"entryPoint": 7925,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_addresst_addresst_uint256": {
									"entryPoint": 7006,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 3
								},
								"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32": {
									"entryPoint": 7768,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 7
								},
								"abi_decode_tuple_t_addresst_uint256": {
									"entryPoint": 6853,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_uint256": {
									"entryPoint": 7187,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encodeUpdatedPos_t_uint256_to_t_uint256": {
									"entryPoint": 7402,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_address_to_t_address_fromStack": {
									"entryPoint": 7331,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack": {
									"entryPoint": 7437,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_bool_to_t_bool_fromStack": {
									"entryPoint": 6926,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_bytes1_to_t_bytes1_fromStack": {
									"entryPoint": 7316,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_bytes32_to_t_bytes32_fromStack": {
									"entryPoint": 7147,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 6620,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_uint256_to_t_uint256": {
									"entryPoint": 7387,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_uint256_to_t_uint256_fromStack": {
									"entryPoint": 6966,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_uint8_to_t_uint8_fromStack": {
									"entryPoint": 7098,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": 7659,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed": {
									"entryPoint": 8220,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed": {
									"entryPoint": 8259,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
									"entryPoint": 6941,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__to_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed": {
									"entryPoint": 7529,
									"id": null,
									"parameterSlots": 8,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed": {
									"entryPoint": 7162,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed": {
									"entryPoint": 8125,
									"id": null,
									"parameterSlots": 7,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed": {
									"entryPoint": 8312,
									"id": null,
									"parameterSlots": 6,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed": {
									"entryPoint": 8393,
									"id": null,
									"parameterSlots": 5,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 6676,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": 6981,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed": {
									"entryPoint": 7113,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"allocate_unbounded": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"array_dataslot_t_array$_t_uint256_$dyn_memory_ptr": {
									"entryPoint": 7372,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_length_t_array$_t_uint256_$dyn_memory_ptr": {
									"entryPoint": 7346,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_length_t_string_memory_ptr": {
									"entryPoint": 6538,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_nextElement_t_array$_t_uint256_$dyn_memory_ptr": {
									"entryPoint": 7425,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack": {
									"entryPoint": 7356,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"array_storeLengthForEncoding_t_string_memory_ptr_fromStack": {
									"entryPoint": 6548,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 8550,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"cleanup_t_address": {
									"entryPoint": 6743,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_bool": {
									"entryPoint": 6915,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_bytes1": {
									"entryPoint": 7273,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_bytes32": {
									"entryPoint": 7138,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint160": {
									"entryPoint": 6712,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint256": {
									"entryPoint": 6802,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint8": {
									"entryPoint": 7086,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"copy_memory_to_memory_with_cleanup": {
									"entryPoint": 6564,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"extract_byte_array_length": {
									"entryPoint": 8032,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"panic_error_0x11": {
									"entryPoint": 8505,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x21": {
									"entryPoint": 8460,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x22": {
									"entryPoint": 7987,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x41": {
									"entryPoint": 8080,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
									"entryPoint": 6708,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"round_up_to_mul_of_32": {
									"entryPoint": 6604,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"validator_revert_t_address": {
									"entryPoint": 6760,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_bytes32": {
									"entryPoint": 7726,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_uint256": {
									"entryPoint": 6811,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_uint8": {
									"entryPoint": 7684,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:15716:1",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "66:40:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "77:22:1",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "93:5:1"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "87:5:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "87:12:1"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "77:6:1"
																}
															]
														}
													]
												},
												"name": "array_length_t_string_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "49:5:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "59:6:1",
														"type": ""
													}
												],
												"src": "7:99:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "208:73:1",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "225:3:1"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "230:6:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "218:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "218:19:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "218:19:1"
														},
														{
															"nodeType": "YulAssignment",
															"src": "246:29:1",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "265:3:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "270:4:1",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "261:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "261:14:1"
															},
															"variableNames": [
																{
																	"name": "updated_pos",
																	"nodeType": "YulIdentifier",
																	"src": "246:11:1"
																}
															]
														}
													]
												},
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "180:3:1",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "185:6:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updated_pos",
														"nodeType": "YulTypedName",
														"src": "196:11:1",
														"type": ""
													}
												],
												"src": "112:169:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "349:184:1",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "359:10:1",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "368:1:1",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "363:1:1",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "428:63:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "453:3:1"
																						},
																						{
																							"name": "i",
																							"nodeType": "YulIdentifier",
																							"src": "458:1:1"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "449:3:1"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "449:11:1"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "src",
																									"nodeType": "YulIdentifier",
																									"src": "472:3:1"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "477:1:1"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "468:3:1"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "468:11:1"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "462:5:1"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "462:18:1"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "442:6:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "442:39:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "442:39:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "389:1:1"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "392:6:1"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "386:2:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "386:13:1"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "400:19:1",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "402:15:1",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "411:1:1"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "414:2:1",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "407:3:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "407:10:1"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "402:1:1"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "382:3:1",
																"statements": []
															},
															"src": "378:113:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dst",
																				"nodeType": "YulIdentifier",
																				"src": "511:3:1"
																			},
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "516:6:1"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "507:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "507:16:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "525:1:1",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "500:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "500:27:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "500:27:1"
														}
													]
												},
												"name": "copy_memory_to_memory_with_cleanup",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "331:3:1",
														"type": ""
													},
													{
														"name": "dst",
														"nodeType": "YulTypedName",
														"src": "336:3:1",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "341:6:1",
														"type": ""
													}
												],
												"src": "287:246:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "587:54:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "597:38:1",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "615:5:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "622:2:1",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "611:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "611:14:1"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "631:2:1",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "627:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "627:7:1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "607:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "607:28:1"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nodeType": "YulIdentifier",
																	"src": "597:6:1"
																}
															]
														}
													]
												},
												"name": "round_up_to_mul_of_32",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "570:5:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "result",
														"nodeType": "YulTypedName",
														"src": "580:6:1",
														"type": ""
													}
												],
												"src": "539:102:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "739:285:1",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "749:53:1",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "796:5:1"
																	}
																],
																"functionName": {
																	"name": "array_length_t_string_memory_ptr",
																	"nodeType": "YulIdentifier",
																	"src": "763:32:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "763:39:1"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "753:6:1",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "811:78:1",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "877:3:1"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "882:6:1"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "818:58:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "818:71:1"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "811:3:1"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "937:5:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "944:4:1",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "933:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "933:16:1"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "951:3:1"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "956:6:1"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory_with_cleanup",
																	"nodeType": "YulIdentifier",
																	"src": "898:34:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "898:65:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "898:65:1"
														},
														{
															"nodeType": "YulAssignment",
															"src": "972:46:1",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "983:3:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "1010:6:1"
																			}
																		],
																		"functionName": {
																			"name": "round_up_to_mul_of_32",
																			"nodeType": "YulIdentifier",
																			"src": "988:21:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "988:29:1"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "979:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "979:39:1"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "972:3:1"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "720:5:1",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "727:3:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "735:3:1",
														"type": ""
													}
												],
												"src": "647:377:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1148:195:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1158:26:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1170:9:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1181:2:1",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1166:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "1166:18:1"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1158:4:1"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1205:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1216:1:1",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1201:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1201:17:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "1224:4:1"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1230:9:1"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1220:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1220:20:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1194:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "1194:47:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1194:47:1"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1250:86:1",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1322:6:1"
																	},
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "1331:4:1"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "1258:63:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "1258:78:1"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1250:4:1"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1120:9:1",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1132:6:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1143:4:1",
														"type": ""
													}
												],
												"src": "1030:313:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1389:35:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1399:19:1",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1415:2:1",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1409:5:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "1409:9:1"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nodeType": "YulIdentifier",
																	"src": "1399:6:1"
																}
															]
														}
													]
												},
												"name": "allocate_unbounded",
												"nodeType": "YulFunctionDefinition",
												"returnVariables": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "1382:6:1",
														"type": ""
													}
												],
												"src": "1349:75:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1519:28:1",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1536:1:1",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1539:1:1",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "1529:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "1529:12:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1529:12:1"
														}
													]
												},
												"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
												"nodeType": "YulFunctionDefinition",
												"src": "1430:117:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1642:28:1",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1659:1:1",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1662:1:1",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "1652:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "1652:12:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1652:12:1"
														}
													]
												},
												"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
												"nodeType": "YulFunctionDefinition",
												"src": "1553:117:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1721:81:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1731:65:1",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "1746:5:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1753:42:1",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "1742:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "1742:54:1"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "1731:7:1"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint160",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1703:5:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "1713:7:1",
														"type": ""
													}
												],
												"src": "1676:126:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1853:51:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1863:35:1",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "1892:5:1"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nodeType": "YulIdentifier",
																	"src": "1874:17:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "1874:24:1"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "1863:7:1"
																}
															]
														}
													]
												},
												"name": "cleanup_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1835:5:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "1845:7:1",
														"type": ""
													}
												],
												"src": "1808:96:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1953:79:1",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2010:16:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2019:1:1",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2022:1:1",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2012:6:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2012:12:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2012:12:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "1976:5:1"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "2001:5:1"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_address",
																					"nodeType": "YulIdentifier",
																					"src": "1983:17:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1983:24:1"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "1973:2:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1973:35:1"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "1966:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "1966:43:1"
															},
															"nodeType": "YulIf",
															"src": "1963:63:1"
														}
													]
												},
												"name": "validator_revert_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1946:5:1",
														"type": ""
													}
												],
												"src": "1910:122:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2090:87:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2100:29:1",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "2122:6:1"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2109:12:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "2109:20:1"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "2100:5:1"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "2165:5:1"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "2138:26:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "2138:33:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2138:33:1"
														}
													]
												},
												"name": "abi_decode_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "2068:6:1",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "2076:3:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2084:5:1",
														"type": ""
													}
												],
												"src": "2038:139:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2228:32:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2238:16:1",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "2249:5:1"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "2238:7:1"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2210:5:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "2220:7:1",
														"type": ""
													}
												],
												"src": "2183:77:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2309:79:1",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2366:16:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2375:1:1",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2378:1:1",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2368:6:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2368:12:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2368:12:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "2332:5:1"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "2357:5:1"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint256",
																					"nodeType": "YulIdentifier",
																					"src": "2339:17:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2339:24:1"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "2329:2:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2329:35:1"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "2322:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "2322:43:1"
															},
															"nodeType": "YulIf",
															"src": "2319:63:1"
														}
													]
												},
												"name": "validator_revert_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2302:5:1",
														"type": ""
													}
												],
												"src": "2266:122:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2446:87:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2456:29:1",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "2478:6:1"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2465:12:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "2465:20:1"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "2456:5:1"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "2521:5:1"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "2494:26:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "2494:33:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2494:33:1"
														}
													]
												},
												"name": "abi_decode_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "2424:6:1",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "2432:3:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2440:5:1",
														"type": ""
													}
												],
												"src": "2394:139:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2622:391:1",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2668:83:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "2670:77:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2670:79:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2670:79:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2643:7:1"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2652:9:1"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2639:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2639:23:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2664:2:1",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2635:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "2635:32:1"
															},
															"nodeType": "YulIf",
															"src": "2632:119:1"
														},
														{
															"nodeType": "YulBlock",
															"src": "2761:117:1",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "2776:15:1",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2790:1:1",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "2780:6:1",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "2805:63:1",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "2840:9:1"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "2851:6:1"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "2836:3:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2836:22:1"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2860:7:1"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "2815:20:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2815:53:1"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "2805:6:1"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "2888:118:1",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "2903:16:1",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2917:2:1",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "2907:6:1",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "2933:63:1",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "2968:9:1"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "2979:6:1"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "2964:3:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2964:22:1"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2988:7:1"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "2943:20:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2943:53:1"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "2933:6:1"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2584:9:1",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2595:7:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2607:6:1",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "2615:6:1",
														"type": ""
													}
												],
												"src": "2539:474:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3061:48:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3071:32:1",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "3096:5:1"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "3089:6:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3089:13:1"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "3082:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "3082:21:1"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "3071:7:1"
																}
															]
														}
													]
												},
												"name": "cleanup_t_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3043:5:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "3053:7:1",
														"type": ""
													}
												],
												"src": "3019:90:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3174:50:1",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3191:3:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "3211:5:1"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_bool",
																			"nodeType": "YulIdentifier",
																			"src": "3196:14:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3196:21:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3184:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "3184:34:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3184:34:1"
														}
													]
												},
												"name": "abi_encode_t_bool_to_t_bool_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3162:5:1",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "3169:3:1",
														"type": ""
													}
												],
												"src": "3115:109:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3322:118:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3332:26:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3344:9:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3355:2:1",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3340:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "3340:18:1"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3332:4:1"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "3406:6:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3419:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3430:1:1",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3415:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3415:17:1"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bool_to_t_bool_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "3368:37:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "3368:65:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3368:65:1"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3294:9:1",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3306:6:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3317:4:1",
														"type": ""
													}
												],
												"src": "3230:210:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3511:53:1",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3528:3:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "3551:5:1"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "3533:17:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3533:24:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3521:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "3521:37:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3521:37:1"
														}
													]
												},
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3499:5:1",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "3506:3:1",
														"type": ""
													}
												],
												"src": "3446:118:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3668:124:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3678:26:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3690:9:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3701:2:1",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3686:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "3686:18:1"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3678:4:1"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "3758:6:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3771:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3782:1:1",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3767:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3767:17:1"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "3714:43:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "3714:71:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3714:71:1"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3640:9:1",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3652:6:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3663:4:1",
														"type": ""
													}
												],
												"src": "3570:222:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3898:519:1",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3944:83:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "3946:77:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3946:79:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3946:79:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3919:7:1"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3928:9:1"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3915:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3915:23:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3940:2:1",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "3911:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "3911:32:1"
															},
															"nodeType": "YulIf",
															"src": "3908:119:1"
														},
														{
															"nodeType": "YulBlock",
															"src": "4037:117:1",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "4052:15:1",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4066:1:1",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "4056:6:1",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "4081:63:1",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "4116:9:1"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "4127:6:1"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "4112:3:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4112:22:1"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4136:7:1"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "4091:20:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4091:53:1"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "4081:6:1"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "4164:118:1",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "4179:16:1",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4193:2:1",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "4183:6:1",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "4209:63:1",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "4244:9:1"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "4255:6:1"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "4240:3:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4240:22:1"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4264:7:1"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "4219:20:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4219:53:1"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "4209:6:1"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "4292:118:1",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "4307:16:1",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4321:2:1",
																		"type": "",
																		"value": "64"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "4311:6:1",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "4337:63:1",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "4372:9:1"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "4383:6:1"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "4368:3:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4368:22:1"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4392:7:1"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "4347:20:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4347:53:1"
																	},
																	"variableNames": [
																		{
																			"name": "value2",
																			"nodeType": "YulIdentifier",
																			"src": "4337:6:1"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3852:9:1",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "3863:7:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3875:6:1",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "3883:6:1",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "3891:6:1",
														"type": ""
													}
												],
												"src": "3798:619:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4466:43:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4476:27:1",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "4491:5:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4498:4:1",
																		"type": "",
																		"value": "0xff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "4487:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "4487:16:1"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "4476:7:1"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint8",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "4448:5:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "4458:7:1",
														"type": ""
													}
												],
												"src": "4423:86:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4576:51:1",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "4593:3:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "4614:5:1"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_uint8",
																			"nodeType": "YulIdentifier",
																			"src": "4598:15:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4598:22:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4586:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "4586:35:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4586:35:1"
														}
													]
												},
												"name": "abi_encode_t_uint8_to_t_uint8_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "4564:5:1",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "4571:3:1",
														"type": ""
													}
												],
												"src": "4515:112:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4727:120:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4737:26:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4749:9:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4760:2:1",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4745:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "4745:18:1"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4737:4:1"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "4813:6:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4826:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4837:1:1",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4822:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4822:17:1"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint8_to_t_uint8_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "4773:39:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "4773:67:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4773:67:1"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4699:9:1",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4711:6:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4722:4:1",
														"type": ""
													}
												],
												"src": "4633:214:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4898:32:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4908:16:1",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "4919:5:1"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "4908:7:1"
																}
															]
														}
													]
												},
												"name": "cleanup_t_bytes32",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "4880:5:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "4890:7:1",
														"type": ""
													}
												],
												"src": "4853:77:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5001:53:1",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "5018:3:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "5041:5:1"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_bytes32",
																			"nodeType": "YulIdentifier",
																			"src": "5023:17:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5023:24:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5011:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "5011:37:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5011:37:1"
														}
													]
												},
												"name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "4989:5:1",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "4996:3:1",
														"type": ""
													}
												],
												"src": "4936:118:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5158:124:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5168:26:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5180:9:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5191:2:1",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5176:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "5176:18:1"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5168:4:1"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "5248:6:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5261:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5272:1:1",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5257:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5257:17:1"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "5204:43:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "5204:71:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5204:71:1"
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5130:9:1",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5142:6:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5153:4:1",
														"type": ""
													}
												],
												"src": "5060:222:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5354:263:1",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5400:83:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "5402:77:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5402:79:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5402:79:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "5375:7:1"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5384:9:1"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "5371:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5371:23:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5396:2:1",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "5367:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "5367:32:1"
															},
															"nodeType": "YulIf",
															"src": "5364:119:1"
														},
														{
															"nodeType": "YulBlock",
															"src": "5493:117:1",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "5508:15:1",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5522:1:1",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "5512:6:1",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "5537:63:1",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "5572:9:1"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "5583:6:1"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "5568:3:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5568:22:1"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "5592:7:1"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "5547:20:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5547:53:1"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "5537:6:1"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5324:9:1",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "5335:7:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5347:6:1",
														"type": ""
													}
												],
												"src": "5288:329:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5689:263:1",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5735:83:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "5737:77:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5737:79:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5737:79:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "5710:7:1"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5719:9:1"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "5706:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5706:23:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5731:2:1",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "5702:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "5702:32:1"
															},
															"nodeType": "YulIf",
															"src": "5699:119:1"
														},
														{
															"nodeType": "YulBlock",
															"src": "5828:117:1",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "5843:15:1",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5857:1:1",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "5847:6:1",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "5872:63:1",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "5907:9:1"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "5918:6:1"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "5903:3:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5903:22:1"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "5927:7:1"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "5882:20:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5882:53:1"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "5872:6:1"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5659:9:1",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "5670:7:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5682:6:1",
														"type": ""
													}
												],
												"src": "5623:329:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6002:105:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6012:89:1",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "6027:5:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6034:66:1",
																		"type": "",
																		"value": "0xff00000000000000000000000000000000000000000000000000000000000000"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "6023:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "6023:78:1"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "6012:7:1"
																}
															]
														}
													]
												},
												"name": "cleanup_t_bytes1",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "5984:5:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "5994:7:1",
														"type": ""
													}
												],
												"src": "5958:149:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6176:52:1",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "6193:3:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "6215:5:1"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_bytes1",
																			"nodeType": "YulIdentifier",
																			"src": "6198:16:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6198:23:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6186:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "6186:36:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6186:36:1"
														}
													]
												},
												"name": "abi_encode_t_bytes1_to_t_bytes1_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "6164:5:1",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "6171:3:1",
														"type": ""
													}
												],
												"src": "6113:115:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6299:53:1",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "6316:3:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "6339:5:1"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "6321:17:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6321:24:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6309:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "6309:37:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6309:37:1"
														}
													]
												},
												"name": "abi_encode_t_address_to_t_address_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "6287:5:1",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "6294:3:1",
														"type": ""
													}
												],
												"src": "6234:118:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6432:40:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6443:22:1",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "6459:5:1"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "6453:5:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "6453:12:1"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "6443:6:1"
																}
															]
														}
													]
												},
												"name": "array_length_t_array$_t_uint256_$dyn_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "6415:5:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "6425:6:1",
														"type": ""
													}
												],
												"src": "6358:114:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6589:73:1",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "6606:3:1"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "6611:6:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6599:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "6599:19:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6599:19:1"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6627:29:1",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "6646:3:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6651:4:1",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6642:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "6642:14:1"
															},
															"variableNames": [
																{
																	"name": "updated_pos",
																	"nodeType": "YulIdentifier",
																	"src": "6627:11:1"
																}
															]
														}
													]
												},
												"name": "array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "6561:3:1",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "6566:6:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updated_pos",
														"nodeType": "YulTypedName",
														"src": "6577:11:1",
														"type": ""
													}
												],
												"src": "6478:184:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6740:60:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6750:11:1",
															"value": {
																"name": "ptr",
																"nodeType": "YulIdentifier",
																"src": "6758:3:1"
															},
															"variableNames": [
																{
																	"name": "data",
																	"nodeType": "YulIdentifier",
																	"src": "6750:4:1"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "6771:22:1",
															"value": {
																"arguments": [
																	{
																		"name": "ptr",
																		"nodeType": "YulIdentifier",
																		"src": "6783:3:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6788:4:1",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6779:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "6779:14:1"
															},
															"variableNames": [
																{
																	"name": "data",
																	"nodeType": "YulIdentifier",
																	"src": "6771:4:1"
																}
															]
														}
													]
												},
												"name": "array_dataslot_t_array$_t_uint256_$dyn_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "ptr",
														"nodeType": "YulTypedName",
														"src": "6727:3:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "6735:4:1",
														"type": ""
													}
												],
												"src": "6668:132:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6861:53:1",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "6878:3:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "6901:5:1"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "6883:17:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6883:24:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6871:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "6871:37:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6871:37:1"
														}
													]
												},
												"name": "abi_encode_t_uint256_to_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "6849:5:1",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "6856:3:1",
														"type": ""
													}
												],
												"src": "6806:108:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7000:99:1",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "7044:6:1"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "7052:3:1"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "7010:33:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "7010:46:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7010:46:1"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7065:28:1",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "7083:3:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7088:4:1",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7079:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "7079:14:1"
															},
															"variableNames": [
																{
																	"name": "updatedPos",
																	"nodeType": "YulIdentifier",
																	"src": "7065:10:1"
																}
															]
														}
													]
												},
												"name": "abi_encodeUpdatedPos_t_uint256_to_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "6973:6:1",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "6981:3:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updatedPos",
														"nodeType": "YulTypedName",
														"src": "6989:10:1",
														"type": ""
													}
												],
												"src": "6920:179:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7180:38:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7190:22:1",
															"value": {
																"arguments": [
																	{
																		"name": "ptr",
																		"nodeType": "YulIdentifier",
																		"src": "7202:3:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7207:4:1",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7198:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "7198:14:1"
															},
															"variableNames": [
																{
																	"name": "next",
																	"nodeType": "YulIdentifier",
																	"src": "7190:4:1"
																}
															]
														}
													]
												},
												"name": "array_nextElement_t_array$_t_uint256_$dyn_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "ptr",
														"nodeType": "YulTypedName",
														"src": "7167:3:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "next",
														"nodeType": "YulTypedName",
														"src": "7175:4:1",
														"type": ""
													}
												],
												"src": "7105:113:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7378:608:1",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7388:68:1",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "7450:5:1"
																	}
																],
																"functionName": {
																	"name": "array_length_t_array$_t_uint256_$dyn_memory_ptr",
																	"nodeType": "YulIdentifier",
																	"src": "7402:47:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "7402:54:1"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "7392:6:1",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "7465:93:1",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "7546:3:1"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "7551:6:1"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "7472:73:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "7472:86:1"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "7465:3:1"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7567:71:1",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "7632:5:1"
																	}
																],
																"functionName": {
																	"name": "array_dataslot_t_array$_t_uint256_$dyn_memory_ptr",
																	"nodeType": "YulIdentifier",
																	"src": "7582:49:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "7582:56:1"
															},
															"variables": [
																{
																	"name": "baseRef",
																	"nodeType": "YulTypedName",
																	"src": "7571:7:1",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7647:21:1",
															"value": {
																"name": "baseRef",
																"nodeType": "YulIdentifier",
																"src": "7661:7:1"
															},
															"variables": [
																{
																	"name": "srcPtr",
																	"nodeType": "YulTypedName",
																	"src": "7651:6:1",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "7737:224:1",
																"statements": [
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "7751:34:1",
																		"value": {
																			"arguments": [
																				{
																					"name": "srcPtr",
																					"nodeType": "YulIdentifier",
																					"src": "7778:6:1"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nodeType": "YulIdentifier",
																				"src": "7772:5:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7772:13:1"
																		},
																		"variables": [
																			{
																				"name": "elementValue0",
																				"nodeType": "YulTypedName",
																				"src": "7755:13:1",
																				"type": ""
																			}
																		]
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "7798:70:1",
																		"value": {
																			"arguments": [
																				{
																					"name": "elementValue0",
																					"nodeType": "YulIdentifier",
																					"src": "7849:13:1"
																				},
																				{
																					"name": "pos",
																					"nodeType": "YulIdentifier",
																					"src": "7864:3:1"
																				}
																			],
																			"functionName": {
																				"name": "abi_encodeUpdatedPos_t_uint256_to_t_uint256",
																				"nodeType": "YulIdentifier",
																				"src": "7805:43:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7805:63:1"
																		},
																		"variableNames": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "7798:3:1"
																			}
																		]
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "7881:70:1",
																		"value": {
																			"arguments": [
																				{
																					"name": "srcPtr",
																					"nodeType": "YulIdentifier",
																					"src": "7944:6:1"
																				}
																			],
																			"functionName": {
																				"name": "array_nextElement_t_array$_t_uint256_$dyn_memory_ptr",
																				"nodeType": "YulIdentifier",
																				"src": "7891:52:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7891:60:1"
																		},
																		"variableNames": [
																			{
																				"name": "srcPtr",
																				"nodeType": "YulIdentifier",
																				"src": "7881:6:1"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "7699:1:1"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "7702:6:1"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "7696:2:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "7696:13:1"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "7710:18:1",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "7712:14:1",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "7721:1:1"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "7724:1:1",
																					"type": "",
																					"value": "1"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "7717:3:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7717:9:1"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "7712:1:1"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "7681:14:1",
																"statements": [
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "7683:10:1",
																		"value": {
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "7692:1:1",
																			"type": "",
																			"value": "0"
																		},
																		"variables": [
																			{
																				"name": "i",
																				"nodeType": "YulTypedName",
																				"src": "7687:1:1",
																				"type": ""
																			}
																		]
																	}
																]
															},
															"src": "7677:284:1"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7970:10:1",
															"value": {
																"name": "pos",
																"nodeType": "YulIdentifier",
																"src": "7977:3:1"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "7970:3:1"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "7357:5:1",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "7364:3:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "7373:3:1",
														"type": ""
													}
												],
												"src": "7254:732:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8346:861:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "8356:27:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8368:9:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8379:3:1",
																		"type": "",
																		"value": "224"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8364:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "8364:19:1"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8356:4:1"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "8435:6:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8448:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8459:1:1",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8444:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8444:17:1"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bytes1_to_t_bytes1_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "8393:41:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "8393:69:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8393:69:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8483:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8494:2:1",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8479:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8479:18:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "8503:4:1"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8509:9:1"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "8499:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8499:20:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8472:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "8472:48:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8472:48:1"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8529:86:1",
															"value": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "8601:6:1"
																	},
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "8610:4:1"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "8537:63:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "8537:78:1"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8529:4:1"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8636:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8647:2:1",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8632:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8632:18:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "8656:4:1"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8662:9:1"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "8652:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8652:20:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8625:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "8625:48:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8625:48:1"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8682:86:1",
															"value": {
																"arguments": [
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "8754:6:1"
																	},
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "8763:4:1"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "8690:63:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "8690:78:1"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8682:4:1"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value3",
																		"nodeType": "YulIdentifier",
																		"src": "8822:6:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8835:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8846:2:1",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8831:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8831:18:1"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "8778:43:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "8778:72:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8778:72:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value4",
																		"nodeType": "YulIdentifier",
																		"src": "8904:6:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8917:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8928:3:1",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8913:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8913:19:1"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "8860:43:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "8860:73:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8860:73:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value5",
																		"nodeType": "YulIdentifier",
																		"src": "8987:6:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9000:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9011:3:1",
																				"type": "",
																				"value": "160"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8996:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8996:19:1"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "8943:43:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "8943:73:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8943:73:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9037:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9048:3:1",
																				"type": "",
																				"value": "192"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9033:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9033:19:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "9058:4:1"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9064:9:1"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "9054:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9054:20:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9026:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "9026:49:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9026:49:1"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9084:116:1",
															"value": {
																"arguments": [
																	{
																		"name": "value6",
																		"nodeType": "YulIdentifier",
																		"src": "9186:6:1"
																	},
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "9195:4:1"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "9092:93:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "9092:108:1"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9084:4:1"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__to_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8270:9:1",
														"type": ""
													},
													{
														"name": "value6",
														"nodeType": "YulTypedName",
														"src": "8282:6:1",
														"type": ""
													},
													{
														"name": "value5",
														"nodeType": "YulTypedName",
														"src": "8290:6:1",
														"type": ""
													},
													{
														"name": "value4",
														"nodeType": "YulTypedName",
														"src": "8298:6:1",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "8306:6:1",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "8314:6:1",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "8322:6:1",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "8330:6:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "8341:4:1",
														"type": ""
													}
												],
												"src": "7992:1215:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9311:124:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "9321:26:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9333:9:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9344:2:1",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9329:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "9329:18:1"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9321:4:1"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "9401:6:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9414:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9425:1:1",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9410:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9410:17:1"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "9357:43:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "9357:71:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9357:71:1"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9283:9:1",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "9295:6:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "9306:4:1",
														"type": ""
													}
												],
												"src": "9213:222:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9482:77:1",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "9537:16:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "9546:1:1",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "9549:1:1",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "9539:6:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9539:12:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "9539:12:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "9505:5:1"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "9528:5:1"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint8",
																					"nodeType": "YulIdentifier",
																					"src": "9512:15:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "9512:22:1"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "9502:2:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9502:33:1"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "9495:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "9495:41:1"
															},
															"nodeType": "YulIf",
															"src": "9492:61:1"
														}
													]
												},
												"name": "validator_revert_t_uint8",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "9475:5:1",
														"type": ""
													}
												],
												"src": "9441:118:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9615:85:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "9625:29:1",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "9647:6:1"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "9634:12:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "9634:20:1"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "9625:5:1"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "9688:5:1"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_uint8",
																	"nodeType": "YulIdentifier",
																	"src": "9663:24:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "9663:31:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9663:31:1"
														}
													]
												},
												"name": "abi_decode_t_uint8",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "9593:6:1",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "9601:3:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "9609:5:1",
														"type": ""
													}
												],
												"src": "9565:135:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9749:79:1",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "9806:16:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "9815:1:1",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "9818:1:1",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "9808:6:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9808:12:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "9808:12:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "9772:5:1"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "9797:5:1"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_bytes32",
																					"nodeType": "YulIdentifier",
																					"src": "9779:17:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "9779:24:1"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "9769:2:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9769:35:1"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "9762:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "9762:43:1"
															},
															"nodeType": "YulIf",
															"src": "9759:63:1"
														}
													]
												},
												"name": "validator_revert_t_bytes32",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "9742:5:1",
														"type": ""
													}
												],
												"src": "9706:122:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9886:87:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "9896:29:1",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "9918:6:1"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "9905:12:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "9905:20:1"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "9896:5:1"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "9961:5:1"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_bytes32",
																	"nodeType": "YulIdentifier",
																	"src": "9934:26:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "9934:33:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9934:33:1"
														}
													]
												},
												"name": "abi_decode_t_bytes32",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "9864:6:1",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "9872:3:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "9880:5:1",
														"type": ""
													}
												],
												"src": "9834:139:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10145:1033:1",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "10192:83:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "10194:77:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "10194:79:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "10194:79:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "10166:7:1"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10175:9:1"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "10162:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10162:23:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10187:3:1",
																		"type": "",
																		"value": "224"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "10158:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "10158:33:1"
															},
															"nodeType": "YulIf",
															"src": "10155:120:1"
														},
														{
															"nodeType": "YulBlock",
															"src": "10285:117:1",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "10300:15:1",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10314:1:1",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "10304:6:1",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "10329:63:1",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "10364:9:1"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "10375:6:1"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "10360:3:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "10360:22:1"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "10384:7:1"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "10339:20:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10339:53:1"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "10329:6:1"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "10412:118:1",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "10427:16:1",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10441:2:1",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "10431:6:1",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "10457:63:1",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "10492:9:1"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "10503:6:1"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "10488:3:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "10488:22:1"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "10512:7:1"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "10467:20:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10467:53:1"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "10457:6:1"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "10540:118:1",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "10555:16:1",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10569:2:1",
																		"type": "",
																		"value": "64"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "10559:6:1",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "10585:63:1",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "10620:9:1"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "10631:6:1"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "10616:3:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "10616:22:1"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "10640:7:1"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "10595:20:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10595:53:1"
																	},
																	"variableNames": [
																		{
																			"name": "value2",
																			"nodeType": "YulIdentifier",
																			"src": "10585:6:1"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "10668:118:1",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "10683:16:1",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10697:2:1",
																		"type": "",
																		"value": "96"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "10687:6:1",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "10713:63:1",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "10748:9:1"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "10759:6:1"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "10744:3:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "10744:22:1"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "10768:7:1"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "10723:20:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10723:53:1"
																	},
																	"variableNames": [
																		{
																			"name": "value3",
																			"nodeType": "YulIdentifier",
																			"src": "10713:6:1"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "10796:117:1",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "10811:17:1",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10825:3:1",
																		"type": "",
																		"value": "128"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "10815:6:1",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "10842:61:1",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "10875:9:1"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "10886:6:1"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "10871:3:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "10871:22:1"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "10895:7:1"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint8",
																			"nodeType": "YulIdentifier",
																			"src": "10852:18:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10852:51:1"
																	},
																	"variableNames": [
																		{
																			"name": "value4",
																			"nodeType": "YulIdentifier",
																			"src": "10842:6:1"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "10923:119:1",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "10938:17:1",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10952:3:1",
																		"type": "",
																		"value": "160"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "10942:6:1",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "10969:63:1",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "11004:9:1"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "11015:6:1"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "11000:3:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "11000:22:1"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "11024:7:1"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_bytes32",
																			"nodeType": "YulIdentifier",
																			"src": "10979:20:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10979:53:1"
																	},
																	"variableNames": [
																		{
																			"name": "value5",
																			"nodeType": "YulIdentifier",
																			"src": "10969:6:1"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "11052:119:1",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "11067:17:1",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11081:3:1",
																		"type": "",
																		"value": "192"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "11071:6:1",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "11098:63:1",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "11133:9:1"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "11144:6:1"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "11129:3:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "11129:22:1"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "11153:7:1"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_bytes32",
																			"nodeType": "YulIdentifier",
																			"src": "11108:20:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11108:53:1"
																	},
																	"variableNames": [
																		{
																			"name": "value6",
																			"nodeType": "YulIdentifier",
																			"src": "11098:6:1"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "10067:9:1",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "10078:7:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "10090:6:1",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "10098:6:1",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "10106:6:1",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "10114:6:1",
														"type": ""
													},
													{
														"name": "value4",
														"nodeType": "YulTypedName",
														"src": "10122:6:1",
														"type": ""
													},
													{
														"name": "value5",
														"nodeType": "YulTypedName",
														"src": "10130:6:1",
														"type": ""
													},
													{
														"name": "value6",
														"nodeType": "YulTypedName",
														"src": "10138:6:1",
														"type": ""
													}
												],
												"src": "9979:1199:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11267:391:1",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "11313:83:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "11315:77:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "11315:79:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "11315:79:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "11288:7:1"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11297:9:1"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "11284:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11284:23:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11309:2:1",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "11280:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "11280:32:1"
															},
															"nodeType": "YulIf",
															"src": "11277:119:1"
														},
														{
															"nodeType": "YulBlock",
															"src": "11406:117:1",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "11421:15:1",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11435:1:1",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "11425:6:1",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "11450:63:1",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "11485:9:1"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "11496:6:1"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "11481:3:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "11481:22:1"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "11505:7:1"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "11460:20:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11460:53:1"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "11450:6:1"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "11533:118:1",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "11548:16:1",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11562:2:1",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "11552:6:1",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "11578:63:1",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "11613:9:1"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "11624:6:1"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "11609:3:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "11609:22:1"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "11633:7:1"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "11588:20:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11588:53:1"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "11578:6:1"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "11229:9:1",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "11240:7:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "11252:6:1",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "11260:6:1",
														"type": ""
													}
												],
												"src": "11184:474:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11692:152:1",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11709:1:1",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11712:77:1",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11702:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "11702:88:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11702:88:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11806:1:1",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11809:4:1",
																		"type": "",
																		"value": "0x22"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11799:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "11799:15:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11799:15:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11830:1:1",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11833:4:1",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "11823:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "11823:15:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11823:15:1"
														}
													]
												},
												"name": "panic_error_0x22",
												"nodeType": "YulFunctionDefinition",
												"src": "11664:180:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11901:269:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "11911:22:1",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "11925:4:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11931:1:1",
																		"type": "",
																		"value": "2"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "11921:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "11921:12:1"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "11911:6:1"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "11942:38:1",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "11972:4:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11978:1:1",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "11968:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "11968:12:1"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nodeType": "YulTypedName",
																	"src": "11946:18:1",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "12019:51:1",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "12033:27:1",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "12047:6:1"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "12055:4:1",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "12043:3:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "12043:17:1"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "12033:6:1"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "11999:18:1"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "11992:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "11992:26:1"
															},
															"nodeType": "YulIf",
															"src": "11989:81:1"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "12122:42:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x22",
																				"nodeType": "YulIdentifier",
																				"src": "12136:16:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "12136:18:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "12136:18:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "12086:18:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "12109:6:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12117:2:1",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "12106:2:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12106:14:1"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "12083:2:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "12083:38:1"
															},
															"nodeType": "YulIf",
															"src": "12080:84:1"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "11885:4:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "11894:6:1",
														"type": ""
													}
												],
												"src": "11850:320:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12204:152:1",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12221:1:1",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12224:77:1",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12214:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "12214:88:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12214:88:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12318:1:1",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12321:4:1",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12311:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "12311:15:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12311:15:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12342:1:1",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12345:4:1",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "12335:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "12335:15:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12335:15:1"
														}
													]
												},
												"name": "panic_error_0x41",
												"nodeType": "YulFunctionDefinition",
												"src": "12176:180:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12600:537:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "12610:27:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "12622:9:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12633:3:1",
																		"type": "",
																		"value": "192"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "12618:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "12618:19:1"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "12610:4:1"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "12691:6:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12704:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12715:1:1",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12700:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12700:17:1"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "12647:43:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "12647:71:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12647:71:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "12772:6:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12785:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12796:2:1",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12781:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12781:18:1"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "12728:43:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "12728:72:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12728:72:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "12854:6:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12867:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12878:2:1",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12863:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12863:18:1"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "12810:43:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "12810:72:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12810:72:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value3",
																		"nodeType": "YulIdentifier",
																		"src": "12936:6:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12949:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12960:2:1",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12945:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12945:18:1"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "12892:43:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "12892:72:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12892:72:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value4",
																		"nodeType": "YulIdentifier",
																		"src": "13018:6:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13031:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13042:3:1",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13027:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13027:19:1"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "12974:43:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "12974:73:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12974:73:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value5",
																		"nodeType": "YulIdentifier",
																		"src": "13101:6:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13114:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13125:3:1",
																				"type": "",
																				"value": "160"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13110:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13110:19:1"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "13057:43:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "13057:73:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13057:73:1"
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "12532:9:1",
														"type": ""
													},
													{
														"name": "value5",
														"nodeType": "YulTypedName",
														"src": "12544:6:1",
														"type": ""
													},
													{
														"name": "value4",
														"nodeType": "YulTypedName",
														"src": "12552:6:1",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "12560:6:1",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "12568:6:1",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "12576:6:1",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "12584:6:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "12595:4:1",
														"type": ""
													}
												],
												"src": "12362:775:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13269:206:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "13279:26:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "13291:9:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13302:2:1",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "13287:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "13287:18:1"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "13279:4:1"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "13359:6:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13372:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13383:1:1",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13368:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13368:17:1"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "13315:43:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "13315:71:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13315:71:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "13440:6:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13453:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13464:2:1",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13449:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13449:18:1"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "13396:43:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "13396:72:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13396:72:1"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "13233:9:1",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "13245:6:1",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "13253:6:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "13264:4:1",
														"type": ""
													}
												],
												"src": "13143:332:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13635:288:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "13645:26:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "13657:9:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13668:2:1",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "13653:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "13653:18:1"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "13645:4:1"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "13725:6:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13738:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13749:1:1",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13734:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13734:17:1"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "13681:43:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "13681:71:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13681:71:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "13806:6:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13819:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13830:2:1",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13815:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13815:18:1"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "13762:43:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "13762:72:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13762:72:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "13888:6:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13901:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13912:2:1",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13897:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13897:18:1"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "13844:43:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "13844:72:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13844:72:1"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "13591:9:1",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "13603:6:1",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "13611:6:1",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "13619:6:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "13630:4:1",
														"type": ""
													}
												],
												"src": "13481:442:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "14139:454:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "14149:27:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "14161:9:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14172:3:1",
																		"type": "",
																		"value": "160"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "14157:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "14157:19:1"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "14149:4:1"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "14230:6:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14243:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14254:1:1",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "14239:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14239:17:1"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "14186:43:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "14186:71:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14186:71:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "14311:6:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14324:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14335:2:1",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "14320:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14320:18:1"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "14267:43:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "14267:72:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14267:72:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "14393:6:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14406:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14417:2:1",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "14402:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14402:18:1"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "14349:43:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "14349:72:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14349:72:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value3",
																		"nodeType": "YulIdentifier",
																		"src": "14475:6:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14488:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14499:2:1",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "14484:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14484:18:1"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "14431:43:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "14431:72:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14431:72:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value4",
																		"nodeType": "YulIdentifier",
																		"src": "14557:6:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14570:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14581:3:1",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "14566:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14566:19:1"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "14513:43:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "14513:73:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14513:73:1"
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "14079:9:1",
														"type": ""
													},
													{
														"name": "value4",
														"nodeType": "YulTypedName",
														"src": "14091:6:1",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "14099:6:1",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "14107:6:1",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "14115:6:1",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "14123:6:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "14134:4:1",
														"type": ""
													}
												],
												"src": "13929:664:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "14777:367:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "14787:27:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "14799:9:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14810:3:1",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "14795:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "14795:19:1"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "14787:4:1"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "14868:6:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14881:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14892:1:1",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "14877:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14877:17:1"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "14824:43:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "14824:71:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14824:71:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "14945:6:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14958:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14969:2:1",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "14954:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14954:18:1"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint8_to_t_uint8_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "14905:39:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "14905:68:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14905:68:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "15027:6:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "15040:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "15051:2:1",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "15036:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15036:18:1"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "14983:43:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "14983:72:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14983:72:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value3",
																		"nodeType": "YulIdentifier",
																		"src": "15109:6:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "15122:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "15133:2:1",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "15118:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15118:18:1"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "15065:43:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "15065:72:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15065:72:1"
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "14725:9:1",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "14737:6:1",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "14745:6:1",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "14753:6:1",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "14761:6:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "14772:4:1",
														"type": ""
													}
												],
												"src": "14599:545:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "15178:152:1",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15195:1:1",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15198:77:1",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "15188:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "15188:88:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15188:88:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15292:1:1",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15295:4:1",
																		"type": "",
																		"value": "0x21"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "15285:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "15285:15:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15285:15:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15316:1:1",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15319:4:1",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "15309:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "15309:15:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15309:15:1"
														}
													]
												},
												"name": "panic_error_0x21",
												"nodeType": "YulFunctionDefinition",
												"src": "15150:180:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "15364:152:1",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15381:1:1",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15384:77:1",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "15374:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "15374:88:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15374:88:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15478:1:1",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15481:4:1",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "15471:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "15471:15:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15471:15:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15502:1:1",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15505:4:1",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "15495:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "15495:15:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15495:15:1"
														}
													]
												},
												"name": "panic_error_0x11",
												"nodeType": "YulFunctionDefinition",
												"src": "15336:180:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "15566:147:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "15576:25:1",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "15599:1:1"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "15581:17:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "15581:20:1"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nodeType": "YulIdentifier",
																	"src": "15576:1:1"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "15610:25:1",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "15633:1:1"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "15615:17:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "15615:20:1"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nodeType": "YulIdentifier",
																	"src": "15610:1:1"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "15644:16:1",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "15655:1:1"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "15658:1:1"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "15651:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "15651:9:1"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "15644:3:1"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "15684:22:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "15686:16:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "15686:18:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "15686:18:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "15676:1:1"
																	},
																	{
																		"name": "sum",
																		"nodeType": "YulIdentifier",
																		"src": "15679:3:1"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "15673:2:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "15673:10:1"
															},
															"nodeType": "YulIf",
															"src": "15670:36:1"
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "15553:1:1",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "15556:1:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "15562:3:1",
														"type": ""
													}
												],
												"src": "15522:191:1"
											}
										]
									},
									"contents": "{\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint8(value) -> cleaned {\n        cleaned := and(value, 0xff)\n    }\n\n    function abi_encode_t_uint8_to_t_uint8_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint8(value))\n    }\n\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint8_to_t_uint8_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bytes1(value) -> cleaned {\n        cleaned := and(value, 0xff00000000000000000000000000000000000000000000000000000000000000)\n    }\n\n    function abi_encode_t_bytes1_to_t_bytes1_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bytes1(value))\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function array_length_t_array$_t_uint256_$dyn_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function array_dataslot_t_array$_t_uint256_$dyn_memory_ptr(ptr) -> data {\n        data := ptr\n\n        data := add(ptr, 0x20)\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encodeUpdatedPos_t_uint256_to_t_uint256(value0, pos) -> updatedPos {\n        abi_encode_t_uint256_to_t_uint256(value0, pos)\n        updatedPos := add(pos, 0x20)\n    }\n\n    function array_nextElement_t_array$_t_uint256_$dyn_memory_ptr(ptr) -> next {\n        next := add(ptr, 0x20)\n    }\n\n    // uint256[] -> uint256[]\n    function abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack(value, pos)  -> end  {\n        let length := array_length_t_array$_t_uint256_$dyn_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack(pos, length)\n        let baseRef := array_dataslot_t_array$_t_uint256_$dyn_memory_ptr(value)\n        let srcPtr := baseRef\n        for { let i := 0 } lt(i, length) { i := add(i, 1) }\n        {\n            let elementValue0 := mload(srcPtr)\n            pos := abi_encodeUpdatedPos_t_uint256_to_t_uint256(elementValue0, pos)\n            srcPtr := array_nextElement_t_array$_t_uint256_$dyn_memory_ptr(srcPtr)\n        }\n        end := pos\n    }\n\n    function abi_encode_tuple_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__to_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart , value6, value5, value4, value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 224)\n\n        abi_encode_t_bytes1_to_t_bytes1_fromStack(value0,  add(headStart, 0))\n\n        mstore(add(headStart, 32), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value1,  tail)\n\n        mstore(add(headStart, 64), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value2,  tail)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value3,  add(headStart, 96))\n\n        abi_encode_t_address_to_t_address_fromStack(value4,  add(headStart, 128))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value5,  add(headStart, 160))\n\n        mstore(add(headStart, 192), sub(tail, headStart))\n        tail := abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack(value6,  tail)\n\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function validator_revert_t_uint8(value) {\n        if iszero(eq(value, cleanup_t_uint8(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint8(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint8(value)\n    }\n\n    function validator_revert_t_bytes32(value) {\n        if iszero(eq(value, cleanup_t_bytes32(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes32(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes32(value)\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6 {\n        if slt(sub(dataEnd, headStart), 224) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 96\n\n            value3 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 128\n\n            value4 := abi_decode_t_uint8(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 160\n\n            value5 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 192\n\n            value6 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart , value5, value4, value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 192)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_address_to_t_address_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value3,  add(headStart, 96))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value4,  add(headStart, 128))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value5,  add(headStart, 160))\n\n    }\n\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed(headStart , value4, value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 160)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value3,  add(headStart, 96))\n\n        abi_encode_t_address_to_t_address_fromStack(value4,  add(headStart, 128))\n\n    }\n\n    function abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed(headStart , value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 128)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint8_to_t_uint8_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value3,  add(headStart, 96))\n\n    }\n\n    function panic_error_0x21() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        sum := add(x, y)\n\n        if gt(x, sum) { panic_error_0x11() }\n\n    }\n\n}\n",
									"id": 1,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {
								"3320": [
									{
										"length": 32,
										"start": 3031
									}
								],
								"3322": [
									{
										"length": 32,
										"start": 2990
									}
								],
								"3324": [
									{
										"length": 32,
										"start": 2904
									}
								],
								"3326": [
									{
										"length": 32,
										"start": 4721
									}
								],
								"3328": [
									{
										"length": 32,
										"start": 4754
									}
								],
								"3331": [
									{
										"length": 32,
										"start": 3943
									}
								],
								"3334": [
									{
										"length": 32,
										"start": 4002
									}
								]
							},
							"linkReferences": {},
							"object": "608060405234801561000f575f80fd5b5060043610610140575f3560e01c8063715018a6116100b65780638da5cb5b1161007a5780638da5cb5b1461033057806395d89b411461034e578063a9059cbb1461036c578063d505accf1461039c578063dd62ed3e146103b8578063f2fde38b146103e857610140565b8063715018a6146102ac57806379cc6790146102b65780637ecebe00146102d25780638456cb591461030257806384b0196e1461030c57610140565b80633644e515116101085780633644e515146101fe5780633f4ba83a1461021c57806340c10f191461022657806342966c68146102425780635c975abb1461025e57806370a082311461027c57610140565b806306fdde0314610144578063095ea7b31461016257806318160ddd1461019257806323b872dd146101b0578063313ce567146101e0575b5f80fd5b61014c610404565b6040516101599190611a14565b60405180910390f35b61017c60048036038101906101779190611ac5565b610494565b6040516101899190611b1d565b60405180910390f35b61019a6104b6565b6040516101a79190611b45565b60405180910390f35b6101ca60048036038101906101c59190611b5e565b6104bf565b6040516101d79190611b1d565b60405180910390f35b6101e86104ed565b6040516101f59190611bc9565b60405180910390f35b6102066104f5565b6040516102139190611bfa565b60405180910390f35b610224610503565b005b610240600480360381019061023b9190611ac5565b610515565b005b61025c60048036038101906102579190611c13565b61052b565b005b61026661053f565b6040516102739190611b1d565b60405180910390f35b61029660048036038101906102919190611c3e565b610554565b6040516102a39190611b45565b60405180910390f35b6102b4610599565b005b6102d060048036038101906102cb9190611ac5565b6105ac565b005b6102ec60048036038101906102e79190611c3e565b6105cc565b6040516102f99190611b45565b60405180910390f35b61030a6105dd565b005b6103146105ef565b6040516103279796959493929190611d69565b60405180910390f35b610338610694565b6040516103459190611deb565b60405180910390f35b6103566106bd565b6040516103639190611a14565b60405180910390f35b61038660048036038101906103819190611ac5565b61074d565b6040516103939190611b1d565b60405180910390f35b6103b660048036038101906103b19190611e58565b61076f565b005b6103d260048036038101906103cd9190611ef5565b6108b4565b6040516103df9190611b45565b60405180910390f35b61040260048036038101906103fd9190611c3e565b610936565b005b60606003805461041390611f60565b80601f016020809104026020016040519081016040528092919081815260200182805461043f90611f60565b801561048a5780601f106104615761010080835404028352916020019161048a565b820191905f5260205f20905b81548152906001019060200180831161046d57829003601f168201915b5050505050905090565b5f8061049e6109ba565b90506104ab8185856109c1565b600191505092915050565b5f600254905090565b5f806104c96109ba565b90506104d68582856109d3565b6104e1858585610a65565b60019150509392505050565b5f6012905090565b5f6104fe610b55565b905090565b61050b610c0b565b610513610c92565b565b61051d610c0b565b6105278282610cf3565b5050565b61053c6105366109ba565b82610d72565b50565b5f60055f9054906101000a900460ff16905090565b5f805f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b6105a1610c0b565b6105aa5f610df1565b565b6105be826105b86109ba565b836109d3565b6105c88282610d72565b5050565b5f6105d682610eb6565b9050919050565b6105e5610c0b565b6105ed610efc565b565b5f6060805f805f6060610600610f5e565b610608610f99565b46305f801b5f67ffffffffffffffff81111561062757610626611f90565b5b6040519080825280602002602001820160405280156106555781602001602082028036833780820191505090505b507f0f00000000000000000000000000000000000000000000000000000000000000959493929190965096509650965096509650965090919293949596565b5f600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600480546106cc90611f60565b80601f01602080910402602001604051908101604052809291908181526020018280546106f890611f60565b80156107435780601f1061071a57610100808354040283529160200191610743565b820191905f5260205f20905b81548152906001019060200180831161072657829003601f168201915b5050505050905090565b5f806107576109ba565b9050610764818585610a65565b600191505092915050565b834211156107b457836040517f627913020000000000000000000000000000000000000000000000000000000081526004016107ab9190611b45565b60405180910390fd5b5f7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98888886107e28c610fd4565b896040516020016107f896959493929190611fbd565b6040516020818303038152906040528051906020012090505f61081a82611027565b90505f61082982878787611040565b90508973ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461089d57808a6040517f4b800e4600000000000000000000000000000000000000000000000000000000815260040161089492919061201c565b60405180910390fd5b6108a88a8a8a6109c1565b50505050505050505050565b5f60015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905092915050565b61093e610c0b565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036109ae575f6040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016109a59190611deb565b60405180910390fd5b6109b781610df1565b50565b5f33905090565b6109ce838383600161106e565b505050565b5f6109de84846108b4565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610a5f5781811015610a50578281836040517ffb8f41b2000000000000000000000000000000000000000000000000000000008152600401610a4793929190612043565b60405180910390fd5b610a5e84848484035f61106e565b5b50505050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610ad5575f6040517f96c6fd1e000000000000000000000000000000000000000000000000000000008152600401610acc9190611deb565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610b45575f6040517fec442f05000000000000000000000000000000000000000000000000000000008152600401610b3c9190611deb565b60405180910390fd5b610b5083838361123d565b505050565b5f7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16148015610bd057507f000000000000000000000000000000000000000000000000000000000000000046145b15610bfd577f00000000000000000000000000000000000000000000000000000000000000009050610c08565b610c0561124d565b90505b90565b610c136109ba565b73ffffffffffffffffffffffffffffffffffffffff16610c31610694565b73ffffffffffffffffffffffffffffffffffffffff1614610c9057610c546109ba565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401610c879190611deb565b60405180910390fd5b565b610c9a6112e2565b5f60055f6101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa610cdc6109ba565b604051610ce99190611deb565b60405180910390a1565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610d63575f6040517fec442f05000000000000000000000000000000000000000000000000000000008152600401610d5a9190611deb565b60405180910390fd5b610d6e5f838361123d565b5050565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610de2575f6040517f96c6fd1e000000000000000000000000000000000000000000000000000000008152600401610dd99190611deb565b60405180910390fd5b610ded825f8361123d565b5050565b5f600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f60085f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b610f04611322565b600160055f6101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610f476109ba565b604051610f549190611deb565b60405180910390a1565b6060610f9460067f000000000000000000000000000000000000000000000000000000000000000061136390919063ffffffff16565b905090565b6060610fcf60077f000000000000000000000000000000000000000000000000000000000000000061136390919063ffffffff16565b905090565b5f60085f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f815480929190600101919050559050919050565b5f611039611033610b55565b83611410565b9050919050565b5f805f8061105088888888611450565b9250925092506110608282611537565b829350505050949350505050565b5f73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036110de575f6040517fe602df050000000000000000000000000000000000000000000000000000000081526004016110d59190611deb565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361114e575f6040517f94280d620000000000000000000000000000000000000000000000000000000081526004016111459190611deb565b60405180910390fd5b8160015f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055508015611237578273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161122e9190611b45565b60405180910390a35b50505050565b611248838383611699565b505050565b5f7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f7f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000046306040516020016112c7959493929190612078565b60405160208183030381529060405280519060200120905090565b6112ea61053f565b611320576040517f8dfc202b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b61132a61053f565b15611361576040517fd93c066500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b606060ff5f1b831461137f57611378836116b1565b905061140a565b81805461138b90611f60565b80601f01602080910402602001604051908101604052809291908181526020018280546113b790611f60565b80156114025780601f106113d957610100808354040283529160200191611402565b820191905f5260205f20905b8154815290600101906020018083116113e557829003601f168201915b505050505090505b92915050565b5f6040517f190100000000000000000000000000000000000000000000000000000000000081528360028201528260228201526042812091505092915050565b5f805f7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0845f1c111561148c575f60038592509250925061152d565b5f6001888888886040515f81526020016040526040516114af94939291906120c9565b6020604051602081039080840390855afa1580156114cf573d5f803e3d5ffd5b5050506020604051035190505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611520575f60015f801b9350935093505061152d565b805f805f1b935093509350505b9450945094915050565b5f600381111561154a5761154961210c565b5b82600381111561155d5761155c61210c565b5b031561169557600160038111156115775761157661210c565b5b82600381111561158a5761158961210c565b5b036115c1576040517ff645eedf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260038111156115d5576115d461210c565b5b8260038111156115e8576115e761210c565b5b0361162c57805f1c6040517ffce698f70000000000000000000000000000000000000000000000000000000081526004016116239190611b45565b60405180910390fd5b60038081111561163f5761163e61210c565b5b8260038111156116525761165161210c565b5b0361169457806040517fd78bce0c00000000000000000000000000000000000000000000000000000000815260040161168b9190611bfa565b60405180910390fd5b5b5050565b6116a1611322565b6116ac838383611723565b505050565b60605f6116bd8361193c565b90505f602067ffffffffffffffff8111156116db576116da611f90565b5b6040519080825280601f01601f19166020018201604052801561170d5781602001600182028036833780820191505090505b5090508181528360208201528092505050919050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611773578060025f8282546117679190612166565b92505081905550611841565b5f805f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050818110156117fc578381836040517fe450d38c0000000000000000000000000000000000000000000000000000000081526004016117f393929190612043565b60405180910390fd5b8181035f808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081905550505b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611888578060025f82825403925050819055506118d2565b805f808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161192f9190611b45565b60405180910390a3505050565b5f8060ff835f1c169050601f811115611981576040517fb3512b0c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80915050919050565b5f81519050919050565b5f82825260208201905092915050565b5f5b838110156119c15780820151818401526020810190506119a6565b5f8484015250505050565b5f601f19601f8301169050919050565b5f6119e68261198a565b6119f08185611994565b9350611a008185602086016119a4565b611a09816119cc565b840191505092915050565b5f6020820190508181035f830152611a2c81846119dc565b905092915050565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f611a6182611a38565b9050919050565b611a7181611a57565b8114611a7b575f80fd5b50565b5f81359050611a8c81611a68565b92915050565b5f819050919050565b611aa481611a92565b8114611aae575f80fd5b50565b5f81359050611abf81611a9b565b92915050565b5f8060408385031215611adb57611ada611a34565b5b5f611ae885828601611a7e565b9250506020611af985828601611ab1565b9150509250929050565b5f8115159050919050565b611b1781611b03565b82525050565b5f602082019050611b305f830184611b0e565b92915050565b611b3f81611a92565b82525050565b5f602082019050611b585f830184611b36565b92915050565b5f805f60608486031215611b7557611b74611a34565b5b5f611b8286828701611a7e565b9350506020611b9386828701611a7e565b9250506040611ba486828701611ab1565b9150509250925092565b5f60ff82169050919050565b611bc381611bae565b82525050565b5f602082019050611bdc5f830184611bba565b92915050565b5f819050919050565b611bf481611be2565b82525050565b5f602082019050611c0d5f830184611beb565b92915050565b5f60208284031215611c2857611c27611a34565b5b5f611c3584828501611ab1565b91505092915050565b5f60208284031215611c5357611c52611a34565b5b5f611c6084828501611a7e565b91505092915050565b5f7fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b611c9d81611c69565b82525050565b611cac81611a57565b82525050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b611ce481611a92565b82525050565b5f611cf58383611cdb565b60208301905092915050565b5f602082019050919050565b5f611d1782611cb2565b611d218185611cbc565b9350611d2c83611ccc565b805f5b83811015611d5c578151611d438882611cea565b9750611d4e83611d01565b925050600181019050611d2f565b5085935050505092915050565b5f60e082019050611d7c5f83018a611c94565b8181036020830152611d8e81896119dc565b90508181036040830152611da281886119dc565b9050611db16060830187611b36565b611dbe6080830186611ca3565b611dcb60a0830185611beb565b81810360c0830152611ddd8184611d0d565b905098975050505050505050565b5f602082019050611dfe5f830184611ca3565b92915050565b611e0d81611bae565b8114611e17575f80fd5b50565b5f81359050611e2881611e04565b92915050565b611e3781611be2565b8114611e41575f80fd5b50565b5f81359050611e5281611e2e565b92915050565b5f805f805f805f60e0888a031215611e7357611e72611a34565b5b5f611e808a828b01611a7e565b9750506020611e918a828b01611a7e565b9650506040611ea28a828b01611ab1565b9550506060611eb38a828b01611ab1565b9450506080611ec48a828b01611e1a565b93505060a0611ed58a828b01611e44565b92505060c0611ee68a828b01611e44565b91505092959891949750929550565b5f8060408385031215611f0b57611f0a611a34565b5b5f611f1885828601611a7e565b9250506020611f2985828601611a7e565b9150509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f6002820490506001821680611f7757607f821691505b602082108103611f8a57611f89611f33565b5b50919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b5f60c082019050611fd05f830189611beb565b611fdd6020830188611ca3565b611fea6040830187611ca3565b611ff76060830186611b36565b6120046080830185611b36565b61201160a0830184611b36565b979650505050505050565b5f60408201905061202f5f830185611ca3565b61203c6020830184611ca3565b9392505050565b5f6060820190506120565f830186611ca3565b6120636020830185611b36565b6120706040830184611b36565b949350505050565b5f60a08201905061208b5f830188611beb565b6120986020830187611beb565b6120a56040830186611beb565b6120b26060830185611b36565b6120bf6080830184611ca3565b9695505050505050565b5f6080820190506120dc5f830187611beb565b6120e96020830186611bba565b6120f66040830185611beb565b6121036060830184611beb565b95945050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61217082611a92565b915061217b83611a92565b925082820190508082111561219357612192612139565b5b9291505056fea2646970667358221220ad3948f7005a1c3554453c469dc81a81de0d7522bf2b079561631841a967f48664736f6c63430008140033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x140 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x715018A6 GT PUSH2 0xB6 JUMPI DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x7A JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x330 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x34E JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x36C JUMPI DUP1 PUSH4 0xD505ACCF EQ PUSH2 0x39C JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x3B8 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x3E8 JUMPI PUSH2 0x140 JUMP JUMPDEST DUP1 PUSH4 0x715018A6 EQ PUSH2 0x2AC JUMPI DUP1 PUSH4 0x79CC6790 EQ PUSH2 0x2B6 JUMPI DUP1 PUSH4 0x7ECEBE00 EQ PUSH2 0x2D2 JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x302 JUMPI DUP1 PUSH4 0x84B0196E EQ PUSH2 0x30C JUMPI PUSH2 0x140 JUMP JUMPDEST DUP1 PUSH4 0x3644E515 GT PUSH2 0x108 JUMPI DUP1 PUSH4 0x3644E515 EQ PUSH2 0x1FE JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x21C JUMPI DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x226 JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x242 JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x25E JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x27C JUMPI PUSH2 0x140 JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x144 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x162 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x192 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x1B0 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x1E0 JUMPI JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x14C PUSH2 0x404 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x159 SWAP2 SWAP1 PUSH2 0x1A14 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x17C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x177 SWAP2 SWAP1 PUSH2 0x1AC5 JUMP JUMPDEST PUSH2 0x494 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x189 SWAP2 SWAP1 PUSH2 0x1B1D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x19A PUSH2 0x4B6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1A7 SWAP2 SWAP1 PUSH2 0x1B45 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1CA PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1C5 SWAP2 SWAP1 PUSH2 0x1B5E JUMP JUMPDEST PUSH2 0x4BF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1D7 SWAP2 SWAP1 PUSH2 0x1B1D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1E8 PUSH2 0x4ED JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1F5 SWAP2 SWAP1 PUSH2 0x1BC9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x206 PUSH2 0x4F5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x213 SWAP2 SWAP1 PUSH2 0x1BFA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x224 PUSH2 0x503 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x240 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x23B SWAP2 SWAP1 PUSH2 0x1AC5 JUMP JUMPDEST PUSH2 0x515 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x25C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x257 SWAP2 SWAP1 PUSH2 0x1C13 JUMP JUMPDEST PUSH2 0x52B JUMP JUMPDEST STOP JUMPDEST PUSH2 0x266 PUSH2 0x53F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x273 SWAP2 SWAP1 PUSH2 0x1B1D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x296 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x291 SWAP2 SWAP1 PUSH2 0x1C3E JUMP JUMPDEST PUSH2 0x554 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2A3 SWAP2 SWAP1 PUSH2 0x1B45 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2B4 PUSH2 0x599 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2D0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2CB SWAP2 SWAP1 PUSH2 0x1AC5 JUMP JUMPDEST PUSH2 0x5AC JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2EC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2E7 SWAP2 SWAP1 PUSH2 0x1C3E JUMP JUMPDEST PUSH2 0x5CC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2F9 SWAP2 SWAP1 PUSH2 0x1B45 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x30A PUSH2 0x5DD JUMP JUMPDEST STOP JUMPDEST PUSH2 0x314 PUSH2 0x5EF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x327 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1D69 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x338 PUSH2 0x694 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x345 SWAP2 SWAP1 PUSH2 0x1DEB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x356 PUSH2 0x6BD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x363 SWAP2 SWAP1 PUSH2 0x1A14 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x386 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x381 SWAP2 SWAP1 PUSH2 0x1AC5 JUMP JUMPDEST PUSH2 0x74D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x393 SWAP2 SWAP1 PUSH2 0x1B1D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3B6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3B1 SWAP2 SWAP1 PUSH2 0x1E58 JUMP JUMPDEST PUSH2 0x76F JUMP JUMPDEST STOP JUMPDEST PUSH2 0x3D2 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3CD SWAP2 SWAP1 PUSH2 0x1EF5 JUMP JUMPDEST PUSH2 0x8B4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3DF SWAP2 SWAP1 PUSH2 0x1B45 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x402 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3FD SWAP2 SWAP1 PUSH2 0x1C3E JUMP JUMPDEST PUSH2 0x936 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x413 SWAP1 PUSH2 0x1F60 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x43F SWAP1 PUSH2 0x1F60 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x48A JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x461 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x48A JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x46D JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x49E PUSH2 0x9BA JUMP JUMPDEST SWAP1 POP PUSH2 0x4AB DUP2 DUP6 DUP6 PUSH2 0x9C1 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x2 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x4C9 PUSH2 0x9BA JUMP JUMPDEST SWAP1 POP PUSH2 0x4D6 DUP6 DUP3 DUP6 PUSH2 0x9D3 JUMP JUMPDEST PUSH2 0x4E1 DUP6 DUP6 DUP6 PUSH2 0xA65 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x12 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 PUSH2 0x4FE PUSH2 0xB55 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x50B PUSH2 0xC0B JUMP JUMPDEST PUSH2 0x513 PUSH2 0xC92 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x51D PUSH2 0xC0B JUMP JUMPDEST PUSH2 0x527 DUP3 DUP3 PUSH2 0xCF3 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x53C PUSH2 0x536 PUSH2 0x9BA JUMP JUMPDEST DUP3 PUSH2 0xD72 JUMP JUMPDEST POP JUMP JUMPDEST PUSH0 PUSH1 0x5 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x5A1 PUSH2 0xC0B JUMP JUMPDEST PUSH2 0x5AA PUSH0 PUSH2 0xDF1 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x5BE DUP3 PUSH2 0x5B8 PUSH2 0x9BA JUMP JUMPDEST DUP4 PUSH2 0x9D3 JUMP JUMPDEST PUSH2 0x5C8 DUP3 DUP3 PUSH2 0xD72 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH0 PUSH2 0x5D6 DUP3 PUSH2 0xEB6 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x5E5 PUSH2 0xC0B JUMP JUMPDEST PUSH2 0x5ED PUSH2 0xEFC JUMP JUMPDEST JUMP JUMPDEST PUSH0 PUSH1 0x60 DUP1 PUSH0 DUP1 PUSH0 PUSH1 0x60 PUSH2 0x600 PUSH2 0xF5E JUMP JUMPDEST PUSH2 0x608 PUSH2 0xF99 JUMP JUMPDEST CHAINID ADDRESS PUSH0 DUP1 SHL PUSH0 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x627 JUMPI PUSH2 0x626 PUSH2 0x1F90 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x655 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP PUSH32 0xF00000000000000000000000000000000000000000000000000000000000000 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 POP SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 SWAP6 SWAP7 JUMP JUMPDEST PUSH0 PUSH1 0x5 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x6CC SWAP1 PUSH2 0x1F60 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x6F8 SWAP1 PUSH2 0x1F60 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x743 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x71A JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x743 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x726 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x757 PUSH2 0x9BA JUMP JUMPDEST SWAP1 POP PUSH2 0x764 DUP2 DUP6 DUP6 PUSH2 0xA65 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP4 TIMESTAMP GT ISZERO PUSH2 0x7B4 JUMPI DUP4 PUSH1 0x40 MLOAD PUSH32 0x6279130200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7AB SWAP2 SWAP1 PUSH2 0x1B45 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH32 0x6E71EDAE12B1B97F4D1F60370FEF10105FA2FAAE0126114A169C64845D6126C9 DUP9 DUP9 DUP9 PUSH2 0x7E2 DUP13 PUSH2 0xFD4 JUMP JUMPDEST DUP10 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x7F8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1FBD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH0 PUSH2 0x81A DUP3 PUSH2 0x1027 JUMP JUMPDEST SWAP1 POP PUSH0 PUSH2 0x829 DUP3 DUP8 DUP8 DUP8 PUSH2 0x1040 JUMP JUMPDEST SWAP1 POP DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x89D JUMPI DUP1 DUP11 PUSH1 0x40 MLOAD PUSH32 0x4B800E4600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x894 SWAP3 SWAP2 SWAP1 PUSH2 0x201C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x8A8 DUP11 DUP11 DUP11 PUSH2 0x9C1 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x1 PUSH0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x93E PUSH2 0xC0B JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x9AE JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x1E4FBDF700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9A5 SWAP2 SWAP1 PUSH2 0x1DEB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x9B7 DUP2 PUSH2 0xDF1 JUMP JUMPDEST POP JUMP JUMPDEST PUSH0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x9CE DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x106E JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x9DE DUP5 DUP5 PUSH2 0x8B4 JUMP JUMPDEST SWAP1 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 EQ PUSH2 0xA5F JUMPI DUP2 DUP2 LT ISZERO PUSH2 0xA50 JUMPI DUP3 DUP2 DUP4 PUSH1 0x40 MLOAD PUSH32 0xFB8F41B200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA47 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2043 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xA5E DUP5 DUP5 DUP5 DUP5 SUB PUSH0 PUSH2 0x106E JUMP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xAD5 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x96C6FD1E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xACC SWAP2 SWAP1 PUSH2 0x1DEB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xB45 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0xEC442F0500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xB3C SWAP2 SWAP1 PUSH2 0x1DEB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xB50 DUP4 DUP4 DUP4 PUSH2 0x123D JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0xBD0 JUMPI POP PUSH32 0x0 CHAINID EQ JUMPDEST ISZERO PUSH2 0xBFD JUMPI PUSH32 0x0 SWAP1 POP PUSH2 0xC08 JUMP JUMPDEST PUSH2 0xC05 PUSH2 0x124D JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xC13 PUSH2 0x9BA JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xC31 PUSH2 0x694 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xC90 JUMPI PUSH2 0xC54 PUSH2 0x9BA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x118CDAA700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC87 SWAP2 SWAP1 PUSH2 0x1DEB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH2 0xC9A PUSH2 0x12E2 JUMP JUMPDEST PUSH0 PUSH1 0x5 PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA PUSH2 0xCDC PUSH2 0x9BA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xCE9 SWAP2 SWAP1 PUSH2 0x1DEB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xD63 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0xEC442F0500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD5A SWAP2 SWAP1 PUSH2 0x1DEB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xD6E PUSH0 DUP4 DUP4 PUSH2 0x123D JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xDE2 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x96C6FD1E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xDD9 SWAP2 SWAP1 PUSH2 0x1DEB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xDED DUP3 PUSH0 DUP4 PUSH2 0x123D JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH0 PUSH1 0x5 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x5 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x8 PUSH0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xF04 PUSH2 0x1322 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x5 PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH2 0xF47 PUSH2 0x9BA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xF54 SWAP2 SWAP1 PUSH2 0x1DEB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0xF94 PUSH1 0x6 PUSH32 0x0 PUSH2 0x1363 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0xFCF PUSH1 0x7 PUSH32 0x0 PUSH2 0x1363 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 PUSH1 0x8 PUSH0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH1 0x1 ADD SWAP2 SWAP1 POP SSTORE SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x1039 PUSH2 0x1033 PUSH2 0xB55 JUMP JUMPDEST DUP4 PUSH2 0x1410 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH2 0x1050 DUP9 DUP9 DUP9 DUP9 PUSH2 0x1450 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP PUSH2 0x1060 DUP3 DUP3 PUSH2 0x1537 JUMP JUMPDEST DUP3 SWAP4 POP POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x10DE JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0xE602DF0500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x10D5 SWAP2 SWAP1 PUSH2 0x1DEB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x114E JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x94280D6200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1145 SWAP2 SWAP1 PUSH2 0x1DEB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x1 PUSH0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP1 ISZERO PUSH2 0x1237 JUMPI DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP5 PUSH1 0x40 MLOAD PUSH2 0x122E SWAP2 SWAP1 PUSH2 0x1B45 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x1248 DUP4 DUP4 DUP4 PUSH2 0x1699 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F PUSH32 0x0 PUSH32 0x0 CHAINID ADDRESS PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x12C7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2078 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x12EA PUSH2 0x53F JUMP JUMPDEST PUSH2 0x1320 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8DFC202B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH2 0x132A PUSH2 0x53F JUMP JUMPDEST ISZERO PUSH2 0x1361 JUMPI PUSH1 0x40 MLOAD PUSH32 0xD93C066500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x60 PUSH1 0xFF PUSH0 SHL DUP4 EQ PUSH2 0x137F JUMPI PUSH2 0x1378 DUP4 PUSH2 0x16B1 JUMP JUMPDEST SWAP1 POP PUSH2 0x140A JUMP JUMPDEST DUP2 DUP1 SLOAD PUSH2 0x138B SWAP1 PUSH2 0x1F60 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x13B7 SWAP1 PUSH2 0x1F60 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1402 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x13D9 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1402 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x13E5 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD PUSH32 0x1901000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE DUP4 PUSH1 0x2 DUP3 ADD MSTORE DUP3 PUSH1 0x22 DUP3 ADD MSTORE PUSH1 0x42 DUP2 KECCAK256 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP5 PUSH0 SHR GT ISZERO PUSH2 0x148C JUMPI PUSH0 PUSH1 0x3 DUP6 SWAP3 POP SWAP3 POP SWAP3 POP PUSH2 0x152D JUMP JUMPDEST PUSH0 PUSH1 0x1 DUP9 DUP9 DUP9 DUP9 PUSH1 0x40 MLOAD PUSH0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH2 0x14AF SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x20C9 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x14CF JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD SUB MLOAD SWAP1 POP PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1520 JUMPI PUSH0 PUSH1 0x1 PUSH0 DUP1 SHL SWAP4 POP SWAP4 POP SWAP4 POP POP PUSH2 0x152D JUMP JUMPDEST DUP1 PUSH0 DUP1 PUSH0 SHL SWAP4 POP SWAP4 POP SWAP4 POP POP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x154A JUMPI PUSH2 0x1549 PUSH2 0x210C JUMP JUMPDEST JUMPDEST DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x155D JUMPI PUSH2 0x155C PUSH2 0x210C JUMP JUMPDEST JUMPDEST SUB ISZERO PUSH2 0x1695 JUMPI PUSH1 0x1 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1577 JUMPI PUSH2 0x1576 PUSH2 0x210C JUMP JUMPDEST JUMPDEST DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x158A JUMPI PUSH2 0x1589 PUSH2 0x210C JUMP JUMPDEST JUMPDEST SUB PUSH2 0x15C1 JUMPI PUSH1 0x40 MLOAD PUSH32 0xF645EEDF00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x15D5 JUMPI PUSH2 0x15D4 PUSH2 0x210C JUMP JUMPDEST JUMPDEST DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x15E8 JUMPI PUSH2 0x15E7 PUSH2 0x210C JUMP JUMPDEST JUMPDEST SUB PUSH2 0x162C JUMPI DUP1 PUSH0 SHR PUSH1 0x40 MLOAD PUSH32 0xFCE698F700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1623 SWAP2 SWAP1 PUSH2 0x1B45 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 DUP1 DUP2 GT ISZERO PUSH2 0x163F JUMPI PUSH2 0x163E PUSH2 0x210C JUMP JUMPDEST JUMPDEST DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1652 JUMPI PUSH2 0x1651 PUSH2 0x210C JUMP JUMPDEST JUMPDEST SUB PUSH2 0x1694 JUMPI DUP1 PUSH1 0x40 MLOAD PUSH32 0xD78BCE0C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x168B SWAP2 SWAP1 PUSH2 0x1BFA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x16A1 PUSH2 0x1322 JUMP JUMPDEST PUSH2 0x16AC DUP4 DUP4 DUP4 PUSH2 0x1723 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH0 PUSH2 0x16BD DUP4 PUSH2 0x193C JUMP JUMPDEST SWAP1 POP PUSH0 PUSH1 0x20 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x16DB JUMPI PUSH2 0x16DA PUSH2 0x1F90 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x170D JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 DUP2 MSTORE DUP4 PUSH1 0x20 DUP3 ADD MSTORE DUP1 SWAP3 POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1773 JUMPI DUP1 PUSH1 0x2 PUSH0 DUP3 DUP3 SLOAD PUSH2 0x1767 SWAP2 SWAP1 PUSH2 0x2166 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0x1841 JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0x17FC JUMPI DUP4 DUP2 DUP4 PUSH1 0x40 MLOAD PUSH32 0xE450D38C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x17F3 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2043 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 SUB PUSH0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 DUP2 SWAP1 SSTORE POP POP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1888 JUMPI DUP1 PUSH1 0x2 PUSH0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0x18D2 JUMP JUMPDEST DUP1 PUSH0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD PUSH2 0x192F SWAP2 SWAP1 PUSH2 0x1B45 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0xFF DUP4 PUSH0 SHR AND SWAP1 POP PUSH1 0x1F DUP2 GT ISZERO PUSH2 0x1981 JUMPI PUSH1 0x40 MLOAD PUSH32 0xB3512B0C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x19C1 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x19A6 JUMP JUMPDEST PUSH0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x19E6 DUP3 PUSH2 0x198A JUMP JUMPDEST PUSH2 0x19F0 DUP2 DUP6 PUSH2 0x1994 JUMP JUMPDEST SWAP4 POP PUSH2 0x1A00 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x19A4 JUMP JUMPDEST PUSH2 0x1A09 DUP2 PUSH2 0x19CC JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0x1A2C DUP2 DUP5 PUSH2 0x19DC JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x1A61 DUP3 PUSH2 0x1A38 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1A71 DUP2 PUSH2 0x1A57 JUMP JUMPDEST DUP2 EQ PUSH2 0x1A7B JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1A8C DUP2 PUSH2 0x1A68 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1AA4 DUP2 PUSH2 0x1A92 JUMP JUMPDEST DUP2 EQ PUSH2 0x1AAE JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1ABF DUP2 PUSH2 0x1A9B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1ADB JUMPI PUSH2 0x1ADA PUSH2 0x1A34 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1AE8 DUP6 DUP3 DUP7 ADD PUSH2 0x1A7E JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1AF9 DUP6 DUP3 DUP7 ADD PUSH2 0x1AB1 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1B17 DUP2 PUSH2 0x1B03 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1B30 PUSH0 DUP4 ADD DUP5 PUSH2 0x1B0E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1B3F DUP2 PUSH2 0x1A92 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1B58 PUSH0 DUP4 ADD DUP5 PUSH2 0x1B36 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1B75 JUMPI PUSH2 0x1B74 PUSH2 0x1A34 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1B82 DUP7 DUP3 DUP8 ADD PUSH2 0x1A7E JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x1B93 DUP7 DUP3 DUP8 ADD PUSH2 0x1A7E JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x1BA4 DUP7 DUP3 DUP8 ADD PUSH2 0x1AB1 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1BC3 DUP2 PUSH2 0x1BAE JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1BDC PUSH0 DUP4 ADD DUP5 PUSH2 0x1BBA JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1BF4 DUP2 PUSH2 0x1BE2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1C0D PUSH0 DUP4 ADD DUP5 PUSH2 0x1BEB JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1C28 JUMPI PUSH2 0x1C27 PUSH2 0x1A34 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1C35 DUP5 DUP3 DUP6 ADD PUSH2 0x1AB1 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1C53 JUMPI PUSH2 0x1C52 PUSH2 0x1A34 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1C60 DUP5 DUP3 DUP6 ADD PUSH2 0x1A7E JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1C9D DUP2 PUSH2 0x1C69 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x1CAC DUP2 PUSH2 0x1A57 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1CE4 DUP2 PUSH2 0x1A92 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH2 0x1CF5 DUP4 DUP4 PUSH2 0x1CDB JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x1D17 DUP3 PUSH2 0x1CB2 JUMP JUMPDEST PUSH2 0x1D21 DUP2 DUP6 PUSH2 0x1CBC JUMP JUMPDEST SWAP4 POP PUSH2 0x1D2C DUP4 PUSH2 0x1CCC JUMP JUMPDEST DUP1 PUSH0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1D5C JUMPI DUP2 MLOAD PUSH2 0x1D43 DUP9 DUP3 PUSH2 0x1CEA JUMP JUMPDEST SWAP8 POP PUSH2 0x1D4E DUP4 PUSH2 0x1D01 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x1D2F JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0xE0 DUP3 ADD SWAP1 POP PUSH2 0x1D7C PUSH0 DUP4 ADD DUP11 PUSH2 0x1C94 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x1D8E DUP2 DUP10 PUSH2 0x19DC JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x1DA2 DUP2 DUP9 PUSH2 0x19DC JUMP JUMPDEST SWAP1 POP PUSH2 0x1DB1 PUSH1 0x60 DUP4 ADD DUP8 PUSH2 0x1B36 JUMP JUMPDEST PUSH2 0x1DBE PUSH1 0x80 DUP4 ADD DUP7 PUSH2 0x1CA3 JUMP JUMPDEST PUSH2 0x1DCB PUSH1 0xA0 DUP4 ADD DUP6 PUSH2 0x1BEB JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0xC0 DUP4 ADD MSTORE PUSH2 0x1DDD DUP2 DUP5 PUSH2 0x1D0D JUMP JUMPDEST SWAP1 POP SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1DFE PUSH0 DUP4 ADD DUP5 PUSH2 0x1CA3 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1E0D DUP2 PUSH2 0x1BAE JUMP JUMPDEST DUP2 EQ PUSH2 0x1E17 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1E28 DUP2 PUSH2 0x1E04 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1E37 DUP2 PUSH2 0x1BE2 JUMP JUMPDEST DUP2 EQ PUSH2 0x1E41 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1E52 DUP2 PUSH2 0x1E2E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH0 DUP1 PUSH0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x1E73 JUMPI PUSH2 0x1E72 PUSH2 0x1A34 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1E80 DUP11 DUP3 DUP12 ADD PUSH2 0x1A7E JUMP JUMPDEST SWAP8 POP POP PUSH1 0x20 PUSH2 0x1E91 DUP11 DUP3 DUP12 ADD PUSH2 0x1A7E JUMP JUMPDEST SWAP7 POP POP PUSH1 0x40 PUSH2 0x1EA2 DUP11 DUP3 DUP12 ADD PUSH2 0x1AB1 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x60 PUSH2 0x1EB3 DUP11 DUP3 DUP12 ADD PUSH2 0x1AB1 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x80 PUSH2 0x1EC4 DUP11 DUP3 DUP12 ADD PUSH2 0x1E1A JUMP JUMPDEST SWAP4 POP POP PUSH1 0xA0 PUSH2 0x1ED5 DUP11 DUP3 DUP12 ADD PUSH2 0x1E44 JUMP JUMPDEST SWAP3 POP POP PUSH1 0xC0 PUSH2 0x1EE6 DUP11 DUP3 DUP12 ADD PUSH2 0x1E44 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1F0B JUMPI PUSH2 0x1F0A PUSH2 0x1A34 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1F18 DUP6 DUP3 DUP7 ADD PUSH2 0x1A7E JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1F29 DUP6 DUP3 DUP7 ADD PUSH2 0x1A7E JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x1F77 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1F8A JUMPI PUSH2 0x1F89 PUSH2 0x1F33 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH1 0xC0 DUP3 ADD SWAP1 POP PUSH2 0x1FD0 PUSH0 DUP4 ADD DUP10 PUSH2 0x1BEB JUMP JUMPDEST PUSH2 0x1FDD PUSH1 0x20 DUP4 ADD DUP9 PUSH2 0x1CA3 JUMP JUMPDEST PUSH2 0x1FEA PUSH1 0x40 DUP4 ADD DUP8 PUSH2 0x1CA3 JUMP JUMPDEST PUSH2 0x1FF7 PUSH1 0x60 DUP4 ADD DUP7 PUSH2 0x1B36 JUMP JUMPDEST PUSH2 0x2004 PUSH1 0x80 DUP4 ADD DUP6 PUSH2 0x1B36 JUMP JUMPDEST PUSH2 0x2011 PUSH1 0xA0 DUP4 ADD DUP5 PUSH2 0x1B36 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x202F PUSH0 DUP4 ADD DUP6 PUSH2 0x1CA3 JUMP JUMPDEST PUSH2 0x203C PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1CA3 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x2056 PUSH0 DUP4 ADD DUP7 PUSH2 0x1CA3 JUMP JUMPDEST PUSH2 0x2063 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x1B36 JUMP JUMPDEST PUSH2 0x2070 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x1B36 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0xA0 DUP3 ADD SWAP1 POP PUSH2 0x208B PUSH0 DUP4 ADD DUP9 PUSH2 0x1BEB JUMP JUMPDEST PUSH2 0x2098 PUSH1 0x20 DUP4 ADD DUP8 PUSH2 0x1BEB JUMP JUMPDEST PUSH2 0x20A5 PUSH1 0x40 DUP4 ADD DUP7 PUSH2 0x1BEB JUMP JUMPDEST PUSH2 0x20B2 PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x1B36 JUMP JUMPDEST PUSH2 0x20BF PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x1CA3 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x20DC PUSH0 DUP4 ADD DUP8 PUSH2 0x1BEB JUMP JUMPDEST PUSH2 0x20E9 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x1BBA JUMP JUMPDEST PUSH2 0x20F6 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x1BEB JUMP JUMPDEST PUSH2 0x2103 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x1BEB JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH2 0x2170 DUP3 PUSH2 0x1A92 JUMP JUMPDEST SWAP2 POP PUSH2 0x217B DUP4 PUSH2 0x1A92 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x2193 JUMPI PUSH2 0x2192 PUSH2 0x2139 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAD CODECOPY BASEFEE 0xF7 STOP GAS SHR CALLDATALOAD SLOAD GASLIMIT EXTCODECOPY CHAINID SWAP14 0xC8 BYTE DUP2 0xDE 0xD PUSH22 0x22BF2B079561631841A967F48664736F6C6343000814 STOP CALLER ",
							"sourceMap": "84759:746:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12935:89;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;15154:186;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;14005:97;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;15900:244;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;13863:82;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;84527:112;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;85102:63;;;:::i;:::-;;85171:93;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;22580:87;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;24971:84;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;14160:116;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;29437:101;;;:::i;:::-;;22983:158;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;84277:143;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;85037:59;;;:::i;:::-;;79105:557;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;;;;28782:85;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;13137:93;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;14471:178;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;83551:672;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;14707:140;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;29687:215;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;12935:89;12980:13;13012:5;13005:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12935:89;:::o;15154:186::-;15227:4;15243:13;15259:12;:10;:12::i;:::-;15243:28;;15281:31;15290:5;15297:7;15306:5;15281:8;:31::i;:::-;15329:4;15322:11;;;15154:186;;;;:::o;14005:97::-;14057:7;14083:12;;14076:19;;14005:97;:::o;15900:244::-;15987:4;16003:15;16021:12;:10;:12::i;:::-;16003:30;;16043:37;16059:4;16065:7;16074:5;16043:15;:37::i;:::-;16090:26;16100:4;16106:2;16110:5;16090:9;:26::i;:::-;16133:4;16126:11;;;15900:244;;;;;:::o;13863:82::-;13912:5;13936:2;13929:9;;13863:82;:::o;84527:112::-;84586:7;84612:20;:18;:20::i;:::-;84605:27;;84527:112;:::o;85102:63::-;28675:13;:11;:13::i;:::-;85148:10:::1;:8;:10::i;:::-;85102:63::o:0;85171:93::-;28675:13;:11;:13::i;:::-;85240:17:::1;85246:2;85250:6;85240:5;:17::i;:::-;85171:93:::0;;:::o;22580:87::-;22634:26;22640:12;:10;:12::i;:::-;22654:5;22634;:26::i;:::-;22580:87;:::o;24971:84::-;25018:4;25041:7;;;;;;;;;;;25034:14;;24971:84;:::o;14160:116::-;14225:7;14251:9;:18;14261:7;14251:18;;;;;;;;;;;;;;;;14244:25;;14160:116;;;:::o;29437:101::-;28675:13;:11;:13::i;:::-;29501:30:::1;29528:1;29501:18;:30::i;:::-;29437:101::o:0;22983:158::-;23058:45;23074:7;23083:12;:10;:12::i;:::-;23097:5;23058:15;:45::i;:::-;23113:21;23119:7;23128:5;23113;:21::i;:::-;22983:158;;:::o;84277:143::-;84368:7;84394:19;84407:5;84394:12;:19::i;:::-;84387:26;;84277:143;;;:::o;85037:59::-;28675:13;:11;:13::i;:::-;85081:8:::1;:6;:8::i;:::-;85037:59::o:0;79105:557::-;79203:13;79230:18;79262:21;79297:15;79326:25;79365:12;79391:27;79494:13;:11;:13::i;:::-;79521:16;:14;:16::i;:::-;79551:13;79586:4;79613:1;79605:10;;79643:1;79629:16;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;79443:212;;;;;;;;;;;;;;;;;;;;;79105:557;;;;;;;:::o;28782:85::-;28828:7;28854:6;;;;;;;;;;;28847:13;;28782:85;:::o;13137:93::-;13184:13;13216:7;13209:14;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13137:93;:::o;14471:178::-;14540:4;14556:13;14572:12;:10;:12::i;:::-;14556:28;;14594:27;14604:5;14611:2;14615:5;14594:9;:27::i;:::-;14638:4;14631:11;;;14471:178;;;;:::o;83551:672::-;83772:8;83754:15;:26;83750:97;;;83827:8;83803:33;;;;;;;;;;;:::i;:::-;;;;;;;;83750:97;83857:18;82893:95;83916:5;83923:7;83932:5;83939:16;83949:5;83939:9;:16::i;:::-;83957:8;83888:78;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;83878:89;;;;;;83857:110;;83978:12;83993:28;84010:10;83993:16;:28::i;:::-;83978:43;;84032:14;84049:28;84063:4;84069:1;84072;84075;84049:13;:28::i;:::-;84032:45;;84101:5;84091:15;;:6;:15;;;84087:88;;84150:6;84158:5;84129:35;;;;;;;;;;;;:::i;:::-;;;;;;;;84087:88;84185:31;84194:5;84201:7;84210:5;84185:8;:31::i;:::-;83740:483;;;83551:672;;;;;;;:::o;14707:140::-;14787:7;14813:11;:18;14825:5;14813:18;;;;;;;;;;;;;;;:27;14832:7;14813:27;;;;;;;;;;;;;;;;14806:34;;14707:140;;;;:::o;29687:215::-;28675:13;:11;:13::i;:::-;29791:1:::1;29771:22;;:8;:22;;::::0;29767:91:::1;;29844:1;29816:31;;;;;;;;;;;:::i;:::-;;;;;;;;29767:91;29867:28;29886:8;29867:18;:28::i;:::-;29687:215:::0;:::o;4175:96::-;4228:7;4254:10;4247:17;;4175:96;:::o;19850:128::-;19934:37;19943:5;19950:7;19959:5;19966:4;19934:8;:37::i;:::-;19850:128;;;:::o;21524:477::-;21623:24;21650:25;21660:5;21667:7;21650:9;:25::i;:::-;21623:52;;21709:17;21689:16;:37;21685:310;;21765:5;21746:16;:24;21742:130;;;21824:7;21833:16;21851:5;21797:60;;;;;;;;;;;;;:::i;:::-;;;;;;;;21742:130;21913:57;21922:5;21929:7;21957:5;21938:16;:24;21964:5;21913:8;:57::i;:::-;21685:310;21613:388;21524:477;;;:::o;16517:300::-;16616:1;16600:18;;:4;:18;;;16596:86;;16668:1;16641:30;;;;;;;;;;;:::i;:::-;;;;;;;;16596:86;16709:1;16695:16;;:2;:16;;;16691:86;;16763:1;16734:32;;;;;;;;;;;:::i;:::-;;;;;;;;16691:86;16786:24;16794:4;16800:2;16804:5;16786:7;:24::i;:::-;16517:300;;;:::o;77806:262::-;77859:7;77899:11;77882:28;;77890:4;77882:28;;;:63;;;;;77931:14;77914:13;:31;77882:63;77878:184;;;77968:22;77961:29;;;;77878:184;78028:23;:21;:23::i;:::-;78021:30;;77806:262;;:::o;28940:162::-;29010:12;:10;:12::i;:::-;28999:23;;:7;:5;:7::i;:::-;:23;;;28995:101;;29072:12;:10;:12::i;:::-;29045:40;;;;;;;;;;;:::i;:::-;;;;;;;;28995:101;28940:162::o;25831:117::-;24842:16;:14;:16::i;:::-;25899:5:::1;25889:7;;:15;;;;;;;;;;;;;;;;;;25919:22;25928:12;:10;:12::i;:::-;25919:22;;;;;;:::i;:::-;;;;;;;;25831:117::o:0;18582:208::-;18671:1;18652:21;;:7;:21;;;18648:91;;18725:1;18696:32;;;;;;;;;;;:::i;:::-;;;;;;;;18648:91;18748:35;18764:1;18768:7;18777:5;18748:7;:35::i;:::-;18582:208;;:::o;19108:206::-;19197:1;19178:21;;:7;:21;;;19174:89;;19249:1;19222:30;;;;;;;;;;;:::i;:::-;;;;;;;;19174:89;19272:35;19280:7;19297:1;19301:5;19272:7;:35::i;:::-;19108:206;;:::o;30056:187::-;30129:16;30148:6;;;;;;;;;;;30129:25;;30173:8;30164:6;;:17;;;;;;;;;;;;;;;;;;30227:8;30196:40;;30217:8;30196:40;;;;;;;;;;;;30119:124;30056:187;:::o;81131:107::-;81191:7;81217;:14;81225:5;81217:14;;;;;;;;;;;;;;;;81210:21;;81131:107;;;:::o;25584:115::-;24595:19;:17;:19::i;:::-;25653:4:::1;25643:7;;:14;;;;;;;;;;;;;;;;;;25672:20;25679:12;:10;:12::i;:::-;25672:20;;;;;;:::i;:::-;;;;;;;;25584:115::o:0;79982:126::-;80028:13;80060:41;80087:13;80060:5;:26;;:41;;;;:::i;:::-;80053:48;;79982:126;:::o;80434:135::-;80483:13;80515:47;80545:16;80515:8;:29;;:47;;;;:::i;:::-;80508:54;;80434:135;:::o;81352:395::-;81412:7;81714;:14;81722:5;81714:14;;;;;;;;;;;;;;;;:16;;;;;;;;;;;;81707:23;;81352:395;;;:::o;78878:176::-;78955:7;78981:66;79014:20;:18;:20::i;:::-;79036:10;78981:32;:66::i;:::-;78974:73;;78878:176;;;:::o;40929:260::-;41014:7;41034:17;41053:18;41073:16;41093:25;41104:4;41110:1;41113;41116;41093:10;:25::i;:::-;41033:85;;;;;;41128:28;41140:5;41147:8;41128:11;:28::i;:::-;41173:9;41166:16;;;;;40929:260;;;;;;:::o;20810:432::-;20939:1;20922:19;;:5;:19;;;20918:89;;20993:1;20964:32;;;;;;;;;;;:::i;:::-;;;;;;;;20918:89;21039:1;21020:21;;:7;:21;;;21016:90;;21092:1;21064:31;;;;;;;;;;;:::i;:::-;;;;;;;;21016:90;21145:5;21115:11;:18;21127:5;21115:18;;;;;;;;;;;;;;;:27;21134:7;21115:27;;;;;;;;;;;;;;;:35;;;;21164:9;21160:76;;;21210:7;21194:31;;21203:5;21194:31;;;21219:5;21194:31;;;;;;:::i;:::-;;;;;;;;21160:76;20810:432;;;;:::o;85338:165::-;85466:30;85480:4;85486:2;85490:5;85466:13;:30::i;:::-;85338:165;;;:::o;78074:179::-;78129:7;76040:95;78187:11;78200:14;78216:13;78239:4;78165:80;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;78155:91;;;;;;78148:98;;78074:179;:::o;25323:126::-;25386:8;:6;:8::i;:::-;25381:62;;25417:15;;;;;;;;;;;;;;25381:62;25323:126::o;25123:128::-;25188:8;:6;:8::i;:::-;25184:61;;;25219:15;;;;;;;;;;;;;;25184:61;25123:128::o;72410:267::-;72504:13;70415:66;72562:17;;72552:5;72533:46;72529:142;;72602:15;72611:5;72602:8;:15::i;:::-;72595:22;;;;72529:142;72655:5;72648:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;72410:267;;;;;:::o;64684:401::-;64777:14;64886:4;64880:11;64916:10;64911:3;64904:23;64963:15;64956:4;64951:3;64947:14;64940:39;65015:10;65008:4;65003:3;64999:14;64992:34;65064:4;65059:3;65049:20;65039:30;;64855:224;64684:401;;;;:::o;39266:1530::-;39392:7;39401:12;39415:7;40325:66;40320:1;40312:10;;:79;40308:164;;;40423:1;40427:30;40459:1;40407:54;;;;;;;;40308:164;40566:14;40583:24;40593:4;40599:1;40602;40605;40583:24;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;40566:41;;40639:1;40621:20;;:6;:20;;;40617:113;;40673:1;40677:29;40716:1;40708:10;;40657:62;;;;;;;;;40617:113;40748:6;40756:20;40786:1;40778:10;;40740:49;;;;;;;39266:1530;;;;;;;;;:::o;41322:532::-;41417:20;41408:29;;;;;;;;:::i;:::-;;:5;:29;;;;;;;;:::i;:::-;;;41404:444;41453:7;41404:444;41513:29;41504:38;;;;;;;;:::i;:::-;;:5;:38;;;;;;;;:::i;:::-;;;41500:348;;41565:23;;;;;;;;;;;;;;41500:348;41618:35;41609:44;;;;;;;;:::i;:::-;;:5;:44;;;;;;;;:::i;:::-;;;41605:243;;41712:8;41704:17;;41676:46;;;;;;;;;;;:::i;:::-;;;;;;;;41605:243;41752:30;41743:39;;;;;;;;:::i;:::-;;:5;:39;;;;;;;;:::i;:::-;;;41739:109;;41828:8;41805:32;;;;;;;;;;;:::i;:::-;;;;;;;;41739:109;41322:532;;;:::o;27019:145::-;24595:19;:17;:19::i;:::-;27127:30:::1;27141:4;27147:2;27151:5;27127:13;:30::i;:::-;27019:145:::0;;;:::o;71103:405::-;71162:13;71187:11;71201:16;71212:4;71201:10;:16::i;:::-;71187:30;;71305:17;71336:2;71325:14;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;71305:34;;71427:3;71422;71415:16;71467:4;71460;71455:3;71451:14;71444:28;71498:3;71491:10;;;;71103:405;;;:::o;17132:1107::-;17237:1;17221:18;;:4;:18;;;17217:540;;17373:5;17357:12;;:21;;;;;;;:::i;:::-;;;;;;;;17217:540;;;17409:19;17431:9;:15;17441:4;17431:15;;;;;;;;;;;;;;;;17409:37;;17478:5;17464:11;:19;17460:115;;;17535:4;17541:11;17554:5;17510:50;;;;;;;;;;;;;:::i;:::-;;;;;;;;17460:115;17727:5;17713:11;:19;17695:9;:15;17705:4;17695:15;;;;;;;;;;;;;;;:37;;;;17395:362;17217:540;17785:1;17771:16;;:2;:16;;;17767:425;;17950:5;17934:12;;:21;;;;;;;;;;;17767:425;;;18162:5;18145:9;:13;18155:2;18145:13;;;;;;;;;;;;;;;;:22;;;;;;;;;;;17767:425;18222:2;18207:25;;18216:4;18207:25;;;18226:5;18207:25;;;;;;:::i;:::-;;;;;;;;17132:1107;;;:::o;71580:245::-;71641:7;71660:14;71713:4;71704;71677:33;;:40;71660:57;;71740:2;71731:6;:11;71727:69;;;71765:20;;;;;;;;;;;;;;71727:69;71812:6;71805:13;;;71580:245;;;:::o;7:99:1:-;59:6;93:5;87:12;77:22;;7:99;;;:::o;112:169::-;196:11;230:6;225:3;218:19;270:4;265:3;261:14;246:29;;112:169;;;;:::o;287:246::-;368:1;378:113;392:6;389:1;386:13;378:113;;;477:1;472:3;468:11;462:18;458:1;453:3;449:11;442:39;414:2;411:1;407:10;402:15;;378:113;;;525:1;516:6;511:3;507:16;500:27;349:184;287:246;;;:::o;539:102::-;580:6;631:2;627:7;622:2;615:5;611:14;607:28;597:38;;539:102;;;:::o;647:377::-;735:3;763:39;796:5;763:39;:::i;:::-;818:71;882:6;877:3;818:71;:::i;:::-;811:78;;898:65;956:6;951:3;944:4;937:5;933:16;898:65;:::i;:::-;988:29;1010:6;988:29;:::i;:::-;983:3;979:39;972:46;;739:285;647:377;;;;:::o;1030:313::-;1143:4;1181:2;1170:9;1166:18;1158:26;;1230:9;1224:4;1220:20;1216:1;1205:9;1201:17;1194:47;1258:78;1331:4;1322:6;1258:78;:::i;:::-;1250:86;;1030:313;;;;:::o;1430:117::-;1539:1;1536;1529:12;1676:126;1713:7;1753:42;1746:5;1742:54;1731:65;;1676:126;;;:::o;1808:96::-;1845:7;1874:24;1892:5;1874:24;:::i;:::-;1863:35;;1808:96;;;:::o;1910:122::-;1983:24;2001:5;1983:24;:::i;:::-;1976:5;1973:35;1963:63;;2022:1;2019;2012:12;1963:63;1910:122;:::o;2038:139::-;2084:5;2122:6;2109:20;2100:29;;2138:33;2165:5;2138:33;:::i;:::-;2038:139;;;;:::o;2183:77::-;2220:7;2249:5;2238:16;;2183:77;;;:::o;2266:122::-;2339:24;2357:5;2339:24;:::i;:::-;2332:5;2329:35;2319:63;;2378:1;2375;2368:12;2319:63;2266:122;:::o;2394:139::-;2440:5;2478:6;2465:20;2456:29;;2494:33;2521:5;2494:33;:::i;:::-;2394:139;;;;:::o;2539:474::-;2607:6;2615;2664:2;2652:9;2643:7;2639:23;2635:32;2632:119;;;2670:79;;:::i;:::-;2632:119;2790:1;2815:53;2860:7;2851:6;2840:9;2836:22;2815:53;:::i;:::-;2805:63;;2761:117;2917:2;2943:53;2988:7;2979:6;2968:9;2964:22;2943:53;:::i;:::-;2933:63;;2888:118;2539:474;;;;;:::o;3019:90::-;3053:7;3096:5;3089:13;3082:21;3071:32;;3019:90;;;:::o;3115:109::-;3196:21;3211:5;3196:21;:::i;:::-;3191:3;3184:34;3115:109;;:::o;3230:210::-;3317:4;3355:2;3344:9;3340:18;3332:26;;3368:65;3430:1;3419:9;3415:17;3406:6;3368:65;:::i;:::-;3230:210;;;;:::o;3446:118::-;3533:24;3551:5;3533:24;:::i;:::-;3528:3;3521:37;3446:118;;:::o;3570:222::-;3663:4;3701:2;3690:9;3686:18;3678:26;;3714:71;3782:1;3771:9;3767:17;3758:6;3714:71;:::i;:::-;3570:222;;;;:::o;3798:619::-;3875:6;3883;3891;3940:2;3928:9;3919:7;3915:23;3911:32;3908:119;;;3946:79;;:::i;:::-;3908:119;4066:1;4091:53;4136:7;4127:6;4116:9;4112:22;4091:53;:::i;:::-;4081:63;;4037:117;4193:2;4219:53;4264:7;4255:6;4244:9;4240:22;4219:53;:::i;:::-;4209:63;;4164:118;4321:2;4347:53;4392:7;4383:6;4372:9;4368:22;4347:53;:::i;:::-;4337:63;;4292:118;3798:619;;;;;:::o;4423:86::-;4458:7;4498:4;4491:5;4487:16;4476:27;;4423:86;;;:::o;4515:112::-;4598:22;4614:5;4598:22;:::i;:::-;4593:3;4586:35;4515:112;;:::o;4633:214::-;4722:4;4760:2;4749:9;4745:18;4737:26;;4773:67;4837:1;4826:9;4822:17;4813:6;4773:67;:::i;:::-;4633:214;;;;:::o;4853:77::-;4890:7;4919:5;4908:16;;4853:77;;;:::o;4936:118::-;5023:24;5041:5;5023:24;:::i;:::-;5018:3;5011:37;4936:118;;:::o;5060:222::-;5153:4;5191:2;5180:9;5176:18;5168:26;;5204:71;5272:1;5261:9;5257:17;5248:6;5204:71;:::i;:::-;5060:222;;;;:::o;5288:329::-;5347:6;5396:2;5384:9;5375:7;5371:23;5367:32;5364:119;;;5402:79;;:::i;:::-;5364:119;5522:1;5547:53;5592:7;5583:6;5572:9;5568:22;5547:53;:::i;:::-;5537:63;;5493:117;5288:329;;;;:::o;5623:::-;5682:6;5731:2;5719:9;5710:7;5706:23;5702:32;5699:119;;;5737:79;;:::i;:::-;5699:119;5857:1;5882:53;5927:7;5918:6;5907:9;5903:22;5882:53;:::i;:::-;5872:63;;5828:117;5623:329;;;;:::o;5958:149::-;5994:7;6034:66;6027:5;6023:78;6012:89;;5958:149;;;:::o;6113:115::-;6198:23;6215:5;6198:23;:::i;:::-;6193:3;6186:36;6113:115;;:::o;6234:118::-;6321:24;6339:5;6321:24;:::i;:::-;6316:3;6309:37;6234:118;;:::o;6358:114::-;6425:6;6459:5;6453:12;6443:22;;6358:114;;;:::o;6478:184::-;6577:11;6611:6;6606:3;6599:19;6651:4;6646:3;6642:14;6627:29;;6478:184;;;;:::o;6668:132::-;6735:4;6758:3;6750:11;;6788:4;6783:3;6779:14;6771:22;;6668:132;;;:::o;6806:108::-;6883:24;6901:5;6883:24;:::i;:::-;6878:3;6871:37;6806:108;;:::o;6920:179::-;6989:10;7010:46;7052:3;7044:6;7010:46;:::i;:::-;7088:4;7083:3;7079:14;7065:28;;6920:179;;;;:::o;7105:113::-;7175:4;7207;7202:3;7198:14;7190:22;;7105:113;;;:::o;7254:732::-;7373:3;7402:54;7450:5;7402:54;:::i;:::-;7472:86;7551:6;7546:3;7472:86;:::i;:::-;7465:93;;7582:56;7632:5;7582:56;:::i;:::-;7661:7;7692:1;7677:284;7702:6;7699:1;7696:13;7677:284;;;7778:6;7772:13;7805:63;7864:3;7849:13;7805:63;:::i;:::-;7798:70;;7891:60;7944:6;7891:60;:::i;:::-;7881:70;;7737:224;7724:1;7721;7717:9;7712:14;;7677:284;;;7681:14;7977:3;7970:10;;7378:608;;;7254:732;;;;:::o;7992:1215::-;8341:4;8379:3;8368:9;8364:19;8356:27;;8393:69;8459:1;8448:9;8444:17;8435:6;8393:69;:::i;:::-;8509:9;8503:4;8499:20;8494:2;8483:9;8479:18;8472:48;8537:78;8610:4;8601:6;8537:78;:::i;:::-;8529:86;;8662:9;8656:4;8652:20;8647:2;8636:9;8632:18;8625:48;8690:78;8763:4;8754:6;8690:78;:::i;:::-;8682:86;;8778:72;8846:2;8835:9;8831:18;8822:6;8778:72;:::i;:::-;8860:73;8928:3;8917:9;8913:19;8904:6;8860:73;:::i;:::-;8943;9011:3;9000:9;8996:19;8987:6;8943:73;:::i;:::-;9064:9;9058:4;9054:20;9048:3;9037:9;9033:19;9026:49;9092:108;9195:4;9186:6;9092:108;:::i;:::-;9084:116;;7992:1215;;;;;;;;;;:::o;9213:222::-;9306:4;9344:2;9333:9;9329:18;9321:26;;9357:71;9425:1;9414:9;9410:17;9401:6;9357:71;:::i;:::-;9213:222;;;;:::o;9441:118::-;9512:22;9528:5;9512:22;:::i;:::-;9505:5;9502:33;9492:61;;9549:1;9546;9539:12;9492:61;9441:118;:::o;9565:135::-;9609:5;9647:6;9634:20;9625:29;;9663:31;9688:5;9663:31;:::i;:::-;9565:135;;;;:::o;9706:122::-;9779:24;9797:5;9779:24;:::i;:::-;9772:5;9769:35;9759:63;;9818:1;9815;9808:12;9759:63;9706:122;:::o;9834:139::-;9880:5;9918:6;9905:20;9896:29;;9934:33;9961:5;9934:33;:::i;:::-;9834:139;;;;:::o;9979:1199::-;10090:6;10098;10106;10114;10122;10130;10138;10187:3;10175:9;10166:7;10162:23;10158:33;10155:120;;;10194:79;;:::i;:::-;10155:120;10314:1;10339:53;10384:7;10375:6;10364:9;10360:22;10339:53;:::i;:::-;10329:63;;10285:117;10441:2;10467:53;10512:7;10503:6;10492:9;10488:22;10467:53;:::i;:::-;10457:63;;10412:118;10569:2;10595:53;10640:7;10631:6;10620:9;10616:22;10595:53;:::i;:::-;10585:63;;10540:118;10697:2;10723:53;10768:7;10759:6;10748:9;10744:22;10723:53;:::i;:::-;10713:63;;10668:118;10825:3;10852:51;10895:7;10886:6;10875:9;10871:22;10852:51;:::i;:::-;10842:61;;10796:117;10952:3;10979:53;11024:7;11015:6;11004:9;11000:22;10979:53;:::i;:::-;10969:63;;10923:119;11081:3;11108:53;11153:7;11144:6;11133:9;11129:22;11108:53;:::i;:::-;11098:63;;11052:119;9979:1199;;;;;;;;;;:::o;11184:474::-;11252:6;11260;11309:2;11297:9;11288:7;11284:23;11280:32;11277:119;;;11315:79;;:::i;:::-;11277:119;11435:1;11460:53;11505:7;11496:6;11485:9;11481:22;11460:53;:::i;:::-;11450:63;;11406:117;11562:2;11588:53;11633:7;11624:6;11613:9;11609:22;11588:53;:::i;:::-;11578:63;;11533:118;11184:474;;;;;:::o;11664:180::-;11712:77;11709:1;11702:88;11809:4;11806:1;11799:15;11833:4;11830:1;11823:15;11850:320;11894:6;11931:1;11925:4;11921:12;11911:22;;11978:1;11972:4;11968:12;11999:18;11989:81;;12055:4;12047:6;12043:17;12033:27;;11989:81;12117:2;12109:6;12106:14;12086:18;12083:38;12080:84;;12136:18;;:::i;:::-;12080:84;11901:269;11850:320;;;:::o;12176:180::-;12224:77;12221:1;12214:88;12321:4;12318:1;12311:15;12345:4;12342:1;12335:15;12362:775;12595:4;12633:3;12622:9;12618:19;12610:27;;12647:71;12715:1;12704:9;12700:17;12691:6;12647:71;:::i;:::-;12728:72;12796:2;12785:9;12781:18;12772:6;12728:72;:::i;:::-;12810;12878:2;12867:9;12863:18;12854:6;12810:72;:::i;:::-;12892;12960:2;12949:9;12945:18;12936:6;12892:72;:::i;:::-;12974:73;13042:3;13031:9;13027:19;13018:6;12974:73;:::i;:::-;13057;13125:3;13114:9;13110:19;13101:6;13057:73;:::i;:::-;12362:775;;;;;;;;;:::o;13143:332::-;13264:4;13302:2;13291:9;13287:18;13279:26;;13315:71;13383:1;13372:9;13368:17;13359:6;13315:71;:::i;:::-;13396:72;13464:2;13453:9;13449:18;13440:6;13396:72;:::i;:::-;13143:332;;;;;:::o;13481:442::-;13630:4;13668:2;13657:9;13653:18;13645:26;;13681:71;13749:1;13738:9;13734:17;13725:6;13681:71;:::i;:::-;13762:72;13830:2;13819:9;13815:18;13806:6;13762:72;:::i;:::-;13844;13912:2;13901:9;13897:18;13888:6;13844:72;:::i;:::-;13481:442;;;;;;:::o;13929:664::-;14134:4;14172:3;14161:9;14157:19;14149:27;;14186:71;14254:1;14243:9;14239:17;14230:6;14186:71;:::i;:::-;14267:72;14335:2;14324:9;14320:18;14311:6;14267:72;:::i;:::-;14349;14417:2;14406:9;14402:18;14393:6;14349:72;:::i;:::-;14431;14499:2;14488:9;14484:18;14475:6;14431:72;:::i;:::-;14513:73;14581:3;14570:9;14566:19;14557:6;14513:73;:::i;:::-;13929:664;;;;;;;;:::o;14599:545::-;14772:4;14810:3;14799:9;14795:19;14787:27;;14824:71;14892:1;14881:9;14877:17;14868:6;14824:71;:::i;:::-;14905:68;14969:2;14958:9;14954:18;14945:6;14905:68;:::i;:::-;14983:72;15051:2;15040:9;15036:18;15027:6;14983:72;:::i;:::-;15065;15133:2;15122:9;15118:18;15109:6;15065:72;:::i;:::-;14599:545;;;;;;;:::o;15150:180::-;15198:77;15195:1;15188:88;15295:4;15292:1;15285:15;15319:4;15316:1;15309:15;15336:180;15384:77;15381:1;15374:88;15481:4;15478:1;15471:15;15505:4;15502:1;15495:15;15522:191;15562:3;15581:20;15599:1;15581:20;:::i;:::-;15576:25;;15615:20;15633:1;15615:20;:::i;:::-;15610:25;;15658:1;15655;15651:9;15644:16;;15679:3;15676:1;15673:10;15670:36;;;15686:18;;:::i;:::-;15670:36;15522:191;;;;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "1731000",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"DOMAIN_SEPARATOR()": "infinite",
								"allowance(address,address)": "infinite",
								"approve(address,uint256)": "infinite",
								"balanceOf(address)": "2962",
								"burn(uint256)": "infinite",
								"burnFrom(address,uint256)": "infinite",
								"decimals()": "450",
								"eip712Domain()": "infinite",
								"mint(address,uint256)": "infinite",
								"name()": "infinite",
								"nonces(address)": "2938",
								"owner()": "2588",
								"pause()": "infinite",
								"paused()": "2584",
								"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "infinite",
								"renounceOwnership()": "infinite",
								"symbol()": "infinite",
								"totalSupply()": "2500",
								"transfer(address,uint256)": "infinite",
								"transferFrom(address,address,uint256)": "infinite",
								"transferOwnership(address)": "infinite",
								"unpause()": "infinite"
							},
							"internal": {
								"_update(address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 84759,
									"end": 85505,
									"name": "PUSH",
									"source": 0,
									"value": "160"
								},
								{
									"begin": 84759,
									"end": 85505,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 84759,
									"end": 85505,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 84841,
									"end": 85031,
									"name": "CALLVALUE",
									"source": 0
								},
								{
									"begin": 84841,
									"end": 85031,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 84841,
									"end": 85031,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 84841,
									"end": 85031,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 84841,
									"end": 85031,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 84841,
									"end": 85031,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 84841,
									"end": 85031,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 84841,
									"end": 85031,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 84841,
									"end": 85031,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 84841,
									"end": 85031,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 84841,
									"end": 85031,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 84841,
									"end": 85031,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 84841,
									"end": 85031,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 84841,
									"end": 85031,
									"name": "PUSHSIZE",
									"source": 0
								},
								{
									"begin": 84841,
									"end": 85031,
									"name": "CODESIZE",
									"source": 0
								},
								{
									"begin": 84841,
									"end": 85031,
									"name": "SUB",
									"source": 0
								},
								{
									"begin": 84841,
									"end": 85031,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 84841,
									"end": 85031,
									"name": "PUSHSIZE",
									"source": 0
								},
								{
									"begin": 84841,
									"end": 85031,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 84841,
									"end": 85031,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 84841,
									"end": 85031,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 84841,
									"end": 85031,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 84841,
									"end": 85031,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 84841,
									"end": 85031,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 84841,
									"end": 85031,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 84841,
									"end": 85031,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 84841,
									"end": 85031,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 84841,
									"end": 85031,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 84841,
									"end": 85031,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "2"
								},
								{
									"begin": 84841,
									"end": 85031,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 84841,
									"end": 85031,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 84841,
									"end": 85031,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "3"
								},
								{
									"begin": 84841,
									"end": 85031,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 84841,
									"end": 85031,
									"name": "tag",
									"source": 0,
									"value": "2"
								},
								{
									"begin": 84841,
									"end": 85031,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 83445,
									"end": 83497,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 83445,
									"end": 83497,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 83445,
									"end": 83497,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 83445,
									"end": 83497,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 83445,
									"end": 83497,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 83445,
									"end": 83497,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 83445,
									"end": 83497,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 83445,
									"end": 83497,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 83445,
									"end": 83497,
									"name": "PUSH",
									"source": 0,
									"value": "5"
								},
								{
									"begin": 83445,
									"end": 83497,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 83445,
									"end": 83497,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 83445,
									"end": 83497,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 83445,
									"end": 83497,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 83445,
									"end": 83497,
									"name": "PUSH",
									"source": 0,
									"value": "564547414E000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 83445,
									"end": 83497,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 83445,
									"end": 83497,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 83445,
									"end": 83497,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 83484,
									"end": 83488,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 77289,
									"end": 77720,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 77289,
									"end": 77720,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 77289,
									"end": 77720,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 77289,
									"end": 77720,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 77289,
									"end": 77720,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 77289,
									"end": 77720,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 77289,
									"end": 77720,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 77289,
									"end": 77720,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 77289,
									"end": 77720,
									"name": "PUSH",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 77289,
									"end": 77720,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 77289,
									"end": 77720,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 77289,
									"end": 77720,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 77289,
									"end": 77720,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 77289,
									"end": 77720,
									"name": "PUSH",
									"source": 0,
									"value": "3100000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 77289,
									"end": 77720,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 77289,
									"end": 77720,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 77289,
									"end": 77720,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 84921,
									"end": 84933,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 12757,
									"end": 12870,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 12757,
									"end": 12870,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 12757,
									"end": 12870,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 12757,
									"end": 12870,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 12757,
									"end": 12870,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 12757,
									"end": 12870,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 12757,
									"end": 12870,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 12757,
									"end": 12870,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 12757,
									"end": 12870,
									"name": "PUSH",
									"source": 0,
									"value": "5"
								},
								{
									"begin": 12757,
									"end": 12870,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 12757,
									"end": 12870,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 12757,
									"end": 12870,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 12757,
									"end": 12870,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 12757,
									"end": 12870,
									"name": "PUSH",
									"source": 0,
									"value": "564547414E000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 12757,
									"end": 12870,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 12757,
									"end": 12870,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 12757,
									"end": 12870,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 12757,
									"end": 12870,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 12757,
									"end": 12870,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 12757,
									"end": 12870,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 12757,
									"end": 12870,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 12757,
									"end": 12870,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 12757,
									"end": 12870,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 12757,
									"end": 12870,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 12757,
									"end": 12870,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 12757,
									"end": 12870,
									"name": "PUSH",
									"source": 0,
									"value": "3"
								},
								{
									"begin": 12757,
									"end": 12870,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 12757,
									"end": 12870,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 12757,
									"end": 12870,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 12757,
									"end": 12870,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 12757,
									"end": 12870,
									"name": "PUSH",
									"source": 0,
									"value": "56474E0000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 12757,
									"end": 12870,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 12757,
									"end": 12870,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 12757,
									"end": 12870,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 12831,
									"end": 12836,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 12823,
									"end": 12828,
									"name": "PUSH",
									"source": 0,
									"value": "3"
								},
								{
									"begin": 12823,
									"end": 12836,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 12823,
									"end": 12836,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 12823,
									"end": 12836,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "11"
								},
								{
									"begin": 12823,
									"end": 12836,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 12823,
									"end": 12836,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 12823,
									"end": 12836,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "12"
								},
								{
									"begin": 12823,
									"end": 12836,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 12823,
									"end": 12836,
									"name": "tag",
									"source": 0,
									"value": "11"
								},
								{
									"begin": 12823,
									"end": 12836,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 12823,
									"end": 12836,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 12856,
									"end": 12863,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 12846,
									"end": 12853,
									"name": "PUSH",
									"source": 0,
									"value": "4"
								},
								{
									"begin": 12846,
									"end": 12863,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 12846,
									"end": 12863,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 12846,
									"end": 12863,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "13"
								},
								{
									"begin": 12846,
									"end": 12863,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 12846,
									"end": 12863,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 12846,
									"end": 12863,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "12"
								},
								{
									"begin": 12846,
									"end": 12863,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 12846,
									"end": 12863,
									"name": "tag",
									"source": 0,
									"value": "13"
								},
								{
									"begin": 12846,
									"end": 12863,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 12846,
									"end": 12863,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 12757,
									"end": 12870,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 12757,
									"end": 12870,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 24362,
									"end": 24367,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 24352,
									"end": 24359,
									"name": "PUSH",
									"source": 0,
									"value": "5"
								},
								{
									"begin": 24352,
									"end": 24359,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 24352,
									"end": 24367,
									"name": "PUSH",
									"source": 0,
									"value": "100"
								},
								{
									"begin": 24352,
									"end": 24367,
									"name": "EXP",
									"source": 0
								},
								{
									"begin": 24352,
									"end": 24367,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 24352,
									"end": 24367,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": 24352,
									"end": 24367,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 24352,
									"end": 24367,
									"name": "PUSH",
									"source": 0,
									"value": "FF"
								},
								{
									"begin": 24352,
									"end": 24367,
									"name": "MUL",
									"source": 0
								},
								{
									"begin": 24352,
									"end": 24367,
									"name": "NOT",
									"source": 0
								},
								{
									"begin": 24352,
									"end": 24367,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 24352,
									"end": 24367,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 24352,
									"end": 24367,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 24352,
									"end": 24367,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 24352,
									"end": 24367,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 24352,
									"end": 24367,
									"name": "MUL",
									"source": 0
								},
								{
									"begin": 24352,
									"end": 24367,
									"name": "OR",
									"source": 0
								},
								{
									"begin": 24352,
									"end": 24367,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 24352,
									"end": 24367,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 24352,
									"end": 24367,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 28441,
									"end": 28442,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 28417,
									"end": 28443,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 28417,
									"end": 28443,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 28417,
									"end": 28429,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 28417,
									"end": 28443,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 28417,
									"end": 28443,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 28417,
									"end": 28443,
									"name": "SUB",
									"source": 0
								},
								{
									"begin": 28413,
									"end": 28508,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "16"
								},
								{
									"begin": 28413,
									"end": 28508,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 28494,
									"end": 28495,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 28466,
									"end": 28497,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 28466,
									"end": 28497,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 28466,
									"end": 28497,
									"name": "PUSH",
									"source": 0,
									"value": "1E4FBDF700000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 28466,
									"end": 28497,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 28466,
									"end": 28497,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 28466,
									"end": 28497,
									"name": "PUSH",
									"source": 0,
									"value": "4"
								},
								{
									"begin": 28466,
									"end": 28497,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 28466,
									"end": 28497,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "17"
								},
								{
									"begin": 28466,
									"end": 28497,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 28466,
									"end": 28497,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 28466,
									"end": 28497,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "18"
								},
								{
									"begin": 28466,
									"end": 28497,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 28466,
									"end": 28497,
									"name": "tag",
									"source": 0,
									"value": "17"
								},
								{
									"begin": 28466,
									"end": 28497,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 28466,
									"end": 28497,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 28466,
									"end": 28497,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 28466,
									"end": 28497,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 28466,
									"end": 28497,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 28466,
									"end": 28497,
									"name": "SUB",
									"source": 0
								},
								{
									"begin": 28466,
									"end": 28497,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 28466,
									"end": 28497,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 28413,
									"end": 28508,
									"name": "tag",
									"source": 0,
									"value": "16"
								},
								{
									"begin": 28413,
									"end": 28508,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 28517,
									"end": 28549,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "19"
								},
								{
									"begin": 28536,
									"end": 28548,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 28517,
									"end": 28535,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 28517,
									"end": 28535,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 28517,
									"end": 28535,
									"name": "SHL",
									"source": 0
								},
								{
									"begin": 28517,
									"end": 28549,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 28517,
									"end": 28549,
									"name": "SHR",
									"source": 0
								},
								{
									"begin": 28517,
									"end": 28549,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 28517,
									"end": 28549,
									"name": "tag",
									"source": 0,
									"value": "19"
								},
								{
									"begin": 28517,
									"end": 28549,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 28369,
									"end": 28556,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 77362,
									"end": 77407,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "22"
								},
								{
									"begin": 77393,
									"end": 77406,
									"name": "PUSH",
									"source": 0,
									"value": "6"
								},
								{
									"begin": 77362,
									"end": 77366,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 77362,
									"end": 77392,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "23"
								},
								{
									"begin": 77362,
									"end": 77392,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 77362,
									"end": 77392,
									"name": "SHL",
									"source": 0
								},
								{
									"begin": 77362,
									"end": 77392,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 77362,
									"end": 77407,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 77362,
									"end": 77407,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 77362,
									"end": 77407,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 77362,
									"end": 77407,
									"name": "SHR",
									"source": 0
								},
								{
									"begin": 77362,
									"end": 77407,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 77362,
									"end": 77407,
									"name": "tag",
									"source": 0,
									"value": "22"
								},
								{
									"begin": 77362,
									"end": 77407,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 77354,
									"end": 77407,
									"name": "PUSH",
									"source": 0,
									"value": "120"
								},
								{
									"begin": 77354,
									"end": 77407,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 77354,
									"end": 77407,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 77354,
									"end": 77407,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 77354,
									"end": 77407,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 77354,
									"end": 77407,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 77428,
									"end": 77479,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "24"
								},
								{
									"begin": 77462,
									"end": 77478,
									"name": "PUSH",
									"source": 0,
									"value": "7"
								},
								{
									"begin": 77428,
									"end": 77435,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 77428,
									"end": 77461,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "23"
								},
								{
									"begin": 77428,
									"end": 77461,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 77428,
									"end": 77461,
									"name": "SHL",
									"source": 0
								},
								{
									"begin": 77428,
									"end": 77461,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 77428,
									"end": 77479,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 77428,
									"end": 77479,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 77428,
									"end": 77479,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 77428,
									"end": 77479,
									"name": "SHR",
									"source": 0
								},
								{
									"begin": 77428,
									"end": 77479,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 77428,
									"end": 77479,
									"name": "tag",
									"source": 0,
									"value": "24"
								},
								{
									"begin": 77428,
									"end": 77479,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 77417,
									"end": 77479,
									"name": "PUSH",
									"source": 0,
									"value": "140"
								},
								{
									"begin": 77417,
									"end": 77479,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 77417,
									"end": 77479,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 77417,
									"end": 77479,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 77417,
									"end": 77479,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 77417,
									"end": 77479,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 77519,
									"end": 77523,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 77503,
									"end": 77525,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 77503,
									"end": 77525,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 77503,
									"end": 77525,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 77503,
									"end": 77525,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 77503,
									"end": 77525,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 77503,
									"end": 77525,
									"name": "KECCAK256",
									"source": 0
								},
								{
									"begin": 77489,
									"end": 77525,
									"name": "PUSH",
									"source": 0,
									"value": "E0"
								},
								{
									"begin": 77489,
									"end": 77525,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 77489,
									"end": 77525,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 77489,
									"end": 77525,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 77489,
									"end": 77525,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 77489,
									"end": 77525,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 77568,
									"end": 77575,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 77552,
									"end": 77577,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 77552,
									"end": 77577,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 77552,
									"end": 77577,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 77552,
									"end": 77577,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 77552,
									"end": 77577,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 77552,
									"end": 77577,
									"name": "KECCAK256",
									"source": 0
								},
								{
									"begin": 77535,
									"end": 77577,
									"name": "PUSH",
									"source": 0,
									"value": "100"
								},
								{
									"begin": 77535,
									"end": 77577,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 77535,
									"end": 77577,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 77535,
									"end": 77577,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 77535,
									"end": 77577,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 77535,
									"end": 77577,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 77605,
									"end": 77618,
									"name": "CHAINID",
									"source": 0
								},
								{
									"begin": 77588,
									"end": 77618,
									"name": "PUSH",
									"source": 0,
									"value": "A0"
								},
								{
									"begin": 77588,
									"end": 77618,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 77588,
									"end": 77618,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 77588,
									"end": 77618,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 77588,
									"end": 77618,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 77588,
									"end": 77618,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 77653,
									"end": 77676,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "25"
								},
								{
									"begin": 77653,
									"end": 77674,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "26"
								},
								{
									"begin": 77653,
									"end": 77674,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 77653,
									"end": 77674,
									"name": "SHL",
									"source": 0
								},
								{
									"begin": 77653,
									"end": 77676,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 77653,
									"end": 77676,
									"name": "SHR",
									"source": 0
								},
								{
									"begin": 77653,
									"end": 77676,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 77653,
									"end": 77676,
									"name": "tag",
									"source": 0,
									"value": "25"
								},
								{
									"begin": 77653,
									"end": 77676,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 77628,
									"end": 77676,
									"name": "PUSH",
									"source": 0,
									"value": "80"
								},
								{
									"begin": 77628,
									"end": 77676,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 77628,
									"end": 77676,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 77628,
									"end": 77676,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 77628,
									"end": 77676,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 77628,
									"end": 77676,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 77708,
									"end": 77712,
									"name": "ADDRESS",
									"source": 0
								},
								{
									"begin": 77686,
									"end": 77713,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 77686,
									"end": 77713,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 77686,
									"end": 77713,
									"name": "PUSH",
									"source": 0,
									"value": "C0"
								},
								{
									"begin": 77686,
									"end": 77713,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 77686,
									"end": 77713,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 77686,
									"end": 77713,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 77686,
									"end": 77713,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 77686,
									"end": 77713,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 77686,
									"end": 77713,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 77686,
									"end": 77713,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 77289,
									"end": 77720,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 77289,
									"end": 77720,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 83445,
									"end": 83497,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 84978,
									"end": 85024,
									"modifierDepth": 3,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "29"
								},
								{
									"begin": 84984,
									"end": 84994,
									"modifierDepth": 3,
									"name": "CALLER",
									"source": 0
								},
								{
									"begin": 85013,
									"end": 85023,
									"modifierDepth": 3,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "30"
								},
								{
									"begin": 85013,
									"end": 85021,
									"modifierDepth": 3,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "31"
								},
								{
									"begin": 85013,
									"end": 85021,
									"modifierDepth": 3,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 85013,
									"end": 85021,
									"modifierDepth": 3,
									"name": "SHL",
									"source": 0
								},
								{
									"begin": 85013,
									"end": 85023,
									"modifierDepth": 3,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 85013,
									"end": 85023,
									"modifierDepth": 3,
									"name": "SHR",
									"source": 0
								},
								{
									"begin": 85013,
									"end": 85023,
									"jumpType": "[in]",
									"modifierDepth": 3,
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 85013,
									"end": 85023,
									"modifierDepth": 3,
									"name": "tag",
									"source": 0,
									"value": "30"
								},
								{
									"begin": 85013,
									"end": 85023,
									"modifierDepth": 3,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 85007,
									"end": 85009,
									"modifierDepth": 3,
									"name": "PUSH",
									"source": 0,
									"value": "A"
								},
								{
									"begin": 85007,
									"end": 85023,
									"modifierDepth": 3,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "32"
								},
								{
									"begin": 85007,
									"end": 85023,
									"modifierDepth": 3,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 85007,
									"end": 85023,
									"modifierDepth": 3,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 85007,
									"end": 85023,
									"modifierDepth": 3,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "33"
								},
								{
									"begin": 85007,
									"end": 85023,
									"jumpType": "[in]",
									"modifierDepth": 3,
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 85007,
									"end": 85023,
									"modifierDepth": 3,
									"name": "tag",
									"source": 0,
									"value": "32"
								},
								{
									"begin": 85007,
									"end": 85023,
									"modifierDepth": 3,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 84996,
									"end": 85004,
									"modifierDepth": 3,
									"name": "PUSH",
									"source": 0,
									"value": "1406F40"
								},
								{
									"begin": 84996,
									"end": 85023,
									"modifierDepth": 3,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "34"
								},
								{
									"begin": 84996,
									"end": 85023,
									"modifierDepth": 3,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 84996,
									"end": 85023,
									"modifierDepth": 3,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 84996,
									"end": 85023,
									"modifierDepth": 3,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "35"
								},
								{
									"begin": 84996,
									"end": 85023,
									"jumpType": "[in]",
									"modifierDepth": 3,
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 84996,
									"end": 85023,
									"modifierDepth": 3,
									"name": "tag",
									"source": 0,
									"value": "34"
								},
								{
									"begin": 84996,
									"end": 85023,
									"modifierDepth": 3,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 84978,
									"end": 84983,
									"modifierDepth": 3,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "36"
								},
								{
									"begin": 84978,
									"end": 84983,
									"modifierDepth": 3,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 84978,
									"end": 84983,
									"modifierDepth": 3,
									"name": "SHL",
									"source": 0
								},
								{
									"begin": 84978,
									"end": 85024,
									"modifierDepth": 3,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 84978,
									"end": 85024,
									"modifierDepth": 3,
									"name": "SHR",
									"source": 0
								},
								{
									"begin": 84978,
									"end": 85024,
									"jumpType": "[in]",
									"modifierDepth": 3,
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 84978,
									"end": 85024,
									"modifierDepth": 3,
									"name": "tag",
									"source": 0,
									"value": "29"
								},
								{
									"begin": 84978,
									"end": 85024,
									"modifierDepth": 3,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 84841,
									"end": 85031,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 84759,
									"end": 85505,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "37"
								},
								{
									"begin": 84759,
									"end": 85505,
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 30056,
									"end": 30243,
									"name": "tag",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 30056,
									"end": 30243,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 30129,
									"end": 30145,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 30148,
									"end": 30154,
									"name": "PUSH",
									"source": 0,
									"value": "5"
								},
								{
									"begin": 30148,
									"end": 30154,
									"name": "PUSH",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 30148,
									"end": 30154,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 30148,
									"end": 30154,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": 30148,
									"end": 30154,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 30148,
									"end": 30154,
									"name": "PUSH",
									"source": 0,
									"value": "100"
								},
								{
									"begin": 30148,
									"end": 30154,
									"name": "EXP",
									"source": 0
								},
								{
									"begin": 30148,
									"end": 30154,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 30148,
									"end": 30154,
									"name": "DIV",
									"source": 0
								},
								{
									"begin": 30148,
									"end": 30154,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 30148,
									"end": 30154,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 30129,
									"end": 30154,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 30129,
									"end": 30154,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 30173,
									"end": 30181,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 30164,
									"end": 30170,
									"name": "PUSH",
									"source": 0,
									"value": "5"
								},
								{
									"begin": 30164,
									"end": 30170,
									"name": "PUSH",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 30164,
									"end": 30181,
									"name": "PUSH",
									"source": 0,
									"value": "100"
								},
								{
									"begin": 30164,
									"end": 30181,
									"name": "EXP",
									"source": 0
								},
								{
									"begin": 30164,
									"end": 30181,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 30164,
									"end": 30181,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": 30164,
									"end": 30181,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 30164,
									"end": 30181,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 30164,
									"end": 30181,
									"name": "MUL",
									"source": 0
								},
								{
									"begin": 30164,
									"end": 30181,
									"name": "NOT",
									"source": 0
								},
								{
									"begin": 30164,
									"end": 30181,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 30164,
									"end": 30181,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 30164,
									"end": 30181,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 30164,
									"end": 30181,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 30164,
									"end": 30181,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 30164,
									"end": 30181,
									"name": "MUL",
									"source": 0
								},
								{
									"begin": 30164,
									"end": 30181,
									"name": "OR",
									"source": 0
								},
								{
									"begin": 30164,
									"end": 30181,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 30164,
									"end": 30181,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 30164,
									"end": 30181,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 30227,
									"end": 30235,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 30196,
									"end": 30236,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 30196,
									"end": 30236,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 30217,
									"end": 30225,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 30196,
									"end": 30236,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 30196,
									"end": 30236,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 30196,
									"end": 30236,
									"name": "PUSH",
									"source": 0,
									"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
								},
								{
									"begin": 30196,
									"end": 30236,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 30196,
									"end": 30236,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 30196,
									"end": 30236,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 30196,
									"end": 30236,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 30196,
									"end": 30236,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 30196,
									"end": 30236,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 30196,
									"end": 30236,
									"name": "SUB",
									"source": 0
								},
								{
									"begin": 30196,
									"end": 30236,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 30196,
									"end": 30236,
									"name": "LOG3",
									"source": 0
								},
								{
									"begin": 30119,
									"end": 30243,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 30056,
									"end": 30243,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 30056,
									"end": 30243,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 71939,
									"end": 72279,
									"name": "tag",
									"source": 0,
									"value": "23"
								},
								{
									"begin": 71939,
									"end": 72279,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 72035,
									"end": 72046,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 72084,
									"end": 72086,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 72068,
									"end": 72073,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 72062,
									"end": 72081,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 72062,
									"end": 72086,
									"name": "LT",
									"source": 0
								},
								{
									"begin": 72058,
									"end": 72273,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 72058,
									"end": 72273,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 72058,
									"end": 72273,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 72109,
									"end": 72129,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "41"
								},
								{
									"begin": 72123,
									"end": 72128,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 72109,
									"end": 72122,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "42"
								},
								{
									"begin": 72109,
									"end": 72122,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 72109,
									"end": 72122,
									"name": "SHL",
									"source": 0
								},
								{
									"begin": 72109,
									"end": 72129,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 72109,
									"end": 72129,
									"name": "SHR",
									"source": 0
								},
								{
									"begin": 72109,
									"end": 72129,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 72109,
									"end": 72129,
									"name": "tag",
									"source": 0,
									"value": "41"
								},
								{
									"begin": 72109,
									"end": 72129,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 72102,
									"end": 72129,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 72102,
									"end": 72129,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 72102,
									"end": 72129,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "39"
								},
								{
									"begin": 72102,
									"end": 72129,
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 72058,
									"end": 72273,
									"name": "tag",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 72058,
									"end": 72273,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 72201,
									"end": 72206,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 72160,
									"end": 72192,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "44"
								},
								{
									"begin": 72186,
									"end": 72191,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 72160,
									"end": 72185,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "45"
								},
								{
									"begin": 72160,
									"end": 72185,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 72160,
									"end": 72185,
									"name": "SHL",
									"source": 0
								},
								{
									"begin": 72160,
									"end": 72192,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 72160,
									"end": 72192,
									"name": "SHR",
									"source": 0
								},
								{
									"begin": 72160,
									"end": 72192,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 72160,
									"end": 72192,
									"name": "tag",
									"source": 0,
									"value": "44"
								},
								{
									"begin": 72160,
									"end": 72192,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 72160,
									"end": 72198,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 72160,
									"end": 72198,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 72160,
									"end": 72206,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 72160,
									"end": 72206,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 72160,
									"end": 72206,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "46"
								},
								{
									"begin": 72160,
									"end": 72206,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 72160,
									"end": 72206,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 72160,
									"end": 72206,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "12"
								},
								{
									"begin": 72160,
									"end": 72206,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 72160,
									"end": 72206,
									"name": "tag",
									"source": 0,
									"value": "46"
								},
								{
									"begin": 72160,
									"end": 72206,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 72160,
									"end": 72206,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 70415,
									"end": 70481,
									"name": "PUSH",
									"source": 0,
									"value": "FF"
								},
								{
									"begin": 72244,
									"end": 72261,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 72244,
									"end": 72261,
									"name": "SHL",
									"source": 0
								},
								{
									"begin": 72220,
									"end": 72262,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 72220,
									"end": 72262,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 71939,
									"end": 72279,
									"name": "tag",
									"source": 0,
									"value": "39"
								},
								{
									"begin": 71939,
									"end": 72279,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 71939,
									"end": 72279,
									"name": "SWAP3",
									"source": 0
								},
								{
									"begin": 71939,
									"end": 72279,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 71939,
									"end": 72279,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 71939,
									"end": 72279,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 71939,
									"end": 72279,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 78074,
									"end": 78253,
									"name": "tag",
									"source": 0,
									"value": "26"
								},
								{
									"begin": 78074,
									"end": 78253,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 78129,
									"end": 78136,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 76040,
									"end": 76135,
									"name": "PUSH",
									"source": 0,
									"value": "8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F"
								},
								{
									"begin": 78187,
									"end": 78198,
									"name": "PUSH",
									"source": 0,
									"value": "E0"
								},
								{
									"begin": 78187,
									"end": 78198,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 78200,
									"end": 78214,
									"name": "PUSH",
									"source": 0,
									"value": "100"
								},
								{
									"begin": 78200,
									"end": 78214,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 78216,
									"end": 78229,
									"name": "CHAINID",
									"source": 0
								},
								{
									"begin": 78239,
									"end": 78243,
									"name": "ADDRESS",
									"source": 0
								},
								{
									"begin": 78165,
									"end": 78245,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 78165,
									"end": 78245,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 78165,
									"end": 78245,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 78165,
									"end": 78245,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 78165,
									"end": 78245,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "48"
								},
								{
									"begin": 78165,
									"end": 78245,
									"name": "SWAP6",
									"source": 0
								},
								{
									"begin": 78165,
									"end": 78245,
									"name": "SWAP5",
									"source": 0
								},
								{
									"begin": 78165,
									"end": 78245,
									"name": "SWAP4",
									"source": 0
								},
								{
									"begin": 78165,
									"end": 78245,
									"name": "SWAP3",
									"source": 0
								},
								{
									"begin": 78165,
									"end": 78245,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 78165,
									"end": 78245,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 78165,
									"end": 78245,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "49"
								},
								{
									"begin": 78165,
									"end": 78245,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 78165,
									"end": 78245,
									"name": "tag",
									"source": 0,
									"value": "48"
								},
								{
									"begin": 78165,
									"end": 78245,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 78165,
									"end": 78245,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 78165,
									"end": 78245,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 78165,
									"end": 78245,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 78165,
									"end": 78245,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 78165,
									"end": 78245,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 78165,
									"end": 78245,
									"name": "SUB",
									"source": 0
								},
								{
									"begin": 78165,
									"end": 78245,
									"name": "SUB",
									"source": 0
								},
								{
									"begin": 78165,
									"end": 78245,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 78165,
									"end": 78245,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 78165,
									"end": 78245,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 78165,
									"end": 78245,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 78165,
									"end": 78245,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 78155,
									"end": 78246,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 78155,
									"end": 78246,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 78155,
									"end": 78246,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 78155,
									"end": 78246,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 78155,
									"end": 78246,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 78155,
									"end": 78246,
									"name": "KECCAK256",
									"source": 0
								},
								{
									"begin": 78148,
									"end": 78246,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 78148,
									"end": 78246,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 78074,
									"end": 78253,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 78074,
									"end": 78253,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 13863,
									"end": 13945,
									"name": "tag",
									"source": 0,
									"value": "31"
								},
								{
									"begin": 13863,
									"end": 13945,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 13912,
									"end": 13917,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 13936,
									"end": 13938,
									"name": "PUSH",
									"source": 0,
									"value": "12"
								},
								{
									"begin": 13929,
									"end": 13938,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 13929,
									"end": 13938,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 13863,
									"end": 13945,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 13863,
									"end": 13945,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 18582,
									"end": 18790,
									"name": "tag",
									"source": 0,
									"value": "36"
								},
								{
									"begin": 18582,
									"end": 18790,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 18671,
									"end": 18672,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 18652,
									"end": 18673,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 18652,
									"end": 18673,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 18652,
									"end": 18659,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 18652,
									"end": 18673,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 18652,
									"end": 18673,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 18652,
									"end": 18673,
									"name": "SUB",
									"source": 0
								},
								{
									"begin": 18648,
									"end": 18739,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "52"
								},
								{
									"begin": 18648,
									"end": 18739,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 18725,
									"end": 18726,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 18696,
									"end": 18728,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 18696,
									"end": 18728,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 18696,
									"end": 18728,
									"name": "PUSH",
									"source": 0,
									"value": "EC442F0500000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 18696,
									"end": 18728,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 18696,
									"end": 18728,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 18696,
									"end": 18728,
									"name": "PUSH",
									"source": 0,
									"value": "4"
								},
								{
									"begin": 18696,
									"end": 18728,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 18696,
									"end": 18728,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "53"
								},
								{
									"begin": 18696,
									"end": 18728,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 18696,
									"end": 18728,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 18696,
									"end": 18728,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "18"
								},
								{
									"begin": 18696,
									"end": 18728,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 18696,
									"end": 18728,
									"name": "tag",
									"source": 0,
									"value": "53"
								},
								{
									"begin": 18696,
									"end": 18728,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 18696,
									"end": 18728,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 18696,
									"end": 18728,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 18696,
									"end": 18728,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 18696,
									"end": 18728,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 18696,
									"end": 18728,
									"name": "SUB",
									"source": 0
								},
								{
									"begin": 18696,
									"end": 18728,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 18696,
									"end": 18728,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 18648,
									"end": 18739,
									"name": "tag",
									"source": 0,
									"value": "52"
								},
								{
									"begin": 18648,
									"end": 18739,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 18748,
									"end": 18783,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "54"
								},
								{
									"begin": 18764,
									"end": 18765,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 18768,
									"end": 18775,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 18777,
									"end": 18782,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 18748,
									"end": 18755,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "55"
								},
								{
									"begin": 18748,
									"end": 18755,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 18748,
									"end": 18755,
									"name": "SHL",
									"source": 0
								},
								{
									"begin": 18748,
									"end": 18783,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 18748,
									"end": 18783,
									"name": "SHR",
									"source": 0
								},
								{
									"begin": 18748,
									"end": 18783,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 18748,
									"end": 18783,
									"name": "tag",
									"source": 0,
									"value": "54"
								},
								{
									"begin": 18748,
									"end": 18783,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 18582,
									"end": 18790,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 18582,
									"end": 18790,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 18582,
									"end": 18790,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 70733,
									"end": 71019,
									"name": "tag",
									"source": 0,
									"value": "42"
								},
								{
									"begin": 70733,
									"end": 71019,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 70798,
									"end": 70809,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 70821,
									"end": 70838,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 70847,
									"end": 70850,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 70821,
									"end": 70851,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 70821,
									"end": 70851,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 70879,
									"end": 70881,
									"name": "PUSH",
									"source": 0,
									"value": "1F"
								},
								{
									"begin": 70865,
									"end": 70869,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 70865,
									"end": 70876,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 70865,
									"end": 70881,
									"name": "GT",
									"source": 0
								},
								{
									"begin": 70861,
									"end": 70933,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 70861,
									"end": 70933,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "57"
								},
								{
									"begin": 70861,
									"end": 70933,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 70918,
									"end": 70921,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 70904,
									"end": 70922,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 70904,
									"end": 70922,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 70904,
									"end": 70922,
									"name": "PUSH",
									"source": 0,
									"value": "305A27A900000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 70904,
									"end": 70922,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 70904,
									"end": 70922,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 70904,
									"end": 70922,
									"name": "PUSH",
									"source": 0,
									"value": "4"
								},
								{
									"begin": 70904,
									"end": 70922,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 70904,
									"end": 70922,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "58"
								},
								{
									"begin": 70904,
									"end": 70922,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 70904,
									"end": 70922,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 70904,
									"end": 70922,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "59"
								},
								{
									"begin": 70904,
									"end": 70922,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 70904,
									"end": 70922,
									"name": "tag",
									"source": 0,
									"value": "58"
								},
								{
									"begin": 70904,
									"end": 70922,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 70904,
									"end": 70922,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 70904,
									"end": 70922,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 70904,
									"end": 70922,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 70904,
									"end": 70922,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 70904,
									"end": 70922,
									"name": "SUB",
									"source": 0
								},
								{
									"begin": 70904,
									"end": 70922,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 70904,
									"end": 70922,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 70861,
									"end": 70933,
									"name": "tag",
									"source": 0,
									"value": "57"
								},
								{
									"begin": 70861,
									"end": 70933,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 70999,
									"end": 71003,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 70999,
									"end": 71010,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 70990,
									"end": 70994,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 70982,
									"end": 70995,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "60"
								},
								{
									"begin": 70982,
									"end": 70995,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 70982,
									"end": 70995,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "61"
								},
								{
									"begin": 70982,
									"end": 70995,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 70982,
									"end": 70995,
									"name": "tag",
									"source": 0,
									"value": "60"
								},
								{
									"begin": 70982,
									"end": 70995,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 70974,
									"end": 70996,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 70974,
									"end": 70996,
									"name": "SHR",
									"source": 0
								},
								{
									"begin": 70974,
									"end": 71010,
									"name": "OR",
									"source": 0
								},
								{
									"begin": 70966,
									"end": 71011,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 70966,
									"end": 71011,
									"name": "SHL",
									"source": 0
								},
								{
									"begin": 70942,
									"end": 71012,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 70942,
									"end": 71012,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 70942,
									"end": 71012,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 70733,
									"end": 71019,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 70733,
									"end": 71019,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 70733,
									"end": 71019,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 70733,
									"end": 71019,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 68249,
									"end": 68451,
									"name": "tag",
									"source": 0,
									"value": "45"
								},
								{
									"begin": 68249,
									"end": 68451,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 68317,
									"end": 68337,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 68425,
									"end": 68435,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 68415,
									"end": 68435,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 68415,
									"end": 68435,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 68249,
									"end": 68451,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 68249,
									"end": 68451,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 68249,
									"end": 68451,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 68249,
									"end": 68451,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 85338,
									"end": 85503,
									"name": "tag",
									"source": 0,
									"value": "55"
								},
								{
									"begin": 85338,
									"end": 85503,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 85466,
									"end": 85496,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "64"
								},
								{
									"begin": 85480,
									"end": 85484,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 85486,
									"end": 85488,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 85490,
									"end": 85495,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 85466,
									"end": 85479,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "65"
								},
								{
									"begin": 85466,
									"end": 85479,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 85466,
									"end": 85479,
									"name": "SHL",
									"source": 0
								},
								{
									"begin": 85466,
									"end": 85496,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 85466,
									"end": 85496,
									"name": "SHR",
									"source": 0
								},
								{
									"begin": 85466,
									"end": 85496,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 85466,
									"end": 85496,
									"name": "tag",
									"source": 0,
									"value": "64"
								},
								{
									"begin": 85466,
									"end": 85496,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 85338,
									"end": 85503,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 85338,
									"end": 85503,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 85338,
									"end": 85503,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 85338,
									"end": 85503,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 27019,
									"end": 27164,
									"name": "tag",
									"source": 0,
									"value": "65"
								},
								{
									"begin": 27019,
									"end": 27164,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 24595,
									"end": 24614,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "67"
								},
								{
									"begin": 24595,
									"end": 24612,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "68"
								},
								{
									"begin": 24595,
									"end": 24612,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 24595,
									"end": 24612,
									"name": "SHL",
									"source": 0
								},
								{
									"begin": 24595,
									"end": 24614,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 24595,
									"end": 24614,
									"name": "SHR",
									"source": 0
								},
								{
									"begin": 24595,
									"end": 24614,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 24595,
									"end": 24614,
									"name": "tag",
									"source": 0,
									"value": "67"
								},
								{
									"begin": 24595,
									"end": 24614,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 27127,
									"end": 27157,
									"modifierDepth": 1,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "70"
								},
								{
									"begin": 27141,
									"end": 27145,
									"modifierDepth": 1,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 27147,
									"end": 27149,
									"modifierDepth": 1,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 27151,
									"end": 27156,
									"modifierDepth": 1,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 27127,
									"end": 27140,
									"modifierDepth": 1,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "71"
								},
								{
									"begin": 27127,
									"end": 27140,
									"modifierDepth": 1,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 27127,
									"end": 27140,
									"modifierDepth": 1,
									"name": "SHL",
									"source": 0
								},
								{
									"begin": 27127,
									"end": 27157,
									"modifierDepth": 1,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 27127,
									"end": 27157,
									"modifierDepth": 1,
									"name": "SHR",
									"source": 0
								},
								{
									"begin": 27127,
									"end": 27157,
									"jumpType": "[in]",
									"modifierDepth": 1,
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 27127,
									"end": 27157,
									"modifierDepth": 1,
									"name": "tag",
									"source": 0,
									"value": "70"
								},
								{
									"begin": 27127,
									"end": 27157,
									"modifierDepth": 1,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 27019,
									"end": 27164,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 27019,
									"end": 27164,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 27019,
									"end": 27164,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 27019,
									"end": 27164,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 25123,
									"end": 25251,
									"name": "tag",
									"source": 0,
									"value": "68"
								},
								{
									"begin": 25123,
									"end": 25251,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 25188,
									"end": 25196,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "73"
								},
								{
									"begin": 25188,
									"end": 25194,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "74"
								},
								{
									"begin": 25188,
									"end": 25194,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 25188,
									"end": 25194,
									"name": "SHL",
									"source": 0
								},
								{
									"begin": 25188,
									"end": 25196,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 25188,
									"end": 25196,
									"name": "SHR",
									"source": 0
								},
								{
									"begin": 25188,
									"end": 25196,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 25188,
									"end": 25196,
									"name": "tag",
									"source": 0,
									"value": "73"
								},
								{
									"begin": 25188,
									"end": 25196,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 25184,
									"end": 25245,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 25184,
									"end": 25245,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "75"
								},
								{
									"begin": 25184,
									"end": 25245,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 25219,
									"end": 25234,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 25219,
									"end": 25234,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 25219,
									"end": 25234,
									"name": "PUSH",
									"source": 0,
									"value": "D93C066500000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 25219,
									"end": 25234,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 25219,
									"end": 25234,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 25219,
									"end": 25234,
									"name": "PUSH",
									"source": 0,
									"value": "4"
								},
								{
									"begin": 25219,
									"end": 25234,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 25219,
									"end": 25234,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 25219,
									"end": 25234,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 25219,
									"end": 25234,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 25219,
									"end": 25234,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 25219,
									"end": 25234,
									"name": "SUB",
									"source": 0
								},
								{
									"begin": 25219,
									"end": 25234,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 25219,
									"end": 25234,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 25184,
									"end": 25245,
									"name": "tag",
									"source": 0,
									"value": "75"
								},
								{
									"begin": 25184,
									"end": 25245,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 25123,
									"end": 25251,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 17132,
									"end": 18239,
									"name": "tag",
									"source": 0,
									"value": "71"
								},
								{
									"begin": 17132,
									"end": 18239,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 17237,
									"end": 17238,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 17221,
									"end": 17239,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 17221,
									"end": 17239,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 17221,
									"end": 17225,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 17221,
									"end": 17239,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 17221,
									"end": 17239,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 17221,
									"end": 17239,
									"name": "SUB",
									"source": 0
								},
								{
									"begin": 17217,
									"end": 17757,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "77"
								},
								{
									"begin": 17217,
									"end": 17757,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 17373,
									"end": 17378,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 17357,
									"end": 17369,
									"name": "PUSH",
									"source": 0,
									"value": "2"
								},
								{
									"begin": 17357,
									"end": 17369,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 17357,
									"end": 17378,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 17357,
									"end": 17378,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 17357,
									"end": 17378,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": 17357,
									"end": 17378,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "78"
								},
								{
									"begin": 17357,
									"end": 17378,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 17357,
									"end": 17378,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 17357,
									"end": 17378,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "79"
								},
								{
									"begin": 17357,
									"end": 17378,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 17357,
									"end": 17378,
									"name": "tag",
									"source": 0,
									"value": "78"
								},
								{
									"begin": 17357,
									"end": 17378,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 17357,
									"end": 17378,
									"name": "SWAP3",
									"source": 0
								},
								{
									"begin": 17357,
									"end": 17378,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 17357,
									"end": 17378,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 17357,
									"end": 17378,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 17357,
									"end": 17378,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 17357,
									"end": 17378,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 17357,
									"end": 17378,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 17217,
									"end": 17757,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "80"
								},
								{
									"begin": 17217,
									"end": 17757,
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 17217,
									"end": 17757,
									"name": "tag",
									"source": 0,
									"value": "77"
								},
								{
									"begin": 17217,
									"end": 17757,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 17409,
									"end": 17428,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 17431,
									"end": 17440,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 17431,
									"end": 17446,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 17441,
									"end": 17445,
									"name": "DUP6",
									"source": 0
								},
								{
									"begin": 17431,
									"end": 17446,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 17431,
									"end": 17446,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 17431,
									"end": 17446,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 17431,
									"end": 17446,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 17431,
									"end": 17446,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 17431,
									"end": 17446,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 17431,
									"end": 17446,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 17431,
									"end": 17446,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 17431,
									"end": 17446,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 17431,
									"end": 17446,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 17431,
									"end": 17446,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 17431,
									"end": 17446,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 17431,
									"end": 17446,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 17431,
									"end": 17446,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 17431,
									"end": 17446,
									"name": "KECCAK256",
									"source": 0
								},
								{
									"begin": 17431,
									"end": 17446,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": 17409,
									"end": 17446,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 17409,
									"end": 17446,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 17478,
									"end": 17483,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 17464,
									"end": 17475,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 17464,
									"end": 17483,
									"name": "LT",
									"source": 0
								},
								{
									"begin": 17460,
									"end": 17575,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 17460,
									"end": 17575,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "81"
								},
								{
									"begin": 17460,
									"end": 17575,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 17535,
									"end": 17539,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 17541,
									"end": 17552,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 17554,
									"end": 17559,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 17510,
									"end": 17560,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 17510,
									"end": 17560,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 17510,
									"end": 17560,
									"name": "PUSH",
									"source": 0,
									"value": "E450D38C00000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 17510,
									"end": 17560,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 17510,
									"end": 17560,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 17510,
									"end": 17560,
									"name": "PUSH",
									"source": 0,
									"value": "4"
								},
								{
									"begin": 17510,
									"end": 17560,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 17510,
									"end": 17560,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "82"
								},
								{
									"begin": 17510,
									"end": 17560,
									"name": "SWAP4",
									"source": 0
								},
								{
									"begin": 17510,
									"end": 17560,
									"name": "SWAP3",
									"source": 0
								},
								{
									"begin": 17510,
									"end": 17560,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 17510,
									"end": 17560,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 17510,
									"end": 17560,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "83"
								},
								{
									"begin": 17510,
									"end": 17560,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 17510,
									"end": 17560,
									"name": "tag",
									"source": 0,
									"value": "82"
								},
								{
									"begin": 17510,
									"end": 17560,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 17510,
									"end": 17560,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 17510,
									"end": 17560,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 17510,
									"end": 17560,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 17510,
									"end": 17560,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 17510,
									"end": 17560,
									"name": "SUB",
									"source": 0
								},
								{
									"begin": 17510,
									"end": 17560,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 17510,
									"end": 17560,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 17460,
									"end": 17575,
									"name": "tag",
									"source": 0,
									"value": "81"
								},
								{
									"begin": 17460,
									"end": 17575,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 17727,
									"end": 17732,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 17713,
									"end": 17724,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 17713,
									"end": 17732,
									"name": "SUB",
									"source": 0
								},
								{
									"begin": 17695,
									"end": 17704,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 17695,
									"end": 17710,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 17705,
									"end": 17709,
									"name": "DUP7",
									"source": 0
								},
								{
									"begin": 17695,
									"end": 17710,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 17695,
									"end": 17710,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 17695,
									"end": 17710,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 17695,
									"end": 17710,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 17695,
									"end": 17710,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 17695,
									"end": 17710,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 17695,
									"end": 17710,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 17695,
									"end": 17710,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 17695,
									"end": 17710,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 17695,
									"end": 17710,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 17695,
									"end": 17710,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 17695,
									"end": 17710,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 17695,
									"end": 17710,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 17695,
									"end": 17710,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 17695,
									"end": 17710,
									"name": "KECCAK256",
									"source": 0
								},
								{
									"begin": 17695,
									"end": 17732,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 17695,
									"end": 17732,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 17695,
									"end": 17732,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 17695,
									"end": 17732,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 17395,
									"end": 17757,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 17217,
									"end": 17757,
									"name": "tag",
									"source": 0,
									"value": "80"
								},
								{
									"begin": 17217,
									"end": 17757,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 17785,
									"end": 17786,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 17771,
									"end": 17787,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 17771,
									"end": 17787,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 17771,
									"end": 17773,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 17771,
									"end": 17787,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 17771,
									"end": 17787,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 17771,
									"end": 17787,
									"name": "SUB",
									"source": 0
								},
								{
									"begin": 17767,
									"end": 18192,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "84"
								},
								{
									"begin": 17767,
									"end": 18192,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 17950,
									"end": 17955,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 17934,
									"end": 17946,
									"name": "PUSH",
									"source": 0,
									"value": "2"
								},
								{
									"begin": 17934,
									"end": 17946,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 17934,
									"end": 17955,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 17934,
									"end": 17955,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 17934,
									"end": 17955,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": 17934,
									"end": 17955,
									"name": "SUB",
									"source": 0
								},
								{
									"begin": 17934,
									"end": 17955,
									"name": "SWAP3",
									"source": 0
								},
								{
									"begin": 17934,
									"end": 17955,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 17934,
									"end": 17955,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 17934,
									"end": 17955,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 17934,
									"end": 17955,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 17934,
									"end": 17955,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 17934,
									"end": 17955,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 17767,
									"end": 18192,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "85"
								},
								{
									"begin": 17767,
									"end": 18192,
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 17767,
									"end": 18192,
									"name": "tag",
									"source": 0,
									"value": "84"
								},
								{
									"begin": 17767,
									"end": 18192,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 18162,
									"end": 18167,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 18145,
									"end": 18154,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 18145,
									"end": 18158,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 18155,
									"end": 18157,
									"name": "DUP5",
									"source": 0
								},
								{
									"begin": 18145,
									"end": 18158,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 18145,
									"end": 18158,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 18145,
									"end": 18158,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 18145,
									"end": 18158,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 18145,
									"end": 18158,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 18145,
									"end": 18158,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 18145,
									"end": 18158,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 18145,
									"end": 18158,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 18145,
									"end": 18158,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 18145,
									"end": 18158,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 18145,
									"end": 18158,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 18145,
									"end": 18158,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 18145,
									"end": 18158,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 18145,
									"end": 18158,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 18145,
									"end": 18158,
									"name": "KECCAK256",
									"source": 0
								},
								{
									"begin": 18145,
									"end": 18158,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 18145,
									"end": 18167,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 18145,
									"end": 18167,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 18145,
									"end": 18167,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": 18145,
									"end": 18167,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 18145,
									"end": 18167,
									"name": "SWAP3",
									"source": 0
								},
								{
									"begin": 18145,
									"end": 18167,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 18145,
									"end": 18167,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 18145,
									"end": 18167,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 18145,
									"end": 18167,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 18145,
									"end": 18167,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 18145,
									"end": 18167,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 17767,
									"end": 18192,
									"name": "tag",
									"source": 0,
									"value": "85"
								},
								{
									"begin": 17767,
									"end": 18192,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 18222,
									"end": 18224,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 18207,
									"end": 18232,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 18207,
									"end": 18232,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 18216,
									"end": 18220,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 18207,
									"end": 18232,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 18207,
									"end": 18232,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 18207,
									"end": 18232,
									"name": "PUSH",
									"source": 0,
									"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
								},
								{
									"begin": 18226,
									"end": 18231,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 18207,
									"end": 18232,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 18207,
									"end": 18232,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 18207,
									"end": 18232,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "86"
								},
								{
									"begin": 18207,
									"end": 18232,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 18207,
									"end": 18232,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 18207,
									"end": 18232,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "87"
								},
								{
									"begin": 18207,
									"end": 18232,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 18207,
									"end": 18232,
									"name": "tag",
									"source": 0,
									"value": "86"
								},
								{
									"begin": 18207,
									"end": 18232,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 18207,
									"end": 18232,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 18207,
									"end": 18232,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 18207,
									"end": 18232,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 18207,
									"end": 18232,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 18207,
									"end": 18232,
									"name": "SUB",
									"source": 0
								},
								{
									"begin": 18207,
									"end": 18232,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 18207,
									"end": 18232,
									"name": "LOG3",
									"source": 0
								},
								{
									"begin": 17132,
									"end": 18239,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 17132,
									"end": 18239,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 17132,
									"end": 18239,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 17132,
									"end": 18239,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 24971,
									"end": 25055,
									"name": "tag",
									"source": 0,
									"value": "74"
								},
								{
									"begin": 24971,
									"end": 25055,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 25018,
									"end": 25022,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 25041,
									"end": 25048,
									"name": "PUSH",
									"source": 0,
									"value": "5"
								},
								{
									"begin": 25041,
									"end": 25048,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 25041,
									"end": 25048,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 25041,
									"end": 25048,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": 25041,
									"end": 25048,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 25041,
									"end": 25048,
									"name": "PUSH",
									"source": 0,
									"value": "100"
								},
								{
									"begin": 25041,
									"end": 25048,
									"name": "EXP",
									"source": 0
								},
								{
									"begin": 25041,
									"end": 25048,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 25041,
									"end": 25048,
									"name": "DIV",
									"source": 0
								},
								{
									"begin": 25041,
									"end": 25048,
									"name": "PUSH",
									"source": 0,
									"value": "FF"
								},
								{
									"begin": 25041,
									"end": 25048,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 25034,
									"end": 25048,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 25034,
									"end": 25048,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 24971,
									"end": 25055,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 24971,
									"end": 25055,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 88,
									"end": 205,
									"name": "tag",
									"source": 1,
									"value": "90"
								},
								{
									"begin": 88,
									"end": 205,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 197,
									"end": 198,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 195,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 187,
									"end": 199,
									"name": "REVERT",
									"source": 1
								},
								{
									"begin": 334,
									"end": 460,
									"name": "tag",
									"source": 1,
									"value": "92"
								},
								{
									"begin": 334,
									"end": 460,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 371,
									"end": 378,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 411,
									"end": 453,
									"name": "PUSH",
									"source": 1,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 404,
									"end": 409,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 400,
									"end": 454,
									"name": "AND",
									"source": 1
								},
								{
									"begin": 389,
									"end": 454,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 389,
									"end": 454,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 334,
									"end": 460,
									"name": "SWAP2",
									"source": 1
								},
								{
									"begin": 334,
									"end": 460,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 334,
									"end": 460,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 334,
									"end": 460,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 466,
									"end": 562,
									"name": "tag",
									"source": 1,
									"value": "93"
								},
								{
									"begin": 466,
									"end": 562,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 503,
									"end": 510,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 532,
									"end": 556,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "138"
								},
								{
									"begin": 550,
									"end": 555,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 532,
									"end": 556,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "92"
								},
								{
									"begin": 532,
									"end": 556,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 532,
									"end": 556,
									"name": "tag",
									"source": 1,
									"value": "138"
								},
								{
									"begin": 532,
									"end": 556,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 521,
									"end": 556,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 521,
									"end": 556,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 466,
									"end": 562,
									"name": "SWAP2",
									"source": 1
								},
								{
									"begin": 466,
									"end": 562,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 466,
									"end": 562,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 466,
									"end": 562,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 568,
									"end": 690,
									"name": "tag",
									"source": 1,
									"value": "94"
								},
								{
									"begin": 568,
									"end": 690,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 641,
									"end": 665,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "140"
								},
								{
									"begin": 659,
									"end": 664,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 641,
									"end": 665,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "93"
								},
								{
									"begin": 641,
									"end": 665,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 641,
									"end": 665,
									"name": "tag",
									"source": 1,
									"value": "140"
								},
								{
									"begin": 641,
									"end": 665,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 634,
									"end": 639,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 631,
									"end": 666,
									"name": "EQ",
									"source": 1
								},
								{
									"begin": 621,
									"end": 684,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "141"
								},
								{
									"begin": 621,
									"end": 684,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": 680,
									"end": 681,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 677,
									"end": 678,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 670,
									"end": 682,
									"name": "REVERT",
									"source": 1
								},
								{
									"begin": 621,
									"end": 684,
									"name": "tag",
									"source": 1,
									"value": "141"
								},
								{
									"begin": 621,
									"end": 684,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 568,
									"end": 690,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 568,
									"end": 690,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 696,
									"end": 839,
									"name": "tag",
									"source": 1,
									"value": "95"
								},
								{
									"begin": 696,
									"end": 839,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 753,
									"end": 758,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 784,
									"end": 790,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 778,
									"end": 791,
									"name": "MLOAD",
									"source": 1
								},
								{
									"begin": 769,
									"end": 791,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 769,
									"end": 791,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 800,
									"end": 833,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "143"
								},
								{
									"begin": 827,
									"end": 832,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 800,
									"end": 833,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "94"
								},
								{
									"begin": 800,
									"end": 833,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 800,
									"end": 833,
									"name": "tag",
									"source": 1,
									"value": "143"
								},
								{
									"begin": 800,
									"end": 833,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 696,
									"end": 839,
									"name": "SWAP3",
									"source": 1
								},
								{
									"begin": 696,
									"end": 839,
									"name": "SWAP2",
									"source": 1
								},
								{
									"begin": 696,
									"end": 839,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 696,
									"end": 839,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 696,
									"end": 839,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 845,
									"end": 1196,
									"name": "tag",
									"source": 1,
									"value": "3"
								},
								{
									"begin": 845,
									"end": 1196,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 915,
									"end": 921,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 964,
									"end": 966,
									"name": "PUSH",
									"source": 1,
									"value": "20"
								},
								{
									"begin": 952,
									"end": 961,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 943,
									"end": 950,
									"name": "DUP5",
									"source": 1
								},
								{
									"begin": 939,
									"end": 962,
									"name": "SUB",
									"source": 1
								},
								{
									"begin": 935,
									"end": 967,
									"name": "SLT",
									"source": 1
								},
								{
									"begin": 932,
									"end": 1051,
									"name": "ISZERO",
									"source": 1
								},
								{
									"begin": 932,
									"end": 1051,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "145"
								},
								{
									"begin": 932,
									"end": 1051,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": 970,
									"end": 1049,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "146"
								},
								{
									"begin": 970,
									"end": 1049,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "90"
								},
								{
									"begin": 970,
									"end": 1049,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 970,
									"end": 1049,
									"name": "tag",
									"source": 1,
									"value": "146"
								},
								{
									"begin": 970,
									"end": 1049,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 932,
									"end": 1051,
									"name": "tag",
									"source": 1,
									"value": "145"
								},
								{
									"begin": 932,
									"end": 1051,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 1090,
									"end": 1091,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 1115,
									"end": 1179,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "147"
								},
								{
									"begin": 1171,
									"end": 1178,
									"name": "DUP5",
									"source": 1
								},
								{
									"begin": 1162,
									"end": 1168,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 1151,
									"end": 1160,
									"name": "DUP6",
									"source": 1
								},
								{
									"begin": 1147,
									"end": 1169,
									"name": "ADD",
									"source": 1
								},
								{
									"begin": 1115,
									"end": 1179,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "95"
								},
								{
									"begin": 1115,
									"end": 1179,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 1115,
									"end": 1179,
									"name": "tag",
									"source": 1,
									"value": "147"
								},
								{
									"begin": 1115,
									"end": 1179,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 1105,
									"end": 1179,
									"name": "SWAP2",
									"source": 1
								},
								{
									"begin": 1105,
									"end": 1179,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 1061,
									"end": 1189,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 845,
									"end": 1196,
									"name": "SWAP3",
									"source": 1
								},
								{
									"begin": 845,
									"end": 1196,
									"name": "SWAP2",
									"source": 1
								},
								{
									"begin": 845,
									"end": 1196,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 845,
									"end": 1196,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 845,
									"end": 1196,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 1202,
									"end": 1301,
									"name": "tag",
									"source": 1,
									"value": "96"
								},
								{
									"begin": 1202,
									"end": 1301,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 1254,
									"end": 1260,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 1288,
									"end": 1293,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 1282,
									"end": 1294,
									"name": "MLOAD",
									"source": 1
								},
								{
									"begin": 1272,
									"end": 1294,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 1272,
									"end": 1294,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 1202,
									"end": 1301,
									"name": "SWAP2",
									"source": 1
								},
								{
									"begin": 1202,
									"end": 1301,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 1202,
									"end": 1301,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 1202,
									"end": 1301,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 1307,
									"end": 1487,
									"name": "tag",
									"source": 1,
									"value": "97"
								},
								{
									"begin": 1307,
									"end": 1487,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 1355,
									"end": 1432,
									"name": "PUSH",
									"source": 1,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1352,
									"end": 1353,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 1345,
									"end": 1433,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 1452,
									"end": 1456,
									"name": "PUSH",
									"source": 1,
									"value": "41"
								},
								{
									"begin": 1449,
									"end": 1450,
									"name": "PUSH",
									"source": 1,
									"value": "4"
								},
								{
									"begin": 1442,
									"end": 1457,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 1476,
									"end": 1480,
									"name": "PUSH",
									"source": 1,
									"value": "24"
								},
								{
									"begin": 1473,
									"end": 1474,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 1466,
									"end": 1481,
									"name": "REVERT",
									"source": 1
								},
								{
									"begin": 1493,
									"end": 1673,
									"name": "tag",
									"source": 1,
									"value": "98"
								},
								{
									"begin": 1493,
									"end": 1673,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 1541,
									"end": 1618,
									"name": "PUSH",
									"source": 1,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1538,
									"end": 1539,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 1531,
									"end": 1619,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 1638,
									"end": 1642,
									"name": "PUSH",
									"source": 1,
									"value": "22"
								},
								{
									"begin": 1635,
									"end": 1636,
									"name": "PUSH",
									"source": 1,
									"value": "4"
								},
								{
									"begin": 1628,
									"end": 1643,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 1662,
									"end": 1666,
									"name": "PUSH",
									"source": 1,
									"value": "24"
								},
								{
									"begin": 1659,
									"end": 1660,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 1652,
									"end": 1667,
									"name": "REVERT",
									"source": 1
								},
								{
									"begin": 1679,
									"end": 1999,
									"name": "tag",
									"source": 1,
									"value": "99"
								},
								{
									"begin": 1679,
									"end": 1999,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 1723,
									"end": 1729,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 1760,
									"end": 1761,
									"name": "PUSH",
									"source": 1,
									"value": "2"
								},
								{
									"begin": 1754,
									"end": 1758,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 1750,
									"end": 1762,
									"name": "DIV",
									"source": 1
								},
								{
									"begin": 1740,
									"end": 1762,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 1740,
									"end": 1762,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 1807,
									"end": 1808,
									"name": "PUSH",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 1801,
									"end": 1805,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 1797,
									"end": 1809,
									"name": "AND",
									"source": 1
								},
								{
									"begin": 1828,
									"end": 1846,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 1818,
									"end": 1899,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "152"
								},
								{
									"begin": 1818,
									"end": 1899,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": 1884,
									"end": 1888,
									"name": "PUSH",
									"source": 1,
									"value": "7F"
								},
								{
									"begin": 1876,
									"end": 1882,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 1872,
									"end": 1889,
									"name": "AND",
									"source": 1
								},
								{
									"begin": 1862,
									"end": 1889,
									"name": "SWAP2",
									"source": 1
								},
								{
									"begin": 1862,
									"end": 1889,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 1818,
									"end": 1899,
									"name": "tag",
									"source": 1,
									"value": "152"
								},
								{
									"begin": 1818,
									"end": 1899,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 1946,
									"end": 1948,
									"name": "PUSH",
									"source": 1,
									"value": "20"
								},
								{
									"begin": 1938,
									"end": 1944,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 1935,
									"end": 1949,
									"name": "LT",
									"source": 1
								},
								{
									"begin": 1915,
									"end": 1933,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 1912,
									"end": 1950,
									"name": "SUB",
									"source": 1
								},
								{
									"begin": 1909,
									"end": 1993,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "153"
								},
								{
									"begin": 1909,
									"end": 1993,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": 1965,
									"end": 1983,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "154"
								},
								{
									"begin": 1965,
									"end": 1983,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "98"
								},
								{
									"begin": 1965,
									"end": 1983,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 1965,
									"end": 1983,
									"name": "tag",
									"source": 1,
									"value": "154"
								},
								{
									"begin": 1965,
									"end": 1983,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 1909,
									"end": 1993,
									"name": "tag",
									"source": 1,
									"value": "153"
								},
								{
									"begin": 1909,
									"end": 1993,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 1730,
									"end": 1999,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 1679,
									"end": 1999,
									"name": "SWAP2",
									"source": 1
								},
								{
									"begin": 1679,
									"end": 1999,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 1679,
									"end": 1999,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 1679,
									"end": 1999,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 2005,
									"end": 2146,
									"name": "tag",
									"source": 1,
									"value": "100"
								},
								{
									"begin": 2005,
									"end": 2146,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 2054,
									"end": 2058,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 2077,
									"end": 2080,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 2069,
									"end": 2080,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 2069,
									"end": 2080,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 2100,
									"end": 2103,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 2097,
									"end": 2098,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 2090,
									"end": 2104,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 2134,
									"end": 2138,
									"name": "PUSH",
									"source": 1,
									"value": "20"
								},
								{
									"begin": 2131,
									"end": 2132,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 2121,
									"end": 2139,
									"name": "KECCAK256",
									"source": 1
								},
								{
									"begin": 2113,
									"end": 2139,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 2113,
									"end": 2139,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 2005,
									"end": 2146,
									"name": "SWAP2",
									"source": 1
								},
								{
									"begin": 2005,
									"end": 2146,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 2005,
									"end": 2146,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 2005,
									"end": 2146,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 2152,
									"end": 2245,
									"name": "tag",
									"source": 1,
									"value": "101"
								},
								{
									"begin": 2152,
									"end": 2245,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 2189,
									"end": 2195,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 2236,
									"end": 2238,
									"name": "PUSH",
									"source": 1,
									"value": "20"
								},
								{
									"begin": 2231,
									"end": 2233,
									"name": "PUSH",
									"source": 1,
									"value": "1F"
								},
								{
									"begin": 2224,
									"end": 2229,
									"name": "DUP4",
									"source": 1
								},
								{
									"begin": 2220,
									"end": 2234,
									"name": "ADD",
									"source": 1
								},
								{
									"begin": 2216,
									"end": 2239,
									"name": "DIV",
									"source": 1
								},
								{
									"begin": 2206,
									"end": 2239,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 2206,
									"end": 2239,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 2152,
									"end": 2245,
									"name": "SWAP2",
									"source": 1
								},
								{
									"begin": 2152,
									"end": 2245,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 2152,
									"end": 2245,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 2152,
									"end": 2245,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 2251,
									"end": 2358,
									"name": "tag",
									"source": 1,
									"value": "102"
								},
								{
									"begin": 2251,
									"end": 2358,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 2295,
									"end": 2303,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 2345,
									"end": 2350,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 2339,
									"end": 2343,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 2335,
									"end": 2351,
									"name": "SHL",
									"source": 1
								},
								{
									"begin": 2314,
									"end": 2351,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 2314,
									"end": 2351,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 2251,
									"end": 2358,
									"name": "SWAP3",
									"source": 1
								},
								{
									"begin": 2251,
									"end": 2358,
									"name": "SWAP2",
									"source": 1
								},
								{
									"begin": 2251,
									"end": 2358,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 2251,
									"end": 2358,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 2251,
									"end": 2358,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 2364,
									"end": 2757,
									"name": "tag",
									"source": 1,
									"value": "103"
								},
								{
									"begin": 2364,
									"end": 2757,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 2433,
									"end": 2439,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 2483,
									"end": 2484,
									"name": "PUSH",
									"source": 1,
									"value": "8"
								},
								{
									"begin": 2471,
									"end": 2481,
									"name": "DUP4",
									"source": 1
								},
								{
									"begin": 2467,
									"end": 2485,
									"name": "MUL",
									"source": 1
								},
								{
									"begin": 2506,
									"end": 2603,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "159"
								},
								{
									"begin": 2536,
									"end": 2602,
									"name": "PUSH",
									"source": 1,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 2525,
									"end": 2534,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 2506,
									"end": 2603,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "102"
								},
								{
									"begin": 2506,
									"end": 2603,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 2506,
									"end": 2603,
									"name": "tag",
									"source": 1,
									"value": "159"
								},
								{
									"begin": 2506,
									"end": 2603,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 2624,
									"end": 2663,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "160"
								},
								{
									"begin": 2654,
									"end": 2662,
									"name": "DUP7",
									"source": 1
								},
								{
									"begin": 2643,
									"end": 2652,
									"name": "DUP4",
									"source": 1
								},
								{
									"begin": 2624,
									"end": 2663,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "102"
								},
								{
									"begin": 2624,
									"end": 2663,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 2624,
									"end": 2663,
									"name": "tag",
									"source": 1,
									"value": "160"
								},
								{
									"begin": 2624,
									"end": 2663,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 2612,
									"end": 2663,
									"name": "SWAP6",
									"source": 1
								},
								{
									"begin": 2612,
									"end": 2663,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 2696,
									"end": 2700,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 2692,
									"end": 2701,
									"name": "NOT",
									"source": 1
								},
								{
									"begin": 2685,
									"end": 2690,
									"name": "DUP5",
									"source": 1
								},
								{
									"begin": 2681,
									"end": 2702,
									"name": "AND",
									"source": 1
								},
								{
									"begin": 2672,
									"end": 2702,
									"name": "SWAP4",
									"source": 1
								},
								{
									"begin": 2672,
									"end": 2702,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 2745,
									"end": 2749,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 2735,
									"end": 2743,
									"name": "DUP7",
									"source": 1
								},
								{
									"begin": 2731,
									"end": 2750,
									"name": "AND",
									"source": 1
								},
								{
									"begin": 2724,
									"end": 2729,
									"name": "DUP5",
									"source": 1
								},
								{
									"begin": 2721,
									"end": 2751,
									"name": "OR",
									"source": 1
								},
								{
									"begin": 2711,
									"end": 2751,
									"name": "SWAP3",
									"source": 1
								},
								{
									"begin": 2711,
									"end": 2751,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 2440,
									"end": 2757,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 2440,
									"end": 2757,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 2364,
									"end": 2757,
									"name": "SWAP4",
									"source": 1
								},
								{
									"begin": 2364,
									"end": 2757,
									"name": "SWAP3",
									"source": 1
								},
								{
									"begin": 2364,
									"end": 2757,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 2364,
									"end": 2757,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 2364,
									"end": 2757,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 2364,
									"end": 2757,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 2763,
									"end": 2840,
									"name": "tag",
									"source": 1,
									"value": "104"
								},
								{
									"begin": 2763,
									"end": 2840,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 2800,
									"end": 2807,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 2829,
									"end": 2834,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 2818,
									"end": 2834,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 2818,
									"end": 2834,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 2763,
									"end": 2840,
									"name": "SWAP2",
									"source": 1
								},
								{
									"begin": 2763,
									"end": 2840,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 2763,
									"end": 2840,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 2763,
									"end": 2840,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 2846,
									"end": 2906,
									"name": "tag",
									"source": 1,
									"value": "105"
								},
								{
									"begin": 2846,
									"end": 2906,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 2874,
									"end": 2877,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 2895,
									"end": 2900,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 2888,
									"end": 2900,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 2888,
									"end": 2900,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 2846,
									"end": 2906,
									"name": "SWAP2",
									"source": 1
								},
								{
									"begin": 2846,
									"end": 2906,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 2846,
									"end": 2906,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 2846,
									"end": 2906,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 2912,
									"end": 3054,
									"name": "tag",
									"source": 1,
									"value": "106"
								},
								{
									"begin": 2912,
									"end": 3054,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 2962,
									"end": 2971,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 2995,
									"end": 3048,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "164"
								},
								{
									"begin": 3013,
									"end": 3047,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "165"
								},
								{
									"begin": 3022,
									"end": 3046,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "166"
								},
								{
									"begin": 3040,
									"end": 3045,
									"name": "DUP5",
									"source": 1
								},
								{
									"begin": 3022,
									"end": 3046,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "104"
								},
								{
									"begin": 3022,
									"end": 3046,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 3022,
									"end": 3046,
									"name": "tag",
									"source": 1,
									"value": "166"
								},
								{
									"begin": 3022,
									"end": 3046,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 3013,
									"end": 3047,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "105"
								},
								{
									"begin": 3013,
									"end": 3047,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 3013,
									"end": 3047,
									"name": "tag",
									"source": 1,
									"value": "165"
								},
								{
									"begin": 3013,
									"end": 3047,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 2995,
									"end": 3048,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "104"
								},
								{
									"begin": 2995,
									"end": 3048,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 2995,
									"end": 3048,
									"name": "tag",
									"source": 1,
									"value": "164"
								},
								{
									"begin": 2995,
									"end": 3048,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 2982,
									"end": 3048,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 2982,
									"end": 3048,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 2912,
									"end": 3054,
									"name": "SWAP2",
									"source": 1
								},
								{
									"begin": 2912,
									"end": 3054,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 2912,
									"end": 3054,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 2912,
									"end": 3054,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 3060,
									"end": 3135,
									"name": "tag",
									"source": 1,
									"value": "107"
								},
								{
									"begin": 3060,
									"end": 3135,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 3103,
									"end": 3106,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 3124,
									"end": 3129,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 3117,
									"end": 3129,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 3117,
									"end": 3129,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 3060,
									"end": 3135,
									"name": "SWAP2",
									"source": 1
								},
								{
									"begin": 3060,
									"end": 3135,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 3060,
									"end": 3135,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 3060,
									"end": 3135,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 3141,
									"end": 3410,
									"name": "tag",
									"source": 1,
									"value": "108"
								},
								{
									"begin": 3141,
									"end": 3410,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 3251,
									"end": 3290,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "169"
								},
								{
									"begin": 3282,
									"end": 3289,
									"name": "DUP4",
									"source": 1
								},
								{
									"begin": 3251,
									"end": 3290,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "106"
								},
								{
									"begin": 3251,
									"end": 3290,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 3251,
									"end": 3290,
									"name": "tag",
									"source": 1,
									"value": "169"
								},
								{
									"begin": 3251,
									"end": 3290,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 3312,
									"end": 3403,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "170"
								},
								{
									"begin": 3361,
									"end": 3402,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "171"
								},
								{
									"begin": 3385,
									"end": 3401,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 3361,
									"end": 3402,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "107"
								},
								{
									"begin": 3361,
									"end": 3402,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 3361,
									"end": 3402,
									"name": "tag",
									"source": 1,
									"value": "171"
								},
								{
									"begin": 3361,
									"end": 3402,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 3353,
									"end": 3359,
									"name": "DUP5",
									"source": 1
								},
								{
									"begin": 3346,
									"end": 3350,
									"name": "DUP5",
									"source": 1
								},
								{
									"begin": 3340,
									"end": 3351,
									"name": "SLOAD",
									"source": 1
								},
								{
									"begin": 3312,
									"end": 3403,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "103"
								},
								{
									"begin": 3312,
									"end": 3403,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 3312,
									"end": 3403,
									"name": "tag",
									"source": 1,
									"value": "170"
								},
								{
									"begin": 3312,
									"end": 3403,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 3306,
									"end": 3310,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 3299,
									"end": 3404,
									"name": "SSTORE",
									"source": 1
								},
								{
									"begin": 3217,
									"end": 3410,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 3141,
									"end": 3410,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 3141,
									"end": 3410,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 3141,
									"end": 3410,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 3141,
									"end": 3410,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 3416,
									"end": 3489,
									"name": "tag",
									"source": 1,
									"value": "109"
								},
								{
									"begin": 3416,
									"end": 3489,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 3461,
									"end": 3464,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 3416,
									"end": 3489,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 3416,
									"end": 3489,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 3495,
									"end": 3684,
									"name": "tag",
									"source": 1,
									"value": "110"
								},
								{
									"begin": 3495,
									"end": 3684,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 3572,
									"end": 3604,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "174"
								},
								{
									"begin": 3572,
									"end": 3604,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "109"
								},
								{
									"begin": 3572,
									"end": 3604,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 3572,
									"end": 3604,
									"name": "tag",
									"source": 1,
									"value": "174"
								},
								{
									"begin": 3572,
									"end": 3604,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 3613,
									"end": 3678,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "175"
								},
								{
									"begin": 3671,
									"end": 3677,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 3663,
									"end": 3669,
									"name": "DUP5",
									"source": 1
								},
								{
									"begin": 3657,
									"end": 3661,
									"name": "DUP5",
									"source": 1
								},
								{
									"begin": 3613,
									"end": 3678,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "108"
								},
								{
									"begin": 3613,
									"end": 3678,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 3613,
									"end": 3678,
									"name": "tag",
									"source": 1,
									"value": "175"
								},
								{
									"begin": 3613,
									"end": 3678,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 3548,
									"end": 3684,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 3495,
									"end": 3684,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 3495,
									"end": 3684,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 3495,
									"end": 3684,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 3690,
									"end": 3876,
									"name": "tag",
									"source": 1,
									"value": "111"
								},
								{
									"begin": 3690,
									"end": 3876,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 3750,
									"end": 3870,
									"name": "tag",
									"source": 1,
									"value": "177"
								},
								{
									"begin": 3750,
									"end": 3870,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 3767,
									"end": 3770,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 3760,
									"end": 3765,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 3757,
									"end": 3771,
									"name": "LT",
									"source": 1
								},
								{
									"begin": 3750,
									"end": 3870,
									"name": "ISZERO",
									"source": 1
								},
								{
									"begin": 3750,
									"end": 3870,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "179"
								},
								{
									"begin": 3750,
									"end": 3870,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": 3821,
									"end": 3860,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "180"
								},
								{
									"begin": 3858,
									"end": 3859,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 3851,
									"end": 3856,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 3821,
									"end": 3860,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "110"
								},
								{
									"begin": 3821,
									"end": 3860,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 3821,
									"end": 3860,
									"name": "tag",
									"source": 1,
									"value": "180"
								},
								{
									"begin": 3821,
									"end": 3860,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 3794,
									"end": 3795,
									"name": "PUSH",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 3787,
									"end": 3792,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 3783,
									"end": 3796,
									"name": "ADD",
									"source": 1
								},
								{
									"begin": 3774,
									"end": 3796,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 3774,
									"end": 3796,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 3750,
									"end": 3870,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "177"
								},
								{
									"begin": 3750,
									"end": 3870,
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 3750,
									"end": 3870,
									"name": "tag",
									"source": 1,
									"value": "179"
								},
								{
									"begin": 3750,
									"end": 3870,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 3690,
									"end": 3876,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 3690,
									"end": 3876,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 3690,
									"end": 3876,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 3882,
									"end": 4425,
									"name": "tag",
									"source": 1,
									"value": "112"
								},
								{
									"begin": 3882,
									"end": 4425,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 3983,
									"end": 3985,
									"name": "PUSH",
									"source": 1,
									"value": "1F"
								},
								{
									"begin": 3978,
									"end": 3981,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 3975,
									"end": 3986,
									"name": "GT",
									"source": 1
								},
								{
									"begin": 3972,
									"end": 4418,
									"name": "ISZERO",
									"source": 1
								},
								{
									"begin": 3972,
									"end": 4418,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "182"
								},
								{
									"begin": 3972,
									"end": 4418,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": 4017,
									"end": 4055,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "183"
								},
								{
									"begin": 4049,
									"end": 4054,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 4017,
									"end": 4055,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "100"
								},
								{
									"begin": 4017,
									"end": 4055,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 4017,
									"end": 4055,
									"name": "tag",
									"source": 1,
									"value": "183"
								},
								{
									"begin": 4017,
									"end": 4055,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 4101,
									"end": 4130,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "184"
								},
								{
									"begin": 4119,
									"end": 4129,
									"name": "DUP5",
									"source": 1
								},
								{
									"begin": 4101,
									"end": 4130,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "101"
								},
								{
									"begin": 4101,
									"end": 4130,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 4101,
									"end": 4130,
									"name": "tag",
									"source": 1,
									"value": "184"
								},
								{
									"begin": 4101,
									"end": 4130,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 4091,
									"end": 4099,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 4087,
									"end": 4131,
									"name": "ADD",
									"source": 1
								},
								{
									"begin": 4284,
									"end": 4286,
									"name": "PUSH",
									"source": 1,
									"value": "20"
								},
								{
									"begin": 4272,
									"end": 4282,
									"name": "DUP6",
									"source": 1
								},
								{
									"begin": 4269,
									"end": 4287,
									"name": "LT",
									"source": 1
								},
								{
									"begin": 4266,
									"end": 4315,
									"name": "ISZERO",
									"source": 1
								},
								{
									"begin": 4266,
									"end": 4315,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "185"
								},
								{
									"begin": 4266,
									"end": 4315,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": 4305,
									"end": 4313,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 4290,
									"end": 4313,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 4290,
									"end": 4313,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 4266,
									"end": 4315,
									"name": "tag",
									"source": 1,
									"value": "185"
								},
								{
									"begin": 4266,
									"end": 4315,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 4328,
									"end": 4408,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "186"
								},
								{
									"begin": 4384,
									"end": 4406,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "187"
								},
								{
									"begin": 4402,
									"end": 4405,
									"name": "DUP6",
									"source": 1
								},
								{
									"begin": 4384,
									"end": 4406,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "101"
								},
								{
									"begin": 4384,
									"end": 4406,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 4384,
									"end": 4406,
									"name": "tag",
									"source": 1,
									"value": "187"
								},
								{
									"begin": 4384,
									"end": 4406,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 4374,
									"end": 4382,
									"name": "DUP4",
									"source": 1
								},
								{
									"begin": 4370,
									"end": 4407,
									"name": "ADD",
									"source": 1
								},
								{
									"begin": 4357,
									"end": 4368,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 4328,
									"end": 4408,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "111"
								},
								{
									"begin": 4328,
									"end": 4408,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 4328,
									"end": 4408,
									"name": "tag",
									"source": 1,
									"value": "186"
								},
								{
									"begin": 4328,
									"end": 4408,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 3987,
									"end": 4418,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 3987,
									"end": 4418,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 3972,
									"end": 4418,
									"name": "tag",
									"source": 1,
									"value": "182"
								},
								{
									"begin": 3972,
									"end": 4418,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 3882,
									"end": 4425,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 3882,
									"end": 4425,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 3882,
									"end": 4425,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 3882,
									"end": 4425,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 4431,
									"end": 4548,
									"name": "tag",
									"source": 1,
									"value": "113"
								},
								{
									"begin": 4431,
									"end": 4548,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 4485,
									"end": 4493,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 4535,
									"end": 4540,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 4529,
									"end": 4533,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 4525,
									"end": 4541,
									"name": "SHR",
									"source": 1
								},
								{
									"begin": 4504,
									"end": 4541,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 4504,
									"end": 4541,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 4431,
									"end": 4548,
									"name": "SWAP3",
									"source": 1
								},
								{
									"begin": 4431,
									"end": 4548,
									"name": "SWAP2",
									"source": 1
								},
								{
									"begin": 4431,
									"end": 4548,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 4431,
									"end": 4548,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 4431,
									"end": 4548,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 4554,
									"end": 4723,
									"name": "tag",
									"source": 1,
									"value": "114"
								},
								{
									"begin": 4554,
									"end": 4723,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 4598,
									"end": 4604,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 4631,
									"end": 4682,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "190"
								},
								{
									"begin": 4679,
									"end": 4680,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 4675,
									"end": 4681,
									"name": "NOT",
									"source": 1
								},
								{
									"begin": 4667,
									"end": 4672,
									"name": "DUP5",
									"source": 1
								},
								{
									"begin": 4664,
									"end": 4665,
									"name": "PUSH",
									"source": 1,
									"value": "8"
								},
								{
									"begin": 4660,
									"end": 4673,
									"name": "MUL",
									"source": 1
								},
								{
									"begin": 4631,
									"end": 4682,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "113"
								},
								{
									"begin": 4631,
									"end": 4682,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 4631,
									"end": 4682,
									"name": "tag",
									"source": 1,
									"value": "190"
								},
								{
									"begin": 4631,
									"end": 4682,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 4627,
									"end": 4683,
									"name": "NOT",
									"source": 1
								},
								{
									"begin": 4712,
									"end": 4716,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 4706,
									"end": 4710,
									"name": "DUP4",
									"source": 1
								},
								{
									"begin": 4702,
									"end": 4717,
									"name": "AND",
									"source": 1
								},
								{
									"begin": 4692,
									"end": 4717,
									"name": "SWAP2",
									"source": 1
								},
								{
									"begin": 4692,
									"end": 4717,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 4605,
									"end": 4723,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 4554,
									"end": 4723,
									"name": "SWAP3",
									"source": 1
								},
								{
									"begin": 4554,
									"end": 4723,
									"name": "SWAP2",
									"source": 1
								},
								{
									"begin": 4554,
									"end": 4723,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 4554,
									"end": 4723,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 4554,
									"end": 4723,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 4728,
									"end": 5023,
									"name": "tag",
									"source": 1,
									"value": "115"
								},
								{
									"begin": 4728,
									"end": 5023,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 4804,
									"end": 4808,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 4950,
									"end": 4979,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "192"
								},
								{
									"begin": 4975,
									"end": 4978,
									"name": "DUP4",
									"source": 1
								},
								{
									"begin": 4969,
									"end": 4973,
									"name": "DUP4",
									"source": 1
								},
								{
									"begin": 4950,
									"end": 4979,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "114"
								},
								{
									"begin": 4950,
									"end": 4979,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 4950,
									"end": 4979,
									"name": "tag",
									"source": 1,
									"value": "192"
								},
								{
									"begin": 4950,
									"end": 4979,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 4942,
									"end": 4979,
									"name": "SWAP2",
									"source": 1
								},
								{
									"begin": 4942,
									"end": 4979,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 5012,
									"end": 5015,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 5009,
									"end": 5010,
									"name": "PUSH",
									"source": 1,
									"value": "2"
								},
								{
									"begin": 5005,
									"end": 5016,
									"name": "MUL",
									"source": 1
								},
								{
									"begin": 4999,
									"end": 5003,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 4996,
									"end": 5017,
									"name": "OR",
									"source": 1
								},
								{
									"begin": 4988,
									"end": 5017,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 4988,
									"end": 5017,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 4728,
									"end": 5023,
									"name": "SWAP3",
									"source": 1
								},
								{
									"begin": 4728,
									"end": 5023,
									"name": "SWAP2",
									"source": 1
								},
								{
									"begin": 4728,
									"end": 5023,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 4728,
									"end": 5023,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 4728,
									"end": 5023,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 5028,
									"end": 6423,
									"name": "tag",
									"source": 1,
									"value": "12"
								},
								{
									"begin": 5028,
									"end": 6423,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 5145,
									"end": 5182,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "194"
								},
								{
									"begin": 5178,
									"end": 5181,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 5145,
									"end": 5182,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "96"
								},
								{
									"begin": 5145,
									"end": 5182,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 5145,
									"end": 5182,
									"name": "tag",
									"source": 1,
									"value": "194"
								},
								{
									"begin": 5145,
									"end": 5182,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 5247,
									"end": 5265,
									"name": "PUSH",
									"source": 1,
									"value": "FFFFFFFFFFFFFFFF"
								},
								{
									"begin": 5239,
									"end": 5245,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 5236,
									"end": 5266,
									"name": "GT",
									"source": 1
								},
								{
									"begin": 5233,
									"end": 5289,
									"name": "ISZERO",
									"source": 1
								},
								{
									"begin": 5233,
									"end": 5289,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "195"
								},
								{
									"begin": 5233,
									"end": 5289,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": 5269,
									"end": 5287,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "196"
								},
								{
									"begin": 5269,
									"end": 5287,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "97"
								},
								{
									"begin": 5269,
									"end": 5287,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 5269,
									"end": 5287,
									"name": "tag",
									"source": 1,
									"value": "196"
								},
								{
									"begin": 5269,
									"end": 5287,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 5233,
									"end": 5289,
									"name": "tag",
									"source": 1,
									"value": "195"
								},
								{
									"begin": 5233,
									"end": 5289,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 5313,
									"end": 5351,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "197"
								},
								{
									"begin": 5345,
									"end": 5349,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 5339,
									"end": 5350,
									"name": "SLOAD",
									"source": 1
								},
								{
									"begin": 5313,
									"end": 5351,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "99"
								},
								{
									"begin": 5313,
									"end": 5351,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 5313,
									"end": 5351,
									"name": "tag",
									"source": 1,
									"value": "197"
								},
								{
									"begin": 5313,
									"end": 5351,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 5398,
									"end": 5465,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "198"
								},
								{
									"begin": 5458,
									"end": 5464,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 5450,
									"end": 5456,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 5444,
									"end": 5448,
									"name": "DUP6",
									"source": 1
								},
								{
									"begin": 5398,
									"end": 5465,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "112"
								},
								{
									"begin": 5398,
									"end": 5465,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 5398,
									"end": 5465,
									"name": "tag",
									"source": 1,
									"value": "198"
								},
								{
									"begin": 5398,
									"end": 5465,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 5492,
									"end": 5493,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 5516,
									"end": 5520,
									"name": "PUSH",
									"source": 1,
									"value": "20"
								},
								{
									"begin": 5503,
									"end": 5520,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 5503,
									"end": 5520,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 5548,
									"end": 5550,
									"name": "PUSH",
									"source": 1,
									"value": "1F"
								},
								{
									"begin": 5540,
									"end": 5546,
									"name": "DUP4",
									"source": 1
								},
								{
									"begin": 5537,
									"end": 5551,
									"name": "GT",
									"source": 1
								},
								{
									"begin": 5565,
									"end": 5566,
									"name": "PUSH",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 5560,
									"end": 6178,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 5560,
									"end": 6178,
									"name": "EQ",
									"source": 1
								},
								{
									"begin": 5560,
									"end": 6178,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "200"
								},
								{
									"begin": 5560,
									"end": 6178,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": 6222,
									"end": 6223,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 6239,
									"end": 6245,
									"name": "DUP5",
									"source": 1
								},
								{
									"begin": 6236,
									"end": 6313,
									"name": "ISZERO",
									"source": 1
								},
								{
									"begin": 6236,
									"end": 6313,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "201"
								},
								{
									"begin": 6236,
									"end": 6313,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": 6288,
									"end": 6297,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 6283,
									"end": 6286,
									"name": "DUP8",
									"source": 1
								},
								{
									"begin": 6279,
									"end": 6298,
									"name": "ADD",
									"source": 1
								},
								{
									"begin": 6273,
									"end": 6299,
									"name": "MLOAD",
									"source": 1
								},
								{
									"begin": 6264,
									"end": 6299,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 6264,
									"end": 6299,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 6236,
									"end": 6313,
									"name": "tag",
									"source": 1,
									"value": "201"
								},
								{
									"begin": 6236,
									"end": 6313,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 6339,
									"end": 6406,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "202"
								},
								{
									"begin": 6399,
									"end": 6405,
									"name": "DUP6",
									"source": 1
								},
								{
									"begin": 6392,
									"end": 6397,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 6339,
									"end": 6406,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "115"
								},
								{
									"begin": 6339,
									"end": 6406,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 6339,
									"end": 6406,
									"name": "tag",
									"source": 1,
									"value": "202"
								},
								{
									"begin": 6339,
									"end": 6406,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 6333,
									"end": 6337,
									"name": "DUP7",
									"source": 1
								},
								{
									"begin": 6326,
									"end": 6407,
									"name": "SSTORE",
									"source": 1
								},
								{
									"begin": 6195,
									"end": 6417,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 5530,
									"end": 6417,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "199"
								},
								{
									"begin": 5530,
									"end": 6417,
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 5560,
									"end": 6178,
									"name": "tag",
									"source": 1,
									"value": "200"
								},
								{
									"begin": 5560,
									"end": 6178,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 5612,
									"end": 5616,
									"name": "PUSH",
									"source": 1,
									"value": "1F"
								},
								{
									"begin": 5608,
									"end": 5617,
									"name": "NOT",
									"source": 1
								},
								{
									"begin": 5600,
									"end": 5606,
									"name": "DUP5",
									"source": 1
								},
								{
									"begin": 5596,
									"end": 5618,
									"name": "AND",
									"source": 1
								},
								{
									"begin": 5646,
									"end": 5683,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "203"
								},
								{
									"begin": 5678,
									"end": 5682,
									"name": "DUP7",
									"source": 1
								},
								{
									"begin": 5646,
									"end": 5683,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "100"
								},
								{
									"begin": 5646,
									"end": 5683,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 5646,
									"end": 5683,
									"name": "tag",
									"source": 1,
									"value": "203"
								},
								{
									"begin": 5646,
									"end": 5683,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 5705,
									"end": 5706,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 5719,
									"end": 5927,
									"name": "tag",
									"source": 1,
									"value": "204"
								},
								{
									"begin": 5719,
									"end": 5927,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 5733,
									"end": 5740,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 5730,
									"end": 5731,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 5727,
									"end": 5741,
									"name": "LT",
									"source": 1
								},
								{
									"begin": 5719,
									"end": 5927,
									"name": "ISZERO",
									"source": 1
								},
								{
									"begin": 5719,
									"end": 5927,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "206"
								},
								{
									"begin": 5719,
									"end": 5927,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": 5812,
									"end": 5821,
									"name": "DUP5",
									"source": 1
								},
								{
									"begin": 5807,
									"end": 5810,
									"name": "DUP10",
									"source": 1
								},
								{
									"begin": 5803,
									"end": 5822,
									"name": "ADD",
									"source": 1
								},
								{
									"begin": 5797,
									"end": 5823,
									"name": "MLOAD",
									"source": 1
								},
								{
									"begin": 5789,
									"end": 5795,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 5782,
									"end": 5824,
									"name": "SSTORE",
									"source": 1
								},
								{
									"begin": 5863,
									"end": 5864,
									"name": "PUSH",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 5855,
									"end": 5861,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 5851,
									"end": 5865,
									"name": "ADD",
									"source": 1
								},
								{
									"begin": 5841,
									"end": 5865,
									"name": "SWAP2",
									"source": 1
								},
								{
									"begin": 5841,
									"end": 5865,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 5910,
									"end": 5912,
									"name": "PUSH",
									"source": 1,
									"value": "20"
								},
								{
									"begin": 5899,
									"end": 5908,
									"name": "DUP6",
									"source": 1
								},
								{
									"begin": 5895,
									"end": 5913,
									"name": "ADD",
									"source": 1
								},
								{
									"begin": 5882,
									"end": 5913,
									"name": "SWAP5",
									"source": 1
								},
								{
									"begin": 5882,
									"end": 5913,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 5756,
									"end": 5760,
									"name": "PUSH",
									"source": 1,
									"value": "20"
								},
								{
									"begin": 5753,
									"end": 5754,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 5749,
									"end": 5761,
									"name": "ADD",
									"source": 1
								},
								{
									"begin": 5744,
									"end": 5761,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 5744,
									"end": 5761,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 5719,
									"end": 5927,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "204"
								},
								{
									"begin": 5719,
									"end": 5927,
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 5719,
									"end": 5927,
									"name": "tag",
									"source": 1,
									"value": "206"
								},
								{
									"begin": 5719,
									"end": 5927,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 5955,
									"end": 5961,
									"name": "DUP7",
									"source": 1
								},
								{
									"begin": 5946,
									"end": 5953,
									"name": "DUP4",
									"source": 1
								},
								{
									"begin": 5943,
									"end": 5962,
									"name": "LT",
									"source": 1
								},
								{
									"begin": 5940,
									"end": 6119,
									"name": "ISZERO",
									"source": 1
								},
								{
									"begin": 5940,
									"end": 6119,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "207"
								},
								{
									"begin": 5940,
									"end": 6119,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": 6013,
									"end": 6022,
									"name": "DUP5",
									"source": 1
								},
								{
									"begin": 6008,
									"end": 6011,
									"name": "DUP10",
									"source": 1
								},
								{
									"begin": 6004,
									"end": 6023,
									"name": "ADD",
									"source": 1
								},
								{
									"begin": 5998,
									"end": 6024,
									"name": "MLOAD",
									"source": 1
								},
								{
									"begin": 6056,
									"end": 6104,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "208"
								},
								{
									"begin": 6098,
									"end": 6102,
									"name": "PUSH",
									"source": 1,
									"value": "1F"
								},
								{
									"begin": 6090,
									"end": 6096,
									"name": "DUP10",
									"source": 1
								},
								{
									"begin": 6086,
									"end": 6103,
									"name": "AND",
									"source": 1
								},
								{
									"begin": 6075,
									"end": 6084,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 6056,
									"end": 6104,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "114"
								},
								{
									"begin": 6056,
									"end": 6104,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 6056,
									"end": 6104,
									"name": "tag",
									"source": 1,
									"value": "208"
								},
								{
									"begin": 6056,
									"end": 6104,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 6048,
									"end": 6054,
									"name": "DUP4",
									"source": 1
								},
								{
									"begin": 6041,
									"end": 6105,
									"name": "SSTORE",
									"source": 1
								},
								{
									"begin": 5963,
									"end": 6119,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 5940,
									"end": 6119,
									"name": "tag",
									"source": 1,
									"value": "207"
								},
								{
									"begin": 5940,
									"end": 6119,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 6165,
									"end": 6166,
									"name": "PUSH",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 6161,
									"end": 6162,
									"name": "PUSH",
									"source": 1,
									"value": "2"
								},
								{
									"begin": 6153,
									"end": 6159,
									"name": "DUP9",
									"source": 1
								},
								{
									"begin": 6149,
									"end": 6163,
									"name": "MUL",
									"source": 1
								},
								{
									"begin": 6145,
									"end": 6167,
									"name": "ADD",
									"source": 1
								},
								{
									"begin": 6139,
									"end": 6143,
									"name": "DUP9",
									"source": 1
								},
								{
									"begin": 6132,
									"end": 6168,
									"name": "SSTORE",
									"source": 1
								},
								{
									"begin": 5567,
									"end": 6178,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 5567,
									"end": 6178,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 5567,
									"end": 6178,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 5530,
									"end": 6417,
									"name": "tag",
									"source": 1,
									"value": "199"
								},
								{
									"begin": 5530,
									"end": 6417,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 5530,
									"end": 6417,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 5120,
									"end": 6423,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 5120,
									"end": 6423,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 5120,
									"end": 6423,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 5028,
									"end": 6423,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 5028,
									"end": 6423,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 5028,
									"end": 6423,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 6429,
									"end": 6547,
									"name": "tag",
									"source": 1,
									"value": "116"
								},
								{
									"begin": 6429,
									"end": 6547,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 6516,
									"end": 6540,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "210"
								},
								{
									"begin": 6534,
									"end": 6539,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 6516,
									"end": 6540,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "93"
								},
								{
									"begin": 6516,
									"end": 6540,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 6516,
									"end": 6540,
									"name": "tag",
									"source": 1,
									"value": "210"
								},
								{
									"begin": 6516,
									"end": 6540,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 6511,
									"end": 6514,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 6504,
									"end": 6541,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 6429,
									"end": 6547,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 6429,
									"end": 6547,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 6429,
									"end": 6547,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 6553,
									"end": 6775,
									"name": "tag",
									"source": 1,
									"value": "18"
								},
								{
									"begin": 6553,
									"end": 6775,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 6646,
									"end": 6650,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 6684,
									"end": 6686,
									"name": "PUSH",
									"source": 1,
									"value": "20"
								},
								{
									"begin": 6673,
									"end": 6682,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 6669,
									"end": 6687,
									"name": "ADD",
									"source": 1
								},
								{
									"begin": 6661,
									"end": 6687,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 6661,
									"end": 6687,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 6697,
									"end": 6768,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "212"
								},
								{
									"begin": 6765,
									"end": 6766,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 6754,
									"end": 6763,
									"name": "DUP4",
									"source": 1
								},
								{
									"begin": 6750,
									"end": 6767,
									"name": "ADD",
									"source": 1
								},
								{
									"begin": 6741,
									"end": 6747,
									"name": "DUP5",
									"source": 1
								},
								{
									"begin": 6697,
									"end": 6768,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "116"
								},
								{
									"begin": 6697,
									"end": 6768,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 6697,
									"end": 6768,
									"name": "tag",
									"source": 1,
									"value": "212"
								},
								{
									"begin": 6697,
									"end": 6768,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 6553,
									"end": 6775,
									"name": "SWAP3",
									"source": 1
								},
								{
									"begin": 6553,
									"end": 6775,
									"name": "SWAP2",
									"source": 1
								},
								{
									"begin": 6553,
									"end": 6775,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 6553,
									"end": 6775,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 6553,
									"end": 6775,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 6781,
									"end": 6961,
									"name": "tag",
									"source": 1,
									"value": "117"
								},
								{
									"begin": 6781,
									"end": 6961,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 6829,
									"end": 6906,
									"name": "PUSH",
									"source": 1,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 6826,
									"end": 6827,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 6819,
									"end": 6907,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 6926,
									"end": 6930,
									"name": "PUSH",
									"source": 1,
									"value": "11"
								},
								{
									"begin": 6923,
									"end": 6924,
									"name": "PUSH",
									"source": 1,
									"value": "4"
								},
								{
									"begin": 6916,
									"end": 6931,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 6950,
									"end": 6954,
									"name": "PUSH",
									"source": 1,
									"value": "24"
								},
								{
									"begin": 6947,
									"end": 6948,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 6940,
									"end": 6955,
									"name": "REVERT",
									"source": 1
								},
								{
									"begin": 6967,
									"end": 7069,
									"name": "tag",
									"source": 1,
									"value": "118"
								},
								{
									"begin": 6967,
									"end": 7069,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 7009,
									"end": 7017,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 7056,
									"end": 7061,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 7053,
									"end": 7054,
									"name": "PUSH",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 7049,
									"end": 7062,
									"name": "SHR",
									"source": 1
								},
								{
									"begin": 7028,
									"end": 7062,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 7028,
									"end": 7062,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 6967,
									"end": 7069,
									"name": "SWAP2",
									"source": 1
								},
								{
									"begin": 6967,
									"end": 7069,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 6967,
									"end": 7069,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 6967,
									"end": 7069,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 7075,
									"end": 7923,
									"name": "tag",
									"source": 1,
									"value": "119"
								},
								{
									"begin": 7075,
									"end": 7923,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 7136,
									"end": 7141,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 7143,
									"end": 7147,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 7167,
									"end": 7173,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 7158,
									"end": 7173,
									"name": "SWAP2",
									"source": 1
								},
								{
									"begin": 7158,
									"end": 7173,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 7191,
									"end": 7196,
									"name": "DUP4",
									"source": 1
								},
								{
									"begin": 7182,
									"end": 7196,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 7182,
									"end": 7196,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 7205,
									"end": 7917,
									"name": "tag",
									"source": 1,
									"value": "216"
								},
								{
									"begin": 7205,
									"end": 7917,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 7226,
									"end": 7227,
									"name": "PUSH",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 7216,
									"end": 7224,
									"name": "DUP6",
									"source": 1
								},
								{
									"begin": 7213,
									"end": 7228,
									"name": "GT",
									"source": 1
								},
								{
									"begin": 7205,
									"end": 7917,
									"name": "ISZERO",
									"source": 1
								},
								{
									"begin": 7205,
									"end": 7917,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "218"
								},
								{
									"begin": 7205,
									"end": 7917,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": 7321,
									"end": 7325,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 7316,
									"end": 7319,
									"name": "DUP7",
									"source": 1
								},
								{
									"begin": 7312,
									"end": 7326,
									"name": "DIV",
									"source": 1
								},
								{
									"begin": 7306,
									"end": 7310,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 7303,
									"end": 7327,
									"name": "GT",
									"source": 1
								},
								{
									"begin": 7300,
									"end": 7350,
									"name": "ISZERO",
									"source": 1
								},
								{
									"begin": 7300,
									"end": 7350,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "219"
								},
								{
									"begin": 7300,
									"end": 7350,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": 7330,
									"end": 7348,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "220"
								},
								{
									"begin": 7330,
									"end": 7348,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "117"
								},
								{
									"begin": 7330,
									"end": 7348,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 7330,
									"end": 7348,
									"name": "tag",
									"source": 1,
									"value": "220"
								},
								{
									"begin": 7330,
									"end": 7348,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 7300,
									"end": 7350,
									"name": "tag",
									"source": 1,
									"value": "219"
								},
								{
									"begin": 7300,
									"end": 7350,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 7380,
									"end": 7381,
									"name": "PUSH",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 7370,
									"end": 7378,
									"name": "DUP6",
									"source": 1
								},
								{
									"begin": 7366,
									"end": 7382,
									"name": "AND",
									"source": 1
								},
								{
									"begin": 7363,
									"end": 7814,
									"name": "ISZERO",
									"source": 1
								},
								{
									"begin": 7363,
									"end": 7814,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "221"
								},
								{
									"begin": 7363,
									"end": 7814,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": 7795,
									"end": 7799,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 7788,
									"end": 7793,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 7784,
									"end": 7800,
									"name": "MUL",
									"source": 1
								},
								{
									"begin": 7775,
									"end": 7800,
									"name": "SWAP2",
									"source": 1
								},
								{
									"begin": 7775,
									"end": 7800,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 7363,
									"end": 7814,
									"name": "tag",
									"source": 1,
									"value": "221"
								},
								{
									"begin": 7363,
									"end": 7814,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 7845,
									"end": 7849,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 7839,
									"end": 7843,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 7835,
									"end": 7850,
									"name": "MUL",
									"source": 1
								},
								{
									"begin": 7827,
									"end": 7850,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 7827,
									"end": 7850,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 7875,
									"end": 7907,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "222"
								},
								{
									"begin": 7898,
									"end": 7906,
									"name": "DUP6",
									"source": 1
								},
								{
									"begin": 7875,
									"end": 7907,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "118"
								},
								{
									"begin": 7875,
									"end": 7907,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 7875,
									"end": 7907,
									"name": "tag",
									"source": 1,
									"value": "222"
								},
								{
									"begin": 7875,
									"end": 7907,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 7863,
									"end": 7907,
									"name": "SWAP5",
									"source": 1
								},
								{
									"begin": 7863,
									"end": 7907,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 7205,
									"end": 7917,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "216"
								},
								{
									"begin": 7205,
									"end": 7917,
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 7205,
									"end": 7917,
									"name": "tag",
									"source": 1,
									"value": "218"
								},
								{
									"begin": 7205,
									"end": 7917,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 7075,
									"end": 7923,
									"name": "SWAP5",
									"source": 1
								},
								{
									"begin": 7075,
									"end": 7923,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 7075,
									"end": 7923,
									"name": "SWAP5",
									"source": 1
								},
								{
									"begin": 7075,
									"end": 7923,
									"name": "SWAP3",
									"source": 1
								},
								{
									"begin": 7075,
									"end": 7923,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 7075,
									"end": 7923,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 7075,
									"end": 7923,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 7075,
									"end": 7923,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 7929,
									"end": 9002,
									"name": "tag",
									"source": 1,
									"value": "120"
								},
								{
									"begin": 7929,
									"end": 9002,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 7983,
									"end": 7988,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 8174,
									"end": 8182,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 8164,
									"end": 8204,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "224"
								},
								{
									"begin": 8164,
									"end": 8204,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": 8195,
									"end": 8196,
									"name": "PUSH",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 8186,
									"end": 8196,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 8186,
									"end": 8196,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 8197,
									"end": 8202,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "223"
								},
								{
									"begin": 8197,
									"end": 8202,
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 8164,
									"end": 8204,
									"name": "tag",
									"source": 1,
									"value": "224"
								},
								{
									"begin": 8164,
									"end": 8204,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 8223,
									"end": 8227,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 8213,
									"end": 8249,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "225"
								},
								{
									"begin": 8213,
									"end": 8249,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": 8240,
									"end": 8241,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 8231,
									"end": 8241,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 8231,
									"end": 8241,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 8242,
									"end": 8247,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "223"
								},
								{
									"begin": 8242,
									"end": 8247,
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 8213,
									"end": 8249,
									"name": "tag",
									"source": 1,
									"value": "225"
								},
								{
									"begin": 8213,
									"end": 8249,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 8309,
									"end": 8313,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 8357,
									"end": 8358,
									"name": "PUSH",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 8352,
									"end": 8379,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 8352,
									"end": 8379,
									"name": "EQ",
									"source": 1
								},
								{
									"begin": 8352,
									"end": 8379,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "227"
								},
								{
									"begin": 8352,
									"end": 8379,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": 8393,
									"end": 8394,
									"name": "PUSH",
									"source": 1,
									"value": "2"
								},
								{
									"begin": 8388,
									"end": 8579,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 8388,
									"end": 8579,
									"name": "EQ",
									"source": 1
								},
								{
									"begin": 8388,
									"end": 8579,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "228"
								},
								{
									"begin": 8388,
									"end": 8579,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": 8302,
									"end": 8579,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "226"
								},
								{
									"begin": 8302,
									"end": 8579,
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 8352,
									"end": 8379,
									"name": "tag",
									"source": 1,
									"value": "227"
								},
								{
									"begin": 8352,
									"end": 8379,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 8370,
									"end": 8371,
									"name": "PUSH",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 8361,
									"end": 8371,
									"name": "SWAP2",
									"source": 1
								},
								{
									"begin": 8361,
									"end": 8371,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 8372,
									"end": 8377,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 8372,
									"end": 8377,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "223"
								},
								{
									"begin": 8372,
									"end": 8377,
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 8388,
									"end": 8579,
									"name": "tag",
									"source": 1,
									"value": "228"
								},
								{
									"begin": 8388,
									"end": 8579,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 8433,
									"end": 8436,
									"name": "PUSH",
									"source": 1,
									"value": "FF"
								},
								{
									"begin": 8423,
									"end": 8431,
									"name": "DUP5",
									"source": 1
								},
								{
									"begin": 8420,
									"end": 8437,
									"name": "GT",
									"source": 1
								},
								{
									"begin": 8417,
									"end": 8460,
									"name": "ISZERO",
									"source": 1
								},
								{
									"begin": 8417,
									"end": 8460,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "229"
								},
								{
									"begin": 8417,
									"end": 8460,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": 8440,
									"end": 8458,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "230"
								},
								{
									"begin": 8440,
									"end": 8458,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "117"
								},
								{
									"begin": 8440,
									"end": 8458,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 8440,
									"end": 8458,
									"name": "tag",
									"source": 1,
									"value": "230"
								},
								{
									"begin": 8440,
									"end": 8458,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 8417,
									"end": 8460,
									"name": "tag",
									"source": 1,
									"value": "229"
								},
								{
									"begin": 8417,
									"end": 8460,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 8489,
									"end": 8497,
									"name": "DUP4",
									"source": 1
								},
								{
									"begin": 8486,
									"end": 8487,
									"name": "PUSH",
									"source": 1,
									"value": "2"
								},
								{
									"begin": 8482,
									"end": 8498,
									"name": "EXP",
									"source": 1
								},
								{
									"begin": 8473,
									"end": 8498,
									"name": "SWAP2",
									"source": 1
								},
								{
									"begin": 8473,
									"end": 8498,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 8524,
									"end": 8527,
									"name": "DUP5",
									"source": 1
								},
								{
									"begin": 8517,
									"end": 8522,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 8514,
									"end": 8528,
									"name": "GT",
									"source": 1
								},
								{
									"begin": 8511,
									"end": 8551,
									"name": "ISZERO",
									"source": 1
								},
								{
									"begin": 8511,
									"end": 8551,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "231"
								},
								{
									"begin": 8511,
									"end": 8551,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": 8531,
									"end": 8549,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "232"
								},
								{
									"begin": 8531,
									"end": 8549,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "117"
								},
								{
									"begin": 8531,
									"end": 8549,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 8531,
									"end": 8549,
									"name": "tag",
									"source": 1,
									"value": "232"
								},
								{
									"begin": 8531,
									"end": 8549,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 8511,
									"end": 8551,
									"name": "tag",
									"source": 1,
									"value": "231"
								},
								{
									"begin": 8511,
									"end": 8551,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 8564,
									"end": 8569,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 8564,
									"end": 8569,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "223"
								},
								{
									"begin": 8564,
									"end": 8569,
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 8302,
									"end": 8579,
									"name": "tag",
									"source": 1,
									"value": "226"
								},
								{
									"begin": 8302,
									"end": 8579,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 8302,
									"end": 8579,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 8688,
									"end": 8690,
									"name": "PUSH",
									"source": 1,
									"value": "20"
								},
								{
									"begin": 8678,
									"end": 8686,
									"name": "DUP4",
									"source": 1
								},
								{
									"begin": 8675,
									"end": 8691,
									"name": "LT",
									"source": 1
								},
								{
									"begin": 8669,
									"end": 8672,
									"name": "PUSH",
									"source": 1,
									"value": "133"
								},
								{
									"begin": 8663,
									"end": 8667,
									"name": "DUP4",
									"source": 1
								},
								{
									"begin": 8660,
									"end": 8673,
									"name": "LT",
									"source": 1
								},
								{
									"begin": 8656,
									"end": 8692,
									"name": "AND",
									"source": 1
								},
								{
									"begin": 8638,
									"end": 8640,
									"name": "PUSH",
									"source": 1,
									"value": "4E"
								},
								{
									"begin": 8628,
									"end": 8636,
									"name": "DUP5",
									"source": 1
								},
								{
									"begin": 8625,
									"end": 8641,
									"name": "LT",
									"source": 1
								},
								{
									"begin": 8620,
									"end": 8622,
									"name": "PUSH",
									"source": 1,
									"value": "B"
								},
								{
									"begin": 8614,
									"end": 8618,
									"name": "DUP5",
									"source": 1
								},
								{
									"begin": 8611,
									"end": 8623,
									"name": "LT",
									"source": 1
								},
								{
									"begin": 8607,
									"end": 8642,
									"name": "AND",
									"source": 1
								},
								{
									"begin": 8591,
									"end": 8702,
									"name": "OR",
									"source": 1
								},
								{
									"begin": 8588,
									"end": 8834,
									"name": "ISZERO",
									"source": 1
								},
								{
									"begin": 8588,
									"end": 8834,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "233"
								},
								{
									"begin": 8588,
									"end": 8834,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": 8744,
									"end": 8752,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 8738,
									"end": 8742,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 8734,
									"end": 8753,
									"name": "EXP",
									"source": 1
								},
								{
									"begin": 8725,
									"end": 8753,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 8725,
									"end": 8753,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 8779,
									"end": 8782,
									"name": "DUP4",
									"source": 1
								},
								{
									"begin": 8772,
									"end": 8777,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 8769,
									"end": 8783,
									"name": "GT",
									"source": 1
								},
								{
									"begin": 8766,
									"end": 8806,
									"name": "ISZERO",
									"source": 1
								},
								{
									"begin": 8766,
									"end": 8806,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "234"
								},
								{
									"begin": 8766,
									"end": 8806,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": 8786,
									"end": 8804,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "235"
								},
								{
									"begin": 8786,
									"end": 8804,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "117"
								},
								{
									"begin": 8786,
									"end": 8804,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 8786,
									"end": 8804,
									"name": "tag",
									"source": 1,
									"value": "235"
								},
								{
									"begin": 8786,
									"end": 8804,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 8766,
									"end": 8806,
									"name": "tag",
									"source": 1,
									"value": "234"
								},
								{
									"begin": 8766,
									"end": 8806,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 8819,
									"end": 8824,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "223"
								},
								{
									"begin": 8819,
									"end": 8824,
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 8588,
									"end": 8834,
									"name": "tag",
									"source": 1,
									"value": "233"
								},
								{
									"begin": 8588,
									"end": 8834,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 8859,
									"end": 8901,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "236"
								},
								{
									"begin": 8897,
									"end": 8900,
									"name": "DUP5",
									"source": 1
								},
								{
									"begin": 8887,
									"end": 8895,
									"name": "DUP5",
									"source": 1
								},
								{
									"begin": 8881,
									"end": 8885,
									"name": "DUP5",
									"source": 1
								},
								{
									"begin": 8878,
									"end": 8879,
									"name": "PUSH",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 8859,
									"end": 8901,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "119"
								},
								{
									"begin": 8859,
									"end": 8901,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 8859,
									"end": 8901,
									"name": "tag",
									"source": 1,
									"value": "236"
								},
								{
									"begin": 8859,
									"end": 8901,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 8844,
									"end": 8901,
									"name": "SWAP3",
									"source": 1
								},
								{
									"begin": 8844,
									"end": 8901,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 8844,
									"end": 8901,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 8844,
									"end": 8901,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 8933,
									"end": 8937,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 8928,
									"end": 8931,
									"name": "DUP5",
									"source": 1
								},
								{
									"begin": 8924,
									"end": 8938,
									"name": "DIV",
									"source": 1
								},
								{
									"begin": 8917,
									"end": 8922,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 8914,
									"end": 8939,
									"name": "GT",
									"source": 1
								},
								{
									"begin": 8911,
									"end": 8962,
									"name": "ISZERO",
									"source": 1
								},
								{
									"begin": 8911,
									"end": 8962,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "237"
								},
								{
									"begin": 8911,
									"end": 8962,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": 8942,
									"end": 8960,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "238"
								},
								{
									"begin": 8942,
									"end": 8960,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "117"
								},
								{
									"begin": 8942,
									"end": 8960,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 8942,
									"end": 8960,
									"name": "tag",
									"source": 1,
									"value": "238"
								},
								{
									"begin": 8942,
									"end": 8960,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 8911,
									"end": 8962,
									"name": "tag",
									"source": 1,
									"value": "237"
								},
								{
									"begin": 8911,
									"end": 8962,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 8991,
									"end": 8995,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 8984,
									"end": 8989,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 8980,
									"end": 8996,
									"name": "MUL",
									"source": 1
								},
								{
									"begin": 8971,
									"end": 8996,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 8971,
									"end": 8996,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 7929,
									"end": 9002,
									"name": "tag",
									"source": 1,
									"value": "223"
								},
								{
									"begin": 7929,
									"end": 9002,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 7929,
									"end": 9002,
									"name": "SWAP4",
									"source": 1
								},
								{
									"begin": 7929,
									"end": 9002,
									"name": "SWAP3",
									"source": 1
								},
								{
									"begin": 7929,
									"end": 9002,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 7929,
									"end": 9002,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 7929,
									"end": 9002,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 7929,
									"end": 9002,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 9008,
									"end": 9094,
									"name": "tag",
									"source": 1,
									"value": "121"
								},
								{
									"begin": 9008,
									"end": 9094,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 9043,
									"end": 9050,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 9083,
									"end": 9087,
									"name": "PUSH",
									"source": 1,
									"value": "FF"
								},
								{
									"begin": 9076,
									"end": 9081,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 9072,
									"end": 9088,
									"name": "AND",
									"source": 1
								},
								{
									"begin": 9061,
									"end": 9088,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 9061,
									"end": 9088,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 9008,
									"end": 9094,
									"name": "SWAP2",
									"source": 1
								},
								{
									"begin": 9008,
									"end": 9094,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 9008,
									"end": 9094,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 9008,
									"end": 9094,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 9100,
									"end": 9381,
									"name": "tag",
									"source": 1,
									"value": "33"
								},
								{
									"begin": 9100,
									"end": 9381,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 9158,
									"end": 9163,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 9182,
									"end": 9205,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "241"
								},
								{
									"begin": 9200,
									"end": 9204,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 9182,
									"end": 9205,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "104"
								},
								{
									"begin": 9182,
									"end": 9205,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 9182,
									"end": 9205,
									"name": "tag",
									"source": 1,
									"value": "241"
								},
								{
									"begin": 9182,
									"end": 9205,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 9174,
									"end": 9205,
									"name": "SWAP2",
									"source": 1
								},
								{
									"begin": 9174,
									"end": 9205,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 9226,
									"end": 9251,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "242"
								},
								{
									"begin": 9242,
									"end": 9250,
									"name": "DUP4",
									"source": 1
								},
								{
									"begin": 9226,
									"end": 9251,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "121"
								},
								{
									"begin": 9226,
									"end": 9251,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 9226,
									"end": 9251,
									"name": "tag",
									"source": 1,
									"value": "242"
								},
								{
									"begin": 9226,
									"end": 9251,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 9214,
									"end": 9251,
									"name": "SWAP3",
									"source": 1
								},
								{
									"begin": 9214,
									"end": 9251,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 9270,
									"end": 9374,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "243"
								},
								{
									"begin": 9307,
									"end": 9373,
									"name": "PUSH",
									"source": 1,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 9297,
									"end": 9305,
									"name": "DUP5",
									"source": 1
								},
								{
									"begin": 9291,
									"end": 9295,
									"name": "DUP5",
									"source": 1
								},
								{
									"begin": 9270,
									"end": 9374,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "120"
								},
								{
									"begin": 9270,
									"end": 9374,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 9270,
									"end": 9374,
									"name": "tag",
									"source": 1,
									"value": "243"
								},
								{
									"begin": 9270,
									"end": 9374,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 9261,
									"end": 9374,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 9261,
									"end": 9374,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 9100,
									"end": 9381,
									"name": "SWAP3",
									"source": 1
								},
								{
									"begin": 9100,
									"end": 9381,
									"name": "SWAP2",
									"source": 1
								},
								{
									"begin": 9100,
									"end": 9381,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 9100,
									"end": 9381,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 9100,
									"end": 9381,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 9387,
									"end": 9797,
									"name": "tag",
									"source": 1,
									"value": "35"
								},
								{
									"begin": 9387,
									"end": 9797,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 9427,
									"end": 9434,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 9450,
									"end": 9470,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "245"
								},
								{
									"begin": 9468,
									"end": 9469,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 9450,
									"end": 9470,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "104"
								},
								{
									"begin": 9450,
									"end": 9470,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 9450,
									"end": 9470,
									"name": "tag",
									"source": 1,
									"value": "245"
								},
								{
									"begin": 9450,
									"end": 9470,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 9445,
									"end": 9470,
									"name": "SWAP2",
									"source": 1
								},
								{
									"begin": 9445,
									"end": 9470,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 9484,
									"end": 9504,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "246"
								},
								{
									"begin": 9502,
									"end": 9503,
									"name": "DUP4",
									"source": 1
								},
								{
									"begin": 9484,
									"end": 9504,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "104"
								},
								{
									"begin": 9484,
									"end": 9504,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 9484,
									"end": 9504,
									"name": "tag",
									"source": 1,
									"value": "246"
								},
								{
									"begin": 9484,
									"end": 9504,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 9479,
									"end": 9504,
									"name": "SWAP3",
									"source": 1
								},
								{
									"begin": 9479,
									"end": 9504,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 9539,
									"end": 9540,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 9536,
									"end": 9537,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 9532,
									"end": 9541,
									"name": "MUL",
									"source": 1
								},
								{
									"begin": 9561,
									"end": 9591,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "247"
								},
								{
									"begin": 9579,
									"end": 9590,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 9561,
									"end": 9591,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "104"
								},
								{
									"begin": 9561,
									"end": 9591,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 9561,
									"end": 9591,
									"name": "tag",
									"source": 1,
									"value": "247"
								},
								{
									"begin": 9561,
									"end": 9591,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 9550,
									"end": 9591,
									"name": "SWAP2",
									"source": 1
								},
								{
									"begin": 9550,
									"end": 9591,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 9740,
									"end": 9741,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 9731,
									"end": 9738,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 9727,
									"end": 9742,
									"name": "DIV",
									"source": 1
								},
								{
									"begin": 9724,
									"end": 9725,
									"name": "DUP5",
									"source": 1
								},
								{
									"begin": 9721,
									"end": 9743,
									"name": "EQ",
									"source": 1
								},
								{
									"begin": 9701,
									"end": 9702,
									"name": "DUP4",
									"source": 1
								},
								{
									"begin": 9694,
									"end": 9703,
									"name": "ISZERO",
									"source": 1
								},
								{
									"begin": 9674,
									"end": 9757,
									"name": "OR",
									"source": 1
								},
								{
									"begin": 9651,
									"end": 9790,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "248"
								},
								{
									"begin": 9651,
									"end": 9790,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": 9770,
									"end": 9788,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "249"
								},
								{
									"begin": 9770,
									"end": 9788,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "117"
								},
								{
									"begin": 9770,
									"end": 9788,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 9770,
									"end": 9788,
									"name": "tag",
									"source": 1,
									"value": "249"
								},
								{
									"begin": 9770,
									"end": 9788,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 9651,
									"end": 9790,
									"name": "tag",
									"source": 1,
									"value": "248"
								},
								{
									"begin": 9651,
									"end": 9790,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 9435,
									"end": 9797,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 9387,
									"end": 9797,
									"name": "SWAP3",
									"source": 1
								},
								{
									"begin": 9387,
									"end": 9797,
									"name": "SWAP2",
									"source": 1
								},
								{
									"begin": 9387,
									"end": 9797,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 9387,
									"end": 9797,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 9387,
									"end": 9797,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 9803,
									"end": 9880,
									"name": "tag",
									"source": 1,
									"value": "122"
								},
								{
									"begin": 9803,
									"end": 9880,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 9840,
									"end": 9847,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 9869,
									"end": 9874,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 9858,
									"end": 9874,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 9858,
									"end": 9874,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 9803,
									"end": 9880,
									"name": "SWAP2",
									"source": 1
								},
								{
									"begin": 9803,
									"end": 9880,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 9803,
									"end": 9880,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 9803,
									"end": 9880,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 9886,
									"end": 10004,
									"name": "tag",
									"source": 1,
									"value": "123"
								},
								{
									"begin": 9886,
									"end": 10004,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 9973,
									"end": 9997,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "252"
								},
								{
									"begin": 9991,
									"end": 9996,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 9973,
									"end": 9997,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "122"
								},
								{
									"begin": 9973,
									"end": 9997,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 9973,
									"end": 9997,
									"name": "tag",
									"source": 1,
									"value": "252"
								},
								{
									"begin": 9973,
									"end": 9997,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 9968,
									"end": 9971,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 9961,
									"end": 9998,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 9886,
									"end": 10004,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 9886,
									"end": 10004,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 9886,
									"end": 10004,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 10010,
									"end": 10128,
									"name": "tag",
									"source": 1,
									"value": "124"
								},
								{
									"begin": 10010,
									"end": 10128,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 10097,
									"end": 10121,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "254"
								},
								{
									"begin": 10115,
									"end": 10120,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 10097,
									"end": 10121,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "104"
								},
								{
									"begin": 10097,
									"end": 10121,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 10097,
									"end": 10121,
									"name": "tag",
									"source": 1,
									"value": "254"
								},
								{
									"begin": 10097,
									"end": 10121,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 10092,
									"end": 10095,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 10085,
									"end": 10122,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 10010,
									"end": 10128,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 10010,
									"end": 10128,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 10010,
									"end": 10128,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 10134,
									"end": 10798,
									"name": "tag",
									"source": 1,
									"value": "49"
								},
								{
									"begin": 10134,
									"end": 10798,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 10339,
									"end": 10343,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 10377,
									"end": 10380,
									"name": "PUSH",
									"source": 1,
									"value": "A0"
								},
								{
									"begin": 10366,
									"end": 10375,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 10362,
									"end": 10381,
									"name": "ADD",
									"source": 1
								},
								{
									"begin": 10354,
									"end": 10381,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 10354,
									"end": 10381,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 10391,
									"end": 10462,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "256"
								},
								{
									"begin": 10459,
									"end": 10460,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 10448,
									"end": 10457,
									"name": "DUP4",
									"source": 1
								},
								{
									"begin": 10444,
									"end": 10461,
									"name": "ADD",
									"source": 1
								},
								{
									"begin": 10435,
									"end": 10441,
									"name": "DUP9",
									"source": 1
								},
								{
									"begin": 10391,
									"end": 10462,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "123"
								},
								{
									"begin": 10391,
									"end": 10462,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 10391,
									"end": 10462,
									"name": "tag",
									"source": 1,
									"value": "256"
								},
								{
									"begin": 10391,
									"end": 10462,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 10472,
									"end": 10544,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "257"
								},
								{
									"begin": 10540,
									"end": 10542,
									"name": "PUSH",
									"source": 1,
									"value": "20"
								},
								{
									"begin": 10529,
									"end": 10538,
									"name": "DUP4",
									"source": 1
								},
								{
									"begin": 10525,
									"end": 10543,
									"name": "ADD",
									"source": 1
								},
								{
									"begin": 10516,
									"end": 10522,
									"name": "DUP8",
									"source": 1
								},
								{
									"begin": 10472,
									"end": 10544,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "123"
								},
								{
									"begin": 10472,
									"end": 10544,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 10472,
									"end": 10544,
									"name": "tag",
									"source": 1,
									"value": "257"
								},
								{
									"begin": 10472,
									"end": 10544,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 10554,
									"end": 10626,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "258"
								},
								{
									"begin": 10622,
									"end": 10624,
									"name": "PUSH",
									"source": 1,
									"value": "40"
								},
								{
									"begin": 10611,
									"end": 10620,
									"name": "DUP4",
									"source": 1
								},
								{
									"begin": 10607,
									"end": 10625,
									"name": "ADD",
									"source": 1
								},
								{
									"begin": 10598,
									"end": 10604,
									"name": "DUP7",
									"source": 1
								},
								{
									"begin": 10554,
									"end": 10626,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "123"
								},
								{
									"begin": 10554,
									"end": 10626,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 10554,
									"end": 10626,
									"name": "tag",
									"source": 1,
									"value": "258"
								},
								{
									"begin": 10554,
									"end": 10626,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 10636,
									"end": 10708,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "259"
								},
								{
									"begin": 10704,
									"end": 10706,
									"name": "PUSH",
									"source": 1,
									"value": "60"
								},
								{
									"begin": 10693,
									"end": 10702,
									"name": "DUP4",
									"source": 1
								},
								{
									"begin": 10689,
									"end": 10707,
									"name": "ADD",
									"source": 1
								},
								{
									"begin": 10680,
									"end": 10686,
									"name": "DUP6",
									"source": 1
								},
								{
									"begin": 10636,
									"end": 10708,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "124"
								},
								{
									"begin": 10636,
									"end": 10708,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 10636,
									"end": 10708,
									"name": "tag",
									"source": 1,
									"value": "259"
								},
								{
									"begin": 10636,
									"end": 10708,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 10718,
									"end": 10791,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "260"
								},
								{
									"begin": 10786,
									"end": 10789,
									"name": "PUSH",
									"source": 1,
									"value": "80"
								},
								{
									"begin": 10775,
									"end": 10784,
									"name": "DUP4",
									"source": 1
								},
								{
									"begin": 10771,
									"end": 10790,
									"name": "ADD",
									"source": 1
								},
								{
									"begin": 10762,
									"end": 10768,
									"name": "DUP5",
									"source": 1
								},
								{
									"begin": 10718,
									"end": 10791,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "116"
								},
								{
									"begin": 10718,
									"end": 10791,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 10718,
									"end": 10791,
									"name": "tag",
									"source": 1,
									"value": "260"
								},
								{
									"begin": 10718,
									"end": 10791,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 10134,
									"end": 10798,
									"name": "SWAP7",
									"source": 1
								},
								{
									"begin": 10134,
									"end": 10798,
									"name": "SWAP6",
									"source": 1
								},
								{
									"begin": 10134,
									"end": 10798,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 10134,
									"end": 10798,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 10134,
									"end": 10798,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 10134,
									"end": 10798,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 10134,
									"end": 10798,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 10134,
									"end": 10798,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 10134,
									"end": 10798,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 10804,
									"end": 10973,
									"name": "tag",
									"source": 1,
									"value": "125"
								},
								{
									"begin": 10804,
									"end": 10973,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 10888,
									"end": 10899,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 10922,
									"end": 10928,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 10917,
									"end": 10920,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 10910,
									"end": 10929,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 10962,
									"end": 10966,
									"name": "PUSH",
									"source": 1,
									"value": "20"
								},
								{
									"begin": 10957,
									"end": 10960,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 10953,
									"end": 10967,
									"name": "ADD",
									"source": 1
								},
								{
									"begin": 10938,
									"end": 10967,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 10938,
									"end": 10967,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 10804,
									"end": 10973,
									"name": "SWAP3",
									"source": 1
								},
								{
									"begin": 10804,
									"end": 10973,
									"name": "SWAP2",
									"source": 1
								},
								{
									"begin": 10804,
									"end": 10973,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 10804,
									"end": 10973,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 10804,
									"end": 10973,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 10979,
									"end": 11225,
									"name": "tag",
									"source": 1,
									"value": "126"
								},
								{
									"begin": 10979,
									"end": 11225,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 11060,
									"end": 11061,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 11070,
									"end": 11183,
									"name": "tag",
									"source": 1,
									"value": "263"
								},
								{
									"begin": 11070,
									"end": 11183,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 11084,
									"end": 11090,
									"name": "DUP4",
									"source": 1
								},
								{
									"begin": 11081,
									"end": 11082,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 11078,
									"end": 11091,
									"name": "LT",
									"source": 1
								},
								{
									"begin": 11070,
									"end": 11183,
									"name": "ISZERO",
									"source": 1
								},
								{
									"begin": 11070,
									"end": 11183,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "265"
								},
								{
									"begin": 11070,
									"end": 11183,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": 11169,
									"end": 11170,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 11164,
									"end": 11167,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 11160,
									"end": 11171,
									"name": "ADD",
									"source": 1
								},
								{
									"begin": 11154,
									"end": 11172,
									"name": "MLOAD",
									"source": 1
								},
								{
									"begin": 11150,
									"end": 11151,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 11145,
									"end": 11148,
									"name": "DUP5",
									"source": 1
								},
								{
									"begin": 11141,
									"end": 11152,
									"name": "ADD",
									"source": 1
								},
								{
									"begin": 11134,
									"end": 11173,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 11106,
									"end": 11108,
									"name": "PUSH",
									"source": 1,
									"value": "20"
								},
								{
									"begin": 11103,
									"end": 11104,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 11099,
									"end": 11109,
									"name": "ADD",
									"source": 1
								},
								{
									"begin": 11094,
									"end": 11109,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 11094,
									"end": 11109,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 11070,
									"end": 11183,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "263"
								},
								{
									"begin": 11070,
									"end": 11183,
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 11070,
									"end": 11183,
									"name": "tag",
									"source": 1,
									"value": "265"
								},
								{
									"begin": 11070,
									"end": 11183,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 11217,
									"end": 11218,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 11208,
									"end": 11214,
									"name": "DUP5",
									"source": 1
								},
								{
									"begin": 11203,
									"end": 11206,
									"name": "DUP5",
									"source": 1
								},
								{
									"begin": 11199,
									"end": 11215,
									"name": "ADD",
									"source": 1
								},
								{
									"begin": 11192,
									"end": 11219,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 11041,
									"end": 11225,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 10979,
									"end": 11225,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 10979,
									"end": 11225,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 10979,
									"end": 11225,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 10979,
									"end": 11225,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 11231,
									"end": 11333,
									"name": "tag",
									"source": 1,
									"value": "127"
								},
								{
									"begin": 11231,
									"end": 11333,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 11272,
									"end": 11278,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 11323,
									"end": 11325,
									"name": "PUSH",
									"source": 1,
									"value": "1F"
								},
								{
									"begin": 11319,
									"end": 11326,
									"name": "NOT",
									"source": 1
								},
								{
									"begin": 11314,
									"end": 11316,
									"name": "PUSH",
									"source": 1,
									"value": "1F"
								},
								{
									"begin": 11307,
									"end": 11312,
									"name": "DUP4",
									"source": 1
								},
								{
									"begin": 11303,
									"end": 11317,
									"name": "ADD",
									"source": 1
								},
								{
									"begin": 11299,
									"end": 11327,
									"name": "AND",
									"source": 1
								},
								{
									"begin": 11289,
									"end": 11327,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 11289,
									"end": 11327,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 11231,
									"end": 11333,
									"name": "SWAP2",
									"source": 1
								},
								{
									"begin": 11231,
									"end": 11333,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 11231,
									"end": 11333,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 11231,
									"end": 11333,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 11339,
									"end": 11716,
									"name": "tag",
									"source": 1,
									"value": "128"
								},
								{
									"begin": 11339,
									"end": 11716,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 11427,
									"end": 11430,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 11455,
									"end": 11494,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "268"
								},
								{
									"begin": 11488,
									"end": 11493,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 11455,
									"end": 11494,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "96"
								},
								{
									"begin": 11455,
									"end": 11494,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 11455,
									"end": 11494,
									"name": "tag",
									"source": 1,
									"value": "268"
								},
								{
									"begin": 11455,
									"end": 11494,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 11510,
									"end": 11581,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "269"
								},
								{
									"begin": 11574,
									"end": 11580,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 11569,
									"end": 11572,
									"name": "DUP6",
									"source": 1
								},
								{
									"begin": 11510,
									"end": 11581,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "125"
								},
								{
									"begin": 11510,
									"end": 11581,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 11510,
									"end": 11581,
									"name": "tag",
									"source": 1,
									"value": "269"
								},
								{
									"begin": 11510,
									"end": 11581,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 11503,
									"end": 11581,
									"name": "SWAP4",
									"source": 1
								},
								{
									"begin": 11503,
									"end": 11581,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 11590,
									"end": 11655,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "270"
								},
								{
									"begin": 11648,
									"end": 11654,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 11643,
									"end": 11646,
									"name": "DUP6",
									"source": 1
								},
								{
									"begin": 11636,
									"end": 11640,
									"name": "PUSH",
									"source": 1,
									"value": "20"
								},
								{
									"begin": 11629,
									"end": 11634,
									"name": "DUP7",
									"source": 1
								},
								{
									"begin": 11625,
									"end": 11641,
									"name": "ADD",
									"source": 1
								},
								{
									"begin": 11590,
									"end": 11655,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "126"
								},
								{
									"begin": 11590,
									"end": 11655,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 11590,
									"end": 11655,
									"name": "tag",
									"source": 1,
									"value": "270"
								},
								{
									"begin": 11590,
									"end": 11655,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 11680,
									"end": 11709,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "271"
								},
								{
									"begin": 11702,
									"end": 11708,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 11680,
									"end": 11709,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "127"
								},
								{
									"begin": 11680,
									"end": 11709,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 11680,
									"end": 11709,
									"name": "tag",
									"source": 1,
									"value": "271"
								},
								{
									"begin": 11680,
									"end": 11709,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 11675,
									"end": 11678,
									"name": "DUP5",
									"source": 1
								},
								{
									"begin": 11671,
									"end": 11710,
									"name": "ADD",
									"source": 1
								},
								{
									"begin": 11664,
									"end": 11710,
									"name": "SWAP2",
									"source": 1
								},
								{
									"begin": 11664,
									"end": 11710,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 11431,
									"end": 11716,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 11339,
									"end": 11716,
									"name": "SWAP3",
									"source": 1
								},
								{
									"begin": 11339,
									"end": 11716,
									"name": "SWAP2",
									"source": 1
								},
								{
									"begin": 11339,
									"end": 11716,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 11339,
									"end": 11716,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 11339,
									"end": 11716,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 11722,
									"end": 12035,
									"name": "tag",
									"source": 1,
									"value": "59"
								},
								{
									"begin": 11722,
									"end": 12035,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 11835,
									"end": 11839,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 11873,
									"end": 11875,
									"name": "PUSH",
									"source": 1,
									"value": "20"
								},
								{
									"begin": 11862,
									"end": 11871,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 11858,
									"end": 11876,
									"name": "ADD",
									"source": 1
								},
								{
									"begin": 11850,
									"end": 11876,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 11850,
									"end": 11876,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 11922,
									"end": 11931,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 11916,
									"end": 11920,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 11912,
									"end": 11932,
									"name": "SUB",
									"source": 1
								},
								{
									"begin": 11908,
									"end": 11909,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 11897,
									"end": 11906,
									"name": "DUP4",
									"source": 1
								},
								{
									"begin": 11893,
									"end": 11910,
									"name": "ADD",
									"source": 1
								},
								{
									"begin": 11886,
									"end": 11933,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 11950,
									"end": 12028,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "273"
								},
								{
									"begin": 12023,
									"end": 12027,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 12014,
									"end": 12020,
									"name": "DUP5",
									"source": 1
								},
								{
									"begin": 11950,
									"end": 12028,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "128"
								},
								{
									"begin": 11950,
									"end": 12028,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 11950,
									"end": 12028,
									"name": "tag",
									"source": 1,
									"value": "273"
								},
								{
									"begin": 11950,
									"end": 12028,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 11942,
									"end": 12028,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 11942,
									"end": 12028,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 11722,
									"end": 12035,
									"name": "SWAP3",
									"source": 1
								},
								{
									"begin": 11722,
									"end": 12035,
									"name": "SWAP2",
									"source": 1
								},
								{
									"begin": 11722,
									"end": 12035,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 11722,
									"end": 12035,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 11722,
									"end": 12035,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 12041,
									"end": 12139,
									"name": "tag",
									"source": 1,
									"value": "129"
								},
								{
									"begin": 12041,
									"end": 12139,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 12092,
									"end": 12098,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 12126,
									"end": 12131,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 12120,
									"end": 12132,
									"name": "MLOAD",
									"source": 1
								},
								{
									"begin": 12110,
									"end": 12132,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 12110,
									"end": 12132,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 12041,
									"end": 12139,
									"name": "SWAP2",
									"source": 1
								},
								{
									"begin": 12041,
									"end": 12139,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 12041,
									"end": 12139,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 12041,
									"end": 12139,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 12145,
									"end": 12261,
									"name": "tag",
									"source": 1,
									"value": "130"
								},
								{
									"begin": 12145,
									"end": 12261,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 12196,
									"end": 12200,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 12219,
									"end": 12222,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 12211,
									"end": 12222,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 12211,
									"end": 12222,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 12249,
									"end": 12253,
									"name": "PUSH",
									"source": 1,
									"value": "20"
								},
								{
									"begin": 12244,
									"end": 12247,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 12240,
									"end": 12254,
									"name": "ADD",
									"source": 1
								},
								{
									"begin": 12232,
									"end": 12254,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 12232,
									"end": 12254,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 12145,
									"end": 12261,
									"name": "SWAP2",
									"source": 1
								},
								{
									"begin": 12145,
									"end": 12261,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 12145,
									"end": 12261,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 12145,
									"end": 12261,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 12267,
									"end": 12421,
									"name": "tag",
									"source": 1,
									"value": "131"
								},
								{
									"begin": 12267,
									"end": 12421,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 12310,
									"end": 12321,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 12346,
									"end": 12375,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "277"
								},
								{
									"begin": 12370,
									"end": 12373,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 12364,
									"end": 12374,
									"name": "MLOAD",
									"source": 1
								},
								{
									"begin": 12346,
									"end": 12375,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "122"
								},
								{
									"begin": 12346,
									"end": 12375,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 12346,
									"end": 12375,
									"name": "tag",
									"source": 1,
									"value": "277"
								},
								{
									"begin": 12346,
									"end": 12375,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 12409,
									"end": 12414,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 12385,
									"end": 12414,
									"name": "SWAP2",
									"source": 1
								},
								{
									"begin": 12385,
									"end": 12414,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 12322,
									"end": 12421,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 12267,
									"end": 12421,
									"name": "SWAP2",
									"source": 1
								},
								{
									"begin": 12267,
									"end": 12421,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 12267,
									"end": 12421,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 12267,
									"end": 12421,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 12427,
									"end": 13021,
									"name": "tag",
									"source": 1,
									"value": "61"
								},
								{
									"begin": 12427,
									"end": 13021,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 12511,
									"end": 12516,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 12542,
									"end": 12580,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "279"
								},
								{
									"begin": 12574,
									"end": 12579,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 12542,
									"end": 12580,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "129"
								},
								{
									"begin": 12542,
									"end": 12580,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 12542,
									"end": 12580,
									"name": "tag",
									"source": 1,
									"value": "279"
								},
								{
									"begin": 12542,
									"end": 12580,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 12605,
									"end": 12610,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 12632,
									"end": 12672,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "280"
								},
								{
									"begin": 12666,
									"end": 12671,
									"name": "DUP5",
									"source": 1
								},
								{
									"begin": 12632,
									"end": 12672,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "130"
								},
								{
									"begin": 12632,
									"end": 12672,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 12632,
									"end": 12672,
									"name": "tag",
									"source": 1,
									"value": "280"
								},
								{
									"begin": 12632,
									"end": 12672,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 12620,
									"end": 12672,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 12620,
									"end": 12672,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 12691,
									"end": 12726,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "281"
								},
								{
									"begin": 12717,
									"end": 12725,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 12691,
									"end": 12726,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "131"
								},
								{
									"begin": 12691,
									"end": 12726,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 12691,
									"end": 12726,
									"name": "tag",
									"source": 1,
									"value": "281"
								},
								{
									"begin": 12691,
									"end": 12726,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 12682,
									"end": 12726,
									"name": "SWAP3",
									"source": 1
								},
								{
									"begin": 12682,
									"end": 12726,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 12750,
									"end": 12752,
									"name": "PUSH",
									"source": 1,
									"value": "20"
								},
								{
									"begin": 12742,
									"end": 12748,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 12739,
									"end": 12753,
									"name": "LT",
									"source": 1
								},
								{
									"begin": 12736,
									"end": 13014,
									"name": "ISZERO",
									"source": 1
								},
								{
									"begin": 12736,
									"end": 13014,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "282"
								},
								{
									"begin": 12736,
									"end": 13014,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": 12821,
									"end": 12990,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "283"
								},
								{
									"begin": 12906,
									"end": 12972,
									"name": "PUSH",
									"source": 1,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 12876,
									"end": 12882,
									"name": "DUP4",
									"source": 1
								},
								{
									"begin": 12872,
									"end": 12874,
									"name": "PUSH",
									"source": 1,
									"value": "20"
								},
								{
									"begin": 12868,
									"end": 12883,
									"name": "SUB",
									"source": 1
								},
								{
									"begin": 12865,
									"end": 12866,
									"name": "PUSH",
									"source": 1,
									"value": "8"
								},
								{
									"begin": 12861,
									"end": 12884,
									"name": "MUL",
									"source": 1
								},
								{
									"begin": 12821,
									"end": 12990,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "102"
								},
								{
									"begin": 12821,
									"end": 12990,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 12821,
									"end": 12990,
									"name": "tag",
									"source": 1,
									"value": "283"
								},
								{
									"begin": 12821,
									"end": 12990,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 12798,
									"end": 12803,
									"name": "DUP4",
									"source": 1
								},
								{
									"begin": 12777,
									"end": 13004,
									"name": "AND",
									"source": 1
								},
								{
									"begin": 12768,
									"end": 13004,
									"name": "SWAP3",
									"source": 1
								},
								{
									"begin": 12768,
									"end": 13004,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 12736,
									"end": 13014,
									"name": "tag",
									"source": 1,
									"value": "282"
								},
								{
									"begin": 12736,
									"end": 13014,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 12517,
									"end": 13021,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 12517,
									"end": 13021,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 12427,
									"end": 13021,
									"name": "SWAP2",
									"source": 1
								},
								{
									"begin": 12427,
									"end": 13021,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 12427,
									"end": 13021,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 12427,
									"end": 13021,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 13027,
									"end": 13218,
									"name": "tag",
									"source": 1,
									"value": "79"
								},
								{
									"begin": 13027,
									"end": 13218,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 13067,
									"end": 13070,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 13086,
									"end": 13106,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "285"
								},
								{
									"begin": 13104,
									"end": 13105,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 13086,
									"end": 13106,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "104"
								},
								{
									"begin": 13086,
									"end": 13106,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 13086,
									"end": 13106,
									"name": "tag",
									"source": 1,
									"value": "285"
								},
								{
									"begin": 13086,
									"end": 13106,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 13081,
									"end": 13106,
									"name": "SWAP2",
									"source": 1
								},
								{
									"begin": 13081,
									"end": 13106,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 13120,
									"end": 13140,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "286"
								},
								{
									"begin": 13138,
									"end": 13139,
									"name": "DUP4",
									"source": 1
								},
								{
									"begin": 13120,
									"end": 13140,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "104"
								},
								{
									"begin": 13120,
									"end": 13140,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 13120,
									"end": 13140,
									"name": "tag",
									"source": 1,
									"value": "286"
								},
								{
									"begin": 13120,
									"end": 13140,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 13115,
									"end": 13140,
									"name": "SWAP3",
									"source": 1
								},
								{
									"begin": 13115,
									"end": 13140,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 13163,
									"end": 13164,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 13160,
									"end": 13161,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 13156,
									"end": 13165,
									"name": "ADD",
									"source": 1
								},
								{
									"begin": 13149,
									"end": 13165,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 13149,
									"end": 13165,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 13184,
									"end": 13187,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 13181,
									"end": 13182,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 13178,
									"end": 13188,
									"name": "GT",
									"source": 1
								},
								{
									"begin": 13175,
									"end": 13211,
									"name": "ISZERO",
									"source": 1
								},
								{
									"begin": 13175,
									"end": 13211,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "287"
								},
								{
									"begin": 13175,
									"end": 13211,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": 13191,
									"end": 13209,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "288"
								},
								{
									"begin": 13191,
									"end": 13209,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "117"
								},
								{
									"begin": 13191,
									"end": 13209,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 13191,
									"end": 13209,
									"name": "tag",
									"source": 1,
									"value": "288"
								},
								{
									"begin": 13191,
									"end": 13209,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 13175,
									"end": 13211,
									"name": "tag",
									"source": 1,
									"value": "287"
								},
								{
									"begin": 13175,
									"end": 13211,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 13027,
									"end": 13218,
									"name": "SWAP3",
									"source": 1
								},
								{
									"begin": 13027,
									"end": 13218,
									"name": "SWAP2",
									"source": 1
								},
								{
									"begin": 13027,
									"end": 13218,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 13027,
									"end": 13218,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 13027,
									"end": 13218,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 13224,
									"end": 13666,
									"name": "tag",
									"source": 1,
									"value": "83"
								},
								{
									"begin": 13224,
									"end": 13666,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 13373,
									"end": 13377,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 13411,
									"end": 13413,
									"name": "PUSH",
									"source": 1,
									"value": "60"
								},
								{
									"begin": 13400,
									"end": 13409,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 13396,
									"end": 13414,
									"name": "ADD",
									"source": 1
								},
								{
									"begin": 13388,
									"end": 13414,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 13388,
									"end": 13414,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 13424,
									"end": 13495,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "290"
								},
								{
									"begin": 13492,
									"end": 13493,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 13481,
									"end": 13490,
									"name": "DUP4",
									"source": 1
								},
								{
									"begin": 13477,
									"end": 13494,
									"name": "ADD",
									"source": 1
								},
								{
									"begin": 13468,
									"end": 13474,
									"name": "DUP7",
									"source": 1
								},
								{
									"begin": 13424,
									"end": 13495,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "116"
								},
								{
									"begin": 13424,
									"end": 13495,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 13424,
									"end": 13495,
									"name": "tag",
									"source": 1,
									"value": "290"
								},
								{
									"begin": 13424,
									"end": 13495,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 13505,
									"end": 13577,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "291"
								},
								{
									"begin": 13573,
									"end": 13575,
									"name": "PUSH",
									"source": 1,
									"value": "20"
								},
								{
									"begin": 13562,
									"end": 13571,
									"name": "DUP4",
									"source": 1
								},
								{
									"begin": 13558,
									"end": 13576,
									"name": "ADD",
									"source": 1
								},
								{
									"begin": 13549,
									"end": 13555,
									"name": "DUP6",
									"source": 1
								},
								{
									"begin": 13505,
									"end": 13577,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "124"
								},
								{
									"begin": 13505,
									"end": 13577,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 13505,
									"end": 13577,
									"name": "tag",
									"source": 1,
									"value": "291"
								},
								{
									"begin": 13505,
									"end": 13577,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 13587,
									"end": 13659,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "292"
								},
								{
									"begin": 13655,
									"end": 13657,
									"name": "PUSH",
									"source": 1,
									"value": "40"
								},
								{
									"begin": 13644,
									"end": 13653,
									"name": "DUP4",
									"source": 1
								},
								{
									"begin": 13640,
									"end": 13658,
									"name": "ADD",
									"source": 1
								},
								{
									"begin": 13631,
									"end": 13637,
									"name": "DUP5",
									"source": 1
								},
								{
									"begin": 13587,
									"end": 13659,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "124"
								},
								{
									"begin": 13587,
									"end": 13659,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 13587,
									"end": 13659,
									"name": "tag",
									"source": 1,
									"value": "292"
								},
								{
									"begin": 13587,
									"end": 13659,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 13224,
									"end": 13666,
									"name": "SWAP5",
									"source": 1
								},
								{
									"begin": 13224,
									"end": 13666,
									"name": "SWAP4",
									"source": 1
								},
								{
									"begin": 13224,
									"end": 13666,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 13224,
									"end": 13666,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 13224,
									"end": 13666,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 13224,
									"end": 13666,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 13224,
									"end": 13666,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 13672,
									"end": 13894,
									"name": "tag",
									"source": 1,
									"value": "87"
								},
								{
									"begin": 13672,
									"end": 13894,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 13765,
									"end": 13769,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 13803,
									"end": 13805,
									"name": "PUSH",
									"source": 1,
									"value": "20"
								},
								{
									"begin": 13792,
									"end": 13801,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 13788,
									"end": 13806,
									"name": "ADD",
									"source": 1
								},
								{
									"begin": 13780,
									"end": 13806,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 13780,
									"end": 13806,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 13816,
									"end": 13887,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "294"
								},
								{
									"begin": 13884,
									"end": 13885,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 13873,
									"end": 13882,
									"name": "DUP4",
									"source": 1
								},
								{
									"begin": 13869,
									"end": 13886,
									"name": "ADD",
									"source": 1
								},
								{
									"begin": 13860,
									"end": 13866,
									"name": "DUP5",
									"source": 1
								},
								{
									"begin": 13816,
									"end": 13887,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "124"
								},
								{
									"begin": 13816,
									"end": 13887,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 13816,
									"end": 13887,
									"name": "tag",
									"source": 1,
									"value": "294"
								},
								{
									"begin": 13816,
									"end": 13887,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 13672,
									"end": 13894,
									"name": "SWAP3",
									"source": 1
								},
								{
									"begin": 13672,
									"end": 13894,
									"name": "SWAP2",
									"source": 1
								},
								{
									"begin": 13672,
									"end": 13894,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 13672,
									"end": 13894,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 13672,
									"end": 13894,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 84759,
									"end": 85505,
									"name": "tag",
									"source": 0,
									"value": "37"
								},
								{
									"begin": 84759,
									"end": 85505,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 84759,
									"end": 85505,
									"name": "PUSH",
									"source": 0,
									"value": "80"
								},
								{
									"begin": 84759,
									"end": 85505,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 84759,
									"end": 85505,
									"name": "PUSH",
									"source": 0,
									"value": "A0"
								},
								{
									"begin": 84759,
									"end": 85505,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 84759,
									"end": 85505,
									"name": "PUSH",
									"source": 0,
									"value": "C0"
								},
								{
									"begin": 84759,
									"end": 85505,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 84759,
									"end": 85505,
									"name": "PUSH",
									"source": 0,
									"value": "E0"
								},
								{
									"begin": 84759,
									"end": 85505,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 84759,
									"end": 85505,
									"name": "PUSH",
									"source": 0,
									"value": "100"
								},
								{
									"begin": 84759,
									"end": 85505,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 84759,
									"end": 85505,
									"name": "PUSH",
									"source": 0,
									"value": "120"
								},
								{
									"begin": 84759,
									"end": 85505,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 84759,
									"end": 85505,
									"name": "PUSH",
									"source": 0,
									"value": "140"
								},
								{
									"begin": 84759,
									"end": 85505,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 84759,
									"end": 85505,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 84759,
									"end": 85505,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 84759,
									"end": 85505,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 84759,
									"end": 85505,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 84759,
									"end": 85505,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 84759,
									"end": 85505,
									"name": "ASSIGNIMMUTABLE",
									"source": 0,
									"value": "3334"
								},
								{
									"begin": 84759,
									"end": 85505,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 84759,
									"end": 85505,
									"name": "ASSIGNIMMUTABLE",
									"source": 0,
									"value": "3331"
								},
								{
									"begin": 84759,
									"end": 85505,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 84759,
									"end": 85505,
									"name": "ASSIGNIMMUTABLE",
									"source": 0,
									"value": "3328"
								},
								{
									"begin": 84759,
									"end": 85505,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 84759,
									"end": 85505,
									"name": "ASSIGNIMMUTABLE",
									"source": 0,
									"value": "3326"
								},
								{
									"begin": 84759,
									"end": 85505,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 84759,
									"end": 85505,
									"name": "ASSIGNIMMUTABLE",
									"source": 0,
									"value": "3324"
								},
								{
									"begin": 84759,
									"end": 85505,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 84759,
									"end": 85505,
									"name": "ASSIGNIMMUTABLE",
									"source": 0,
									"value": "3322"
								},
								{
									"begin": 84759,
									"end": 85505,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 84759,
									"end": 85505,
									"name": "ASSIGNIMMUTABLE",
									"source": 0,
									"value": "3320"
								},
								{
									"begin": 84759,
									"end": 85505,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 84759,
									"end": 85505,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 84759,
									"end": 85505,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220ad3948f7005a1c3554453c469dc81a81de0d7522bf2b079561631841a967f48664736f6c63430008140033",
									".code": [
										{
											"begin": 84759,
											"end": 85505,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "tag",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "CALLDATALOAD",
											"source": 0
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "PUSH",
											"source": 0,
											"value": "E0"
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "SHR",
											"source": 0
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "PUSH",
											"source": 0,
											"value": "715018A6"
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "PUSH",
											"source": 0,
											"value": "8DA5CB5B"
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "PUSH",
											"source": 0,
											"value": "8DA5CB5B"
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "19"
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "PUSH",
											"source": 0,
											"value": "95D89B41"
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "PUSH",
											"source": 0,
											"value": "A9059CBB"
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "21"
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "PUSH",
											"source": 0,
											"value": "D505ACCF"
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "22"
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "PUSH",
											"source": 0,
											"value": "DD62ED3E"
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "23"
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "PUSH",
											"source": 0,
											"value": "F2FDE38B"
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "tag",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "PUSH",
											"source": 0,
											"value": "715018A6"
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "14"
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "PUSH",
											"source": 0,
											"value": "79CC6790"
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "15"
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "PUSH",
											"source": 0,
											"value": "7ECEBE00"
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "16"
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "PUSH",
											"source": 0,
											"value": "8456CB59"
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "17"
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "PUSH",
											"source": 0,
											"value": "84B0196E"
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "18"
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "tag",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "PUSH",
											"source": 0,
											"value": "3644E515"
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "27"
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "PUSH",
											"source": 0,
											"value": "3644E515"
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "PUSH",
											"source": 0,
											"value": "3F4BA83A"
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "PUSH",
											"source": 0,
											"value": "40C10F19"
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "PUSH",
											"source": 0,
											"value": "42966C68"
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "PUSH",
											"source": 0,
											"value": "5C975ABB"
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "PUSH",
											"source": 0,
											"value": "70A08231"
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "13"
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "tag",
											"source": 0,
											"value": "27"
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "PUSH",
											"source": 0,
											"value": "6FDDE03"
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "PUSH",
											"source": 0,
											"value": "95EA7B3"
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "PUSH",
											"source": 0,
											"value": "18160DDD"
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "PUSH",
											"source": 0,
											"value": "23B872DD"
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "6"
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "PUSH",
											"source": 0,
											"value": "313CE567"
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "tag",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 84759,
											"end": 85505,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 12935,
											"end": 13024,
											"name": "tag",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 12935,
											"end": 13024,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 12935,
											"end": 13024,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "28"
										},
										{
											"begin": 12935,
											"end": 13024,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "29"
										},
										{
											"begin": 12935,
											"end": 13024,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 12935,
											"end": 13024,
											"name": "tag",
											"source": 0,
											"value": "28"
										},
										{
											"begin": 12935,
											"end": 13024,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 12935,
											"end": 13024,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 12935,
											"end": 13024,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 12935,
											"end": 13024,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "30"
										},
										{
											"begin": 12935,
											"end": 13024,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 12935,
											"end": 13024,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 12935,
											"end": 13024,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "31"
										},
										{
											"begin": 12935,
											"end": 13024,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 12935,
											"end": 13024,
											"name": "tag",
											"source": 0,
											"value": "30"
										},
										{
											"begin": 12935,
											"end": 13024,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 12935,
											"end": 13024,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 12935,
											"end": 13024,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 12935,
											"end": 13024,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 12935,
											"end": 13024,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 12935,
											"end": 13024,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 12935,
											"end": 13024,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 12935,
											"end": 13024,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 15154,
											"end": 15340,
											"name": "tag",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 15154,
											"end": 15340,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 15154,
											"end": 15340,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "32"
										},
										{
											"begin": 15154,
											"end": 15340,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 15154,
											"end": 15340,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 15154,
											"end": 15340,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 15154,
											"end": 15340,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 15154,
											"end": 15340,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 15154,
											"end": 15340,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 15154,
											"end": 15340,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 15154,
											"end": 15340,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 15154,
											"end": 15340,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 15154,
											"end": 15340,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 15154,
											"end": 15340,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "34"
										},
										{
											"begin": 15154,
											"end": 15340,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 15154,
											"end": 15340,
											"name": "tag",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 15154,
											"end": 15340,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 15154,
											"end": 15340,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "35"
										},
										{
											"begin": 15154,
											"end": 15340,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 15154,
											"end": 15340,
											"name": "tag",
											"source": 0,
											"value": "32"
										},
										{
											"begin": 15154,
											"end": 15340,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 15154,
											"end": 15340,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 15154,
											"end": 15340,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 15154,
											"end": 15340,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "36"
										},
										{
											"begin": 15154,
											"end": 15340,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 15154,
											"end": 15340,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 15154,
											"end": 15340,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "37"
										},
										{
											"begin": 15154,
											"end": 15340,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 15154,
											"end": 15340,
											"name": "tag",
											"source": 0,
											"value": "36"
										},
										{
											"begin": 15154,
											"end": 15340,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 15154,
											"end": 15340,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 15154,
											"end": 15340,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 15154,
											"end": 15340,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 15154,
											"end": 15340,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 15154,
											"end": 15340,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 15154,
											"end": 15340,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 15154,
											"end": 15340,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 14005,
											"end": 14102,
											"name": "tag",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 14005,
											"end": 14102,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 14005,
											"end": 14102,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "38"
										},
										{
											"begin": 14005,
											"end": 14102,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "39"
										},
										{
											"begin": 14005,
											"end": 14102,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 14005,
											"end": 14102,
											"name": "tag",
											"source": 0,
											"value": "38"
										},
										{
											"begin": 14005,
											"end": 14102,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 14005,
											"end": 14102,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 14005,
											"end": 14102,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 14005,
											"end": 14102,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 14005,
											"end": 14102,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 14005,
											"end": 14102,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 14005,
											"end": 14102,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "41"
										},
										{
											"begin": 14005,
											"end": 14102,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 14005,
											"end": 14102,
											"name": "tag",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 14005,
											"end": 14102,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 14005,
											"end": 14102,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 14005,
											"end": 14102,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 14005,
											"end": 14102,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 14005,
											"end": 14102,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 14005,
											"end": 14102,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 14005,
											"end": 14102,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 14005,
											"end": 14102,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 15900,
											"end": 16144,
											"name": "tag",
											"source": 0,
											"value": "6"
										},
										{
											"begin": 15900,
											"end": 16144,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 15900,
											"end": 16144,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "42"
										},
										{
											"begin": 15900,
											"end": 16144,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 15900,
											"end": 16144,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 15900,
											"end": 16144,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 15900,
											"end": 16144,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 15900,
											"end": 16144,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 15900,
											"end": 16144,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 15900,
											"end": 16144,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 15900,
											"end": 16144,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "43"
										},
										{
											"begin": 15900,
											"end": 16144,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 15900,
											"end": 16144,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 15900,
											"end": 16144,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "44"
										},
										{
											"begin": 15900,
											"end": 16144,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 15900,
											"end": 16144,
											"name": "tag",
											"source": 0,
											"value": "43"
										},
										{
											"begin": 15900,
											"end": 16144,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 15900,
											"end": 16144,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "45"
										},
										{
											"begin": 15900,
											"end": 16144,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 15900,
											"end": 16144,
											"name": "tag",
											"source": 0,
											"value": "42"
										},
										{
											"begin": 15900,
											"end": 16144,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 15900,
											"end": 16144,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 15900,
											"end": 16144,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 15900,
											"end": 16144,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "46"
										},
										{
											"begin": 15900,
											"end": 16144,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 15900,
											"end": 16144,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 15900,
											"end": 16144,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "37"
										},
										{
											"begin": 15900,
											"end": 16144,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 15900,
											"end": 16144,
											"name": "tag",
											"source": 0,
											"value": "46"
										},
										{
											"begin": 15900,
											"end": 16144,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 15900,
											"end": 16144,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 15900,
											"end": 16144,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 15900,
											"end": 16144,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 15900,
											"end": 16144,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 15900,
											"end": 16144,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 15900,
											"end": 16144,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 15900,
											"end": 16144,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 13863,
											"end": 13945,
											"name": "tag",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 13863,
											"end": 13945,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 13863,
											"end": 13945,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "47"
										},
										{
											"begin": 13863,
											"end": 13945,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "48"
										},
										{
											"begin": 13863,
											"end": 13945,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 13863,
											"end": 13945,
											"name": "tag",
											"source": 0,
											"value": "47"
										},
										{
											"begin": 13863,
											"end": 13945,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 13863,
											"end": 13945,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 13863,
											"end": 13945,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 13863,
											"end": 13945,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "49"
										},
										{
											"begin": 13863,
											"end": 13945,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 13863,
											"end": 13945,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 13863,
											"end": 13945,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "50"
										},
										{
											"begin": 13863,
											"end": 13945,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 13863,
											"end": 13945,
											"name": "tag",
											"source": 0,
											"value": "49"
										},
										{
											"begin": 13863,
											"end": 13945,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 13863,
											"end": 13945,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 13863,
											"end": 13945,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 13863,
											"end": 13945,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 13863,
											"end": 13945,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 13863,
											"end": 13945,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 13863,
											"end": 13945,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 13863,
											"end": 13945,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 84527,
											"end": 84639,
											"name": "tag",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 84527,
											"end": 84639,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 84527,
											"end": 84639,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "51"
										},
										{
											"begin": 84527,
											"end": 84639,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "52"
										},
										{
											"begin": 84527,
											"end": 84639,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 84527,
											"end": 84639,
											"name": "tag",
											"source": 0,
											"value": "51"
										},
										{
											"begin": 84527,
											"end": 84639,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 84527,
											"end": 84639,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 84527,
											"end": 84639,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 84527,
											"end": 84639,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "53"
										},
										{
											"begin": 84527,
											"end": 84639,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 84527,
											"end": 84639,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 84527,
											"end": 84639,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "54"
										},
										{
											"begin": 84527,
											"end": 84639,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 84527,
											"end": 84639,
											"name": "tag",
											"source": 0,
											"value": "53"
										},
										{
											"begin": 84527,
											"end": 84639,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 84527,
											"end": 84639,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 84527,
											"end": 84639,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 84527,
											"end": 84639,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 84527,
											"end": 84639,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 84527,
											"end": 84639,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 84527,
											"end": 84639,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 84527,
											"end": 84639,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 85102,
											"end": 85165,
											"name": "tag",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 85102,
											"end": 85165,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 85102,
											"end": 85165,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "55"
										},
										{
											"begin": 85102,
											"end": 85165,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "56"
										},
										{
											"begin": 85102,
											"end": 85165,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 85102,
											"end": 85165,
											"name": "tag",
											"source": 0,
											"value": "55"
										},
										{
											"begin": 85102,
											"end": 85165,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 85102,
											"end": 85165,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 85171,
											"end": 85264,
											"name": "tag",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 85171,
											"end": 85264,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 85171,
											"end": 85264,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "57"
										},
										{
											"begin": 85171,
											"end": 85264,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 85171,
											"end": 85264,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 85171,
											"end": 85264,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 85171,
											"end": 85264,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 85171,
											"end": 85264,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 85171,
											"end": 85264,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 85171,
											"end": 85264,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 85171,
											"end": 85264,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "58"
										},
										{
											"begin": 85171,
											"end": 85264,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 85171,
											"end": 85264,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 85171,
											"end": 85264,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "34"
										},
										{
											"begin": 85171,
											"end": 85264,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 85171,
											"end": 85264,
											"name": "tag",
											"source": 0,
											"value": "58"
										},
										{
											"begin": 85171,
											"end": 85264,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 85171,
											"end": 85264,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "59"
										},
										{
											"begin": 85171,
											"end": 85264,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 85171,
											"end": 85264,
											"name": "tag",
											"source": 0,
											"value": "57"
										},
										{
											"begin": 85171,
											"end": 85264,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 85171,
											"end": 85264,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 22580,
											"end": 22667,
											"name": "tag",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 22580,
											"end": 22667,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 22580,
											"end": 22667,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 22580,
											"end": 22667,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 22580,
											"end": 22667,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 22580,
											"end": 22667,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 22580,
											"end": 22667,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 22580,
											"end": 22667,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 22580,
											"end": 22667,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 22580,
											"end": 22667,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 22580,
											"end": 22667,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "61"
										},
										{
											"begin": 22580,
											"end": 22667,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 22580,
											"end": 22667,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 22580,
											"end": 22667,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "62"
										},
										{
											"begin": 22580,
											"end": 22667,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 22580,
											"end": 22667,
											"name": "tag",
											"source": 0,
											"value": "61"
										},
										{
											"begin": 22580,
											"end": 22667,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 22580,
											"end": 22667,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "63"
										},
										{
											"begin": 22580,
											"end": 22667,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 22580,
											"end": 22667,
											"name": "tag",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 22580,
											"end": 22667,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 22580,
											"end": 22667,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 24971,
											"end": 25055,
											"name": "tag",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 24971,
											"end": 25055,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 24971,
											"end": 25055,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "64"
										},
										{
											"begin": 24971,
											"end": 25055,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "65"
										},
										{
											"begin": 24971,
											"end": 25055,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 24971,
											"end": 25055,
											"name": "tag",
											"source": 0,
											"value": "64"
										},
										{
											"begin": 24971,
											"end": 25055,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 24971,
											"end": 25055,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 24971,
											"end": 25055,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 24971,
											"end": 25055,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "66"
										},
										{
											"begin": 24971,
											"end": 25055,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 24971,
											"end": 25055,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 24971,
											"end": 25055,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "37"
										},
										{
											"begin": 24971,
											"end": 25055,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 24971,
											"end": 25055,
											"name": "tag",
											"source": 0,
											"value": "66"
										},
										{
											"begin": 24971,
											"end": 25055,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 24971,
											"end": 25055,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 24971,
											"end": 25055,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 24971,
											"end": 25055,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 24971,
											"end": 25055,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 24971,
											"end": 25055,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 24971,
											"end": 25055,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 24971,
											"end": 25055,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 14160,
											"end": 14276,
											"name": "tag",
											"source": 0,
											"value": "13"
										},
										{
											"begin": 14160,
											"end": 14276,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 14160,
											"end": 14276,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "67"
										},
										{
											"begin": 14160,
											"end": 14276,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 14160,
											"end": 14276,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 14160,
											"end": 14276,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 14160,
											"end": 14276,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 14160,
											"end": 14276,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 14160,
											"end": 14276,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 14160,
											"end": 14276,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 14160,
											"end": 14276,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "68"
										},
										{
											"begin": 14160,
											"end": 14276,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 14160,
											"end": 14276,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 14160,
											"end": 14276,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "69"
										},
										{
											"begin": 14160,
											"end": 14276,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 14160,
											"end": 14276,
											"name": "tag",
											"source": 0,
											"value": "68"
										},
										{
											"begin": 14160,
											"end": 14276,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 14160,
											"end": 14276,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "70"
										},
										{
											"begin": 14160,
											"end": 14276,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 14160,
											"end": 14276,
											"name": "tag",
											"source": 0,
											"value": "67"
										},
										{
											"begin": 14160,
											"end": 14276,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 14160,
											"end": 14276,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 14160,
											"end": 14276,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 14160,
											"end": 14276,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "71"
										},
										{
											"begin": 14160,
											"end": 14276,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 14160,
											"end": 14276,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 14160,
											"end": 14276,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "41"
										},
										{
											"begin": 14160,
											"end": 14276,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 14160,
											"end": 14276,
											"name": "tag",
											"source": 0,
											"value": "71"
										},
										{
											"begin": 14160,
											"end": 14276,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 14160,
											"end": 14276,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 14160,
											"end": 14276,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 14160,
											"end": 14276,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 14160,
											"end": 14276,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 14160,
											"end": 14276,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 14160,
											"end": 14276,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 14160,
											"end": 14276,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 29437,
											"end": 29538,
											"name": "tag",
											"source": 0,
											"value": "14"
										},
										{
											"begin": 29437,
											"end": 29538,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 29437,
											"end": 29538,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "72"
										},
										{
											"begin": 29437,
											"end": 29538,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "73"
										},
										{
											"begin": 29437,
											"end": 29538,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 29437,
											"end": 29538,
											"name": "tag",
											"source": 0,
											"value": "72"
										},
										{
											"begin": 29437,
											"end": 29538,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 29437,
											"end": 29538,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 22983,
											"end": 23141,
											"name": "tag",
											"source": 0,
											"value": "15"
										},
										{
											"begin": 22983,
											"end": 23141,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 22983,
											"end": 23141,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "74"
										},
										{
											"begin": 22983,
											"end": 23141,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 22983,
											"end": 23141,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 22983,
											"end": 23141,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 22983,
											"end": 23141,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 22983,
											"end": 23141,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 22983,
											"end": 23141,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 22983,
											"end": 23141,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 22983,
											"end": 23141,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "75"
										},
										{
											"begin": 22983,
											"end": 23141,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 22983,
											"end": 23141,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 22983,
											"end": 23141,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "34"
										},
										{
											"begin": 22983,
											"end": 23141,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 22983,
											"end": 23141,
											"name": "tag",
											"source": 0,
											"value": "75"
										},
										{
											"begin": 22983,
											"end": 23141,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 22983,
											"end": 23141,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "76"
										},
										{
											"begin": 22983,
											"end": 23141,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 22983,
											"end": 23141,
											"name": "tag",
											"source": 0,
											"value": "74"
										},
										{
											"begin": 22983,
											"end": 23141,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 22983,
											"end": 23141,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 84277,
											"end": 84420,
											"name": "tag",
											"source": 0,
											"value": "16"
										},
										{
											"begin": 84277,
											"end": 84420,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 84277,
											"end": 84420,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "77"
										},
										{
											"begin": 84277,
											"end": 84420,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 84277,
											"end": 84420,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 84277,
											"end": 84420,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 84277,
											"end": 84420,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 84277,
											"end": 84420,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 84277,
											"end": 84420,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 84277,
											"end": 84420,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 84277,
											"end": 84420,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "78"
										},
										{
											"begin": 84277,
											"end": 84420,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 84277,
											"end": 84420,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 84277,
											"end": 84420,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "69"
										},
										{
											"begin": 84277,
											"end": 84420,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 84277,
											"end": 84420,
											"name": "tag",
											"source": 0,
											"value": "78"
										},
										{
											"begin": 84277,
											"end": 84420,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 84277,
											"end": 84420,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "79"
										},
										{
											"begin": 84277,
											"end": 84420,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 84277,
											"end": 84420,
											"name": "tag",
											"source": 0,
											"value": "77"
										},
										{
											"begin": 84277,
											"end": 84420,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 84277,
											"end": 84420,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 84277,
											"end": 84420,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 84277,
											"end": 84420,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 84277,
											"end": 84420,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 84277,
											"end": 84420,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 84277,
											"end": 84420,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "41"
										},
										{
											"begin": 84277,
											"end": 84420,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 84277,
											"end": 84420,
											"name": "tag",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 84277,
											"end": 84420,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 84277,
											"end": 84420,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 84277,
											"end": 84420,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 84277,
											"end": 84420,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 84277,
											"end": 84420,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 84277,
											"end": 84420,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 84277,
											"end": 84420,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 84277,
											"end": 84420,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 85037,
											"end": 85096,
											"name": "tag",
											"source": 0,
											"value": "17"
										},
										{
											"begin": 85037,
											"end": 85096,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 85037,
											"end": 85096,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "81"
										},
										{
											"begin": 85037,
											"end": 85096,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "82"
										},
										{
											"begin": 85037,
											"end": 85096,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 85037,
											"end": 85096,
											"name": "tag",
											"source": 0,
											"value": "81"
										},
										{
											"begin": 85037,
											"end": 85096,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 85037,
											"end": 85096,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 79105,
											"end": 79662,
											"name": "tag",
											"source": 0,
											"value": "18"
										},
										{
											"begin": 79105,
											"end": 79662,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 79105,
											"end": 79662,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "83"
										},
										{
											"begin": 79105,
											"end": 79662,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "84"
										},
										{
											"begin": 79105,
											"end": 79662,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 79105,
											"end": 79662,
											"name": "tag",
											"source": 0,
											"value": "83"
										},
										{
											"begin": 79105,
											"end": 79662,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 79105,
											"end": 79662,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 79105,
											"end": 79662,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 79105,
											"end": 79662,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "85"
										},
										{
											"begin": 79105,
											"end": 79662,
											"name": "SWAP8",
											"source": 0
										},
										{
											"begin": 79105,
											"end": 79662,
											"name": "SWAP7",
											"source": 0
										},
										{
											"begin": 79105,
											"end": 79662,
											"name": "SWAP6",
											"source": 0
										},
										{
											"begin": 79105,
											"end": 79662,
											"name": "SWAP5",
											"source": 0
										},
										{
											"begin": 79105,
											"end": 79662,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 79105,
											"end": 79662,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 79105,
											"end": 79662,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 79105,
											"end": 79662,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 79105,
											"end": 79662,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "86"
										},
										{
											"begin": 79105,
											"end": 79662,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 79105,
											"end": 79662,
											"name": "tag",
											"source": 0,
											"value": "85"
										},
										{
											"begin": 79105,
											"end": 79662,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 79105,
											"end": 79662,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 79105,
											"end": 79662,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 79105,
											"end": 79662,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 79105,
											"end": 79662,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 79105,
											"end": 79662,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 79105,
											"end": 79662,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 79105,
											"end": 79662,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 28782,
											"end": 28867,
											"name": "tag",
											"source": 0,
											"value": "19"
										},
										{
											"begin": 28782,
											"end": 28867,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 28782,
											"end": 28867,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "87"
										},
										{
											"begin": 28782,
											"end": 28867,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "88"
										},
										{
											"begin": 28782,
											"end": 28867,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 28782,
											"end": 28867,
											"name": "tag",
											"source": 0,
											"value": "87"
										},
										{
											"begin": 28782,
											"end": 28867,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 28782,
											"end": 28867,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 28782,
											"end": 28867,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 28782,
											"end": 28867,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "89"
										},
										{
											"begin": 28782,
											"end": 28867,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 28782,
											"end": 28867,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 28782,
											"end": 28867,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "90"
										},
										{
											"begin": 28782,
											"end": 28867,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 28782,
											"end": 28867,
											"name": "tag",
											"source": 0,
											"value": "89"
										},
										{
											"begin": 28782,
											"end": 28867,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 28782,
											"end": 28867,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 28782,
											"end": 28867,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 28782,
											"end": 28867,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 28782,
											"end": 28867,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 28782,
											"end": 28867,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 28782,
											"end": 28867,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 28782,
											"end": 28867,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 13137,
											"end": 13230,
											"name": "tag",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 13137,
											"end": 13230,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 13137,
											"end": 13230,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "91"
										},
										{
											"begin": 13137,
											"end": 13230,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "92"
										},
										{
											"begin": 13137,
											"end": 13230,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 13137,
											"end": 13230,
											"name": "tag",
											"source": 0,
											"value": "91"
										},
										{
											"begin": 13137,
											"end": 13230,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 13137,
											"end": 13230,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 13137,
											"end": 13230,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 13137,
											"end": 13230,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "93"
										},
										{
											"begin": 13137,
											"end": 13230,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 13137,
											"end": 13230,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 13137,
											"end": 13230,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "31"
										},
										{
											"begin": 13137,
											"end": 13230,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 13137,
											"end": 13230,
											"name": "tag",
											"source": 0,
											"value": "93"
										},
										{
											"begin": 13137,
											"end": 13230,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 13137,
											"end": 13230,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 13137,
											"end": 13230,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 13137,
											"end": 13230,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 13137,
											"end": 13230,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 13137,
											"end": 13230,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 13137,
											"end": 13230,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 13137,
											"end": 13230,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 14471,
											"end": 14649,
											"name": "tag",
											"source": 0,
											"value": "21"
										},
										{
											"begin": 14471,
											"end": 14649,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 14471,
											"end": 14649,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "94"
										},
										{
											"begin": 14471,
											"end": 14649,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 14471,
											"end": 14649,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 14471,
											"end": 14649,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 14471,
											"end": 14649,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 14471,
											"end": 14649,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 14471,
											"end": 14649,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 14471,
											"end": 14649,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 14471,
											"end": 14649,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "95"
										},
										{
											"begin": 14471,
											"end": 14649,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 14471,
											"end": 14649,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 14471,
											"end": 14649,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "34"
										},
										{
											"begin": 14471,
											"end": 14649,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 14471,
											"end": 14649,
											"name": "tag",
											"source": 0,
											"value": "95"
										},
										{
											"begin": 14471,
											"end": 14649,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 14471,
											"end": 14649,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "96"
										},
										{
											"begin": 14471,
											"end": 14649,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 14471,
											"end": 14649,
											"name": "tag",
											"source": 0,
											"value": "94"
										},
										{
											"begin": 14471,
											"end": 14649,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 14471,
											"end": 14649,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 14471,
											"end": 14649,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 14471,
											"end": 14649,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "97"
										},
										{
											"begin": 14471,
											"end": 14649,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 14471,
											"end": 14649,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 14471,
											"end": 14649,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "37"
										},
										{
											"begin": 14471,
											"end": 14649,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 14471,
											"end": 14649,
											"name": "tag",
											"source": 0,
											"value": "97"
										},
										{
											"begin": 14471,
											"end": 14649,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 14471,
											"end": 14649,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 14471,
											"end": 14649,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 14471,
											"end": 14649,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 14471,
											"end": 14649,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 14471,
											"end": 14649,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 14471,
											"end": 14649,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 14471,
											"end": 14649,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 83551,
											"end": 84223,
											"name": "tag",
											"source": 0,
											"value": "22"
										},
										{
											"begin": 83551,
											"end": 84223,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 83551,
											"end": 84223,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "98"
										},
										{
											"begin": 83551,
											"end": 84223,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 83551,
											"end": 84223,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 83551,
											"end": 84223,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 83551,
											"end": 84223,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 83551,
											"end": 84223,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 83551,
											"end": 84223,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 83551,
											"end": 84223,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 83551,
											"end": 84223,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "99"
										},
										{
											"begin": 83551,
											"end": 84223,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 83551,
											"end": 84223,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 83551,
											"end": 84223,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 83551,
											"end": 84223,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 83551,
											"end": 84223,
											"name": "tag",
											"source": 0,
											"value": "99"
										},
										{
											"begin": 83551,
											"end": 84223,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 83551,
											"end": 84223,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "101"
										},
										{
											"begin": 83551,
											"end": 84223,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 83551,
											"end": 84223,
											"name": "tag",
											"source": 0,
											"value": "98"
										},
										{
											"begin": 83551,
											"end": 84223,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 83551,
											"end": 84223,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 14707,
											"end": 14847,
											"name": "tag",
											"source": 0,
											"value": "23"
										},
										{
											"begin": 14707,
											"end": 14847,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 14707,
											"end": 14847,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "102"
										},
										{
											"begin": 14707,
											"end": 14847,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 14707,
											"end": 14847,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 14707,
											"end": 14847,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 14707,
											"end": 14847,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 14707,
											"end": 14847,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 14707,
											"end": 14847,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 14707,
											"end": 14847,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 14707,
											"end": 14847,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "103"
										},
										{
											"begin": 14707,
											"end": 14847,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 14707,
											"end": 14847,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 14707,
											"end": 14847,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "104"
										},
										{
											"begin": 14707,
											"end": 14847,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 14707,
											"end": 14847,
											"name": "tag",
											"source": 0,
											"value": "103"
										},
										{
											"begin": 14707,
											"end": 14847,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 14707,
											"end": 14847,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "105"
										},
										{
											"begin": 14707,
											"end": 14847,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 14707,
											"end": 14847,
											"name": "tag",
											"source": 0,
											"value": "102"
										},
										{
											"begin": 14707,
											"end": 14847,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 14707,
											"end": 14847,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 14707,
											"end": 14847,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 14707,
											"end": 14847,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "106"
										},
										{
											"begin": 14707,
											"end": 14847,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 14707,
											"end": 14847,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 14707,
											"end": 14847,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "41"
										},
										{
											"begin": 14707,
											"end": 14847,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 14707,
											"end": 14847,
											"name": "tag",
											"source": 0,
											"value": "106"
										},
										{
											"begin": 14707,
											"end": 14847,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 14707,
											"end": 14847,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 14707,
											"end": 14847,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 14707,
											"end": 14847,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 14707,
											"end": 14847,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 14707,
											"end": 14847,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 14707,
											"end": 14847,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 14707,
											"end": 14847,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 29687,
											"end": 29902,
											"name": "tag",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 29687,
											"end": 29902,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 29687,
											"end": 29902,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "107"
										},
										{
											"begin": 29687,
											"end": 29902,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 29687,
											"end": 29902,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 29687,
											"end": 29902,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 29687,
											"end": 29902,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 29687,
											"end": 29902,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 29687,
											"end": 29902,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 29687,
											"end": 29902,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 29687,
											"end": 29902,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "108"
										},
										{
											"begin": 29687,
											"end": 29902,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 29687,
											"end": 29902,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 29687,
											"end": 29902,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "69"
										},
										{
											"begin": 29687,
											"end": 29902,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 29687,
											"end": 29902,
											"name": "tag",
											"source": 0,
											"value": "108"
										},
										{
											"begin": 29687,
											"end": 29902,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 29687,
											"end": 29902,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "109"
										},
										{
											"begin": 29687,
											"end": 29902,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 29687,
											"end": 29902,
											"name": "tag",
											"source": 0,
											"value": "107"
										},
										{
											"begin": 29687,
											"end": 29902,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 29687,
											"end": 29902,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 12935,
											"end": 13024,
											"name": "tag",
											"source": 0,
											"value": "29"
										},
										{
											"begin": 12935,
											"end": 13024,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 12980,
											"end": 12993,
											"name": "PUSH",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 13012,
											"end": 13017,
											"name": "PUSH",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "111"
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "112"
										},
										{
											"begin": 13005,
											"end": 13017,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "tag",
											"source": 0,
											"value": "111"
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "113"
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "112"
										},
										{
											"begin": 13005,
											"end": 13017,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "tag",
											"source": 0,
											"value": "113"
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "114"
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "115"
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "114"
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "tag",
											"source": 0,
											"value": "115"
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "tag",
											"source": 0,
											"value": "116"
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "116"
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "tag",
											"source": 0,
											"value": "114"
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 13005,
											"end": 13017,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 12935,
											"end": 13024,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 12935,
											"end": 13024,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 15154,
											"end": 15340,
											"name": "tag",
											"source": 0,
											"value": "35"
										},
										{
											"begin": 15154,
											"end": 15340,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 15227,
											"end": 15231,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 15243,
											"end": 15256,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 15259,
											"end": 15271,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "118"
										},
										{
											"begin": 15259,
											"end": 15269,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "119"
										},
										{
											"begin": 15259,
											"end": 15271,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 15259,
											"end": 15271,
											"name": "tag",
											"source": 0,
											"value": "118"
										},
										{
											"begin": 15259,
											"end": 15271,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 15243,
											"end": 15271,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 15243,
											"end": 15271,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 15281,
											"end": 15312,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "120"
										},
										{
											"begin": 15290,
											"end": 15295,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 15297,
											"end": 15304,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 15306,
											"end": 15311,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 15281,
											"end": 15289,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "121"
										},
										{
											"begin": 15281,
											"end": 15312,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 15281,
											"end": 15312,
											"name": "tag",
											"source": 0,
											"value": "120"
										},
										{
											"begin": 15281,
											"end": 15312,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 15329,
											"end": 15333,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 15322,
											"end": 15333,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 15322,
											"end": 15333,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 15322,
											"end": 15333,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 15154,
											"end": 15340,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 15154,
											"end": 15340,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 15154,
											"end": 15340,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 15154,
											"end": 15340,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 15154,
											"end": 15340,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 14005,
											"end": 14102,
											"name": "tag",
											"source": 0,
											"value": "39"
										},
										{
											"begin": 14005,
											"end": 14102,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 14057,
											"end": 14064,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 14083,
											"end": 14095,
											"name": "PUSH",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 14083,
											"end": 14095,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 14076,
											"end": 14095,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 14076,
											"end": 14095,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 14005,
											"end": 14102,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 14005,
											"end": 14102,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 15900,
											"end": 16144,
											"name": "tag",
											"source": 0,
											"value": "45"
										},
										{
											"begin": 15900,
											"end": 16144,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 15987,
											"end": 15991,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 16003,
											"end": 16018,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 16021,
											"end": 16033,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "124"
										},
										{
											"begin": 16021,
											"end": 16031,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "119"
										},
										{
											"begin": 16021,
											"end": 16033,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 16021,
											"end": 16033,
											"name": "tag",
											"source": 0,
											"value": "124"
										},
										{
											"begin": 16021,
											"end": 16033,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 16003,
											"end": 16033,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 16003,
											"end": 16033,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 16043,
											"end": 16080,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "125"
										},
										{
											"begin": 16059,
											"end": 16063,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 16065,
											"end": 16072,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 16074,
											"end": 16079,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 16043,
											"end": 16058,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "126"
										},
										{
											"begin": 16043,
											"end": 16080,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 16043,
											"end": 16080,
											"name": "tag",
											"source": 0,
											"value": "125"
										},
										{
											"begin": 16043,
											"end": 16080,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 16090,
											"end": 16116,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "127"
										},
										{
											"begin": 16100,
											"end": 16104,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 16106,
											"end": 16108,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 16110,
											"end": 16115,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 16090,
											"end": 16099,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "128"
										},
										{
											"begin": 16090,
											"end": 16116,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 16090,
											"end": 16116,
											"name": "tag",
											"source": 0,
											"value": "127"
										},
										{
											"begin": 16090,
											"end": 16116,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 16133,
											"end": 16137,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 16126,
											"end": 16137,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 16126,
											"end": 16137,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 16126,
											"end": 16137,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 15900,
											"end": 16144,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 15900,
											"end": 16144,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 15900,
											"end": 16144,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 15900,
											"end": 16144,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 15900,
											"end": 16144,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 15900,
											"end": 16144,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 13863,
											"end": 13945,
											"name": "tag",
											"source": 0,
											"value": "48"
										},
										{
											"begin": 13863,
											"end": 13945,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 13912,
											"end": 13917,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 13936,
											"end": 13938,
											"name": "PUSH",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 13929,
											"end": 13938,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 13929,
											"end": 13938,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 13863,
											"end": 13945,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 13863,
											"end": 13945,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 84527,
											"end": 84639,
											"name": "tag",
											"source": 0,
											"value": "52"
										},
										{
											"begin": 84527,
											"end": 84639,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 84586,
											"end": 84593,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 84612,
											"end": 84632,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "131"
										},
										{
											"begin": 84612,
											"end": 84630,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "132"
										},
										{
											"begin": 84612,
											"end": 84632,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 84612,
											"end": 84632,
											"name": "tag",
											"source": 0,
											"value": "131"
										},
										{
											"begin": 84612,
											"end": 84632,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 84605,
											"end": 84632,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 84605,
											"end": 84632,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 84527,
											"end": 84639,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 84527,
											"end": 84639,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 85102,
											"end": 85165,
											"name": "tag",
											"source": 0,
											"value": "56"
										},
										{
											"begin": 85102,
											"end": 85165,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 28675,
											"end": 28688,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "134"
										},
										{
											"begin": 28675,
											"end": 28686,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "135"
										},
										{
											"begin": 28675,
											"end": 28688,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 28675,
											"end": 28688,
											"name": "tag",
											"source": 0,
											"value": "134"
										},
										{
											"begin": 28675,
											"end": 28688,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 85148,
											"end": 85158,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "137"
										},
										{
											"begin": 85148,
											"end": 85156,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "138"
										},
										{
											"begin": 85148,
											"end": 85158,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 85148,
											"end": 85158,
											"modifierDepth": 1,
											"name": "tag",
											"source": 0,
											"value": "137"
										},
										{
											"begin": 85148,
											"end": 85158,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 85102,
											"end": 85165,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 85171,
											"end": 85264,
											"name": "tag",
											"source": 0,
											"value": "59"
										},
										{
											"begin": 85171,
											"end": 85264,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 28675,
											"end": 28688,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "140"
										},
										{
											"begin": 28675,
											"end": 28686,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "135"
										},
										{
											"begin": 28675,
											"end": 28688,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 28675,
											"end": 28688,
											"name": "tag",
											"source": 0,
											"value": "140"
										},
										{
											"begin": 28675,
											"end": 28688,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 85240,
											"end": 85257,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "142"
										},
										{
											"begin": 85246,
											"end": 85248,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 85250,
											"end": 85256,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 85240,
											"end": 85245,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "143"
										},
										{
											"begin": 85240,
											"end": 85257,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 85240,
											"end": 85257,
											"modifierDepth": 1,
											"name": "tag",
											"source": 0,
											"value": "142"
										},
										{
											"begin": 85240,
											"end": 85257,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 85171,
											"end": 85264,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 85171,
											"end": 85264,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 85171,
											"end": 85264,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 22580,
											"end": 22667,
											"name": "tag",
											"source": 0,
											"value": "63"
										},
										{
											"begin": 22580,
											"end": 22667,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 22634,
											"end": 22660,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "145"
										},
										{
											"begin": 22640,
											"end": 22652,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "146"
										},
										{
											"begin": 22640,
											"end": 22650,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "119"
										},
										{
											"begin": 22640,
											"end": 22652,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 22640,
											"end": 22652,
											"name": "tag",
											"source": 0,
											"value": "146"
										},
										{
											"begin": 22640,
											"end": 22652,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 22654,
											"end": 22659,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 22634,
											"end": 22639,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "147"
										},
										{
											"begin": 22634,
											"end": 22660,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 22634,
											"end": 22660,
											"name": "tag",
											"source": 0,
											"value": "145"
										},
										{
											"begin": 22634,
											"end": 22660,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 22580,
											"end": 22667,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 22580,
											"end": 22667,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 24971,
											"end": 25055,
											"name": "tag",
											"source": 0,
											"value": "65"
										},
										{
											"begin": 24971,
											"end": 25055,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 25018,
											"end": 25022,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 25041,
											"end": 25048,
											"name": "PUSH",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 25041,
											"end": 25048,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 25041,
											"end": 25048,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 25041,
											"end": 25048,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 25041,
											"end": 25048,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 25041,
											"end": 25048,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 25041,
											"end": 25048,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 25041,
											"end": 25048,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 25041,
											"end": 25048,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 25041,
											"end": 25048,
											"name": "PUSH",
											"source": 0,
											"value": "FF"
										},
										{
											"begin": 25041,
											"end": 25048,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 25034,
											"end": 25048,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 25034,
											"end": 25048,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 24971,
											"end": 25055,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 24971,
											"end": 25055,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 14160,
											"end": 14276,
											"name": "tag",
											"source": 0,
											"value": "70"
										},
										{
											"begin": 14160,
											"end": 14276,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 14225,
											"end": 14232,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 14251,
											"end": 14260,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 14251,
											"end": 14269,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 14261,
											"end": 14268,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 14251,
											"end": 14269,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 14251,
											"end": 14269,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 14251,
											"end": 14269,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 14251,
											"end": 14269,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 14251,
											"end": 14269,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 14251,
											"end": 14269,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 14251,
											"end": 14269,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 14251,
											"end": 14269,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 14251,
											"end": 14269,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 14251,
											"end": 14269,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 14251,
											"end": 14269,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 14251,
											"end": 14269,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 14251,
											"end": 14269,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 14251,
											"end": 14269,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 14251,
											"end": 14269,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 14251,
											"end": 14269,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 14244,
											"end": 14269,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 14244,
											"end": 14269,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 14160,
											"end": 14276,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 14160,
											"end": 14276,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 14160,
											"end": 14276,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 14160,
											"end": 14276,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 29437,
											"end": 29538,
											"name": "tag",
											"source": 0,
											"value": "73"
										},
										{
											"begin": 29437,
											"end": 29538,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 28675,
											"end": 28688,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "151"
										},
										{
											"begin": 28675,
											"end": 28686,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "135"
										},
										{
											"begin": 28675,
											"end": 28688,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 28675,
											"end": 28688,
											"name": "tag",
											"source": 0,
											"value": "151"
										},
										{
											"begin": 28675,
											"end": 28688,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 29501,
											"end": 29531,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "153"
										},
										{
											"begin": 29528,
											"end": 29529,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 29501,
											"end": 29519,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "154"
										},
										{
											"begin": 29501,
											"end": 29531,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 29501,
											"end": 29531,
											"modifierDepth": 1,
											"name": "tag",
											"source": 0,
											"value": "153"
										},
										{
											"begin": 29501,
											"end": 29531,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 29437,
											"end": 29538,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 22983,
											"end": 23141,
											"name": "tag",
											"source": 0,
											"value": "76"
										},
										{
											"begin": 22983,
											"end": 23141,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 23058,
											"end": 23103,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "156"
										},
										{
											"begin": 23074,
											"end": 23081,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 23083,
											"end": 23095,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "157"
										},
										{
											"begin": 23083,
											"end": 23093,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "119"
										},
										{
											"begin": 23083,
											"end": 23095,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 23083,
											"end": 23095,
											"name": "tag",
											"source": 0,
											"value": "157"
										},
										{
											"begin": 23083,
											"end": 23095,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 23097,
											"end": 23102,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 23058,
											"end": 23073,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "126"
										},
										{
											"begin": 23058,
											"end": 23103,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 23058,
											"end": 23103,
											"name": "tag",
											"source": 0,
											"value": "156"
										},
										{
											"begin": 23058,
											"end": 23103,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 23113,
											"end": 23134,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "158"
										},
										{
											"begin": 23119,
											"end": 23126,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 23128,
											"end": 23133,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 23113,
											"end": 23118,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "147"
										},
										{
											"begin": 23113,
											"end": 23134,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 23113,
											"end": 23134,
											"name": "tag",
											"source": 0,
											"value": "158"
										},
										{
											"begin": 23113,
											"end": 23134,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 22983,
											"end": 23141,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 22983,
											"end": 23141,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 22983,
											"end": 23141,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 84277,
											"end": 84420,
											"name": "tag",
											"source": 0,
											"value": "79"
										},
										{
											"begin": 84277,
											"end": 84420,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 84368,
											"end": 84375,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 84394,
											"end": 84413,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "160"
										},
										{
											"begin": 84407,
											"end": 84412,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 84394,
											"end": 84406,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "161"
										},
										{
											"begin": 84394,
											"end": 84413,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 84394,
											"end": 84413,
											"name": "tag",
											"source": 0,
											"value": "160"
										},
										{
											"begin": 84394,
											"end": 84413,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 84387,
											"end": 84413,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 84387,
											"end": 84413,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 84277,
											"end": 84420,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 84277,
											"end": 84420,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 84277,
											"end": 84420,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 84277,
											"end": 84420,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 85037,
											"end": 85096,
											"name": "tag",
											"source": 0,
											"value": "82"
										},
										{
											"begin": 85037,
											"end": 85096,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 28675,
											"end": 28688,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "163"
										},
										{
											"begin": 28675,
											"end": 28686,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "135"
										},
										{
											"begin": 28675,
											"end": 28688,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 28675,
											"end": 28688,
											"name": "tag",
											"source": 0,
											"value": "163"
										},
										{
											"begin": 28675,
											"end": 28688,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 85081,
											"end": 85089,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "165"
										},
										{
											"begin": 85081,
											"end": 85087,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "166"
										},
										{
											"begin": 85081,
											"end": 85089,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 85081,
											"end": 85089,
											"modifierDepth": 1,
											"name": "tag",
											"source": 0,
											"value": "165"
										},
										{
											"begin": 85081,
											"end": 85089,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 85037,
											"end": 85096,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 79105,
											"end": 79662,
											"name": "tag",
											"source": 0,
											"value": "84"
										},
										{
											"begin": 79105,
											"end": 79662,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 79203,
											"end": 79216,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 79230,
											"end": 79248,
											"name": "PUSH",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 79262,
											"end": 79283,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 79297,
											"end": 79312,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 79326,
											"end": 79351,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 79365,
											"end": 79377,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 79391,
											"end": 79418,
											"name": "PUSH",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 79494,
											"end": 79507,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "168"
										},
										{
											"begin": 79494,
											"end": 79505,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "169"
										},
										{
											"begin": 79494,
											"end": 79507,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 79494,
											"end": 79507,
											"name": "tag",
											"source": 0,
											"value": "168"
										},
										{
											"begin": 79494,
											"end": 79507,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 79521,
											"end": 79537,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "170"
										},
										{
											"begin": 79521,
											"end": 79535,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "171"
										},
										{
											"begin": 79521,
											"end": 79537,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 79521,
											"end": 79537,
											"name": "tag",
											"source": 0,
											"value": "170"
										},
										{
											"begin": 79521,
											"end": 79537,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 79551,
											"end": 79564,
											"name": "CHAINID",
											"source": 0
										},
										{
											"begin": 79586,
											"end": 79590,
											"name": "ADDRESS",
											"source": 0
										},
										{
											"begin": 79613,
											"end": 79614,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 79605,
											"end": 79615,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 79605,
											"end": 79615,
											"name": "SHL",
											"source": 0
										},
										{
											"begin": 79643,
											"end": 79644,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 79629,
											"end": 79645,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 79629,
											"end": 79645,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 79629,
											"end": 79645,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 79629,
											"end": 79645,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 79629,
											"end": 79645,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "172"
										},
										{
											"begin": 79629,
											"end": 79645,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 79629,
											"end": 79645,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "173"
										},
										{
											"begin": 79629,
											"end": 79645,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "174"
										},
										{
											"begin": 79629,
											"end": 79645,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 79629,
											"end": 79645,
											"name": "tag",
											"source": 0,
											"value": "173"
										},
										{
											"begin": 79629,
											"end": 79645,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 79629,
											"end": 79645,
											"name": "tag",
											"source": 0,
											"value": "172"
										},
										{
											"begin": 79629,
											"end": 79645,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 79629,
											"end": 79645,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 79629,
											"end": 79645,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 79629,
											"end": 79645,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 79629,
											"end": 79645,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 79629,
											"end": 79645,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 79629,
											"end": 79645,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 79629,
											"end": 79645,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 79629,
											"end": 79645,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 79629,
											"end": 79645,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 79629,
											"end": 79645,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 79629,
											"end": 79645,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 79629,
											"end": 79645,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 79629,
											"end": 79645,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 79629,
											"end": 79645,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 79629,
											"end": 79645,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 79629,
											"end": 79645,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 79629,
											"end": 79645,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 79629,
											"end": 79645,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "175"
										},
										{
											"begin": 79629,
											"end": 79645,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 79629,
											"end": 79645,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 79629,
											"end": 79645,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 79629,
											"end": 79645,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 79629,
											"end": 79645,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 79629,
											"end": 79645,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 79629,
											"end": 79645,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 79629,
											"end": 79645,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 79629,
											"end": 79645,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 79629,
											"end": 79645,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 79629,
											"end": 79645,
											"name": "CALLDATACOPY",
											"source": 0
										},
										{
											"begin": 79629,
											"end": 79645,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 79629,
											"end": 79645,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 79629,
											"end": 79645,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 79629,
											"end": 79645,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 79629,
											"end": 79645,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 79629,
											"end": 79645,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 79629,
											"end": 79645,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 79629,
											"end": 79645,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 79629,
											"end": 79645,
											"name": "tag",
											"source": 0,
											"value": "175"
										},
										{
											"begin": 79629,
											"end": 79645,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 79629,
											"end": 79645,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 79443,
											"end": 79655,
											"name": "PUSH",
											"source": 0,
											"value": "F00000000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 79443,
											"end": 79655,
											"name": "SWAP6",
											"source": 0
										},
										{
											"begin": 79443,
											"end": 79655,
											"name": "SWAP5",
											"source": 0
										},
										{
											"begin": 79443,
											"end": 79655,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 79443,
											"end": 79655,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 79443,
											"end": 79655,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 79443,
											"end": 79655,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 79443,
											"end": 79655,
											"name": "SWAP7",
											"source": 0
										},
										{
											"begin": 79443,
											"end": 79655,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 79443,
											"end": 79655,
											"name": "SWAP7",
											"source": 0
										},
										{
											"begin": 79443,
											"end": 79655,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 79443,
											"end": 79655,
											"name": "SWAP7",
											"source": 0
										},
										{
											"begin": 79443,
											"end": 79655,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 79443,
											"end": 79655,
											"name": "SWAP7",
											"source": 0
										},
										{
											"begin": 79443,
											"end": 79655,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 79443,
											"end": 79655,
											"name": "SWAP7",
											"source": 0
										},
										{
											"begin": 79443,
											"end": 79655,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 79443,
											"end": 79655,
											"name": "SWAP7",
											"source": 0
										},
										{
											"begin": 79443,
											"end": 79655,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 79443,
											"end": 79655,
											"name": "SWAP7",
											"source": 0
										},
										{
											"begin": 79443,
											"end": 79655,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 79105,
											"end": 79662,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 79105,
											"end": 79662,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 79105,
											"end": 79662,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 79105,
											"end": 79662,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 79105,
											"end": 79662,
											"name": "SWAP5",
											"source": 0
										},
										{
											"begin": 79105,
											"end": 79662,
											"name": "SWAP6",
											"source": 0
										},
										{
											"begin": 79105,
											"end": 79662,
											"name": "SWAP7",
											"source": 0
										},
										{
											"begin": 79105,
											"end": 79662,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 28782,
											"end": 28867,
											"name": "tag",
											"source": 0,
											"value": "88"
										},
										{
											"begin": 28782,
											"end": 28867,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 28828,
											"end": 28835,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 28854,
											"end": 28860,
											"name": "PUSH",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 28854,
											"end": 28860,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 28854,
											"end": 28860,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 28854,
											"end": 28860,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 28854,
											"end": 28860,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 28854,
											"end": 28860,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 28854,
											"end": 28860,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 28854,
											"end": 28860,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 28854,
											"end": 28860,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 28854,
											"end": 28860,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 28854,
											"end": 28860,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 28847,
											"end": 28860,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 28847,
											"end": 28860,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 28782,
											"end": 28867,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 28782,
											"end": 28867,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 13137,
											"end": 13230,
											"name": "tag",
											"source": 0,
											"value": "92"
										},
										{
											"begin": 13137,
											"end": 13230,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 13184,
											"end": 13197,
											"name": "PUSH",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 13216,
											"end": 13223,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "178"
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "112"
										},
										{
											"begin": 13209,
											"end": 13223,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "tag",
											"source": 0,
											"value": "178"
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "179"
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "112"
										},
										{
											"begin": 13209,
											"end": 13223,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "tag",
											"source": 0,
											"value": "179"
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "180"
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "181"
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "180"
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "tag",
											"source": 0,
											"value": "181"
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "tag",
											"source": 0,
											"value": "182"
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "182"
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "tag",
											"source": 0,
											"value": "180"
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 13209,
											"end": 13223,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 13137,
											"end": 13230,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 13137,
											"end": 13230,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 14471,
											"end": 14649,
											"name": "tag",
											"source": 0,
											"value": "96"
										},
										{
											"begin": 14471,
											"end": 14649,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 14540,
											"end": 14544,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 14556,
											"end": 14569,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 14572,
											"end": 14584,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "184"
										},
										{
											"begin": 14572,
											"end": 14582,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "119"
										},
										{
											"begin": 14572,
											"end": 14584,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 14572,
											"end": 14584,
											"name": "tag",
											"source": 0,
											"value": "184"
										},
										{
											"begin": 14572,
											"end": 14584,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 14556,
											"end": 14584,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 14556,
											"end": 14584,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 14594,
											"end": 14621,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "185"
										},
										{
											"begin": 14604,
											"end": 14609,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 14611,
											"end": 14613,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 14615,
											"end": 14620,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 14594,
											"end": 14603,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "128"
										},
										{
											"begin": 14594,
											"end": 14621,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 14594,
											"end": 14621,
											"name": "tag",
											"source": 0,
											"value": "185"
										},
										{
											"begin": 14594,
											"end": 14621,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 14638,
											"end": 14642,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 14631,
											"end": 14642,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 14631,
											"end": 14642,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 14631,
											"end": 14642,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 14471,
											"end": 14649,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 14471,
											"end": 14649,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 14471,
											"end": 14649,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 14471,
											"end": 14649,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 14471,
											"end": 14649,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 83551,
											"end": 84223,
											"name": "tag",
											"source": 0,
											"value": "101"
										},
										{
											"begin": 83551,
											"end": 84223,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 83772,
											"end": 83780,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 83754,
											"end": 83769,
											"name": "TIMESTAMP",
											"source": 0
										},
										{
											"begin": 83754,
											"end": 83780,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 83750,
											"end": 83847,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 83750,
											"end": 83847,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "187"
										},
										{
											"begin": 83750,
											"end": 83847,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 83827,
											"end": 83835,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 83803,
											"end": 83836,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 83803,
											"end": 83836,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 83803,
											"end": 83836,
											"name": "PUSH",
											"source": 0,
											"value": "6279130200000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 83803,
											"end": 83836,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 83803,
											"end": 83836,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 83803,
											"end": 83836,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 83803,
											"end": 83836,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 83803,
											"end": 83836,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "188"
										},
										{
											"begin": 83803,
											"end": 83836,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 83803,
											"end": 83836,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 83803,
											"end": 83836,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "41"
										},
										{
											"begin": 83803,
											"end": 83836,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 83803,
											"end": 83836,
											"name": "tag",
											"source": 0,
											"value": "188"
										},
										{
											"begin": 83803,
											"end": 83836,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 83803,
											"end": 83836,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 83803,
											"end": 83836,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 83803,
											"end": 83836,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 83803,
											"end": 83836,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 83803,
											"end": 83836,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 83803,
											"end": 83836,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 83803,
											"end": 83836,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 83750,
											"end": 83847,
											"name": "tag",
											"source": 0,
											"value": "187"
										},
										{
											"begin": 83750,
											"end": 83847,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 83857,
											"end": 83875,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 82893,
											"end": 82988,
											"name": "PUSH",
											"source": 0,
											"value": "6E71EDAE12B1B97F4D1F60370FEF10105FA2FAAE0126114A169C64845D6126C9"
										},
										{
											"begin": 83916,
											"end": 83921,
											"name": "DUP9",
											"source": 0
										},
										{
											"begin": 83923,
											"end": 83930,
											"name": "DUP9",
											"source": 0
										},
										{
											"begin": 83932,
											"end": 83937,
											"name": "DUP9",
											"source": 0
										},
										{
											"begin": 83939,
											"end": 83955,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "189"
										},
										{
											"begin": 83949,
											"end": 83954,
											"name": "DUP13",
											"source": 0
										},
										{
											"begin": 83939,
											"end": 83948,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "190"
										},
										{
											"begin": 83939,
											"end": 83955,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 83939,
											"end": 83955,
											"name": "tag",
											"source": 0,
											"value": "189"
										},
										{
											"begin": 83939,
											"end": 83955,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 83957,
											"end": 83965,
											"name": "DUP10",
											"source": 0
										},
										{
											"begin": 83888,
											"end": 83966,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 83888,
											"end": 83966,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 83888,
											"end": 83966,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 83888,
											"end": 83966,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 83888,
											"end": 83966,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "191"
										},
										{
											"begin": 83888,
											"end": 83966,
											"name": "SWAP7",
											"source": 0
										},
										{
											"begin": 83888,
											"end": 83966,
											"name": "SWAP6",
											"source": 0
										},
										{
											"begin": 83888,
											"end": 83966,
											"name": "SWAP5",
											"source": 0
										},
										{
											"begin": 83888,
											"end": 83966,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 83888,
											"end": 83966,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 83888,
											"end": 83966,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 83888,
											"end": 83966,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 83888,
											"end": 83966,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "192"
										},
										{
											"begin": 83888,
											"end": 83966,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 83888,
											"end": 83966,
											"name": "tag",
											"source": 0,
											"value": "191"
										},
										{
											"begin": 83888,
											"end": 83966,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 83888,
											"end": 83966,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 83888,
											"end": 83966,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 83888,
											"end": 83966,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 83888,
											"end": 83966,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 83888,
											"end": 83966,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 83888,
											"end": 83966,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 83888,
											"end": 83966,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 83888,
											"end": 83966,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 83888,
											"end": 83966,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 83888,
											"end": 83966,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 83888,
											"end": 83966,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 83888,
											"end": 83966,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 83878,
											"end": 83967,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 83878,
											"end": 83967,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 83878,
											"end": 83967,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 83878,
											"end": 83967,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 83878,
											"end": 83967,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 83878,
											"end": 83967,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 83857,
											"end": 83967,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 83857,
											"end": 83967,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 83978,
											"end": 83990,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 83993,
											"end": 84021,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "193"
										},
										{
											"begin": 84010,
											"end": 84020,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 83993,
											"end": 84009,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "194"
										},
										{
											"begin": 83993,
											"end": 84021,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 83993,
											"end": 84021,
											"name": "tag",
											"source": 0,
											"value": "193"
										},
										{
											"begin": 83993,
											"end": 84021,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 83978,
											"end": 84021,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 83978,
											"end": 84021,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 84032,
											"end": 84046,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 84049,
											"end": 84077,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "195"
										},
										{
											"begin": 84063,
											"end": 84067,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 84069,
											"end": 84070,
											"name": "DUP8",
											"source": 0
										},
										{
											"begin": 84072,
											"end": 84073,
											"name": "DUP8",
											"source": 0
										},
										{
											"begin": 84075,
											"end": 84076,
											"name": "DUP8",
											"source": 0
										},
										{
											"begin": 84049,
											"end": 84062,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "196"
										},
										{
											"begin": 84049,
											"end": 84077,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 84049,
											"end": 84077,
											"name": "tag",
											"source": 0,
											"value": "195"
										},
										{
											"begin": 84049,
											"end": 84077,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 84032,
											"end": 84077,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 84032,
											"end": 84077,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 84101,
											"end": 84106,
											"name": "DUP10",
											"source": 0
										},
										{
											"begin": 84091,
											"end": 84106,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 84091,
											"end": 84106,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 84091,
											"end": 84097,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 84091,
											"end": 84106,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 84091,
											"end": 84106,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 84091,
											"end": 84106,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 84087,
											"end": 84175,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "197"
										},
										{
											"begin": 84087,
											"end": 84175,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 84150,
											"end": 84156,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 84158,
											"end": 84163,
											"name": "DUP11",
											"source": 0
										},
										{
											"begin": 84129,
											"end": 84164,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 84129,
											"end": 84164,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 84129,
											"end": 84164,
											"name": "PUSH",
											"source": 0,
											"value": "4B800E4600000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 84129,
											"end": 84164,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 84129,
											"end": 84164,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 84129,
											"end": 84164,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 84129,
											"end": 84164,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 84129,
											"end": 84164,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "198"
										},
										{
											"begin": 84129,
											"end": 84164,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 84129,
											"end": 84164,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 84129,
											"end": 84164,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 84129,
											"end": 84164,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "199"
										},
										{
											"begin": 84129,
											"end": 84164,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 84129,
											"end": 84164,
											"name": "tag",
											"source": 0,
											"value": "198"
										},
										{
											"begin": 84129,
											"end": 84164,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 84129,
											"end": 84164,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 84129,
											"end": 84164,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 84129,
											"end": 84164,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 84129,
											"end": 84164,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 84129,
											"end": 84164,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 84129,
											"end": 84164,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 84129,
											"end": 84164,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 84087,
											"end": 84175,
											"name": "tag",
											"source": 0,
											"value": "197"
										},
										{
											"begin": 84087,
											"end": 84175,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 84185,
											"end": 84216,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "200"
										},
										{
											"begin": 84194,
											"end": 84199,
											"name": "DUP11",
											"source": 0
										},
										{
											"begin": 84201,
											"end": 84208,
											"name": "DUP11",
											"source": 0
										},
										{
											"begin": 84210,
											"end": 84215,
											"name": "DUP11",
											"source": 0
										},
										{
											"begin": 84185,
											"end": 84193,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "121"
										},
										{
											"begin": 84185,
											"end": 84216,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 84185,
											"end": 84216,
											"name": "tag",
											"source": 0,
											"value": "200"
										},
										{
											"begin": 84185,
											"end": 84216,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 83740,
											"end": 84223,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 83740,
											"end": 84223,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 83740,
											"end": 84223,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 83551,
											"end": 84223,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 83551,
											"end": 84223,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 83551,
											"end": 84223,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 83551,
											"end": 84223,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 83551,
											"end": 84223,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 83551,
											"end": 84223,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 83551,
											"end": 84223,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 83551,
											"end": 84223,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 14707,
											"end": 14847,
											"name": "tag",
											"source": 0,
											"value": "105"
										},
										{
											"begin": 14707,
											"end": 14847,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 14787,
											"end": 14794,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 14813,
											"end": 14824,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 14813,
											"end": 14831,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 14825,
											"end": 14830,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 14813,
											"end": 14831,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 14813,
											"end": 14831,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 14813,
											"end": 14831,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 14813,
											"end": 14831,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 14813,
											"end": 14831,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 14813,
											"end": 14831,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 14813,
											"end": 14831,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 14813,
											"end": 14831,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 14813,
											"end": 14831,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 14813,
											"end": 14831,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 14813,
											"end": 14831,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 14813,
											"end": 14831,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 14813,
											"end": 14831,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 14813,
											"end": 14831,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 14813,
											"end": 14831,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 14813,
											"end": 14840,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 14832,
											"end": 14839,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 14813,
											"end": 14840,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 14813,
											"end": 14840,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 14813,
											"end": 14840,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 14813,
											"end": 14840,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 14813,
											"end": 14840,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 14813,
											"end": 14840,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 14813,
											"end": 14840,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 14813,
											"end": 14840,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 14813,
											"end": 14840,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 14813,
											"end": 14840,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 14813,
											"end": 14840,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 14813,
											"end": 14840,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 14813,
											"end": 14840,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 14813,
											"end": 14840,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 14813,
											"end": 14840,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 14813,
											"end": 14840,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 14806,
											"end": 14840,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 14806,
											"end": 14840,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 14707,
											"end": 14847,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 14707,
											"end": 14847,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 14707,
											"end": 14847,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 14707,
											"end": 14847,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 14707,
											"end": 14847,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 29687,
											"end": 29902,
											"name": "tag",
											"source": 0,
											"value": "109"
										},
										{
											"begin": 29687,
											"end": 29902,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 28675,
											"end": 28688,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "203"
										},
										{
											"begin": 28675,
											"end": 28686,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "135"
										},
										{
											"begin": 28675,
											"end": 28688,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 28675,
											"end": 28688,
											"name": "tag",
											"source": 0,
											"value": "203"
										},
										{
											"begin": 28675,
											"end": 28688,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 29791,
											"end": 29792,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 29771,
											"end": 29793,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 29771,
											"end": 29793,
											"modifierDepth": 1,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 29771,
											"end": 29779,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 29771,
											"end": 29793,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 29771,
											"end": 29793,
											"modifierDepth": 1,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 29771,
											"end": 29793,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 29767,
											"end": 29858,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "205"
										},
										{
											"begin": 29767,
											"end": 29858,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 29844,
											"end": 29845,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 29816,
											"end": 29847,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 29816,
											"end": 29847,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 29816,
											"end": 29847,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "1E4FBDF700000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 29816,
											"end": 29847,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 29816,
											"end": 29847,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 29816,
											"end": 29847,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 29816,
											"end": 29847,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 29816,
											"end": 29847,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "206"
										},
										{
											"begin": 29816,
											"end": 29847,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 29816,
											"end": 29847,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 29816,
											"end": 29847,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "90"
										},
										{
											"begin": 29816,
											"end": 29847,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 29816,
											"end": 29847,
											"modifierDepth": 1,
											"name": "tag",
											"source": 0,
											"value": "206"
										},
										{
											"begin": 29816,
											"end": 29847,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 29816,
											"end": 29847,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 29816,
											"end": 29847,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 29816,
											"end": 29847,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 29816,
											"end": 29847,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 29816,
											"end": 29847,
											"modifierDepth": 1,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 29816,
											"end": 29847,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 29816,
											"end": 29847,
											"modifierDepth": 1,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 29767,
											"end": 29858,
											"modifierDepth": 1,
											"name": "tag",
											"source": 0,
											"value": "205"
										},
										{
											"begin": 29767,
											"end": 29858,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 29867,
											"end": 29895,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "207"
										},
										{
											"begin": 29886,
											"end": 29894,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 29867,
											"end": 29885,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "154"
										},
										{
											"begin": 29867,
											"end": 29895,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 29867,
											"end": 29895,
											"modifierDepth": 1,
											"name": "tag",
											"source": 0,
											"value": "207"
										},
										{
											"begin": 29867,
											"end": 29895,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 29687,
											"end": 29902,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 29687,
											"end": 29902,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 4175,
											"end": 4271,
											"name": "tag",
											"source": 0,
											"value": "119"
										},
										{
											"begin": 4175,
											"end": 4271,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4228,
											"end": 4235,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 4254,
											"end": 4264,
											"name": "CALLER",
											"source": 0
										},
										{
											"begin": 4247,
											"end": 4264,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4247,
											"end": 4264,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 4175,
											"end": 4271,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 4175,
											"end": 4271,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 19850,
											"end": 19978,
											"name": "tag",
											"source": 0,
											"value": "121"
										},
										{
											"begin": 19850,
											"end": 19978,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 19934,
											"end": 19971,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "210"
										},
										{
											"begin": 19943,
											"end": 19948,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 19950,
											"end": 19957,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 19959,
											"end": 19964,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 19966,
											"end": 19970,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 19934,
											"end": 19942,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "211"
										},
										{
											"begin": 19934,
											"end": 19971,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 19934,
											"end": 19971,
											"name": "tag",
											"source": 0,
											"value": "210"
										},
										{
											"begin": 19934,
											"end": 19971,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 19850,
											"end": 19978,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 19850,
											"end": 19978,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 19850,
											"end": 19978,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 19850,
											"end": 19978,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 21524,
											"end": 22001,
											"name": "tag",
											"source": 0,
											"value": "126"
										},
										{
											"begin": 21524,
											"end": 22001,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 21623,
											"end": 21647,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 21650,
											"end": 21675,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "213"
										},
										{
											"begin": 21660,
											"end": 21665,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 21667,
											"end": 21674,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 21650,
											"end": 21659,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "105"
										},
										{
											"begin": 21650,
											"end": 21675,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 21650,
											"end": 21675,
											"name": "tag",
											"source": 0,
											"value": "213"
										},
										{
											"begin": 21650,
											"end": 21675,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 21623,
											"end": 21675,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 21623,
											"end": 21675,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 21709,
											"end": 21726,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 21689,
											"end": 21705,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 21689,
											"end": 21726,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 21685,
											"end": 21995,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "214"
										},
										{
											"begin": 21685,
											"end": 21995,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 21765,
											"end": 21770,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 21746,
											"end": 21762,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 21746,
											"end": 21770,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 21742,
											"end": 21872,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 21742,
											"end": 21872,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "215"
										},
										{
											"begin": 21742,
											"end": 21872,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 21824,
											"end": 21831,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 21833,
											"end": 21849,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 21851,
											"end": 21856,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 21797,
											"end": 21857,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 21797,
											"end": 21857,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 21797,
											"end": 21857,
											"name": "PUSH",
											"source": 0,
											"value": "FB8F41B200000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 21797,
											"end": 21857,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 21797,
											"end": 21857,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 21797,
											"end": 21857,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 21797,
											"end": 21857,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 21797,
											"end": 21857,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "216"
										},
										{
											"begin": 21797,
											"end": 21857,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 21797,
											"end": 21857,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 21797,
											"end": 21857,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 21797,
											"end": 21857,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 21797,
											"end": 21857,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "217"
										},
										{
											"begin": 21797,
											"end": 21857,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 21797,
											"end": 21857,
											"name": "tag",
											"source": 0,
											"value": "216"
										},
										{
											"begin": 21797,
											"end": 21857,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 21797,
											"end": 21857,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 21797,
											"end": 21857,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 21797,
											"end": 21857,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 21797,
											"end": 21857,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 21797,
											"end": 21857,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 21797,
											"end": 21857,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 21797,
											"end": 21857,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 21742,
											"end": 21872,
											"name": "tag",
											"source": 0,
											"value": "215"
										},
										{
											"begin": 21742,
											"end": 21872,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 21913,
											"end": 21970,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "218"
										},
										{
											"begin": 21922,
											"end": 21927,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 21929,
											"end": 21936,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 21957,
											"end": 21962,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 21938,
											"end": 21954,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 21938,
											"end": 21962,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 21964,
											"end": 21969,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 21913,
											"end": 21921,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "211"
										},
										{
											"begin": 21913,
											"end": 21970,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 21913,
											"end": 21970,
											"name": "tag",
											"source": 0,
											"value": "218"
										},
										{
											"begin": 21913,
											"end": 21970,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 21685,
											"end": 21995,
											"name": "tag",
											"source": 0,
											"value": "214"
										},
										{
											"begin": 21685,
											"end": 21995,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 21613,
											"end": 22001,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 21524,
											"end": 22001,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 21524,
											"end": 22001,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 21524,
											"end": 22001,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 21524,
											"end": 22001,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 16517,
											"end": 16817,
											"name": "tag",
											"source": 0,
											"value": "128"
										},
										{
											"begin": 16517,
											"end": 16817,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 16616,
											"end": 16617,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 16600,
											"end": 16618,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 16600,
											"end": 16618,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 16600,
											"end": 16604,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 16600,
											"end": 16618,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 16600,
											"end": 16618,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 16600,
											"end": 16618,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 16596,
											"end": 16682,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "220"
										},
										{
											"begin": 16596,
											"end": 16682,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 16668,
											"end": 16669,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 16641,
											"end": 16671,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 16641,
											"end": 16671,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 16641,
											"end": 16671,
											"name": "PUSH",
											"source": 0,
											"value": "96C6FD1E00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 16641,
											"end": 16671,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 16641,
											"end": 16671,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 16641,
											"end": 16671,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 16641,
											"end": 16671,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 16641,
											"end": 16671,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "221"
										},
										{
											"begin": 16641,
											"end": 16671,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 16641,
											"end": 16671,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 16641,
											"end": 16671,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "90"
										},
										{
											"begin": 16641,
											"end": 16671,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 16641,
											"end": 16671,
											"name": "tag",
											"source": 0,
											"value": "221"
										},
										{
											"begin": 16641,
											"end": 16671,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 16641,
											"end": 16671,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 16641,
											"end": 16671,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 16641,
											"end": 16671,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 16641,
											"end": 16671,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 16641,
											"end": 16671,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 16641,
											"end": 16671,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 16641,
											"end": 16671,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 16596,
											"end": 16682,
											"name": "tag",
											"source": 0,
											"value": "220"
										},
										{
											"begin": 16596,
											"end": 16682,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 16709,
											"end": 16710,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 16695,
											"end": 16711,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 16695,
											"end": 16711,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 16695,
											"end": 16697,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 16695,
											"end": 16711,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 16695,
											"end": 16711,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 16695,
											"end": 16711,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 16691,
											"end": 16777,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "222"
										},
										{
											"begin": 16691,
											"end": 16777,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 16763,
											"end": 16764,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 16734,
											"end": 16766,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 16734,
											"end": 16766,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 16734,
											"end": 16766,
											"name": "PUSH",
											"source": 0,
											"value": "EC442F0500000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 16734,
											"end": 16766,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 16734,
											"end": 16766,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 16734,
											"end": 16766,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 16734,
											"end": 16766,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 16734,
											"end": 16766,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "223"
										},
										{
											"begin": 16734,
											"end": 16766,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 16734,
											"end": 16766,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 16734,
											"end": 16766,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "90"
										},
										{
											"begin": 16734,
											"end": 16766,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 16734,
											"end": 16766,
											"name": "tag",
											"source": 0,
											"value": "223"
										},
										{
											"begin": 16734,
											"end": 16766,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 16734,
											"end": 16766,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 16734,
											"end": 16766,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 16734,
											"end": 16766,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 16734,
											"end": 16766,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 16734,
											"end": 16766,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 16734,
											"end": 16766,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 16734,
											"end": 16766,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 16691,
											"end": 16777,
											"name": "tag",
											"source": 0,
											"value": "222"
										},
										{
											"begin": 16691,
											"end": 16777,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 16786,
											"end": 16810,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "224"
										},
										{
											"begin": 16794,
											"end": 16798,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 16800,
											"end": 16802,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 16804,
											"end": 16809,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 16786,
											"end": 16793,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "225"
										},
										{
											"begin": 16786,
											"end": 16810,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 16786,
											"end": 16810,
											"name": "tag",
											"source": 0,
											"value": "224"
										},
										{
											"begin": 16786,
											"end": 16810,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 16517,
											"end": 16817,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 16517,
											"end": 16817,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 16517,
											"end": 16817,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 16517,
											"end": 16817,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 77806,
											"end": 78068,
											"name": "tag",
											"source": 0,
											"value": "132"
										},
										{
											"begin": 77806,
											"end": 78068,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 77859,
											"end": 77866,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 77899,
											"end": 77910,
											"name": "PUSHIMMUTABLE",
											"source": 0,
											"value": "3324"
										},
										{
											"begin": 77882,
											"end": 77910,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 77882,
											"end": 77910,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 77890,
											"end": 77894,
											"name": "ADDRESS",
											"source": 0
										},
										{
											"begin": 77882,
											"end": 77910,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 77882,
											"end": 77910,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 77882,
											"end": 77910,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 77882,
											"end": 77945,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 77882,
											"end": 77945,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 77882,
											"end": 77945,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "227"
										},
										{
											"begin": 77882,
											"end": 77945,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 77882,
											"end": 77945,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 77931,
											"end": 77945,
											"name": "PUSHIMMUTABLE",
											"source": 0,
											"value": "3322"
										},
										{
											"begin": 77914,
											"end": 77927,
											"name": "CHAINID",
											"source": 0
										},
										{
											"begin": 77914,
											"end": 77945,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 77882,
											"end": 77945,
											"name": "tag",
											"source": 0,
											"value": "227"
										},
										{
											"begin": 77882,
											"end": 77945,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 77878,
											"end": 78062,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 77878,
											"end": 78062,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "228"
										},
										{
											"begin": 77878,
											"end": 78062,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 77968,
											"end": 77990,
											"name": "PUSHIMMUTABLE",
											"source": 0,
											"value": "3320"
										},
										{
											"begin": 77961,
											"end": 77990,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 77961,
											"end": 77990,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 77961,
											"end": 77990,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "226"
										},
										{
											"begin": 77961,
											"end": 77990,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 77878,
											"end": 78062,
											"name": "tag",
											"source": 0,
											"value": "228"
										},
										{
											"begin": 77878,
											"end": 78062,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 78028,
											"end": 78051,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "230"
										},
										{
											"begin": 78028,
											"end": 78049,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "231"
										},
										{
											"begin": 78028,
											"end": 78051,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 78028,
											"end": 78051,
											"name": "tag",
											"source": 0,
											"value": "230"
										},
										{
											"begin": 78028,
											"end": 78051,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 78021,
											"end": 78051,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 78021,
											"end": 78051,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 77806,
											"end": 78068,
											"name": "tag",
											"source": 0,
											"value": "226"
										},
										{
											"begin": 77806,
											"end": 78068,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 77806,
											"end": 78068,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 77806,
											"end": 78068,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 28940,
											"end": 29102,
											"name": "tag",
											"source": 0,
											"value": "135"
										},
										{
											"begin": 28940,
											"end": 29102,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 29010,
											"end": 29022,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "233"
										},
										{
											"begin": 29010,
											"end": 29020,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "119"
										},
										{
											"begin": 29010,
											"end": 29022,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 29010,
											"end": 29022,
											"name": "tag",
											"source": 0,
											"value": "233"
										},
										{
											"begin": 29010,
											"end": 29022,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 28999,
											"end": 29022,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 28999,
											"end": 29022,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 28999,
											"end": 29006,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "234"
										},
										{
											"begin": 28999,
											"end": 29004,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "88"
										},
										{
											"begin": 28999,
											"end": 29006,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 28999,
											"end": 29006,
											"name": "tag",
											"source": 0,
											"value": "234"
										},
										{
											"begin": 28999,
											"end": 29006,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 28999,
											"end": 29022,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 28999,
											"end": 29022,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 28999,
											"end": 29022,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 28995,
											"end": 29096,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "235"
										},
										{
											"begin": 28995,
											"end": 29096,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 29072,
											"end": 29084,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "236"
										},
										{
											"begin": 29072,
											"end": 29082,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "119"
										},
										{
											"begin": 29072,
											"end": 29084,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 29072,
											"end": 29084,
											"name": "tag",
											"source": 0,
											"value": "236"
										},
										{
											"begin": 29072,
											"end": 29084,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 29045,
											"end": 29085,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 29045,
											"end": 29085,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 29045,
											"end": 29085,
											"name": "PUSH",
											"source": 0,
											"value": "118CDAA700000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 29045,
											"end": 29085,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 29045,
											"end": 29085,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 29045,
											"end": 29085,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 29045,
											"end": 29085,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 29045,
											"end": 29085,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "237"
										},
										{
											"begin": 29045,
											"end": 29085,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 29045,
											"end": 29085,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 29045,
											"end": 29085,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "90"
										},
										{
											"begin": 29045,
											"end": 29085,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 29045,
											"end": 29085,
											"name": "tag",
											"source": 0,
											"value": "237"
										},
										{
											"begin": 29045,
											"end": 29085,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 29045,
											"end": 29085,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 29045,
											"end": 29085,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 29045,
											"end": 29085,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 29045,
											"end": 29085,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 29045,
											"end": 29085,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 29045,
											"end": 29085,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 29045,
											"end": 29085,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 28995,
											"end": 29096,
											"name": "tag",
											"source": 0,
											"value": "235"
										},
										{
											"begin": 28995,
											"end": 29096,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 28940,
											"end": 29102,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 25831,
											"end": 25948,
											"name": "tag",
											"source": 0,
											"value": "138"
										},
										{
											"begin": 25831,
											"end": 25948,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 24842,
											"end": 24858,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "239"
										},
										{
											"begin": 24842,
											"end": 24856,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "240"
										},
										{
											"begin": 24842,
											"end": 24858,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 24842,
											"end": 24858,
											"name": "tag",
											"source": 0,
											"value": "239"
										},
										{
											"begin": 24842,
											"end": 24858,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 25899,
											"end": 25904,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 25889,
											"end": 25896,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 25889,
											"end": 25896,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 25889,
											"end": 25904,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 25889,
											"end": 25904,
											"modifierDepth": 1,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 25889,
											"end": 25904,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 25889,
											"end": 25904,
											"modifierDepth": 1,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 25889,
											"end": 25904,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 25889,
											"end": 25904,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "FF"
										},
										{
											"begin": 25889,
											"end": 25904,
											"modifierDepth": 1,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 25889,
											"end": 25904,
											"modifierDepth": 1,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 25889,
											"end": 25904,
											"modifierDepth": 1,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 25889,
											"end": 25904,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 25889,
											"end": 25904,
											"modifierDepth": 1,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 25889,
											"end": 25904,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 25889,
											"end": 25904,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 25889,
											"end": 25904,
											"modifierDepth": 1,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 25889,
											"end": 25904,
											"modifierDepth": 1,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 25889,
											"end": 25904,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 25889,
											"end": 25904,
											"modifierDepth": 1,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 25889,
											"end": 25904,
											"modifierDepth": 1,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 25919,
											"end": 25941,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA"
										},
										{
											"begin": 25928,
											"end": 25940,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "242"
										},
										{
											"begin": 25928,
											"end": 25938,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "119"
										},
										{
											"begin": 25928,
											"end": 25940,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 25928,
											"end": 25940,
											"modifierDepth": 1,
											"name": "tag",
											"source": 0,
											"value": "242"
										},
										{
											"begin": 25928,
											"end": 25940,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 25919,
											"end": 25941,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 25919,
											"end": 25941,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 25919,
											"end": 25941,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "243"
										},
										{
											"begin": 25919,
											"end": 25941,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 25919,
											"end": 25941,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 25919,
											"end": 25941,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "90"
										},
										{
											"begin": 25919,
											"end": 25941,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 25919,
											"end": 25941,
											"modifierDepth": 1,
											"name": "tag",
											"source": 0,
											"value": "243"
										},
										{
											"begin": 25919,
											"end": 25941,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 25919,
											"end": 25941,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 25919,
											"end": 25941,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 25919,
											"end": 25941,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 25919,
											"end": 25941,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 25919,
											"end": 25941,
											"modifierDepth": 1,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 25919,
											"end": 25941,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 25919,
											"end": 25941,
											"modifierDepth": 1,
											"name": "LOG1",
											"source": 0
										},
										{
											"begin": 25831,
											"end": 25948,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 18582,
											"end": 18790,
											"name": "tag",
											"source": 0,
											"value": "143"
										},
										{
											"begin": 18582,
											"end": 18790,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 18671,
											"end": 18672,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 18652,
											"end": 18673,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 18652,
											"end": 18673,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 18652,
											"end": 18659,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 18652,
											"end": 18673,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 18652,
											"end": 18673,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 18652,
											"end": 18673,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 18648,
											"end": 18739,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "245"
										},
										{
											"begin": 18648,
											"end": 18739,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 18725,
											"end": 18726,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 18696,
											"end": 18728,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 18696,
											"end": 18728,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 18696,
											"end": 18728,
											"name": "PUSH",
											"source": 0,
											"value": "EC442F0500000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 18696,
											"end": 18728,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 18696,
											"end": 18728,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 18696,
											"end": 18728,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 18696,
											"end": 18728,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 18696,
											"end": 18728,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "246"
										},
										{
											"begin": 18696,
											"end": 18728,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 18696,
											"end": 18728,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 18696,
											"end": 18728,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "90"
										},
										{
											"begin": 18696,
											"end": 18728,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 18696,
											"end": 18728,
											"name": "tag",
											"source": 0,
											"value": "246"
										},
										{
											"begin": 18696,
											"end": 18728,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 18696,
											"end": 18728,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 18696,
											"end": 18728,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 18696,
											"end": 18728,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 18696,
											"end": 18728,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 18696,
											"end": 18728,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 18696,
											"end": 18728,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 18696,
											"end": 18728,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 18648,
											"end": 18739,
											"name": "tag",
											"source": 0,
											"value": "245"
										},
										{
											"begin": 18648,
											"end": 18739,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 18748,
											"end": 18783,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "247"
										},
										{
											"begin": 18764,
											"end": 18765,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 18768,
											"end": 18775,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 18777,
											"end": 18782,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 18748,
											"end": 18755,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "225"
										},
										{
											"begin": 18748,
											"end": 18783,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 18748,
											"end": 18783,
											"name": "tag",
											"source": 0,
											"value": "247"
										},
										{
											"begin": 18748,
											"end": 18783,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 18582,
											"end": 18790,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 18582,
											"end": 18790,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 18582,
											"end": 18790,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 19108,
											"end": 19314,
											"name": "tag",
											"source": 0,
											"value": "147"
										},
										{
											"begin": 19108,
											"end": 19314,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 19197,
											"end": 19198,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 19178,
											"end": 19199,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 19178,
											"end": 19199,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 19178,
											"end": 19185,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 19178,
											"end": 19199,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 19178,
											"end": 19199,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 19178,
											"end": 19199,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 19174,
											"end": 19263,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "249"
										},
										{
											"begin": 19174,
											"end": 19263,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 19249,
											"end": 19250,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 19222,
											"end": 19252,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 19222,
											"end": 19252,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 19222,
											"end": 19252,
											"name": "PUSH",
											"source": 0,
											"value": "96C6FD1E00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 19222,
											"end": 19252,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 19222,
											"end": 19252,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 19222,
											"end": 19252,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 19222,
											"end": 19252,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 19222,
											"end": 19252,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "250"
										},
										{
											"begin": 19222,
											"end": 19252,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 19222,
											"end": 19252,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 19222,
											"end": 19252,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "90"
										},
										{
											"begin": 19222,
											"end": 19252,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 19222,
											"end": 19252,
											"name": "tag",
											"source": 0,
											"value": "250"
										},
										{
											"begin": 19222,
											"end": 19252,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 19222,
											"end": 19252,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 19222,
											"end": 19252,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 19222,
											"end": 19252,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 19222,
											"end": 19252,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 19222,
											"end": 19252,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 19222,
											"end": 19252,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 19222,
											"end": 19252,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 19174,
											"end": 19263,
											"name": "tag",
											"source": 0,
											"value": "249"
										},
										{
											"begin": 19174,
											"end": 19263,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 19272,
											"end": 19307,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "251"
										},
										{
											"begin": 19280,
											"end": 19287,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 19297,
											"end": 19298,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 19301,
											"end": 19306,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 19272,
											"end": 19279,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "225"
										},
										{
											"begin": 19272,
											"end": 19307,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 19272,
											"end": 19307,
											"name": "tag",
											"source": 0,
											"value": "251"
										},
										{
											"begin": 19272,
											"end": 19307,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 19108,
											"end": 19314,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 19108,
											"end": 19314,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 19108,
											"end": 19314,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 30056,
											"end": 30243,
											"name": "tag",
											"source": 0,
											"value": "154"
										},
										{
											"begin": 30056,
											"end": 30243,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 30129,
											"end": 30145,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 30148,
											"end": 30154,
											"name": "PUSH",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 30148,
											"end": 30154,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 30148,
											"end": 30154,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 30148,
											"end": 30154,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 30148,
											"end": 30154,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 30148,
											"end": 30154,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 30148,
											"end": 30154,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 30148,
											"end": 30154,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 30148,
											"end": 30154,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 30148,
											"end": 30154,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 30148,
											"end": 30154,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 30129,
											"end": 30154,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 30129,
											"end": 30154,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 30173,
											"end": 30181,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 30164,
											"end": 30170,
											"name": "PUSH",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 30164,
											"end": 30170,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 30164,
											"end": 30181,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 30164,
											"end": 30181,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 30164,
											"end": 30181,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 30164,
											"end": 30181,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 30164,
											"end": 30181,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 30164,
											"end": 30181,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 30164,
											"end": 30181,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 30164,
											"end": 30181,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 30164,
											"end": 30181,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 30164,
											"end": 30181,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 30164,
											"end": 30181,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 30164,
											"end": 30181,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 30164,
											"end": 30181,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 30164,
											"end": 30181,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 30164,
											"end": 30181,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 30164,
											"end": 30181,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 30164,
											"end": 30181,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 30164,
											"end": 30181,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 30227,
											"end": 30235,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 30196,
											"end": 30236,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 30196,
											"end": 30236,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 30217,
											"end": 30225,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 30196,
											"end": 30236,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 30196,
											"end": 30236,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 30196,
											"end": 30236,
											"name": "PUSH",
											"source": 0,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 30196,
											"end": 30236,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 30196,
											"end": 30236,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 30196,
											"end": 30236,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 30196,
											"end": 30236,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 30196,
											"end": 30236,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 30196,
											"end": 30236,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 30196,
											"end": 30236,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 30196,
											"end": 30236,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 30196,
											"end": 30236,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 30119,
											"end": 30243,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 30056,
											"end": 30243,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 30056,
											"end": 30243,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 81131,
											"end": 81238,
											"name": "tag",
											"source": 0,
											"value": "161"
										},
										{
											"begin": 81131,
											"end": 81238,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 81191,
											"end": 81198,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 81217,
											"end": 81224,
											"name": "PUSH",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 81217,
											"end": 81231,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 81225,
											"end": 81230,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 81217,
											"end": 81231,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 81217,
											"end": 81231,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 81217,
											"end": 81231,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 81217,
											"end": 81231,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 81217,
											"end": 81231,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 81217,
											"end": 81231,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 81217,
											"end": 81231,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 81217,
											"end": 81231,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 81217,
											"end": 81231,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 81217,
											"end": 81231,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 81217,
											"end": 81231,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 81217,
											"end": 81231,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 81217,
											"end": 81231,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 81217,
											"end": 81231,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 81217,
											"end": 81231,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 81217,
											"end": 81231,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 81210,
											"end": 81231,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 81210,
											"end": 81231,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 81131,
											"end": 81238,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 81131,
											"end": 81238,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 81131,
											"end": 81238,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 81131,
											"end": 81238,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 25584,
											"end": 25699,
											"name": "tag",
											"source": 0,
											"value": "166"
										},
										{
											"begin": 25584,
											"end": 25699,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 24595,
											"end": 24614,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "255"
										},
										{
											"begin": 24595,
											"end": 24612,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "256"
										},
										{
											"begin": 24595,
											"end": 24614,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 24595,
											"end": 24614,
											"name": "tag",
											"source": 0,
											"value": "255"
										},
										{
											"begin": 24595,
											"end": 24614,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 25653,
											"end": 25657,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 25643,
											"end": 25650,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 25643,
											"end": 25650,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 25643,
											"end": 25657,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 25643,
											"end": 25657,
											"modifierDepth": 1,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 25643,
											"end": 25657,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 25643,
											"end": 25657,
											"modifierDepth": 1,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 25643,
											"end": 25657,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 25643,
											"end": 25657,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "FF"
										},
										{
											"begin": 25643,
											"end": 25657,
											"modifierDepth": 1,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 25643,
											"end": 25657,
											"modifierDepth": 1,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 25643,
											"end": 25657,
											"modifierDepth": 1,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 25643,
											"end": 25657,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 25643,
											"end": 25657,
											"modifierDepth": 1,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 25643,
											"end": 25657,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 25643,
											"end": 25657,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 25643,
											"end": 25657,
											"modifierDepth": 1,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 25643,
											"end": 25657,
											"modifierDepth": 1,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 25643,
											"end": 25657,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 25643,
											"end": 25657,
											"modifierDepth": 1,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 25643,
											"end": 25657,
											"modifierDepth": 1,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 25672,
											"end": 25692,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258"
										},
										{
											"begin": 25679,
											"end": 25691,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "258"
										},
										{
											"begin": 25679,
											"end": 25689,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "119"
										},
										{
											"begin": 25679,
											"end": 25691,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 25679,
											"end": 25691,
											"modifierDepth": 1,
											"name": "tag",
											"source": 0,
											"value": "258"
										},
										{
											"begin": 25679,
											"end": 25691,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 25672,
											"end": 25692,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 25672,
											"end": 25692,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 25672,
											"end": 25692,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "259"
										},
										{
											"begin": 25672,
											"end": 25692,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 25672,
											"end": 25692,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 25672,
											"end": 25692,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "90"
										},
										{
											"begin": 25672,
											"end": 25692,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 25672,
											"end": 25692,
											"modifierDepth": 1,
											"name": "tag",
											"source": 0,
											"value": "259"
										},
										{
											"begin": 25672,
											"end": 25692,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 25672,
											"end": 25692,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 25672,
											"end": 25692,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 25672,
											"end": 25692,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 25672,
											"end": 25692,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 25672,
											"end": 25692,
											"modifierDepth": 1,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 25672,
											"end": 25692,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 25672,
											"end": 25692,
											"modifierDepth": 1,
											"name": "LOG1",
											"source": 0
										},
										{
											"begin": 25584,
											"end": 25699,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 79982,
											"end": 80108,
											"name": "tag",
											"source": 0,
											"value": "169"
										},
										{
											"begin": 79982,
											"end": 80108,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 80028,
											"end": 80041,
											"name": "PUSH",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 80060,
											"end": 80101,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "261"
										},
										{
											"begin": 80087,
											"end": 80100,
											"name": "PUSH",
											"source": 0,
											"value": "6"
										},
										{
											"begin": 80060,
											"end": 80065,
											"name": "PUSHIMMUTABLE",
											"source": 0,
											"value": "3331"
										},
										{
											"begin": 80060,
											"end": 80086,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "262"
										},
										{
											"begin": 80060,
											"end": 80086,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 80060,
											"end": 80101,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 80060,
											"end": 80101,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 80060,
											"end": 80101,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFF"
										},
										{
											"begin": 80060,
											"end": 80101,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 80060,
											"end": 80101,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 80060,
											"end": 80101,
											"name": "tag",
											"source": 0,
											"value": "261"
										},
										{
											"begin": 80060,
											"end": 80101,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 80053,
											"end": 80101,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 80053,
											"end": 80101,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 79982,
											"end": 80108,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 79982,
											"end": 80108,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 80434,
											"end": 80569,
											"name": "tag",
											"source": 0,
											"value": "171"
										},
										{
											"begin": 80434,
											"end": 80569,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 80483,
											"end": 80496,
											"name": "PUSH",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 80515,
											"end": 80562,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "264"
										},
										{
											"begin": 80545,
											"end": 80561,
											"name": "PUSH",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 80515,
											"end": 80523,
											"name": "PUSHIMMUTABLE",
											"source": 0,
											"value": "3334"
										},
										{
											"begin": 80515,
											"end": 80544,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "262"
										},
										{
											"begin": 80515,
											"end": 80544,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 80515,
											"end": 80562,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 80515,
											"end": 80562,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 80515,
											"end": 80562,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFF"
										},
										{
											"begin": 80515,
											"end": 80562,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 80515,
											"end": 80562,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 80515,
											"end": 80562,
											"name": "tag",
											"source": 0,
											"value": "264"
										},
										{
											"begin": 80515,
											"end": 80562,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 80508,
											"end": 80562,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 80508,
											"end": 80562,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 80434,
											"end": 80569,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 80434,
											"end": 80569,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 81352,
											"end": 81747,
											"name": "tag",
											"source": 0,
											"value": "190"
										},
										{
											"begin": 81352,
											"end": 81747,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 81412,
											"end": 81419,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 81714,
											"end": 81721,
											"name": "PUSH",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 81714,
											"end": 81728,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 81722,
											"end": 81727,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 81714,
											"end": 81728,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 81714,
											"end": 81728,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 81714,
											"end": 81728,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 81714,
											"end": 81728,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 81714,
											"end": 81728,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 81714,
											"end": 81728,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 81714,
											"end": 81728,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 81714,
											"end": 81728,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 81714,
											"end": 81728,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 81714,
											"end": 81728,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 81714,
											"end": 81728,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 81714,
											"end": 81728,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 81714,
											"end": 81728,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 81714,
											"end": 81728,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 81714,
											"end": 81728,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 81714,
											"end": 81728,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 81714,
											"end": 81730,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 81714,
											"end": 81730,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 81714,
											"end": 81730,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 81714,
											"end": 81730,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 81714,
											"end": 81730,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 81714,
											"end": 81730,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 81714,
											"end": 81730,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 81714,
											"end": 81730,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 81714,
											"end": 81730,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 81714,
											"end": 81730,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 81714,
											"end": 81730,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 81714,
											"end": 81730,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 81707,
											"end": 81730,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 81707,
											"end": 81730,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 81352,
											"end": 81747,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 81352,
											"end": 81747,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 81352,
											"end": 81747,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 81352,
											"end": 81747,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 78878,
											"end": 79054,
											"name": "tag",
											"source": 0,
											"value": "194"
										},
										{
											"begin": 78878,
											"end": 79054,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 78955,
											"end": 78962,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 78981,
											"end": 79047,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "267"
										},
										{
											"begin": 79014,
											"end": 79034,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "268"
										},
										{
											"begin": 79014,
											"end": 79032,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "132"
										},
										{
											"begin": 79014,
											"end": 79034,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 79014,
											"end": 79034,
											"name": "tag",
											"source": 0,
											"value": "268"
										},
										{
											"begin": 79014,
											"end": 79034,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 79036,
											"end": 79046,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 78981,
											"end": 79013,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "269"
										},
										{
											"begin": 78981,
											"end": 79047,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 78981,
											"end": 79047,
											"name": "tag",
											"source": 0,
											"value": "267"
										},
										{
											"begin": 78981,
											"end": 79047,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 78974,
											"end": 79047,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 78974,
											"end": 79047,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 78878,
											"end": 79054,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 78878,
											"end": 79054,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 78878,
											"end": 79054,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 78878,
											"end": 79054,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 40929,
											"end": 41189,
											"name": "tag",
											"source": 0,
											"value": "196"
										},
										{
											"begin": 40929,
											"end": 41189,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 41014,
											"end": 41021,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 41034,
											"end": 41051,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 41053,
											"end": 41071,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 41073,
											"end": 41089,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 41093,
											"end": 41118,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "271"
										},
										{
											"begin": 41104,
											"end": 41108,
											"name": "DUP9",
											"source": 0
										},
										{
											"begin": 41110,
											"end": 41111,
											"name": "DUP9",
											"source": 0
										},
										{
											"begin": 41113,
											"end": 41114,
											"name": "DUP9",
											"source": 0
										},
										{
											"begin": 41116,
											"end": 41117,
											"name": "DUP9",
											"source": 0
										},
										{
											"begin": 41093,
											"end": 41103,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "272"
										},
										{
											"begin": 41093,
											"end": 41118,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 41093,
											"end": 41118,
											"name": "tag",
											"source": 0,
											"value": "271"
										},
										{
											"begin": 41093,
											"end": 41118,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 41033,
											"end": 41118,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 41033,
											"end": 41118,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 41033,
											"end": 41118,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 41033,
											"end": 41118,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 41033,
											"end": 41118,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 41033,
											"end": 41118,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 41128,
											"end": 41156,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "273"
										},
										{
											"begin": 41140,
											"end": 41145,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 41147,
											"end": 41155,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 41128,
											"end": 41139,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "274"
										},
										{
											"begin": 41128,
											"end": 41156,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 41128,
											"end": 41156,
											"name": "tag",
											"source": 0,
											"value": "273"
										},
										{
											"begin": 41128,
											"end": 41156,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 41173,
											"end": 41182,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 41166,
											"end": 41182,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 41166,
											"end": 41182,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 41166,
											"end": 41182,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 41166,
											"end": 41182,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 41166,
											"end": 41182,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 40929,
											"end": 41189,
											"name": "SWAP5",
											"source": 0
										},
										{
											"begin": 40929,
											"end": 41189,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 40929,
											"end": 41189,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 40929,
											"end": 41189,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 40929,
											"end": 41189,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 40929,
											"end": 41189,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 40929,
											"end": 41189,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 20810,
											"end": 21242,
											"name": "tag",
											"source": 0,
											"value": "211"
										},
										{
											"begin": 20810,
											"end": 21242,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 20939,
											"end": 20940,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 20922,
											"end": 20941,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 20922,
											"end": 20941,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 20922,
											"end": 20927,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 20922,
											"end": 20941,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 20922,
											"end": 20941,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 20922,
											"end": 20941,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 20918,
											"end": 21007,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "276"
										},
										{
											"begin": 20918,
											"end": 21007,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 20993,
											"end": 20994,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 20964,
											"end": 20996,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 20964,
											"end": 20996,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 20964,
											"end": 20996,
											"name": "PUSH",
											"source": 0,
											"value": "E602DF0500000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 20964,
											"end": 20996,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 20964,
											"end": 20996,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 20964,
											"end": 20996,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 20964,
											"end": 20996,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 20964,
											"end": 20996,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "277"
										},
										{
											"begin": 20964,
											"end": 20996,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 20964,
											"end": 20996,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 20964,
											"end": 20996,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "90"
										},
										{
											"begin": 20964,
											"end": 20996,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 20964,
											"end": 20996,
											"name": "tag",
											"source": 0,
											"value": "277"
										},
										{
											"begin": 20964,
											"end": 20996,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 20964,
											"end": 20996,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 20964,
											"end": 20996,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 20964,
											"end": 20996,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 20964,
											"end": 20996,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 20964,
											"end": 20996,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 20964,
											"end": 20996,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 20964,
											"end": 20996,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 20918,
											"end": 21007,
											"name": "tag",
											"source": 0,
											"value": "276"
										},
										{
											"begin": 20918,
											"end": 21007,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 21039,
											"end": 21040,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 21020,
											"end": 21041,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 21020,
											"end": 21041,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 21020,
											"end": 21027,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 21020,
											"end": 21041,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 21020,
											"end": 21041,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 21020,
											"end": 21041,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 21016,
											"end": 21106,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "278"
										},
										{
											"begin": 21016,
											"end": 21106,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 21092,
											"end": 21093,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 21064,
											"end": 21095,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 21064,
											"end": 21095,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 21064,
											"end": 21095,
											"name": "PUSH",
											"source": 0,
											"value": "94280D6200000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 21064,
											"end": 21095,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 21064,
											"end": 21095,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 21064,
											"end": 21095,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 21064,
											"end": 21095,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 21064,
											"end": 21095,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "279"
										},
										{
											"begin": 21064,
											"end": 21095,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 21064,
											"end": 21095,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 21064,
											"end": 21095,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "90"
										},
										{
											"begin": 21064,
											"end": 21095,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 21064,
											"end": 21095,
											"name": "tag",
											"source": 0,
											"value": "279"
										},
										{
											"begin": 21064,
											"end": 21095,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 21064,
											"end": 21095,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 21064,
											"end": 21095,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 21064,
											"end": 21095,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 21064,
											"end": 21095,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 21064,
											"end": 21095,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 21064,
											"end": 21095,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 21064,
											"end": 21095,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 21016,
											"end": 21106,
											"name": "tag",
											"source": 0,
											"value": "278"
										},
										{
											"begin": 21016,
											"end": 21106,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 21145,
											"end": 21150,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 21115,
											"end": 21126,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 21115,
											"end": 21133,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 21127,
											"end": 21132,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 21115,
											"end": 21133,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 21115,
											"end": 21133,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 21115,
											"end": 21133,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 21115,
											"end": 21133,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 21115,
											"end": 21133,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 21115,
											"end": 21133,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 21115,
											"end": 21133,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 21115,
											"end": 21133,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 21115,
											"end": 21133,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 21115,
											"end": 21133,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 21115,
											"end": 21133,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 21115,
											"end": 21133,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 21115,
											"end": 21133,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 21115,
											"end": 21133,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 21115,
											"end": 21133,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 21115,
											"end": 21142,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 21134,
											"end": 21141,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 21115,
											"end": 21142,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 21115,
											"end": 21142,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 21115,
											"end": 21142,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 21115,
											"end": 21142,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 21115,
											"end": 21142,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 21115,
											"end": 21142,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 21115,
											"end": 21142,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 21115,
											"end": 21142,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 21115,
											"end": 21142,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 21115,
											"end": 21142,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 21115,
											"end": 21142,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 21115,
											"end": 21142,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 21115,
											"end": 21142,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 21115,
											"end": 21142,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 21115,
											"end": 21142,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 21115,
											"end": 21150,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 21115,
											"end": 21150,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 21115,
											"end": 21150,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 21115,
											"end": 21150,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 21164,
											"end": 21173,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 21160,
											"end": 21236,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 21160,
											"end": 21236,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "280"
										},
										{
											"begin": 21160,
											"end": 21236,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 21210,
											"end": 21217,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 21194,
											"end": 21225,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 21194,
											"end": 21225,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 21203,
											"end": 21208,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 21194,
											"end": 21225,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 21194,
											"end": 21225,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 21194,
											"end": 21225,
											"name": "PUSH",
											"source": 0,
											"value": "8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
										},
										{
											"begin": 21219,
											"end": 21224,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 21194,
											"end": 21225,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 21194,
											"end": 21225,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 21194,
											"end": 21225,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "281"
										},
										{
											"begin": 21194,
											"end": 21225,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 21194,
											"end": 21225,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 21194,
											"end": 21225,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "41"
										},
										{
											"begin": 21194,
											"end": 21225,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 21194,
											"end": 21225,
											"name": "tag",
											"source": 0,
											"value": "281"
										},
										{
											"begin": 21194,
											"end": 21225,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 21194,
											"end": 21225,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 21194,
											"end": 21225,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 21194,
											"end": 21225,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 21194,
											"end": 21225,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 21194,
											"end": 21225,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 21194,
											"end": 21225,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 21194,
											"end": 21225,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 21160,
											"end": 21236,
											"name": "tag",
											"source": 0,
											"value": "280"
										},
										{
											"begin": 21160,
											"end": 21236,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 20810,
											"end": 21242,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 20810,
											"end": 21242,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 20810,
											"end": 21242,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 20810,
											"end": 21242,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 20810,
											"end": 21242,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 85338,
											"end": 85503,
											"name": "tag",
											"source": 0,
											"value": "225"
										},
										{
											"begin": 85338,
											"end": 85503,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 85466,
											"end": 85496,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "283"
										},
										{
											"begin": 85480,
											"end": 85484,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 85486,
											"end": 85488,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 85490,
											"end": 85495,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 85466,
											"end": 85479,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "284"
										},
										{
											"begin": 85466,
											"end": 85496,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 85466,
											"end": 85496,
											"name": "tag",
											"source": 0,
											"value": "283"
										},
										{
											"begin": 85466,
											"end": 85496,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 85338,
											"end": 85503,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 85338,
											"end": 85503,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 85338,
											"end": 85503,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 85338,
											"end": 85503,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 78074,
											"end": 78253,
											"name": "tag",
											"source": 0,
											"value": "231"
										},
										{
											"begin": 78074,
											"end": 78253,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 78129,
											"end": 78136,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 76040,
											"end": 76135,
											"name": "PUSH",
											"source": 0,
											"value": "8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F"
										},
										{
											"begin": 78187,
											"end": 78198,
											"name": "PUSHIMMUTABLE",
											"source": 0,
											"value": "3326"
										},
										{
											"begin": 78200,
											"end": 78214,
											"name": "PUSHIMMUTABLE",
											"source": 0,
											"value": "3328"
										},
										{
											"begin": 78216,
											"end": 78229,
											"name": "CHAINID",
											"source": 0
										},
										{
											"begin": 78239,
											"end": 78243,
											"name": "ADDRESS",
											"source": 0
										},
										{
											"begin": 78165,
											"end": 78245,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 78165,
											"end": 78245,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 78165,
											"end": 78245,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 78165,
											"end": 78245,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 78165,
											"end": 78245,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "286"
										},
										{
											"begin": 78165,
											"end": 78245,
											"name": "SWAP6",
											"source": 0
										},
										{
											"begin": 78165,
											"end": 78245,
											"name": "SWAP5",
											"source": 0
										},
										{
											"begin": 78165,
											"end": 78245,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 78165,
											"end": 78245,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 78165,
											"end": 78245,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 78165,
											"end": 78245,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 78165,
											"end": 78245,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "287"
										},
										{
											"begin": 78165,
											"end": 78245,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 78165,
											"end": 78245,
											"name": "tag",
											"source": 0,
											"value": "286"
										},
										{
											"begin": 78165,
											"end": 78245,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 78165,
											"end": 78245,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 78165,
											"end": 78245,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 78165,
											"end": 78245,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 78165,
											"end": 78245,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 78165,
											"end": 78245,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 78165,
											"end": 78245,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 78165,
											"end": 78245,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 78165,
											"end": 78245,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 78165,
											"end": 78245,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 78165,
											"end": 78245,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 78165,
											"end": 78245,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 78165,
											"end": 78245,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 78155,
											"end": 78246,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 78155,
											"end": 78246,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 78155,
											"end": 78246,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 78155,
											"end": 78246,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 78155,
											"end": 78246,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 78155,
											"end": 78246,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 78148,
											"end": 78246,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 78148,
											"end": 78246,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 78074,
											"end": 78253,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 78074,
											"end": 78253,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 25323,
											"end": 25449,
											"name": "tag",
											"source": 0,
											"value": "240"
										},
										{
											"begin": 25323,
											"end": 25449,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 25386,
											"end": 25394,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "289"
										},
										{
											"begin": 25386,
											"end": 25392,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "65"
										},
										{
											"begin": 25386,
											"end": 25394,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 25386,
											"end": 25394,
											"name": "tag",
											"source": 0,
											"value": "289"
										},
										{
											"begin": 25386,
											"end": 25394,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 25381,
											"end": 25443,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "290"
										},
										{
											"begin": 25381,
											"end": 25443,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 25417,
											"end": 25432,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 25417,
											"end": 25432,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 25417,
											"end": 25432,
											"name": "PUSH",
											"source": 0,
											"value": "8DFC202B00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 25417,
											"end": 25432,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 25417,
											"end": 25432,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 25417,
											"end": 25432,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 25417,
											"end": 25432,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 25417,
											"end": 25432,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 25417,
											"end": 25432,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 25417,
											"end": 25432,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 25417,
											"end": 25432,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 25417,
											"end": 25432,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 25417,
											"end": 25432,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 25417,
											"end": 25432,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 25381,
											"end": 25443,
											"name": "tag",
											"source": 0,
											"value": "290"
										},
										{
											"begin": 25381,
											"end": 25443,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 25323,
											"end": 25449,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 25123,
											"end": 25251,
											"name": "tag",
											"source": 0,
											"value": "256"
										},
										{
											"begin": 25123,
											"end": 25251,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 25188,
											"end": 25196,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "292"
										},
										{
											"begin": 25188,
											"end": 25194,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "65"
										},
										{
											"begin": 25188,
											"end": 25196,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 25188,
											"end": 25196,
											"name": "tag",
											"source": 0,
											"value": "292"
										},
										{
											"begin": 25188,
											"end": 25196,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 25184,
											"end": 25245,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 25184,
											"end": 25245,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "293"
										},
										{
											"begin": 25184,
											"end": 25245,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 25219,
											"end": 25234,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 25219,
											"end": 25234,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 25219,
											"end": 25234,
											"name": "PUSH",
											"source": 0,
											"value": "D93C066500000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 25219,
											"end": 25234,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 25219,
											"end": 25234,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 25219,
											"end": 25234,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 25219,
											"end": 25234,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 25219,
											"end": 25234,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 25219,
											"end": 25234,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 25219,
											"end": 25234,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 25219,
											"end": 25234,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 25219,
											"end": 25234,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 25219,
											"end": 25234,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 25219,
											"end": 25234,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 25184,
											"end": 25245,
											"name": "tag",
											"source": 0,
											"value": "293"
										},
										{
											"begin": 25184,
											"end": 25245,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 25123,
											"end": 25251,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 72410,
											"end": 72677,
											"name": "tag",
											"source": 0,
											"value": "262"
										},
										{
											"begin": 72410,
											"end": 72677,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 72504,
											"end": 72517,
											"name": "PUSH",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 70415,
											"end": 70481,
											"name": "PUSH",
											"source": 0,
											"value": "FF"
										},
										{
											"begin": 72562,
											"end": 72579,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 72562,
											"end": 72579,
											"name": "SHL",
											"source": 0
										},
										{
											"begin": 72552,
											"end": 72557,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 72533,
											"end": 72579,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 72529,
											"end": 72671,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "295"
										},
										{
											"begin": 72529,
											"end": 72671,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 72602,
											"end": 72617,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "296"
										},
										{
											"begin": 72611,
											"end": 72616,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 72602,
											"end": 72610,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "297"
										},
										{
											"begin": 72602,
											"end": 72617,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 72602,
											"end": 72617,
											"name": "tag",
											"source": 0,
											"value": "296"
										},
										{
											"begin": 72602,
											"end": 72617,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 72595,
											"end": 72617,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 72595,
											"end": 72617,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 72595,
											"end": 72617,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "294"
										},
										{
											"begin": 72595,
											"end": 72617,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 72529,
											"end": 72671,
											"name": "tag",
											"source": 0,
											"value": "295"
										},
										{
											"begin": 72529,
											"end": 72671,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 72655,
											"end": 72660,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "299"
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "112"
										},
										{
											"begin": 72648,
											"end": 72660,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "tag",
											"source": 0,
											"value": "299"
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "300"
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "112"
										},
										{
											"begin": 72648,
											"end": 72660,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "tag",
											"source": 0,
											"value": "300"
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "301"
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "302"
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "301"
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "tag",
											"source": 0,
											"value": "302"
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "tag",
											"source": 0,
											"value": "303"
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "303"
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "tag",
											"source": 0,
											"value": "301"
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 72648,
											"end": 72660,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 72410,
											"end": 72677,
											"name": "tag",
											"source": 0,
											"value": "294"
										},
										{
											"begin": 72410,
											"end": 72677,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 72410,
											"end": 72677,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 72410,
											"end": 72677,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 72410,
											"end": 72677,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 72410,
											"end": 72677,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 72410,
											"end": 72677,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 64684,
											"end": 65085,
											"name": "tag",
											"source": 0,
											"value": "269"
										},
										{
											"begin": 64684,
											"end": 65085,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 64777,
											"end": 64791,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 64886,
											"end": 64890,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 64880,
											"end": 64891,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 64916,
											"end": 64926,
											"name": "PUSH",
											"source": 0,
											"value": "1901000000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 64911,
											"end": 64914,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 64904,
											"end": 64927,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 64963,
											"end": 64978,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 64956,
											"end": 64960,
											"name": "PUSH",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 64951,
											"end": 64954,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 64947,
											"end": 64961,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 64940,
											"end": 64979,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 65015,
											"end": 65025,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 65008,
											"end": 65012,
											"name": "PUSH",
											"source": 0,
											"value": "22"
										},
										{
											"begin": 65003,
											"end": 65006,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 64999,
											"end": 65013,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 64992,
											"end": 65026,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 65064,
											"end": 65068,
											"name": "PUSH",
											"source": 0,
											"value": "42"
										},
										{
											"begin": 65059,
											"end": 65062,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 65049,
											"end": 65069,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 65039,
											"end": 65069,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 65039,
											"end": 65069,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 64855,
											"end": 65079,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 64684,
											"end": 65085,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 64684,
											"end": 65085,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 64684,
											"end": 65085,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 64684,
											"end": 65085,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 64684,
											"end": 65085,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 39266,
											"end": 40796,
											"name": "tag",
											"source": 0,
											"value": "272"
										},
										{
											"begin": 39266,
											"end": 40796,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 39392,
											"end": 39399,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 39401,
											"end": 39413,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 39415,
											"end": 39422,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 40325,
											"end": 40391,
											"name": "PUSH",
											"source": 0,
											"value": "7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0"
										},
										{
											"begin": 40320,
											"end": 40321,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 40312,
											"end": 40322,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 40312,
											"end": 40322,
											"name": "SHR",
											"source": 0
										},
										{
											"begin": 40312,
											"end": 40391,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 40308,
											"end": 40472,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 40308,
											"end": 40472,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "306"
										},
										{
											"begin": 40308,
											"end": 40472,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 40423,
											"end": 40424,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 40427,
											"end": 40457,
											"name": "PUSH",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 40459,
											"end": 40460,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 40407,
											"end": 40461,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 40407,
											"end": 40461,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 40407,
											"end": 40461,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 40407,
											"end": 40461,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 40407,
											"end": 40461,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 40407,
											"end": 40461,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 40407,
											"end": 40461,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "305"
										},
										{
											"begin": 40407,
											"end": 40461,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 40308,
											"end": 40472,
											"name": "tag",
											"source": 0,
											"value": "306"
										},
										{
											"begin": 40308,
											"end": 40472,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 40566,
											"end": 40580,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 40583,
											"end": 40607,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 40593,
											"end": 40597,
											"name": "DUP9",
											"source": 0
										},
										{
											"begin": 40599,
											"end": 40600,
											"name": "DUP9",
											"source": 0
										},
										{
											"begin": 40602,
											"end": 40603,
											"name": "DUP9",
											"source": 0
										},
										{
											"begin": 40605,
											"end": 40606,
											"name": "DUP9",
											"source": 0
										},
										{
											"begin": 40583,
											"end": 40607,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 40583,
											"end": 40607,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 40583,
											"end": 40607,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 40583,
											"end": 40607,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 40583,
											"end": 40607,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 40583,
											"end": 40607,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 40583,
											"end": 40607,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 40583,
											"end": 40607,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 40583,
											"end": 40607,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 40583,
											"end": 40607,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 40583,
											"end": 40607,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 40583,
											"end": 40607,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "307"
										},
										{
											"begin": 40583,
											"end": 40607,
											"name": "SWAP5",
											"source": 0
										},
										{
											"begin": 40583,
											"end": 40607,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 40583,
											"end": 40607,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 40583,
											"end": 40607,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 40583,
											"end": 40607,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 40583,
											"end": 40607,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "308"
										},
										{
											"begin": 40583,
											"end": 40607,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 40583,
											"end": 40607,
											"name": "tag",
											"source": 0,
											"value": "307"
										},
										{
											"begin": 40583,
											"end": 40607,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 40583,
											"end": 40607,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 40583,
											"end": 40607,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 40583,
											"end": 40607,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 40583,
											"end": 40607,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 40583,
											"end": 40607,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 40583,
											"end": 40607,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 40583,
											"end": 40607,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 40583,
											"end": 40607,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 40583,
											"end": 40607,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 40583,
											"end": 40607,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 40583,
											"end": 40607,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 40583,
											"end": 40607,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 40583,
											"end": 40607,
											"name": "GAS",
											"source": 0
										},
										{
											"begin": 40583,
											"end": 40607,
											"name": "STATICCALL",
											"source": 0
										},
										{
											"begin": 40583,
											"end": 40607,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 40583,
											"end": 40607,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 40583,
											"end": 40607,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 40583,
											"end": 40607,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "310"
										},
										{
											"begin": 40583,
											"end": 40607,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 40583,
											"end": 40607,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 40583,
											"end": 40607,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 40583,
											"end": 40607,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 40583,
											"end": 40607,
											"name": "RETURNDATACOPY",
											"source": 0
										},
										{
											"begin": 40583,
											"end": 40607,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 40583,
											"end": 40607,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 40583,
											"end": 40607,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 40583,
											"end": 40607,
											"name": "tag",
											"source": 0,
											"value": "310"
										},
										{
											"begin": 40583,
											"end": 40607,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 40583,
											"end": 40607,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 40583,
											"end": 40607,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 40583,
											"end": 40607,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 40583,
											"end": 40607,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 40583,
											"end": 40607,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 40583,
											"end": 40607,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 40583,
											"end": 40607,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 40583,
											"end": 40607,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 40566,
											"end": 40607,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 40566,
											"end": 40607,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 40639,
											"end": 40640,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 40621,
											"end": 40641,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 40621,
											"end": 40641,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 40621,
											"end": 40627,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 40621,
											"end": 40641,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 40621,
											"end": 40641,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 40621,
											"end": 40641,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 40617,
											"end": 40730,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "311"
										},
										{
											"begin": 40617,
											"end": 40730,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 40673,
											"end": 40674,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 40677,
											"end": 40706,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 40716,
											"end": 40717,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 40708,
											"end": 40718,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 40708,
											"end": 40718,
											"name": "SHL",
											"source": 0
										},
										{
											"begin": 40657,
											"end": 40719,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 40657,
											"end": 40719,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 40657,
											"end": 40719,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 40657,
											"end": 40719,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 40657,
											"end": 40719,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 40657,
											"end": 40719,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 40657,
											"end": 40719,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 40657,
											"end": 40719,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "305"
										},
										{
											"begin": 40657,
											"end": 40719,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 40617,
											"end": 40730,
											"name": "tag",
											"source": 0,
											"value": "311"
										},
										{
											"begin": 40617,
											"end": 40730,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 40748,
											"end": 40754,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 40756,
											"end": 40776,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 40786,
											"end": 40787,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 40778,
											"end": 40788,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 40778,
											"end": 40788,
											"name": "SHL",
											"source": 0
										},
										{
											"begin": 40740,
											"end": 40789,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 40740,
											"end": 40789,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 40740,
											"end": 40789,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 40740,
											"end": 40789,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 40740,
											"end": 40789,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 40740,
											"end": 40789,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 40740,
											"end": 40789,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 39266,
											"end": 40796,
											"name": "tag",
											"source": 0,
											"value": "305"
										},
										{
											"begin": 39266,
											"end": 40796,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 39266,
											"end": 40796,
											"name": "SWAP5",
											"source": 0
										},
										{
											"begin": 39266,
											"end": 40796,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 39266,
											"end": 40796,
											"name": "SWAP5",
											"source": 0
										},
										{
											"begin": 39266,
											"end": 40796,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 39266,
											"end": 40796,
											"name": "SWAP5",
											"source": 0
										},
										{
											"begin": 39266,
											"end": 40796,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 39266,
											"end": 40796,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 39266,
											"end": 40796,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 39266,
											"end": 40796,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 41322,
											"end": 41854,
											"name": "tag",
											"source": 0,
											"value": "274"
										},
										{
											"begin": 41322,
											"end": 41854,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 41417,
											"end": 41437,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 41408,
											"end": 41437,
											"name": "PUSH",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 41408,
											"end": 41437,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 41408,
											"end": 41437,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 41408,
											"end": 41437,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 41408,
											"end": 41437,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "313"
										},
										{
											"begin": 41408,
											"end": 41437,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 41408,
											"end": 41437,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "314"
										},
										{
											"begin": 41408,
											"end": 41437,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "315"
										},
										{
											"begin": 41408,
											"end": 41437,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 41408,
											"end": 41437,
											"name": "tag",
											"source": 0,
											"value": "314"
										},
										{
											"begin": 41408,
											"end": 41437,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 41408,
											"end": 41437,
											"name": "tag",
											"source": 0,
											"value": "313"
										},
										{
											"begin": 41408,
											"end": 41437,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 41408,
											"end": 41413,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 41408,
											"end": 41437,
											"name": "PUSH",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 41408,
											"end": 41437,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 41408,
											"end": 41437,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 41408,
											"end": 41437,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 41408,
											"end": 41437,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "316"
										},
										{
											"begin": 41408,
											"end": 41437,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 41408,
											"end": 41437,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "317"
										},
										{
											"begin": 41408,
											"end": 41437,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "315"
										},
										{
											"begin": 41408,
											"end": 41437,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 41408,
											"end": 41437,
											"name": "tag",
											"source": 0,
											"value": "317"
										},
										{
											"begin": 41408,
											"end": 41437,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 41408,
											"end": 41437,
											"name": "tag",
											"source": 0,
											"value": "316"
										},
										{
											"begin": 41408,
											"end": 41437,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 41408,
											"end": 41437,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 41404,
											"end": 41848,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 41453,
											"end": 41460,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "312"
										},
										{
											"begin": 41404,
											"end": 41848,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 41513,
											"end": 41542,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 41504,
											"end": 41542,
											"name": "PUSH",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 41504,
											"end": 41542,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 41504,
											"end": 41542,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 41504,
											"end": 41542,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 41504,
											"end": 41542,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "320"
										},
										{
											"begin": 41504,
											"end": 41542,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 41504,
											"end": 41542,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "321"
										},
										{
											"begin": 41504,
											"end": 41542,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "315"
										},
										{
											"begin": 41504,
											"end": 41542,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 41504,
											"end": 41542,
											"name": "tag",
											"source": 0,
											"value": "321"
										},
										{
											"begin": 41504,
											"end": 41542,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 41504,
											"end": 41542,
											"name": "tag",
											"source": 0,
											"value": "320"
										},
										{
											"begin": 41504,
											"end": 41542,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 41504,
											"end": 41509,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 41504,
											"end": 41542,
											"name": "PUSH",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 41504,
											"end": 41542,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 41504,
											"end": 41542,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 41504,
											"end": 41542,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 41504,
											"end": 41542,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "322"
										},
										{
											"begin": 41504,
											"end": 41542,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 41504,
											"end": 41542,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "323"
										},
										{
											"begin": 41504,
											"end": 41542,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "315"
										},
										{
											"begin": 41504,
											"end": 41542,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 41504,
											"end": 41542,
											"name": "tag",
											"source": 0,
											"value": "323"
										},
										{
											"begin": 41504,
											"end": 41542,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 41504,
											"end": 41542,
											"name": "tag",
											"source": 0,
											"value": "322"
										},
										{
											"begin": 41504,
											"end": 41542,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 41504,
											"end": 41542,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 41500,
											"end": 41848,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "324"
										},
										{
											"begin": 41500,
											"end": 41848,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 41565,
											"end": 41588,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 41565,
											"end": 41588,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 41565,
											"end": 41588,
											"name": "PUSH",
											"source": 0,
											"value": "F645EEDF00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 41565,
											"end": 41588,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 41565,
											"end": 41588,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 41565,
											"end": 41588,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 41565,
											"end": 41588,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 41565,
											"end": 41588,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 41565,
											"end": 41588,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 41565,
											"end": 41588,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 41565,
											"end": 41588,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 41565,
											"end": 41588,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 41565,
											"end": 41588,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 41565,
											"end": 41588,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 41500,
											"end": 41848,
											"name": "tag",
											"source": 0,
											"value": "324"
										},
										{
											"begin": 41500,
											"end": 41848,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 41618,
											"end": 41653,
											"name": "PUSH",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 41609,
											"end": 41653,
											"name": "PUSH",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 41609,
											"end": 41653,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 41609,
											"end": 41653,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 41609,
											"end": 41653,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 41609,
											"end": 41653,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "326"
										},
										{
											"begin": 41609,
											"end": 41653,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 41609,
											"end": 41653,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "327"
										},
										{
											"begin": 41609,
											"end": 41653,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "315"
										},
										{
											"begin": 41609,
											"end": 41653,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 41609,
											"end": 41653,
											"name": "tag",
											"source": 0,
											"value": "327"
										},
										{
											"begin": 41609,
											"end": 41653,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 41609,
											"end": 41653,
											"name": "tag",
											"source": 0,
											"value": "326"
										},
										{
											"begin": 41609,
											"end": 41653,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 41609,
											"end": 41614,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 41609,
											"end": 41653,
											"name": "PUSH",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 41609,
											"end": 41653,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 41609,
											"end": 41653,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 41609,
											"end": 41653,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 41609,
											"end": 41653,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "328"
										},
										{
											"begin": 41609,
											"end": 41653,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 41609,
											"end": 41653,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "329"
										},
										{
											"begin": 41609,
											"end": 41653,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "315"
										},
										{
											"begin": 41609,
											"end": 41653,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 41609,
											"end": 41653,
											"name": "tag",
											"source": 0,
											"value": "329"
										},
										{
											"begin": 41609,
											"end": 41653,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 41609,
											"end": 41653,
											"name": "tag",
											"source": 0,
											"value": "328"
										},
										{
											"begin": 41609,
											"end": 41653,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 41609,
											"end": 41653,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 41605,
											"end": 41848,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "330"
										},
										{
											"begin": 41605,
											"end": 41848,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 41712,
											"end": 41720,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 41704,
											"end": 41721,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 41704,
											"end": 41721,
											"name": "SHR",
											"source": 0
										},
										{
											"begin": 41676,
											"end": 41722,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 41676,
											"end": 41722,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 41676,
											"end": 41722,
											"name": "PUSH",
											"source": 0,
											"value": "FCE698F700000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 41676,
											"end": 41722,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 41676,
											"end": 41722,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 41676,
											"end": 41722,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 41676,
											"end": 41722,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 41676,
											"end": 41722,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "331"
										},
										{
											"begin": 41676,
											"end": 41722,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 41676,
											"end": 41722,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 41676,
											"end": 41722,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "41"
										},
										{
											"begin": 41676,
											"end": 41722,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 41676,
											"end": 41722,
											"name": "tag",
											"source": 0,
											"value": "331"
										},
										{
											"begin": 41676,
											"end": 41722,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 41676,
											"end": 41722,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 41676,
											"end": 41722,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 41676,
											"end": 41722,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 41676,
											"end": 41722,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 41676,
											"end": 41722,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 41676,
											"end": 41722,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 41676,
											"end": 41722,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 41605,
											"end": 41848,
											"name": "tag",
											"source": 0,
											"value": "330"
										},
										{
											"begin": 41605,
											"end": 41848,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 41752,
											"end": 41782,
											"name": "PUSH",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 41743,
											"end": 41782,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 41743,
											"end": 41782,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 41743,
											"end": 41782,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 41743,
											"end": 41782,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 41743,
											"end": 41782,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "333"
										},
										{
											"begin": 41743,
											"end": 41782,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 41743,
											"end": 41782,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "334"
										},
										{
											"begin": 41743,
											"end": 41782,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "315"
										},
										{
											"begin": 41743,
											"end": 41782,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 41743,
											"end": 41782,
											"name": "tag",
											"source": 0,
											"value": "334"
										},
										{
											"begin": 41743,
											"end": 41782,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 41743,
											"end": 41782,
											"name": "tag",
											"source": 0,
											"value": "333"
										},
										{
											"begin": 41743,
											"end": 41782,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 41743,
											"end": 41748,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 41743,
											"end": 41782,
											"name": "PUSH",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 41743,
											"end": 41782,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 41743,
											"end": 41782,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 41743,
											"end": 41782,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 41743,
											"end": 41782,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "335"
										},
										{
											"begin": 41743,
											"end": 41782,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 41743,
											"end": 41782,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "336"
										},
										{
											"begin": 41743,
											"end": 41782,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "315"
										},
										{
											"begin": 41743,
											"end": 41782,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 41743,
											"end": 41782,
											"name": "tag",
											"source": 0,
											"value": "336"
										},
										{
											"begin": 41743,
											"end": 41782,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 41743,
											"end": 41782,
											"name": "tag",
											"source": 0,
											"value": "335"
										},
										{
											"begin": 41743,
											"end": 41782,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 41743,
											"end": 41782,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 41739,
											"end": 41848,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "337"
										},
										{
											"begin": 41739,
											"end": 41848,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 41828,
											"end": 41836,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 41805,
											"end": 41837,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 41805,
											"end": 41837,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 41805,
											"end": 41837,
											"name": "PUSH",
											"source": 0,
											"value": "D78BCE0C00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 41805,
											"end": 41837,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 41805,
											"end": 41837,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 41805,
											"end": 41837,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 41805,
											"end": 41837,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 41805,
											"end": 41837,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "338"
										},
										{
											"begin": 41805,
											"end": 41837,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 41805,
											"end": 41837,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 41805,
											"end": 41837,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "54"
										},
										{
											"begin": 41805,
											"end": 41837,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 41805,
											"end": 41837,
											"name": "tag",
											"source": 0,
											"value": "338"
										},
										{
											"begin": 41805,
											"end": 41837,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 41805,
											"end": 41837,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 41805,
											"end": 41837,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 41805,
											"end": 41837,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 41805,
											"end": 41837,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 41805,
											"end": 41837,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 41805,
											"end": 41837,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 41805,
											"end": 41837,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 41739,
											"end": 41848,
											"name": "tag",
											"source": 0,
											"value": "337"
										},
										{
											"begin": 41739,
											"end": 41848,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 41322,
											"end": 41854,
											"name": "tag",
											"source": 0,
											"value": "312"
										},
										{
											"begin": 41322,
											"end": 41854,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 41322,
											"end": 41854,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 41322,
											"end": 41854,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 41322,
											"end": 41854,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 27019,
											"end": 27164,
											"name": "tag",
											"source": 0,
											"value": "284"
										},
										{
											"begin": 27019,
											"end": 27164,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 24595,
											"end": 24614,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "340"
										},
										{
											"begin": 24595,
											"end": 24612,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "256"
										},
										{
											"begin": 24595,
											"end": 24614,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 24595,
											"end": 24614,
											"name": "tag",
											"source": 0,
											"value": "340"
										},
										{
											"begin": 24595,
											"end": 24614,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 27127,
											"end": 27157,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "342"
										},
										{
											"begin": 27141,
											"end": 27145,
											"modifierDepth": 1,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 27147,
											"end": 27149,
											"modifierDepth": 1,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 27151,
											"end": 27156,
											"modifierDepth": 1,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 27127,
											"end": 27140,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "343"
										},
										{
											"begin": 27127,
											"end": 27157,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 27127,
											"end": 27157,
											"modifierDepth": 1,
											"name": "tag",
											"source": 0,
											"value": "342"
										},
										{
											"begin": 27127,
											"end": 27157,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 27019,
											"end": 27164,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 27019,
											"end": 27164,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 27019,
											"end": 27164,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 27019,
											"end": 27164,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 71103,
											"end": 71508,
											"name": "tag",
											"source": 0,
											"value": "297"
										},
										{
											"begin": 71103,
											"end": 71508,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 71162,
											"end": 71175,
											"name": "PUSH",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 71187,
											"end": 71198,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 71201,
											"end": 71217,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "345"
										},
										{
											"begin": 71212,
											"end": 71216,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 71201,
											"end": 71211,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "346"
										},
										{
											"begin": 71201,
											"end": 71217,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 71201,
											"end": 71217,
											"name": "tag",
											"source": 0,
											"value": "345"
										},
										{
											"begin": 71201,
											"end": 71217,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 71187,
											"end": 71217,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 71187,
											"end": 71217,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 71305,
											"end": 71322,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 71336,
											"end": 71338,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 71325,
											"end": 71339,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 71325,
											"end": 71339,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 71325,
											"end": 71339,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 71325,
											"end": 71339,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 71325,
											"end": 71339,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "347"
										},
										{
											"begin": 71325,
											"end": 71339,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 71325,
											"end": 71339,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "348"
										},
										{
											"begin": 71325,
											"end": 71339,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "174"
										},
										{
											"begin": 71325,
											"end": 71339,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 71325,
											"end": 71339,
											"name": "tag",
											"source": 0,
											"value": "348"
										},
										{
											"begin": 71325,
											"end": 71339,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 71325,
											"end": 71339,
											"name": "tag",
											"source": 0,
											"value": "347"
										},
										{
											"begin": 71325,
											"end": 71339,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 71325,
											"end": 71339,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 71325,
											"end": 71339,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 71325,
											"end": 71339,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 71325,
											"end": 71339,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 71325,
											"end": 71339,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 71325,
											"end": 71339,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 71325,
											"end": 71339,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 71325,
											"end": 71339,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 71325,
											"end": 71339,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 71325,
											"end": 71339,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 71325,
											"end": 71339,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 71325,
											"end": 71339,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 71325,
											"end": 71339,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 71325,
											"end": 71339,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 71325,
											"end": 71339,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 71325,
											"end": 71339,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 71325,
											"end": 71339,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 71325,
											"end": 71339,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 71325,
											"end": 71339,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 71325,
											"end": 71339,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 71325,
											"end": 71339,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "349"
										},
										{
											"begin": 71325,
											"end": 71339,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 71325,
											"end": 71339,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 71325,
											"end": 71339,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 71325,
											"end": 71339,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 71325,
											"end": 71339,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 71325,
											"end": 71339,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 71325,
											"end": 71339,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 71325,
											"end": 71339,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 71325,
											"end": 71339,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 71325,
											"end": 71339,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 71325,
											"end": 71339,
											"name": "CALLDATACOPY",
											"source": 0
										},
										{
											"begin": 71325,
											"end": 71339,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 71325,
											"end": 71339,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 71325,
											"end": 71339,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 71325,
											"end": 71339,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 71325,
											"end": 71339,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 71325,
											"end": 71339,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 71325,
											"end": 71339,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 71325,
											"end": 71339,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 71325,
											"end": 71339,
											"name": "tag",
											"source": 0,
											"value": "349"
										},
										{
											"begin": 71325,
											"end": 71339,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 71325,
											"end": 71339,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 71305,
											"end": 71339,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 71305,
											"end": 71339,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 71427,
											"end": 71430,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 71422,
											"end": 71425,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 71415,
											"end": 71431,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 71467,
											"end": 71471,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 71460,
											"end": 71464,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 71455,
											"end": 71458,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 71451,
											"end": 71465,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 71444,
											"end": 71472,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 71498,
											"end": 71501,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 71491,
											"end": 71501,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 71491,
											"end": 71501,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 71491,
											"end": 71501,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 71491,
											"end": 71501,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 71103,
											"end": 71508,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 71103,
											"end": 71508,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 71103,
											"end": 71508,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 71103,
											"end": 71508,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 17132,
											"end": 18239,
											"name": "tag",
											"source": 0,
											"value": "343"
										},
										{
											"begin": 17132,
											"end": 18239,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 17237,
											"end": 17238,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 17221,
											"end": 17239,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 17221,
											"end": 17239,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 17221,
											"end": 17225,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 17221,
											"end": 17239,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 17221,
											"end": 17239,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 17221,
											"end": 17239,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 17217,
											"end": 17757,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "351"
										},
										{
											"begin": 17217,
											"end": 17757,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 17373,
											"end": 17378,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 17357,
											"end": 17369,
											"name": "PUSH",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 17357,
											"end": 17369,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 17357,
											"end": 17378,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 17357,
											"end": 17378,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 17357,
											"end": 17378,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 17357,
											"end": 17378,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "352"
										},
										{
											"begin": 17357,
											"end": 17378,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 17357,
											"end": 17378,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 17357,
											"end": 17378,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "353"
										},
										{
											"begin": 17357,
											"end": 17378,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 17357,
											"end": 17378,
											"name": "tag",
											"source": 0,
											"value": "352"
										},
										{
											"begin": 17357,
											"end": 17378,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 17357,
											"end": 17378,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 17357,
											"end": 17378,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 17357,
											"end": 17378,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 17357,
											"end": 17378,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 17357,
											"end": 17378,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 17357,
											"end": 17378,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 17357,
											"end": 17378,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 17217,
											"end": 17757,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "354"
										},
										{
											"begin": 17217,
											"end": 17757,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 17217,
											"end": 17757,
											"name": "tag",
											"source": 0,
											"value": "351"
										},
										{
											"begin": 17217,
											"end": 17757,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 17409,
											"end": 17428,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 17431,
											"end": 17440,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 17431,
											"end": 17446,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 17441,
											"end": 17445,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 17431,
											"end": 17446,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 17431,
											"end": 17446,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 17431,
											"end": 17446,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 17431,
											"end": 17446,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 17431,
											"end": 17446,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 17431,
											"end": 17446,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 17431,
											"end": 17446,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 17431,
											"end": 17446,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 17431,
											"end": 17446,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 17431,
											"end": 17446,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 17431,
											"end": 17446,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 17431,
											"end": 17446,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 17431,
											"end": 17446,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 17431,
											"end": 17446,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 17431,
											"end": 17446,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 17431,
											"end": 17446,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 17409,
											"end": 17446,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 17409,
											"end": 17446,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 17478,
											"end": 17483,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 17464,
											"end": 17475,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 17464,
											"end": 17483,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 17460,
											"end": 17575,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 17460,
											"end": 17575,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "355"
										},
										{
											"begin": 17460,
											"end": 17575,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 17535,
											"end": 17539,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 17541,
											"end": 17552,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 17554,
											"end": 17559,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 17510,
											"end": 17560,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 17510,
											"end": 17560,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 17510,
											"end": 17560,
											"name": "PUSH",
											"source": 0,
											"value": "E450D38C00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 17510,
											"end": 17560,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 17510,
											"end": 17560,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 17510,
											"end": 17560,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 17510,
											"end": 17560,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 17510,
											"end": 17560,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "356"
										},
										{
											"begin": 17510,
											"end": 17560,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 17510,
											"end": 17560,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 17510,
											"end": 17560,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 17510,
											"end": 17560,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 17510,
											"end": 17560,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "217"
										},
										{
											"begin": 17510,
											"end": 17560,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 17510,
											"end": 17560,
											"name": "tag",
											"source": 0,
											"value": "356"
										},
										{
											"begin": 17510,
											"end": 17560,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 17510,
											"end": 17560,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 17510,
											"end": 17560,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 17510,
											"end": 17560,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 17510,
											"end": 17560,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 17510,
											"end": 17560,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 17510,
											"end": 17560,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 17510,
											"end": 17560,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 17460,
											"end": 17575,
											"name": "tag",
											"source": 0,
											"value": "355"
										},
										{
											"begin": 17460,
											"end": 17575,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 17727,
											"end": 17732,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 17713,
											"end": 17724,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 17713,
											"end": 17732,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 17695,
											"end": 17704,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 17695,
											"end": 17710,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 17705,
											"end": 17709,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 17695,
											"end": 17710,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 17695,
											"end": 17710,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 17695,
											"end": 17710,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 17695,
											"end": 17710,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 17695,
											"end": 17710,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 17695,
											"end": 17710,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 17695,
											"end": 17710,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 17695,
											"end": 17710,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 17695,
											"end": 17710,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 17695,
											"end": 17710,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 17695,
											"end": 17710,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 17695,
											"end": 17710,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 17695,
											"end": 17710,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 17695,
											"end": 17710,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 17695,
											"end": 17710,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 17695,
											"end": 17732,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 17695,
											"end": 17732,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 17695,
											"end": 17732,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 17695,
											"end": 17732,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 17395,
											"end": 17757,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 17217,
											"end": 17757,
											"name": "tag",
											"source": 0,
											"value": "354"
										},
										{
											"begin": 17217,
											"end": 17757,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 17785,
											"end": 17786,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 17771,
											"end": 17787,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 17771,
											"end": 17787,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 17771,
											"end": 17773,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 17771,
											"end": 17787,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 17771,
											"end": 17787,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 17771,
											"end": 17787,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 17767,
											"end": 18192,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "357"
										},
										{
											"begin": 17767,
											"end": 18192,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 17950,
											"end": 17955,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 17934,
											"end": 17946,
											"name": "PUSH",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 17934,
											"end": 17946,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 17934,
											"end": 17955,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 17934,
											"end": 17955,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 17934,
											"end": 17955,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 17934,
											"end": 17955,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 17934,
											"end": 17955,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 17934,
											"end": 17955,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 17934,
											"end": 17955,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 17934,
											"end": 17955,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 17934,
											"end": 17955,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 17934,
											"end": 17955,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 17934,
											"end": 17955,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 17767,
											"end": 18192,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "358"
										},
										{
											"begin": 17767,
											"end": 18192,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 17767,
											"end": 18192,
											"name": "tag",
											"source": 0,
											"value": "357"
										},
										{
											"begin": 17767,
											"end": 18192,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 18162,
											"end": 18167,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 18145,
											"end": 18154,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 18145,
											"end": 18158,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 18155,
											"end": 18157,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 18145,
											"end": 18158,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 18145,
											"end": 18158,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 18145,
											"end": 18158,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 18145,
											"end": 18158,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 18145,
											"end": 18158,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 18145,
											"end": 18158,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 18145,
											"end": 18158,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 18145,
											"end": 18158,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 18145,
											"end": 18158,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 18145,
											"end": 18158,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 18145,
											"end": 18158,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 18145,
											"end": 18158,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 18145,
											"end": 18158,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 18145,
											"end": 18158,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 18145,
											"end": 18158,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 18145,
											"end": 18158,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 18145,
											"end": 18167,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 18145,
											"end": 18167,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 18145,
											"end": 18167,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 18145,
											"end": 18167,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 18145,
											"end": 18167,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 18145,
											"end": 18167,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 18145,
											"end": 18167,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 18145,
											"end": 18167,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 18145,
											"end": 18167,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 18145,
											"end": 18167,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 18145,
											"end": 18167,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 17767,
											"end": 18192,
											"name": "tag",
											"source": 0,
											"value": "358"
										},
										{
											"begin": 17767,
											"end": 18192,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 18222,
											"end": 18224,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 18207,
											"end": 18232,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 18207,
											"end": 18232,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 18216,
											"end": 18220,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 18207,
											"end": 18232,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 18207,
											"end": 18232,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 18207,
											"end": 18232,
											"name": "PUSH",
											"source": 0,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 18226,
											"end": 18231,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 18207,
											"end": 18232,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 18207,
											"end": 18232,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 18207,
											"end": 18232,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "359"
										},
										{
											"begin": 18207,
											"end": 18232,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 18207,
											"end": 18232,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 18207,
											"end": 18232,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "41"
										},
										{
											"begin": 18207,
											"end": 18232,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 18207,
											"end": 18232,
											"name": "tag",
											"source": 0,
											"value": "359"
										},
										{
											"begin": 18207,
											"end": 18232,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 18207,
											"end": 18232,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 18207,
											"end": 18232,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 18207,
											"end": 18232,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 18207,
											"end": 18232,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 18207,
											"end": 18232,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 18207,
											"end": 18232,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 18207,
											"end": 18232,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 17132,
											"end": 18239,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 17132,
											"end": 18239,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 17132,
											"end": 18239,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 17132,
											"end": 18239,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 71580,
											"end": 71825,
											"name": "tag",
											"source": 0,
											"value": "346"
										},
										{
											"begin": 71580,
											"end": 71825,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 71641,
											"end": 71648,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 71660,
											"end": 71674,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 71713,
											"end": 71717,
											"name": "PUSH",
											"source": 0,
											"value": "FF"
										},
										{
											"begin": 71704,
											"end": 71708,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 71677,
											"end": 71710,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 71677,
											"end": 71710,
											"name": "SHR",
											"source": 0
										},
										{
											"begin": 71677,
											"end": 71717,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 71660,
											"end": 71717,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 71660,
											"end": 71717,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 71740,
											"end": 71742,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 71731,
											"end": 71737,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 71731,
											"end": 71742,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 71727,
											"end": 71796,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 71727,
											"end": 71796,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "361"
										},
										{
											"begin": 71727,
											"end": 71796,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 71765,
											"end": 71785,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 71765,
											"end": 71785,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 71765,
											"end": 71785,
											"name": "PUSH",
											"source": 0,
											"value": "B3512B0C00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 71765,
											"end": 71785,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 71765,
											"end": 71785,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 71765,
											"end": 71785,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 71765,
											"end": 71785,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 71765,
											"end": 71785,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 71765,
											"end": 71785,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 71765,
											"end": 71785,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 71765,
											"end": 71785,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 71765,
											"end": 71785,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 71765,
											"end": 71785,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 71765,
											"end": 71785,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 71727,
											"end": 71796,
											"name": "tag",
											"source": 0,
											"value": "361"
										},
										{
											"begin": 71727,
											"end": 71796,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 71812,
											"end": 71818,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 71805,
											"end": 71818,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 71805,
											"end": 71818,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 71805,
											"end": 71818,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 71580,
											"end": 71825,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 71580,
											"end": 71825,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 71580,
											"end": 71825,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 71580,
											"end": 71825,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 7,
											"end": 106,
											"name": "tag",
											"source": 1,
											"value": "362"
										},
										{
											"begin": 7,
											"end": 106,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 59,
											"end": 65,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 93,
											"end": 98,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 87,
											"end": 99,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 77,
											"end": 99,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 77,
											"end": 99,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 7,
											"end": 106,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 7,
											"end": 106,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7,
											"end": 106,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 7,
											"end": 106,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 112,
											"end": 281,
											"name": "tag",
											"source": 1,
											"value": "363"
										},
										{
											"begin": 112,
											"end": 281,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 196,
											"end": 207,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 230,
											"end": 236,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 225,
											"end": 228,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 218,
											"end": 237,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 270,
											"end": 274,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 265,
											"end": 268,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 261,
											"end": 275,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 246,
											"end": 275,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 246,
											"end": 275,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 112,
											"end": 281,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 112,
											"end": 281,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 112,
											"end": 281,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 112,
											"end": 281,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 112,
											"end": 281,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 287,
											"end": 533,
											"name": "tag",
											"source": 1,
											"value": "364"
										},
										{
											"begin": 287,
											"end": 533,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 368,
											"end": 369,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 378,
											"end": 491,
											"name": "tag",
											"source": 1,
											"value": "404"
										},
										{
											"begin": 378,
											"end": 491,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 392,
											"end": 398,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 389,
											"end": 390,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 386,
											"end": 399,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 378,
											"end": 491,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 378,
											"end": 491,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "406"
										},
										{
											"begin": 378,
											"end": 491,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 477,
											"end": 478,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 472,
											"end": 475,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 468,
											"end": 479,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 462,
											"end": 480,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 458,
											"end": 459,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 453,
											"end": 456,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 449,
											"end": 460,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 442,
											"end": 481,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 414,
											"end": 416,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 411,
											"end": 412,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 407,
											"end": 417,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 402,
											"end": 417,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 402,
											"end": 417,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 378,
											"end": 491,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "404"
										},
										{
											"begin": 378,
											"end": 491,
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 378,
											"end": 491,
											"name": "tag",
											"source": 1,
											"value": "406"
										},
										{
											"begin": 378,
											"end": 491,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 525,
											"end": 526,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 516,
											"end": 522,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 511,
											"end": 514,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 507,
											"end": 523,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 500,
											"end": 527,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 349,
											"end": 533,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 287,
											"end": 533,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 287,
											"end": 533,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 287,
											"end": 533,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 287,
											"end": 533,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 539,
											"end": 641,
											"name": "tag",
											"source": 1,
											"value": "365"
										},
										{
											"begin": 539,
											"end": 641,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 580,
											"end": 586,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 631,
											"end": 633,
											"name": "PUSH",
											"source": 1,
											"value": "1F"
										},
										{
											"begin": 627,
											"end": 634,
											"name": "NOT",
											"source": 1
										},
										{
											"begin": 622,
											"end": 624,
											"name": "PUSH",
											"source": 1,
											"value": "1F"
										},
										{
											"begin": 615,
											"end": 620,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 611,
											"end": 625,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 607,
											"end": 635,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 597,
											"end": 635,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 597,
											"end": 635,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 539,
											"end": 641,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 539,
											"end": 641,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 539,
											"end": 641,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 539,
											"end": 641,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 647,
											"end": 1024,
											"name": "tag",
											"source": 1,
											"value": "366"
										},
										{
											"begin": 647,
											"end": 1024,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 735,
											"end": 738,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 763,
											"end": 802,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "409"
										},
										{
											"begin": 796,
											"end": 801,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 763,
											"end": 802,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "362"
										},
										{
											"begin": 763,
											"end": 802,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 763,
											"end": 802,
											"name": "tag",
											"source": 1,
											"value": "409"
										},
										{
											"begin": 763,
											"end": 802,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 818,
											"end": 889,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "410"
										},
										{
											"begin": 882,
											"end": 888,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 877,
											"end": 880,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 818,
											"end": 889,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "363"
										},
										{
											"begin": 818,
											"end": 889,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 818,
											"end": 889,
											"name": "tag",
											"source": 1,
											"value": "410"
										},
										{
											"begin": 818,
											"end": 889,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 811,
											"end": 889,
											"name": "SWAP4",
											"source": 1
										},
										{
											"begin": 811,
											"end": 889,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 898,
											"end": 963,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "411"
										},
										{
											"begin": 956,
											"end": 962,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 951,
											"end": 954,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 944,
											"end": 948,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 937,
											"end": 942,
											"name": "DUP7",
											"source": 1
										},
										{
											"begin": 933,
											"end": 949,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 898,
											"end": 963,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "364"
										},
										{
											"begin": 898,
											"end": 963,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 898,
											"end": 963,
											"name": "tag",
											"source": 1,
											"value": "411"
										},
										{
											"begin": 898,
											"end": 963,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 988,
											"end": 1017,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "412"
										},
										{
											"begin": 1010,
											"end": 1016,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 988,
											"end": 1017,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "365"
										},
										{
											"begin": 988,
											"end": 1017,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 988,
											"end": 1017,
											"name": "tag",
											"source": 1,
											"value": "412"
										},
										{
											"begin": 988,
											"end": 1017,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 983,
											"end": 986,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 979,
											"end": 1018,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 972,
											"end": 1018,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 972,
											"end": 1018,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 739,
											"end": 1024,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 647,
											"end": 1024,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 647,
											"end": 1024,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 647,
											"end": 1024,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 647,
											"end": 1024,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 647,
											"end": 1024,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 1030,
											"end": 1343,
											"name": "tag",
											"source": 1,
											"value": "31"
										},
										{
											"begin": 1030,
											"end": 1343,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1143,
											"end": 1147,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1181,
											"end": 1183,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 1170,
											"end": 1179,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 1166,
											"end": 1184,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 1158,
											"end": 1184,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1158,
											"end": 1184,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1230,
											"end": 1239,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1224,
											"end": 1228,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1220,
											"end": 1240,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 1216,
											"end": 1217,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1205,
											"end": 1214,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 1201,
											"end": 1218,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 1194,
											"end": 1241,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 1258,
											"end": 1336,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "414"
										},
										{
											"begin": 1331,
											"end": 1335,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1322,
											"end": 1328,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 1258,
											"end": 1336,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "366"
										},
										{
											"begin": 1258,
											"end": 1336,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 1258,
											"end": 1336,
											"name": "tag",
											"source": 1,
											"value": "414"
										},
										{
											"begin": 1258,
											"end": 1336,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1250,
											"end": 1336,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1250,
											"end": 1336,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1030,
											"end": 1343,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 1030,
											"end": 1343,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 1030,
											"end": 1343,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1030,
											"end": 1343,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1030,
											"end": 1343,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 1430,
											"end": 1547,
											"name": "tag",
											"source": 1,
											"value": "368"
										},
										{
											"begin": 1430,
											"end": 1547,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1539,
											"end": 1540,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1536,
											"end": 1537,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1529,
											"end": 1541,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 1676,
											"end": 1802,
											"name": "tag",
											"source": 1,
											"value": "370"
										},
										{
											"begin": 1676,
											"end": 1802,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1713,
											"end": 1720,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1753,
											"end": 1795,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1746,
											"end": 1751,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 1742,
											"end": 1796,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 1731,
											"end": 1796,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1731,
											"end": 1796,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1676,
											"end": 1802,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 1676,
											"end": 1802,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1676,
											"end": 1802,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1676,
											"end": 1802,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 1808,
											"end": 1904,
											"name": "tag",
											"source": 1,
											"value": "371"
										},
										{
											"begin": 1808,
											"end": 1904,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1845,
											"end": 1852,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1874,
											"end": 1898,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "420"
										},
										{
											"begin": 1892,
											"end": 1897,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 1874,
											"end": 1898,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "370"
										},
										{
											"begin": 1874,
											"end": 1898,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 1874,
											"end": 1898,
											"name": "tag",
											"source": 1,
											"value": "420"
										},
										{
											"begin": 1874,
											"end": 1898,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1863,
											"end": 1898,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1863,
											"end": 1898,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1808,
											"end": 1904,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 1808,
											"end": 1904,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1808,
											"end": 1904,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1808,
											"end": 1904,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 1910,
											"end": 2032,
											"name": "tag",
											"source": 1,
											"value": "372"
										},
										{
											"begin": 1910,
											"end": 2032,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1983,
											"end": 2007,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "422"
										},
										{
											"begin": 2001,
											"end": 2006,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1983,
											"end": 2007,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "371"
										},
										{
											"begin": 1983,
											"end": 2007,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 1983,
											"end": 2007,
											"name": "tag",
											"source": 1,
											"value": "422"
										},
										{
											"begin": 1983,
											"end": 2007,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1976,
											"end": 1981,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1973,
											"end": 2008,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 1963,
											"end": 2026,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "423"
										},
										{
											"begin": 1963,
											"end": 2026,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 2022,
											"end": 2023,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2019,
											"end": 2020,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2012,
											"end": 2024,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 1963,
											"end": 2026,
											"name": "tag",
											"source": 1,
											"value": "423"
										},
										{
											"begin": 1963,
											"end": 2026,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1910,
											"end": 2032,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1910,
											"end": 2032,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 2038,
											"end": 2177,
											"name": "tag",
											"source": 1,
											"value": "373"
										},
										{
											"begin": 2038,
											"end": 2177,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2084,
											"end": 2089,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2122,
											"end": 2128,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2109,
											"end": 2129,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 2100,
											"end": 2129,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2100,
											"end": 2129,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2138,
											"end": 2171,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "425"
										},
										{
											"begin": 2165,
											"end": 2170,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2138,
											"end": 2171,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "372"
										},
										{
											"begin": 2138,
											"end": 2171,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 2138,
											"end": 2171,
											"name": "tag",
											"source": 1,
											"value": "425"
										},
										{
											"begin": 2138,
											"end": 2171,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2038,
											"end": 2177,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 2038,
											"end": 2177,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2038,
											"end": 2177,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2038,
											"end": 2177,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2038,
											"end": 2177,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 2183,
											"end": 2260,
											"name": "tag",
											"source": 1,
											"value": "374"
										},
										{
											"begin": 2183,
											"end": 2260,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2220,
											"end": 2227,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2249,
											"end": 2254,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2238,
											"end": 2254,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2238,
											"end": 2254,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2183,
											"end": 2260,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2183,
											"end": 2260,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2183,
											"end": 2260,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2183,
											"end": 2260,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 2266,
											"end": 2388,
											"name": "tag",
											"source": 1,
											"value": "375"
										},
										{
											"begin": 2266,
											"end": 2388,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2339,
											"end": 2363,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "428"
										},
										{
											"begin": 2357,
											"end": 2362,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2339,
											"end": 2363,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "374"
										},
										{
											"begin": 2339,
											"end": 2363,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 2339,
											"end": 2363,
											"name": "tag",
											"source": 1,
											"value": "428"
										},
										{
											"begin": 2339,
											"end": 2363,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2332,
											"end": 2337,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2329,
											"end": 2364,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 2319,
											"end": 2382,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "429"
										},
										{
											"begin": 2319,
											"end": 2382,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 2378,
											"end": 2379,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2375,
											"end": 2376,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2368,
											"end": 2380,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 2319,
											"end": 2382,
											"name": "tag",
											"source": 1,
											"value": "429"
										},
										{
											"begin": 2319,
											"end": 2382,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2266,
											"end": 2388,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2266,
											"end": 2388,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 2394,
											"end": 2533,
											"name": "tag",
											"source": 1,
											"value": "376"
										},
										{
											"begin": 2394,
											"end": 2533,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2440,
											"end": 2445,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2478,
											"end": 2484,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2465,
											"end": 2485,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 2456,
											"end": 2485,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2456,
											"end": 2485,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2494,
											"end": 2527,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "431"
										},
										{
											"begin": 2521,
											"end": 2526,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2494,
											"end": 2527,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "375"
										},
										{
											"begin": 2494,
											"end": 2527,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 2494,
											"end": 2527,
											"name": "tag",
											"source": 1,
											"value": "431"
										},
										{
											"begin": 2494,
											"end": 2527,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2394,
											"end": 2533,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 2394,
											"end": 2533,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2394,
											"end": 2533,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2394,
											"end": 2533,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2394,
											"end": 2533,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 2539,
											"end": 3013,
											"name": "tag",
											"source": 1,
											"value": "34"
										},
										{
											"begin": 2539,
											"end": 3013,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2607,
											"end": 2613,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2615,
											"end": 2621,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2664,
											"end": 2666,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2652,
											"end": 2661,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 2643,
											"end": 2650,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 2639,
											"end": 2662,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 2635,
											"end": 2667,
											"name": "SLT",
											"source": 1
										},
										{
											"begin": 2632,
											"end": 2751,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 2632,
											"end": 2751,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "433"
										},
										{
											"begin": 2632,
											"end": 2751,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 2670,
											"end": 2749,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "434"
										},
										{
											"begin": 2670,
											"end": 2749,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "368"
										},
										{
											"begin": 2670,
											"end": 2749,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 2670,
											"end": 2749,
											"name": "tag",
											"source": 1,
											"value": "434"
										},
										{
											"begin": 2670,
											"end": 2749,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2632,
											"end": 2751,
											"name": "tag",
											"source": 1,
											"value": "433"
										},
										{
											"begin": 2632,
											"end": 2751,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2790,
											"end": 2791,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2815,
											"end": 2868,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "435"
										},
										{
											"begin": 2860,
											"end": 2867,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 2851,
											"end": 2857,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2840,
											"end": 2849,
											"name": "DUP7",
											"source": 1
										},
										{
											"begin": 2836,
											"end": 2858,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2815,
											"end": 2868,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "373"
										},
										{
											"begin": 2815,
											"end": 2868,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 2815,
											"end": 2868,
											"name": "tag",
											"source": 1,
											"value": "435"
										},
										{
											"begin": 2815,
											"end": 2868,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2805,
											"end": 2868,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 2805,
											"end": 2868,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2761,
											"end": 2878,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2917,
											"end": 2919,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 2943,
											"end": 2996,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "436"
										},
										{
											"begin": 2988,
											"end": 2995,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 2979,
											"end": 2985,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2968,
											"end": 2977,
											"name": "DUP7",
											"source": 1
										},
										{
											"begin": 2964,
											"end": 2986,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2943,
											"end": 2996,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "376"
										},
										{
											"begin": 2943,
											"end": 2996,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 2943,
											"end": 2996,
											"name": "tag",
											"source": 1,
											"value": "436"
										},
										{
											"begin": 2943,
											"end": 2996,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2933,
											"end": 2996,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2933,
											"end": 2996,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2888,
											"end": 3006,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2539,
											"end": 3013,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 2539,
											"end": 3013,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2539,
											"end": 3013,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 2539,
											"end": 3013,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2539,
											"end": 3013,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2539,
											"end": 3013,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 3019,
											"end": 3109,
											"name": "tag",
											"source": 1,
											"value": "377"
										},
										{
											"begin": 3019,
											"end": 3109,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3053,
											"end": 3060,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3096,
											"end": 3101,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3089,
											"end": 3102,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 3082,
											"end": 3103,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 3071,
											"end": 3103,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3071,
											"end": 3103,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3019,
											"end": 3109,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3019,
											"end": 3109,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3019,
											"end": 3109,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3019,
											"end": 3109,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 3115,
											"end": 3224,
											"name": "tag",
											"source": 1,
											"value": "378"
										},
										{
											"begin": 3115,
											"end": 3224,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3196,
											"end": 3217,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "439"
										},
										{
											"begin": 3211,
											"end": 3216,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3196,
											"end": 3217,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "377"
										},
										{
											"begin": 3196,
											"end": 3217,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 3196,
											"end": 3217,
											"name": "tag",
											"source": 1,
											"value": "439"
										},
										{
											"begin": 3196,
											"end": 3217,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3191,
											"end": 3194,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 3184,
											"end": 3218,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 3115,
											"end": 3224,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3115,
											"end": 3224,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3115,
											"end": 3224,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 3230,
											"end": 3440,
											"name": "tag",
											"source": 1,
											"value": "37"
										},
										{
											"begin": 3230,
											"end": 3440,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3317,
											"end": 3321,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3355,
											"end": 3357,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 3344,
											"end": 3353,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 3340,
											"end": 3358,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3332,
											"end": 3358,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3332,
											"end": 3358,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3368,
											"end": 3433,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "441"
										},
										{
											"begin": 3430,
											"end": 3431,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3419,
											"end": 3428,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 3415,
											"end": 3432,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3406,
											"end": 3412,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 3368,
											"end": 3433,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "378"
										},
										{
											"begin": 3368,
											"end": 3433,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 3368,
											"end": 3433,
											"name": "tag",
											"source": 1,
											"value": "441"
										},
										{
											"begin": 3368,
											"end": 3433,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3230,
											"end": 3440,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 3230,
											"end": 3440,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3230,
											"end": 3440,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3230,
											"end": 3440,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3230,
											"end": 3440,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 3446,
											"end": 3564,
											"name": "tag",
											"source": 1,
											"value": "379"
										},
										{
											"begin": 3446,
											"end": 3564,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3533,
											"end": 3557,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "443"
										},
										{
											"begin": 3551,
											"end": 3556,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3533,
											"end": 3557,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "374"
										},
										{
											"begin": 3533,
											"end": 3557,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 3533,
											"end": 3557,
											"name": "tag",
											"source": 1,
											"value": "443"
										},
										{
											"begin": 3533,
											"end": 3557,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3528,
											"end": 3531,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 3521,
											"end": 3558,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 3446,
											"end": 3564,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3446,
											"end": 3564,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3446,
											"end": 3564,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 3570,
											"end": 3792,
											"name": "tag",
											"source": 1,
											"value": "41"
										},
										{
											"begin": 3570,
											"end": 3792,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3663,
											"end": 3667,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3701,
											"end": 3703,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 3690,
											"end": 3699,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 3686,
											"end": 3704,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3678,
											"end": 3704,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3678,
											"end": 3704,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3714,
											"end": 3785,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "445"
										},
										{
											"begin": 3782,
											"end": 3783,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3771,
											"end": 3780,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 3767,
											"end": 3784,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3758,
											"end": 3764,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 3714,
											"end": 3785,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "379"
										},
										{
											"begin": 3714,
											"end": 3785,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 3714,
											"end": 3785,
											"name": "tag",
											"source": 1,
											"value": "445"
										},
										{
											"begin": 3714,
											"end": 3785,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3570,
											"end": 3792,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 3570,
											"end": 3792,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3570,
											"end": 3792,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3570,
											"end": 3792,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3570,
											"end": 3792,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 3798,
											"end": 4417,
											"name": "tag",
											"source": 1,
											"value": "44"
										},
										{
											"begin": 3798,
											"end": 4417,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3875,
											"end": 3881,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3883,
											"end": 3889,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3891,
											"end": 3897,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3940,
											"end": 3942,
											"name": "PUSH",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 3928,
											"end": 3937,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 3919,
											"end": 3926,
											"name": "DUP7",
											"source": 1
										},
										{
											"begin": 3915,
											"end": 3938,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 3911,
											"end": 3943,
											"name": "SLT",
											"source": 1
										},
										{
											"begin": 3908,
											"end": 4027,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 3908,
											"end": 4027,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "447"
										},
										{
											"begin": 3908,
											"end": 4027,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 3946,
											"end": 4025,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "448"
										},
										{
											"begin": 3946,
											"end": 4025,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "368"
										},
										{
											"begin": 3946,
											"end": 4025,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 3946,
											"end": 4025,
											"name": "tag",
											"source": 1,
											"value": "448"
										},
										{
											"begin": 3946,
											"end": 4025,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3908,
											"end": 4027,
											"name": "tag",
											"source": 1,
											"value": "447"
										},
										{
											"begin": 3908,
											"end": 4027,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4066,
											"end": 4067,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4091,
											"end": 4144,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "449"
										},
										{
											"begin": 4136,
											"end": 4143,
											"name": "DUP7",
											"source": 1
										},
										{
											"begin": 4127,
											"end": 4133,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 4116,
											"end": 4125,
											"name": "DUP8",
											"source": 1
										},
										{
											"begin": 4112,
											"end": 4134,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4091,
											"end": 4144,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "373"
										},
										{
											"begin": 4091,
											"end": 4144,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 4091,
											"end": 4144,
											"name": "tag",
											"source": 1,
											"value": "449"
										},
										{
											"begin": 4091,
											"end": 4144,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4081,
											"end": 4144,
											"name": "SWAP4",
											"source": 1
										},
										{
											"begin": 4081,
											"end": 4144,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4037,
											"end": 4154,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4193,
											"end": 4195,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 4219,
											"end": 4272,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "450"
										},
										{
											"begin": 4264,
											"end": 4271,
											"name": "DUP7",
											"source": 1
										},
										{
											"begin": 4255,
											"end": 4261,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 4244,
											"end": 4253,
											"name": "DUP8",
											"source": 1
										},
										{
											"begin": 4240,
											"end": 4262,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4219,
											"end": 4272,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "373"
										},
										{
											"begin": 4219,
											"end": 4272,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 4219,
											"end": 4272,
											"name": "tag",
											"source": 1,
											"value": "450"
										},
										{
											"begin": 4219,
											"end": 4272,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4209,
											"end": 4272,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 4209,
											"end": 4272,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4164,
											"end": 4282,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4321,
											"end": 4323,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 4347,
											"end": 4400,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "451"
										},
										{
											"begin": 4392,
											"end": 4399,
											"name": "DUP7",
											"source": 1
										},
										{
											"begin": 4383,
											"end": 4389,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 4372,
											"end": 4381,
											"name": "DUP8",
											"source": 1
										},
										{
											"begin": 4368,
											"end": 4390,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4347,
											"end": 4400,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "376"
										},
										{
											"begin": 4347,
											"end": 4400,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 4347,
											"end": 4400,
											"name": "tag",
											"source": 1,
											"value": "451"
										},
										{
											"begin": 4347,
											"end": 4400,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4337,
											"end": 4400,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 4337,
											"end": 4400,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4292,
											"end": 4410,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3798,
											"end": 4417,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 3798,
											"end": 4417,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3798,
											"end": 4417,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 3798,
											"end": 4417,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3798,
											"end": 4417,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 3798,
											"end": 4417,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 4423,
											"end": 4509,
											"name": "tag",
											"source": 1,
											"value": "380"
										},
										{
											"begin": 4423,
											"end": 4509,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4458,
											"end": 4465,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4498,
											"end": 4502,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 4491,
											"end": 4496,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 4487,
											"end": 4503,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4476,
											"end": 4503,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4476,
											"end": 4503,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4423,
											"end": 4509,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 4423,
											"end": 4509,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4423,
											"end": 4509,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4423,
											"end": 4509,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 4515,
											"end": 4627,
											"name": "tag",
											"source": 1,
											"value": "381"
										},
										{
											"begin": 4515,
											"end": 4627,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4598,
											"end": 4620,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "454"
										},
										{
											"begin": 4614,
											"end": 4619,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4598,
											"end": 4620,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "380"
										},
										{
											"begin": 4598,
											"end": 4620,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 4598,
											"end": 4620,
											"name": "tag",
											"source": 1,
											"value": "454"
										},
										{
											"begin": 4598,
											"end": 4620,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4593,
											"end": 4596,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 4586,
											"end": 4621,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 4515,
											"end": 4627,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4515,
											"end": 4627,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4515,
											"end": 4627,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 4633,
											"end": 4847,
											"name": "tag",
											"source": 1,
											"value": "50"
										},
										{
											"begin": 4633,
											"end": 4847,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4722,
											"end": 4726,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4760,
											"end": 4762,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 4749,
											"end": 4758,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 4745,
											"end": 4763,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4737,
											"end": 4763,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4737,
											"end": 4763,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4773,
											"end": 4840,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "456"
										},
										{
											"begin": 4837,
											"end": 4838,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4826,
											"end": 4835,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 4822,
											"end": 4839,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4813,
											"end": 4819,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 4773,
											"end": 4840,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "381"
										},
										{
											"begin": 4773,
											"end": 4840,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 4773,
											"end": 4840,
											"name": "tag",
											"source": 1,
											"value": "456"
										},
										{
											"begin": 4773,
											"end": 4840,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4633,
											"end": 4847,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 4633,
											"end": 4847,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 4633,
											"end": 4847,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4633,
											"end": 4847,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4633,
											"end": 4847,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 4853,
											"end": 4930,
											"name": "tag",
											"source": 1,
											"value": "382"
										},
										{
											"begin": 4853,
											"end": 4930,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4890,
											"end": 4897,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4919,
											"end": 4924,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4908,
											"end": 4924,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4908,
											"end": 4924,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4853,
											"end": 4930,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 4853,
											"end": 4930,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4853,
											"end": 4930,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4853,
											"end": 4930,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 4936,
											"end": 5054,
											"name": "tag",
											"source": 1,
											"value": "383"
										},
										{
											"begin": 4936,
											"end": 5054,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5023,
											"end": 5047,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "459"
										},
										{
											"begin": 5041,
											"end": 5046,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5023,
											"end": 5047,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "382"
										},
										{
											"begin": 5023,
											"end": 5047,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 5023,
											"end": 5047,
											"name": "tag",
											"source": 1,
											"value": "459"
										},
										{
											"begin": 5023,
											"end": 5047,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5018,
											"end": 5021,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 5011,
											"end": 5048,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 4936,
											"end": 5054,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4936,
											"end": 5054,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4936,
											"end": 5054,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 5060,
											"end": 5282,
											"name": "tag",
											"source": 1,
											"value": "54"
										},
										{
											"begin": 5060,
											"end": 5282,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5153,
											"end": 5157,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 5191,
											"end": 5193,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 5180,
											"end": 5189,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 5176,
											"end": 5194,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5168,
											"end": 5194,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5168,
											"end": 5194,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5204,
											"end": 5275,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "461"
										},
										{
											"begin": 5272,
											"end": 5273,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 5261,
											"end": 5270,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 5257,
											"end": 5274,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5248,
											"end": 5254,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 5204,
											"end": 5275,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "383"
										},
										{
											"begin": 5204,
											"end": 5275,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 5204,
											"end": 5275,
											"name": "tag",
											"source": 1,
											"value": "461"
										},
										{
											"begin": 5204,
											"end": 5275,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5060,
											"end": 5282,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 5060,
											"end": 5282,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 5060,
											"end": 5282,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5060,
											"end": 5282,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5060,
											"end": 5282,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 5288,
											"end": 5617,
											"name": "tag",
											"source": 1,
											"value": "62"
										},
										{
											"begin": 5288,
											"end": 5617,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5347,
											"end": 5353,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 5396,
											"end": 5398,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 5384,
											"end": 5393,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 5375,
											"end": 5382,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 5371,
											"end": 5394,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 5367,
											"end": 5399,
											"name": "SLT",
											"source": 1
										},
										{
											"begin": 5364,
											"end": 5483,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 5364,
											"end": 5483,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "463"
										},
										{
											"begin": 5364,
											"end": 5483,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 5402,
											"end": 5481,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "464"
										},
										{
											"begin": 5402,
											"end": 5481,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "368"
										},
										{
											"begin": 5402,
											"end": 5481,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 5402,
											"end": 5481,
											"name": "tag",
											"source": 1,
											"value": "464"
										},
										{
											"begin": 5402,
											"end": 5481,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5364,
											"end": 5483,
											"name": "tag",
											"source": 1,
											"value": "463"
										},
										{
											"begin": 5364,
											"end": 5483,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5522,
											"end": 5523,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 5547,
											"end": 5600,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "465"
										},
										{
											"begin": 5592,
											"end": 5599,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 5583,
											"end": 5589,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 5572,
											"end": 5581,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 5568,
											"end": 5590,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5547,
											"end": 5600,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "376"
										},
										{
											"begin": 5547,
											"end": 5600,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 5547,
											"end": 5600,
											"name": "tag",
											"source": 1,
											"value": "465"
										},
										{
											"begin": 5547,
											"end": 5600,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5537,
											"end": 5600,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 5537,
											"end": 5600,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5493,
											"end": 5610,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5288,
											"end": 5617,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 5288,
											"end": 5617,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 5288,
											"end": 5617,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5288,
											"end": 5617,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5288,
											"end": 5617,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 5623,
											"end": 5952,
											"name": "tag",
											"source": 1,
											"value": "69"
										},
										{
											"begin": 5623,
											"end": 5952,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5682,
											"end": 5688,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 5731,
											"end": 5733,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 5719,
											"end": 5728,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 5710,
											"end": 5717,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 5706,
											"end": 5729,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 5702,
											"end": 5734,
											"name": "SLT",
											"source": 1
										},
										{
											"begin": 5699,
											"end": 5818,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 5699,
											"end": 5818,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "467"
										},
										{
											"begin": 5699,
											"end": 5818,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 5737,
											"end": 5816,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "468"
										},
										{
											"begin": 5737,
											"end": 5816,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "368"
										},
										{
											"begin": 5737,
											"end": 5816,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 5737,
											"end": 5816,
											"name": "tag",
											"source": 1,
											"value": "468"
										},
										{
											"begin": 5737,
											"end": 5816,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5699,
											"end": 5818,
											"name": "tag",
											"source": 1,
											"value": "467"
										},
										{
											"begin": 5699,
											"end": 5818,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5857,
											"end": 5858,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 5882,
											"end": 5935,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "469"
										},
										{
											"begin": 5927,
											"end": 5934,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 5918,
											"end": 5924,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 5907,
											"end": 5916,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 5903,
											"end": 5925,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5882,
											"end": 5935,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "373"
										},
										{
											"begin": 5882,
											"end": 5935,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 5882,
											"end": 5935,
											"name": "tag",
											"source": 1,
											"value": "469"
										},
										{
											"begin": 5882,
											"end": 5935,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5872,
											"end": 5935,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 5872,
											"end": 5935,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5828,
											"end": 5945,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5623,
											"end": 5952,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 5623,
											"end": 5952,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 5623,
											"end": 5952,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5623,
											"end": 5952,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5623,
											"end": 5952,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 5958,
											"end": 6107,
											"name": "tag",
											"source": 1,
											"value": "384"
										},
										{
											"begin": 5958,
											"end": 6107,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 5994,
											"end": 6001,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 6034,
											"end": 6100,
											"name": "PUSH",
											"source": 1,
											"value": "FF00000000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 6027,
											"end": 6032,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 6023,
											"end": 6101,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 6012,
											"end": 6101,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6012,
											"end": 6101,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5958,
											"end": 6107,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 5958,
											"end": 6107,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5958,
											"end": 6107,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 5958,
											"end": 6107,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 6113,
											"end": 6228,
											"name": "tag",
											"source": 1,
											"value": "385"
										},
										{
											"begin": 6113,
											"end": 6228,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6198,
											"end": 6221,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "472"
										},
										{
											"begin": 6215,
											"end": 6220,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 6198,
											"end": 6221,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "384"
										},
										{
											"begin": 6198,
											"end": 6221,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 6198,
											"end": 6221,
											"name": "tag",
											"source": 1,
											"value": "472"
										},
										{
											"begin": 6198,
											"end": 6221,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6193,
											"end": 6196,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 6186,
											"end": 6222,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 6113,
											"end": 6228,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 6113,
											"end": 6228,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 6113,
											"end": 6228,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 6234,
											"end": 6352,
											"name": "tag",
											"source": 1,
											"value": "386"
										},
										{
											"begin": 6234,
											"end": 6352,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6321,
											"end": 6345,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "474"
										},
										{
											"begin": 6339,
											"end": 6344,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 6321,
											"end": 6345,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "371"
										},
										{
											"begin": 6321,
											"end": 6345,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 6321,
											"end": 6345,
											"name": "tag",
											"source": 1,
											"value": "474"
										},
										{
											"begin": 6321,
											"end": 6345,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6316,
											"end": 6319,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 6309,
											"end": 6346,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 6234,
											"end": 6352,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 6234,
											"end": 6352,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 6234,
											"end": 6352,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 6358,
											"end": 6472,
											"name": "tag",
											"source": 1,
											"value": "387"
										},
										{
											"begin": 6358,
											"end": 6472,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6425,
											"end": 6431,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 6459,
											"end": 6464,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 6453,
											"end": 6465,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 6443,
											"end": 6465,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6443,
											"end": 6465,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 6358,
											"end": 6472,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 6358,
											"end": 6472,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6358,
											"end": 6472,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 6358,
											"end": 6472,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 6478,
											"end": 6662,
											"name": "tag",
											"source": 1,
											"value": "388"
										},
										{
											"begin": 6478,
											"end": 6662,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6577,
											"end": 6588,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 6611,
											"end": 6617,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 6606,
											"end": 6609,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 6599,
											"end": 6618,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 6651,
											"end": 6655,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 6646,
											"end": 6649,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 6642,
											"end": 6656,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 6627,
											"end": 6656,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6627,
											"end": 6656,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 6478,
											"end": 6662,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 6478,
											"end": 6662,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 6478,
											"end": 6662,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 6478,
											"end": 6662,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 6478,
											"end": 6662,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 6668,
											"end": 6800,
											"name": "tag",
											"source": 1,
											"value": "389"
										},
										{
											"begin": 6668,
											"end": 6800,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6735,
											"end": 6739,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 6758,
											"end": 6761,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 6750,
											"end": 6761,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6750,
											"end": 6761,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 6788,
											"end": 6792,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 6783,
											"end": 6786,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 6779,
											"end": 6793,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 6771,
											"end": 6793,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6771,
											"end": 6793,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 6668,
											"end": 6800,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 6668,
											"end": 6800,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 6668,
											"end": 6800,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 6668,
											"end": 6800,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 6806,
											"end": 6914,
											"name": "tag",
											"source": 1,
											"value": "390"
										},
										{
											"begin": 6806,
											"end": 6914,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6883,
											"end": 6907,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "479"
										},
										{
											"begin": 6901,
											"end": 6906,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 6883,
											"end": 6907,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "374"
										},
										{
											"begin": 6883,
											"end": 6907,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 6883,
											"end": 6907,
											"name": "tag",
											"source": 1,
											"value": "479"
										},
										{
											"begin": 6883,
											"end": 6907,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6878,
											"end": 6881,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 6871,
											"end": 6908,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 6806,
											"end": 6914,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 6806,
											"end": 6914,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 6806,
											"end": 6914,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 6920,
											"end": 7099,
											"name": "tag",
											"source": 1,
											"value": "391"
										},
										{
											"begin": 6920,
											"end": 7099,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 6989,
											"end": 6999,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 7010,
											"end": 7056,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "481"
										},
										{
											"begin": 7052,
											"end": 7055,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 7044,
											"end": 7050,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 7010,
											"end": 7056,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "390"
										},
										{
											"begin": 7010,
											"end": 7056,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 7010,
											"end": 7056,
											"name": "tag",
											"source": 1,
											"value": "481"
										},
										{
											"begin": 7010,
											"end": 7056,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 7088,
											"end": 7092,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 7083,
											"end": 7086,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 7079,
											"end": 7093,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 7065,
											"end": 7093,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7065,
											"end": 7093,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 6920,
											"end": 7099,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 6920,
											"end": 7099,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 6920,
											"end": 7099,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 6920,
											"end": 7099,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 6920,
											"end": 7099,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 7105,
											"end": 7218,
											"name": "tag",
											"source": 1,
											"value": "392"
										},
										{
											"begin": 7105,
											"end": 7218,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 7175,
											"end": 7179,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 7207,
											"end": 7211,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 7202,
											"end": 7205,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 7198,
											"end": 7212,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 7190,
											"end": 7212,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7190,
											"end": 7212,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 7105,
											"end": 7218,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 7105,
											"end": 7218,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7105,
											"end": 7218,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 7105,
											"end": 7218,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 7254,
											"end": 7986,
											"name": "tag",
											"source": 1,
											"value": "393"
										},
										{
											"begin": 7254,
											"end": 7986,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 7373,
											"end": 7376,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 7402,
											"end": 7456,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "484"
										},
										{
											"begin": 7450,
											"end": 7455,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 7402,
											"end": 7456,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "387"
										},
										{
											"begin": 7402,
											"end": 7456,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 7402,
											"end": 7456,
											"name": "tag",
											"source": 1,
											"value": "484"
										},
										{
											"begin": 7402,
											"end": 7456,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 7472,
											"end": 7558,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "485"
										},
										{
											"begin": 7551,
											"end": 7557,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7546,
											"end": 7549,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 7472,
											"end": 7558,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "388"
										},
										{
											"begin": 7472,
											"end": 7558,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 7472,
											"end": 7558,
											"name": "tag",
											"source": 1,
											"value": "485"
										},
										{
											"begin": 7472,
											"end": 7558,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 7465,
											"end": 7558,
											"name": "SWAP4",
											"source": 1
										},
										{
											"begin": 7465,
											"end": 7558,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 7582,
											"end": 7638,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "486"
										},
										{
											"begin": 7632,
											"end": 7637,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 7582,
											"end": 7638,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "389"
										},
										{
											"begin": 7582,
											"end": 7638,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 7582,
											"end": 7638,
											"name": "tag",
											"source": 1,
											"value": "486"
										},
										{
											"begin": 7582,
											"end": 7638,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 7661,
											"end": 7668,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 7692,
											"end": 7693,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 7677,
											"end": 7961,
											"name": "tag",
											"source": 1,
											"value": "487"
										},
										{
											"begin": 7677,
											"end": 7961,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 7702,
											"end": 7708,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 7699,
											"end": 7700,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7696,
											"end": 7709,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 7677,
											"end": 7961,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 7677,
											"end": 7961,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "489"
										},
										{
											"begin": 7677,
											"end": 7961,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 7778,
											"end": 7784,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7772,
											"end": 7785,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 7805,
											"end": 7868,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "490"
										},
										{
											"begin": 7864,
											"end": 7867,
											"name": "DUP9",
											"source": 1
										},
										{
											"begin": 7849,
											"end": 7862,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 7805,
											"end": 7868,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "391"
										},
										{
											"begin": 7805,
											"end": 7868,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 7805,
											"end": 7868,
											"name": "tag",
											"source": 1,
											"value": "490"
										},
										{
											"begin": 7805,
											"end": 7868,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 7798,
											"end": 7868,
											"name": "SWAP8",
											"source": 1
										},
										{
											"begin": 7798,
											"end": 7868,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 7891,
											"end": 7951,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "491"
										},
										{
											"begin": 7944,
											"end": 7950,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 7891,
											"end": 7951,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "392"
										},
										{
											"begin": 7891,
											"end": 7951,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 7891,
											"end": 7951,
											"name": "tag",
											"source": 1,
											"value": "491"
										},
										{
											"begin": 7891,
											"end": 7951,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 7881,
											"end": 7951,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 7881,
											"end": 7951,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 7737,
											"end": 7961,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 7724,
											"end": 7725,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 7721,
											"end": 7722,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7717,
											"end": 7726,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 7712,
											"end": 7726,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7712,
											"end": 7726,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 7677,
											"end": 7961,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "487"
										},
										{
											"begin": 7677,
											"end": 7961,
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 7677,
											"end": 7961,
											"name": "tag",
											"source": 1,
											"value": "489"
										},
										{
											"begin": 7677,
											"end": 7961,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 7681,
											"end": 7695,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 7977,
											"end": 7980,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 7970,
											"end": 7980,
											"name": "SWAP4",
											"source": 1
										},
										{
											"begin": 7970,
											"end": 7980,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 7378,
											"end": 7986,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 7378,
											"end": 7986,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 7378,
											"end": 7986,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 7254,
											"end": 7986,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 7254,
											"end": 7986,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 7254,
											"end": 7986,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 7254,
											"end": 7986,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 7254,
											"end": 7986,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 7992,
											"end": 9207,
											"name": "tag",
											"source": 1,
											"value": "86"
										},
										{
											"begin": 7992,
											"end": 9207,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 8341,
											"end": 8345,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 8379,
											"end": 8382,
											"name": "PUSH",
											"source": 1,
											"value": "E0"
										},
										{
											"begin": 8368,
											"end": 8377,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 8364,
											"end": 8383,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 8356,
											"end": 8383,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 8356,
											"end": 8383,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 8393,
											"end": 8462,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "493"
										},
										{
											"begin": 8459,
											"end": 8460,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 8448,
											"end": 8457,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 8444,
											"end": 8461,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 8435,
											"end": 8441,
											"name": "DUP11",
											"source": 1
										},
										{
											"begin": 8393,
											"end": 8462,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "385"
										},
										{
											"begin": 8393,
											"end": 8462,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 8393,
											"end": 8462,
											"name": "tag",
											"source": 1,
											"value": "493"
										},
										{
											"begin": 8393,
											"end": 8462,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 8509,
											"end": 8518,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 8503,
											"end": 8507,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 8499,
											"end": 8519,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 8494,
											"end": 8496,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 8483,
											"end": 8492,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 8479,
											"end": 8497,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 8472,
											"end": 8520,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 8537,
											"end": 8615,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "494"
										},
										{
											"begin": 8610,
											"end": 8614,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 8601,
											"end": 8607,
											"name": "DUP10",
											"source": 1
										},
										{
											"begin": 8537,
											"end": 8615,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "366"
										},
										{
											"begin": 8537,
											"end": 8615,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 8537,
											"end": 8615,
											"name": "tag",
											"source": 1,
											"value": "494"
										},
										{
											"begin": 8537,
											"end": 8615,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 8529,
											"end": 8615,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 8529,
											"end": 8615,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 8662,
											"end": 8671,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 8656,
											"end": 8660,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 8652,
											"end": 8672,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 8647,
											"end": 8649,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 8636,
											"end": 8645,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 8632,
											"end": 8650,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 8625,
											"end": 8673,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 8690,
											"end": 8768,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "495"
										},
										{
											"begin": 8763,
											"end": 8767,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 8754,
											"end": 8760,
											"name": "DUP9",
											"source": 1
										},
										{
											"begin": 8690,
											"end": 8768,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "366"
										},
										{
											"begin": 8690,
											"end": 8768,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 8690,
											"end": 8768,
											"name": "tag",
											"source": 1,
											"value": "495"
										},
										{
											"begin": 8690,
											"end": 8768,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 8682,
											"end": 8768,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 8682,
											"end": 8768,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 8778,
											"end": 8850,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "496"
										},
										{
											"begin": 8846,
											"end": 8848,
											"name": "PUSH",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 8835,
											"end": 8844,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 8831,
											"end": 8849,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 8822,
											"end": 8828,
											"name": "DUP8",
											"source": 1
										},
										{
											"begin": 8778,
											"end": 8850,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "379"
										},
										{
											"begin": 8778,
											"end": 8850,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 8778,
											"end": 8850,
											"name": "tag",
											"source": 1,
											"value": "496"
										},
										{
											"begin": 8778,
											"end": 8850,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 8860,
											"end": 8933,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "497"
										},
										{
											"begin": 8928,
											"end": 8931,
											"name": "PUSH",
											"source": 1,
											"value": "80"
										},
										{
											"begin": 8917,
											"end": 8926,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 8913,
											"end": 8932,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 8904,
											"end": 8910,
											"name": "DUP7",
											"source": 1
										},
										{
											"begin": 8860,
											"end": 8933,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "386"
										},
										{
											"begin": 8860,
											"end": 8933,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 8860,
											"end": 8933,
											"name": "tag",
											"source": 1,
											"value": "497"
										},
										{
											"begin": 8860,
											"end": 8933,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 8943,
											"end": 9016,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "498"
										},
										{
											"begin": 9011,
											"end": 9014,
											"name": "PUSH",
											"source": 1,
											"value": "A0"
										},
										{
											"begin": 9000,
											"end": 9009,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 8996,
											"end": 9015,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 8987,
											"end": 8993,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 8943,
											"end": 9016,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "383"
										},
										{
											"begin": 8943,
											"end": 9016,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 8943,
											"end": 9016,
											"name": "tag",
											"source": 1,
											"value": "498"
										},
										{
											"begin": 8943,
											"end": 9016,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 9064,
											"end": 9073,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 9058,
											"end": 9062,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 9054,
											"end": 9074,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 9048,
											"end": 9051,
											"name": "PUSH",
											"source": 1,
											"value": "C0"
										},
										{
											"begin": 9037,
											"end": 9046,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 9033,
											"end": 9052,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 9026,
											"end": 9075,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 9092,
											"end": 9200,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "499"
										},
										{
											"begin": 9195,
											"end": 9199,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 9186,
											"end": 9192,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 9092,
											"end": 9200,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "393"
										},
										{
											"begin": 9092,
											"end": 9200,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 9092,
											"end": 9200,
											"name": "tag",
											"source": 1,
											"value": "499"
										},
										{
											"begin": 9092,
											"end": 9200,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 9084,
											"end": 9200,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 9084,
											"end": 9200,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 7992,
											"end": 9207,
											"name": "SWAP9",
											"source": 1
										},
										{
											"begin": 7992,
											"end": 9207,
											"name": "SWAP8",
											"source": 1
										},
										{
											"begin": 7992,
											"end": 9207,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 7992,
											"end": 9207,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 7992,
											"end": 9207,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 7992,
											"end": 9207,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 7992,
											"end": 9207,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 7992,
											"end": 9207,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 7992,
											"end": 9207,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 7992,
											"end": 9207,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 7992,
											"end": 9207,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 9213,
											"end": 9435,
											"name": "tag",
											"source": 1,
											"value": "90"
										},
										{
											"begin": 9213,
											"end": 9435,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 9306,
											"end": 9310,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 9344,
											"end": 9346,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 9333,
											"end": 9342,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 9329,
											"end": 9347,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 9321,
											"end": 9347,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 9321,
											"end": 9347,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 9357,
											"end": 9428,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "501"
										},
										{
											"begin": 9425,
											"end": 9426,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 9414,
											"end": 9423,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 9410,
											"end": 9427,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 9401,
											"end": 9407,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 9357,
											"end": 9428,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "386"
										},
										{
											"begin": 9357,
											"end": 9428,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 9357,
											"end": 9428,
											"name": "tag",
											"source": 1,
											"value": "501"
										},
										{
											"begin": 9357,
											"end": 9428,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 9213,
											"end": 9435,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 9213,
											"end": 9435,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 9213,
											"end": 9435,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 9213,
											"end": 9435,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 9213,
											"end": 9435,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 9441,
											"end": 9559,
											"name": "tag",
											"source": 1,
											"value": "394"
										},
										{
											"begin": 9441,
											"end": 9559,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 9512,
											"end": 9534,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "503"
										},
										{
											"begin": 9528,
											"end": 9533,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 9512,
											"end": 9534,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "380"
										},
										{
											"begin": 9512,
											"end": 9534,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 9512,
											"end": 9534,
											"name": "tag",
											"source": 1,
											"value": "503"
										},
										{
											"begin": 9512,
											"end": 9534,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 9505,
											"end": 9510,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 9502,
											"end": 9535,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 9492,
											"end": 9553,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "504"
										},
										{
											"begin": 9492,
											"end": 9553,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 9549,
											"end": 9550,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 9546,
											"end": 9547,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 9539,
											"end": 9551,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 9492,
											"end": 9553,
											"name": "tag",
											"source": 1,
											"value": "504"
										},
										{
											"begin": 9492,
											"end": 9553,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 9441,
											"end": 9559,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 9441,
											"end": 9559,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 9565,
											"end": 9700,
											"name": "tag",
											"source": 1,
											"value": "395"
										},
										{
											"begin": 9565,
											"end": 9700,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 9609,
											"end": 9614,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 9647,
											"end": 9653,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 9634,
											"end": 9654,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 9625,
											"end": 9654,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 9625,
											"end": 9654,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 9663,
											"end": 9694,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "506"
										},
										{
											"begin": 9688,
											"end": 9693,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 9663,
											"end": 9694,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "394"
										},
										{
											"begin": 9663,
											"end": 9694,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 9663,
											"end": 9694,
											"name": "tag",
											"source": 1,
											"value": "506"
										},
										{
											"begin": 9663,
											"end": 9694,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 9565,
											"end": 9700,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 9565,
											"end": 9700,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 9565,
											"end": 9700,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 9565,
											"end": 9700,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 9565,
											"end": 9700,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 9706,
											"end": 9828,
											"name": "tag",
											"source": 1,
											"value": "396"
										},
										{
											"begin": 9706,
											"end": 9828,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 9779,
											"end": 9803,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "508"
										},
										{
											"begin": 9797,
											"end": 9802,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 9779,
											"end": 9803,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "382"
										},
										{
											"begin": 9779,
											"end": 9803,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 9779,
											"end": 9803,
											"name": "tag",
											"source": 1,
											"value": "508"
										},
										{
											"begin": 9779,
											"end": 9803,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 9772,
											"end": 9777,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 9769,
											"end": 9804,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 9759,
											"end": 9822,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "509"
										},
										{
											"begin": 9759,
											"end": 9822,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 9818,
											"end": 9819,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 9815,
											"end": 9816,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 9808,
											"end": 9820,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 9759,
											"end": 9822,
											"name": "tag",
											"source": 1,
											"value": "509"
										},
										{
											"begin": 9759,
											"end": 9822,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 9706,
											"end": 9828,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 9706,
											"end": 9828,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 9834,
											"end": 9973,
											"name": "tag",
											"source": 1,
											"value": "397"
										},
										{
											"begin": 9834,
											"end": 9973,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 9880,
											"end": 9885,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 9918,
											"end": 9924,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 9905,
											"end": 9925,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 9896,
											"end": 9925,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 9896,
											"end": 9925,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 9934,
											"end": 9967,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "511"
										},
										{
											"begin": 9961,
											"end": 9966,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 9934,
											"end": 9967,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "396"
										},
										{
											"begin": 9934,
											"end": 9967,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 9934,
											"end": 9967,
											"name": "tag",
											"source": 1,
											"value": "511"
										},
										{
											"begin": 9934,
											"end": 9967,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 9834,
											"end": 9973,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 9834,
											"end": 9973,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 9834,
											"end": 9973,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 9834,
											"end": 9973,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 9834,
											"end": 9973,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 9979,
											"end": 11178,
											"name": "tag",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 9979,
											"end": 11178,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 10090,
											"end": 10096,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 10098,
											"end": 10104,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 10106,
											"end": 10112,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 10114,
											"end": 10120,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 10122,
											"end": 10128,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 10130,
											"end": 10136,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 10138,
											"end": 10144,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 10187,
											"end": 10190,
											"name": "PUSH",
											"source": 1,
											"value": "E0"
										},
										{
											"begin": 10175,
											"end": 10184,
											"name": "DUP9",
											"source": 1
										},
										{
											"begin": 10166,
											"end": 10173,
											"name": "DUP11",
											"source": 1
										},
										{
											"begin": 10162,
											"end": 10185,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 10158,
											"end": 10191,
											"name": "SLT",
											"source": 1
										},
										{
											"begin": 10155,
											"end": 10275,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 10155,
											"end": 10275,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "513"
										},
										{
											"begin": 10155,
											"end": 10275,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 10194,
											"end": 10273,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "514"
										},
										{
											"begin": 10194,
											"end": 10273,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "368"
										},
										{
											"begin": 10194,
											"end": 10273,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 10194,
											"end": 10273,
											"name": "tag",
											"source": 1,
											"value": "514"
										},
										{
											"begin": 10194,
											"end": 10273,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 10155,
											"end": 10275,
											"name": "tag",
											"source": 1,
											"value": "513"
										},
										{
											"begin": 10155,
											"end": 10275,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 10314,
											"end": 10315,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 10339,
											"end": 10392,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "515"
										},
										{
											"begin": 10384,
											"end": 10391,
											"name": "DUP11",
											"source": 1
										},
										{
											"begin": 10375,
											"end": 10381,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 10364,
											"end": 10373,
											"name": "DUP12",
											"source": 1
										},
										{
											"begin": 10360,
											"end": 10382,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 10339,
											"end": 10392,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "373"
										},
										{
											"begin": 10339,
											"end": 10392,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 10339,
											"end": 10392,
											"name": "tag",
											"source": 1,
											"value": "515"
										},
										{
											"begin": 10339,
											"end": 10392,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 10329,
											"end": 10392,
											"name": "SWAP8",
											"source": 1
										},
										{
											"begin": 10329,
											"end": 10392,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 10285,
											"end": 10402,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 10441,
											"end": 10443,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 10467,
											"end": 10520,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "516"
										},
										{
											"begin": 10512,
											"end": 10519,
											"name": "DUP11",
											"source": 1
										},
										{
											"begin": 10503,
											"end": 10509,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 10492,
											"end": 10501,
											"name": "DUP12",
											"source": 1
										},
										{
											"begin": 10488,
											"end": 10510,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 10467,
											"end": 10520,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "373"
										},
										{
											"begin": 10467,
											"end": 10520,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 10467,
											"end": 10520,
											"name": "tag",
											"source": 1,
											"value": "516"
										},
										{
											"begin": 10467,
											"end": 10520,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 10457,
											"end": 10520,
											"name": "SWAP7",
											"source": 1
										},
										{
											"begin": 10457,
											"end": 10520,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 10412,
											"end": 10530,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 10569,
											"end": 10571,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 10595,
											"end": 10648,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "517"
										},
										{
											"begin": 10640,
											"end": 10647,
											"name": "DUP11",
											"source": 1
										},
										{
											"begin": 10631,
											"end": 10637,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 10620,
											"end": 10629,
											"name": "DUP12",
											"source": 1
										},
										{
											"begin": 10616,
											"end": 10638,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 10595,
											"end": 10648,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "376"
										},
										{
											"begin": 10595,
											"end": 10648,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 10595,
											"end": 10648,
											"name": "tag",
											"source": 1,
											"value": "517"
										},
										{
											"begin": 10595,
											"end": 10648,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 10585,
											"end": 10648,
											"name": "SWAP6",
											"source": 1
										},
										{
											"begin": 10585,
											"end": 10648,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 10540,
											"end": 10658,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 10697,
											"end": 10699,
											"name": "PUSH",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 10723,
											"end": 10776,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "518"
										},
										{
											"begin": 10768,
											"end": 10775,
											"name": "DUP11",
											"source": 1
										},
										{
											"begin": 10759,
											"end": 10765,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 10748,
											"end": 10757,
											"name": "DUP12",
											"source": 1
										},
										{
											"begin": 10744,
											"end": 10766,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 10723,
											"end": 10776,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "376"
										},
										{
											"begin": 10723,
											"end": 10776,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 10723,
											"end": 10776,
											"name": "tag",
											"source": 1,
											"value": "518"
										},
										{
											"begin": 10723,
											"end": 10776,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 10713,
											"end": 10776,
											"name": "SWAP5",
											"source": 1
										},
										{
											"begin": 10713,
											"end": 10776,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 10668,
											"end": 10786,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 10825,
											"end": 10828,
											"name": "PUSH",
											"source": 1,
											"value": "80"
										},
										{
											"begin": 10852,
											"end": 10903,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "519"
										},
										{
											"begin": 10895,
											"end": 10902,
											"name": "DUP11",
											"source": 1
										},
										{
											"begin": 10886,
											"end": 10892,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 10875,
											"end": 10884,
											"name": "DUP12",
											"source": 1
										},
										{
											"begin": 10871,
											"end": 10893,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 10852,
											"end": 10903,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "395"
										},
										{
											"begin": 10852,
											"end": 10903,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 10852,
											"end": 10903,
											"name": "tag",
											"source": 1,
											"value": "519"
										},
										{
											"begin": 10852,
											"end": 10903,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 10842,
											"end": 10903,
											"name": "SWAP4",
											"source": 1
										},
										{
											"begin": 10842,
											"end": 10903,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 10796,
											"end": 10913,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 10952,
											"end": 10955,
											"name": "PUSH",
											"source": 1,
											"value": "A0"
										},
										{
											"begin": 10979,
											"end": 11032,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "520"
										},
										{
											"begin": 11024,
											"end": 11031,
											"name": "DUP11",
											"source": 1
										},
										{
											"begin": 11015,
											"end": 11021,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 11004,
											"end": 11013,
											"name": "DUP12",
											"source": 1
										},
										{
											"begin": 11000,
											"end": 11022,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 10979,
											"end": 11032,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "397"
										},
										{
											"begin": 10979,
											"end": 11032,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 10979,
											"end": 11032,
											"name": "tag",
											"source": 1,
											"value": "520"
										},
										{
											"begin": 10979,
											"end": 11032,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 10969,
											"end": 11032,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 10969,
											"end": 11032,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 10923,
											"end": 11042,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 11081,
											"end": 11084,
											"name": "PUSH",
											"source": 1,
											"value": "C0"
										},
										{
											"begin": 11108,
											"end": 11161,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "521"
										},
										{
											"begin": 11153,
											"end": 11160,
											"name": "DUP11",
											"source": 1
										},
										{
											"begin": 11144,
											"end": 11150,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 11133,
											"end": 11142,
											"name": "DUP12",
											"source": 1
										},
										{
											"begin": 11129,
											"end": 11151,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 11108,
											"end": 11161,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "397"
										},
										{
											"begin": 11108,
											"end": 11161,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 11108,
											"end": 11161,
											"name": "tag",
											"source": 1,
											"value": "521"
										},
										{
											"begin": 11108,
											"end": 11161,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 11098,
											"end": 11161,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 11098,
											"end": 11161,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 11052,
											"end": 11171,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 9979,
											"end": 11178,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 9979,
											"end": 11178,
											"name": "SWAP6",
											"source": 1
										},
										{
											"begin": 9979,
											"end": 11178,
											"name": "SWAP9",
											"source": 1
										},
										{
											"begin": 9979,
											"end": 11178,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 9979,
											"end": 11178,
											"name": "SWAP5",
											"source": 1
										},
										{
											"begin": 9979,
											"end": 11178,
											"name": "SWAP8",
											"source": 1
										},
										{
											"begin": 9979,
											"end": 11178,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 9979,
											"end": 11178,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 9979,
											"end": 11178,
											"name": "SWAP6",
											"source": 1
										},
										{
											"begin": 9979,
											"end": 11178,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 9979,
											"end": 11178,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 11184,
											"end": 11658,
											"name": "tag",
											"source": 1,
											"value": "104"
										},
										{
											"begin": 11184,
											"end": 11658,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 11252,
											"end": 11258,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 11260,
											"end": 11266,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 11309,
											"end": 11311,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 11297,
											"end": 11306,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 11288,
											"end": 11295,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 11284,
											"end": 11307,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 11280,
											"end": 11312,
											"name": "SLT",
											"source": 1
										},
										{
											"begin": 11277,
											"end": 11396,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 11277,
											"end": 11396,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "523"
										},
										{
											"begin": 11277,
											"end": 11396,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 11315,
											"end": 11394,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "524"
										},
										{
											"begin": 11315,
											"end": 11394,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "368"
										},
										{
											"begin": 11315,
											"end": 11394,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 11315,
											"end": 11394,
											"name": "tag",
											"source": 1,
											"value": "524"
										},
										{
											"begin": 11315,
											"end": 11394,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 11277,
											"end": 11396,
											"name": "tag",
											"source": 1,
											"value": "523"
										},
										{
											"begin": 11277,
											"end": 11396,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 11435,
											"end": 11436,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 11460,
											"end": 11513,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "525"
										},
										{
											"begin": 11505,
											"end": 11512,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 11496,
											"end": 11502,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 11485,
											"end": 11494,
											"name": "DUP7",
											"source": 1
										},
										{
											"begin": 11481,
											"end": 11503,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 11460,
											"end": 11513,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "373"
										},
										{
											"begin": 11460,
											"end": 11513,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 11460,
											"end": 11513,
											"name": "tag",
											"source": 1,
											"value": "525"
										},
										{
											"begin": 11460,
											"end": 11513,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 11450,
											"end": 11513,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 11450,
											"end": 11513,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 11406,
											"end": 11523,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 11562,
											"end": 11564,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 11588,
											"end": 11641,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "526"
										},
										{
											"begin": 11633,
											"end": 11640,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 11624,
											"end": 11630,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 11613,
											"end": 11622,
											"name": "DUP7",
											"source": 1
										},
										{
											"begin": 11609,
											"end": 11631,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 11588,
											"end": 11641,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "373"
										},
										{
											"begin": 11588,
											"end": 11641,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 11588,
											"end": 11641,
											"name": "tag",
											"source": 1,
											"value": "526"
										},
										{
											"begin": 11588,
											"end": 11641,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 11578,
											"end": 11641,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 11578,
											"end": 11641,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 11533,
											"end": 11651,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 11184,
											"end": 11658,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 11184,
											"end": 11658,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 11184,
											"end": 11658,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 11184,
											"end": 11658,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 11184,
											"end": 11658,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 11184,
											"end": 11658,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 11664,
											"end": 11844,
											"name": "tag",
											"source": 1,
											"value": "398"
										},
										{
											"begin": 11664,
											"end": 11844,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 11712,
											"end": 11789,
											"name": "PUSH",
											"source": 1,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 11709,
											"end": 11710,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 11702,
											"end": 11790,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 11809,
											"end": 11813,
											"name": "PUSH",
											"source": 1,
											"value": "22"
										},
										{
											"begin": 11806,
											"end": 11807,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 11799,
											"end": 11814,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 11833,
											"end": 11837,
											"name": "PUSH",
											"source": 1,
											"value": "24"
										},
										{
											"begin": 11830,
											"end": 11831,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 11823,
											"end": 11838,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 11850,
											"end": 12170,
											"name": "tag",
											"source": 1,
											"value": "112"
										},
										{
											"begin": 11850,
											"end": 12170,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 11894,
											"end": 11900,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 11931,
											"end": 11932,
											"name": "PUSH",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 11925,
											"end": 11929,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 11921,
											"end": 11933,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 11911,
											"end": 11933,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 11911,
											"end": 11933,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 11978,
											"end": 11979,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 11972,
											"end": 11976,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 11968,
											"end": 11980,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 11999,
											"end": 12017,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 11989,
											"end": 12070,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "529"
										},
										{
											"begin": 11989,
											"end": 12070,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 12055,
											"end": 12059,
											"name": "PUSH",
											"source": 1,
											"value": "7F"
										},
										{
											"begin": 12047,
											"end": 12053,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 12043,
											"end": 12060,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 12033,
											"end": 12060,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 12033,
											"end": 12060,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 11989,
											"end": 12070,
											"name": "tag",
											"source": 1,
											"value": "529"
										},
										{
											"begin": 11989,
											"end": 12070,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 12117,
											"end": 12119,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 12109,
											"end": 12115,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 12106,
											"end": 12120,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 12086,
											"end": 12104,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 12083,
											"end": 12121,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 12080,
											"end": 12164,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "530"
										},
										{
											"begin": 12080,
											"end": 12164,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 12136,
											"end": 12154,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "531"
										},
										{
											"begin": 12136,
											"end": 12154,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "398"
										},
										{
											"begin": 12136,
											"end": 12154,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 12136,
											"end": 12154,
											"name": "tag",
											"source": 1,
											"value": "531"
										},
										{
											"begin": 12136,
											"end": 12154,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 12080,
											"end": 12164,
											"name": "tag",
											"source": 1,
											"value": "530"
										},
										{
											"begin": 12080,
											"end": 12164,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 11901,
											"end": 12170,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 11850,
											"end": 12170,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 11850,
											"end": 12170,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 11850,
											"end": 12170,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 11850,
											"end": 12170,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 12176,
											"end": 12356,
											"name": "tag",
											"source": 1,
											"value": "174"
										},
										{
											"begin": 12176,
											"end": 12356,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 12224,
											"end": 12301,
											"name": "PUSH",
											"source": 1,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 12221,
											"end": 12222,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 12214,
											"end": 12302,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 12321,
											"end": 12325,
											"name": "PUSH",
											"source": 1,
											"value": "41"
										},
										{
											"begin": 12318,
											"end": 12319,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 12311,
											"end": 12326,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 12345,
											"end": 12349,
											"name": "PUSH",
											"source": 1,
											"value": "24"
										},
										{
											"begin": 12342,
											"end": 12343,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 12335,
											"end": 12350,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 12362,
											"end": 13137,
											"name": "tag",
											"source": 1,
											"value": "192"
										},
										{
											"begin": 12362,
											"end": 13137,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 12595,
											"end": 12599,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 12633,
											"end": 12636,
											"name": "PUSH",
											"source": 1,
											"value": "C0"
										},
										{
											"begin": 12622,
											"end": 12631,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 12618,
											"end": 12637,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 12610,
											"end": 12637,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 12610,
											"end": 12637,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 12647,
											"end": 12718,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "534"
										},
										{
											"begin": 12715,
											"end": 12716,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 12704,
											"end": 12713,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 12700,
											"end": 12717,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 12691,
											"end": 12697,
											"name": "DUP10",
											"source": 1
										},
										{
											"begin": 12647,
											"end": 12718,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "383"
										},
										{
											"begin": 12647,
											"end": 12718,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 12647,
											"end": 12718,
											"name": "tag",
											"source": 1,
											"value": "534"
										},
										{
											"begin": 12647,
											"end": 12718,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 12728,
											"end": 12800,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "535"
										},
										{
											"begin": 12796,
											"end": 12798,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 12785,
											"end": 12794,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 12781,
											"end": 12799,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 12772,
											"end": 12778,
											"name": "DUP9",
											"source": 1
										},
										{
											"begin": 12728,
											"end": 12800,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "386"
										},
										{
											"begin": 12728,
											"end": 12800,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 12728,
											"end": 12800,
											"name": "tag",
											"source": 1,
											"value": "535"
										},
										{
											"begin": 12728,
											"end": 12800,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 12810,
											"end": 12882,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "536"
										},
										{
											"begin": 12878,
											"end": 12880,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 12867,
											"end": 12876,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 12863,
											"end": 12881,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 12854,
											"end": 12860,
											"name": "DUP8",
											"source": 1
										},
										{
											"begin": 12810,
											"end": 12882,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "386"
										},
										{
											"begin": 12810,
											"end": 12882,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 12810,
											"end": 12882,
											"name": "tag",
											"source": 1,
											"value": "536"
										},
										{
											"begin": 12810,
											"end": 12882,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 12892,
											"end": 12964,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "537"
										},
										{
											"begin": 12960,
											"end": 12962,
											"name": "PUSH",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 12949,
											"end": 12958,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 12945,
											"end": 12963,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 12936,
											"end": 12942,
											"name": "DUP7",
											"source": 1
										},
										{
											"begin": 12892,
											"end": 12964,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "379"
										},
										{
											"begin": 12892,
											"end": 12964,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 12892,
											"end": 12964,
											"name": "tag",
											"source": 1,
											"value": "537"
										},
										{
											"begin": 12892,
											"end": 12964,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 12974,
											"end": 13047,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "538"
										},
										{
											"begin": 13042,
											"end": 13045,
											"name": "PUSH",
											"source": 1,
											"value": "80"
										},
										{
											"begin": 13031,
											"end": 13040,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 13027,
											"end": 13046,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 13018,
											"end": 13024,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 12974,
											"end": 13047,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "379"
										},
										{
											"begin": 12974,
											"end": 13047,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 12974,
											"end": 13047,
											"name": "tag",
											"source": 1,
											"value": "538"
										},
										{
											"begin": 12974,
											"end": 13047,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 13057,
											"end": 13130,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "539"
										},
										{
											"begin": 13125,
											"end": 13128,
											"name": "PUSH",
											"source": 1,
											"value": "A0"
										},
										{
											"begin": 13114,
											"end": 13123,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 13110,
											"end": 13129,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 13101,
											"end": 13107,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 13057,
											"end": 13130,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "379"
										},
										{
											"begin": 13057,
											"end": 13130,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 13057,
											"end": 13130,
											"name": "tag",
											"source": 1,
											"value": "539"
										},
										{
											"begin": 13057,
											"end": 13130,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 12362,
											"end": 13137,
											"name": "SWAP8",
											"source": 1
										},
										{
											"begin": 12362,
											"end": 13137,
											"name": "SWAP7",
											"source": 1
										},
										{
											"begin": 12362,
											"end": 13137,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 12362,
											"end": 13137,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 12362,
											"end": 13137,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 12362,
											"end": 13137,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 12362,
											"end": 13137,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 12362,
											"end": 13137,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 12362,
											"end": 13137,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 12362,
											"end": 13137,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 13143,
											"end": 13475,
											"name": "tag",
											"source": 1,
											"value": "199"
										},
										{
											"begin": 13143,
											"end": 13475,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 13264,
											"end": 13268,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 13302,
											"end": 13304,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 13291,
											"end": 13300,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 13287,
											"end": 13305,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 13279,
											"end": 13305,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 13279,
											"end": 13305,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 13315,
											"end": 13386,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "541"
										},
										{
											"begin": 13383,
											"end": 13384,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 13372,
											"end": 13381,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 13368,
											"end": 13385,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 13359,
											"end": 13365,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 13315,
											"end": 13386,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "386"
										},
										{
											"begin": 13315,
											"end": 13386,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 13315,
											"end": 13386,
											"name": "tag",
											"source": 1,
											"value": "541"
										},
										{
											"begin": 13315,
											"end": 13386,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 13396,
											"end": 13468,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "542"
										},
										{
											"begin": 13464,
											"end": 13466,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 13453,
											"end": 13462,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 13449,
											"end": 13467,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 13440,
											"end": 13446,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 13396,
											"end": 13468,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "386"
										},
										{
											"begin": 13396,
											"end": 13468,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 13396,
											"end": 13468,
											"name": "tag",
											"source": 1,
											"value": "542"
										},
										{
											"begin": 13396,
											"end": 13468,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 13143,
											"end": 13475,
											"name": "SWAP4",
											"source": 1
										},
										{
											"begin": 13143,
											"end": 13475,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 13143,
											"end": 13475,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 13143,
											"end": 13475,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 13143,
											"end": 13475,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 13143,
											"end": 13475,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 13481,
											"end": 13923,
											"name": "tag",
											"source": 1,
											"value": "217"
										},
										{
											"begin": 13481,
											"end": 13923,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 13630,
											"end": 13634,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 13668,
											"end": 13670,
											"name": "PUSH",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 13657,
											"end": 13666,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 13653,
											"end": 13671,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 13645,
											"end": 13671,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 13645,
											"end": 13671,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 13681,
											"end": 13752,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "544"
										},
										{
											"begin": 13749,
											"end": 13750,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 13738,
											"end": 13747,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 13734,
											"end": 13751,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 13725,
											"end": 13731,
											"name": "DUP7",
											"source": 1
										},
										{
											"begin": 13681,
											"end": 13752,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "386"
										},
										{
											"begin": 13681,
											"end": 13752,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 13681,
											"end": 13752,
											"name": "tag",
											"source": 1,
											"value": "544"
										},
										{
											"begin": 13681,
											"end": 13752,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 13762,
											"end": 13834,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "545"
										},
										{
											"begin": 13830,
											"end": 13832,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 13819,
											"end": 13828,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 13815,
											"end": 13833,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 13806,
											"end": 13812,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 13762,
											"end": 13834,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "379"
										},
										{
											"begin": 13762,
											"end": 13834,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 13762,
											"end": 13834,
											"name": "tag",
											"source": 1,
											"value": "545"
										},
										{
											"begin": 13762,
											"end": 13834,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 13844,
											"end": 13916,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "546"
										},
										{
											"begin": 13912,
											"end": 13914,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 13901,
											"end": 13910,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 13897,
											"end": 13915,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 13888,
											"end": 13894,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 13844,
											"end": 13916,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "379"
										},
										{
											"begin": 13844,
											"end": 13916,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 13844,
											"end": 13916,
											"name": "tag",
											"source": 1,
											"value": "546"
										},
										{
											"begin": 13844,
											"end": 13916,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 13481,
											"end": 13923,
											"name": "SWAP5",
											"source": 1
										},
										{
											"begin": 13481,
											"end": 13923,
											"name": "SWAP4",
											"source": 1
										},
										{
											"begin": 13481,
											"end": 13923,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 13481,
											"end": 13923,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 13481,
											"end": 13923,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 13481,
											"end": 13923,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 13481,
											"end": 13923,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 13929,
											"end": 14593,
											"name": "tag",
											"source": 1,
											"value": "287"
										},
										{
											"begin": 13929,
											"end": 14593,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 14134,
											"end": 14138,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 14172,
											"end": 14175,
											"name": "PUSH",
											"source": 1,
											"value": "A0"
										},
										{
											"begin": 14161,
											"end": 14170,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 14157,
											"end": 14176,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 14149,
											"end": 14176,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 14149,
											"end": 14176,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 14186,
											"end": 14257,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "548"
										},
										{
											"begin": 14254,
											"end": 14255,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 14243,
											"end": 14252,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 14239,
											"end": 14256,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 14230,
											"end": 14236,
											"name": "DUP9",
											"source": 1
										},
										{
											"begin": 14186,
											"end": 14257,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "383"
										},
										{
											"begin": 14186,
											"end": 14257,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 14186,
											"end": 14257,
											"name": "tag",
											"source": 1,
											"value": "548"
										},
										{
											"begin": 14186,
											"end": 14257,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 14267,
											"end": 14339,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "549"
										},
										{
											"begin": 14335,
											"end": 14337,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 14324,
											"end": 14333,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 14320,
											"end": 14338,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 14311,
											"end": 14317,
											"name": "DUP8",
											"source": 1
										},
										{
											"begin": 14267,
											"end": 14339,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "383"
										},
										{
											"begin": 14267,
											"end": 14339,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 14267,
											"end": 14339,
											"name": "tag",
											"source": 1,
											"value": "549"
										},
										{
											"begin": 14267,
											"end": 14339,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 14349,
											"end": 14421,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "550"
										},
										{
											"begin": 14417,
											"end": 14419,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 14406,
											"end": 14415,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 14402,
											"end": 14420,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 14393,
											"end": 14399,
											"name": "DUP7",
											"source": 1
										},
										{
											"begin": 14349,
											"end": 14421,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "383"
										},
										{
											"begin": 14349,
											"end": 14421,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 14349,
											"end": 14421,
											"name": "tag",
											"source": 1,
											"value": "550"
										},
										{
											"begin": 14349,
											"end": 14421,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 14431,
											"end": 14503,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "551"
										},
										{
											"begin": 14499,
											"end": 14501,
											"name": "PUSH",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 14488,
											"end": 14497,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 14484,
											"end": 14502,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 14475,
											"end": 14481,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 14431,
											"end": 14503,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "379"
										},
										{
											"begin": 14431,
											"end": 14503,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 14431,
											"end": 14503,
											"name": "tag",
											"source": 1,
											"value": "551"
										},
										{
											"begin": 14431,
											"end": 14503,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 14513,
											"end": 14586,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "552"
										},
										{
											"begin": 14581,
											"end": 14584,
											"name": "PUSH",
											"source": 1,
											"value": "80"
										},
										{
											"begin": 14570,
											"end": 14579,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 14566,
											"end": 14585,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 14557,
											"end": 14563,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 14513,
											"end": 14586,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "386"
										},
										{
											"begin": 14513,
											"end": 14586,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 14513,
											"end": 14586,
											"name": "tag",
											"source": 1,
											"value": "552"
										},
										{
											"begin": 14513,
											"end": 14586,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 13929,
											"end": 14593,
											"name": "SWAP7",
											"source": 1
										},
										{
											"begin": 13929,
											"end": 14593,
											"name": "SWAP6",
											"source": 1
										},
										{
											"begin": 13929,
											"end": 14593,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 13929,
											"end": 14593,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 13929,
											"end": 14593,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 13929,
											"end": 14593,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 13929,
											"end": 14593,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 13929,
											"end": 14593,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 13929,
											"end": 14593,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 14599,
											"end": 15144,
											"name": "tag",
											"source": 1,
											"value": "308"
										},
										{
											"begin": 14599,
											"end": 15144,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 14772,
											"end": 14776,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 14810,
											"end": 14813,
											"name": "PUSH",
											"source": 1,
											"value": "80"
										},
										{
											"begin": 14799,
											"end": 14808,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 14795,
											"end": 14814,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 14787,
											"end": 14814,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 14787,
											"end": 14814,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 14824,
											"end": 14895,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "554"
										},
										{
											"begin": 14892,
											"end": 14893,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 14881,
											"end": 14890,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 14877,
											"end": 14894,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 14868,
											"end": 14874,
											"name": "DUP8",
											"source": 1
										},
										{
											"begin": 14824,
											"end": 14895,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "383"
										},
										{
											"begin": 14824,
											"end": 14895,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 14824,
											"end": 14895,
											"name": "tag",
											"source": 1,
											"value": "554"
										},
										{
											"begin": 14824,
											"end": 14895,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 14905,
											"end": 14973,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "555"
										},
										{
											"begin": 14969,
											"end": 14971,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 14958,
											"end": 14967,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 14954,
											"end": 14972,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 14945,
											"end": 14951,
											"name": "DUP7",
											"source": 1
										},
										{
											"begin": 14905,
											"end": 14973,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "381"
										},
										{
											"begin": 14905,
											"end": 14973,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 14905,
											"end": 14973,
											"name": "tag",
											"source": 1,
											"value": "555"
										},
										{
											"begin": 14905,
											"end": 14973,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 14983,
											"end": 15055,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "556"
										},
										{
											"begin": 15051,
											"end": 15053,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 15040,
											"end": 15049,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 15036,
											"end": 15054,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 15027,
											"end": 15033,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 14983,
											"end": 15055,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "383"
										},
										{
											"begin": 14983,
											"end": 15055,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 14983,
											"end": 15055,
											"name": "tag",
											"source": 1,
											"value": "556"
										},
										{
											"begin": 14983,
											"end": 15055,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 15065,
											"end": 15137,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "557"
										},
										{
											"begin": 15133,
											"end": 15135,
											"name": "PUSH",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 15122,
											"end": 15131,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 15118,
											"end": 15136,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 15109,
											"end": 15115,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 15065,
											"end": 15137,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "383"
										},
										{
											"begin": 15065,
											"end": 15137,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 15065,
											"end": 15137,
											"name": "tag",
											"source": 1,
											"value": "557"
										},
										{
											"begin": 15065,
											"end": 15137,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 14599,
											"end": 15144,
											"name": "SWAP6",
											"source": 1
										},
										{
											"begin": 14599,
											"end": 15144,
											"name": "SWAP5",
											"source": 1
										},
										{
											"begin": 14599,
											"end": 15144,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 14599,
											"end": 15144,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 14599,
											"end": 15144,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 14599,
											"end": 15144,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 14599,
											"end": 15144,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 14599,
											"end": 15144,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 15150,
											"end": 15330,
											"name": "tag",
											"source": 1,
											"value": "315"
										},
										{
											"begin": 15150,
											"end": 15330,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 15198,
											"end": 15275,
											"name": "PUSH",
											"source": 1,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 15195,
											"end": 15196,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 15188,
											"end": 15276,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 15295,
											"end": 15299,
											"name": "PUSH",
											"source": 1,
											"value": "21"
										},
										{
											"begin": 15292,
											"end": 15293,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 15285,
											"end": 15300,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 15319,
											"end": 15323,
											"name": "PUSH",
											"source": 1,
											"value": "24"
										},
										{
											"begin": 15316,
											"end": 15317,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 15309,
											"end": 15324,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 15336,
											"end": 15516,
											"name": "tag",
											"source": 1,
											"value": "399"
										},
										{
											"begin": 15336,
											"end": 15516,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 15384,
											"end": 15461,
											"name": "PUSH",
											"source": 1,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 15381,
											"end": 15382,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 15374,
											"end": 15462,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 15481,
											"end": 15485,
											"name": "PUSH",
											"source": 1,
											"value": "11"
										},
										{
											"begin": 15478,
											"end": 15479,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 15471,
											"end": 15486,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 15505,
											"end": 15509,
											"name": "PUSH",
											"source": 1,
											"value": "24"
										},
										{
											"begin": 15502,
											"end": 15503,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 15495,
											"end": 15510,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 15522,
											"end": 15713,
											"name": "tag",
											"source": 1,
											"value": "353"
										},
										{
											"begin": 15522,
											"end": 15713,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 15562,
											"end": 15565,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 15581,
											"end": 15601,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "561"
										},
										{
											"begin": 15599,
											"end": 15600,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 15581,
											"end": 15601,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "374"
										},
										{
											"begin": 15581,
											"end": 15601,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 15581,
											"end": 15601,
											"name": "tag",
											"source": 1,
											"value": "561"
										},
										{
											"begin": 15581,
											"end": 15601,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 15576,
											"end": 15601,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 15576,
											"end": 15601,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 15615,
											"end": 15635,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "562"
										},
										{
											"begin": 15633,
											"end": 15634,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 15615,
											"end": 15635,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "374"
										},
										{
											"begin": 15615,
											"end": 15635,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 15615,
											"end": 15635,
											"name": "tag",
											"source": 1,
											"value": "562"
										},
										{
											"begin": 15615,
											"end": 15635,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 15610,
											"end": 15635,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 15610,
											"end": 15635,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 15658,
											"end": 15659,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 15655,
											"end": 15656,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 15651,
											"end": 15660,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 15644,
											"end": 15660,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 15644,
											"end": 15660,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 15679,
											"end": 15682,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 15676,
											"end": 15677,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 15673,
											"end": 15683,
											"name": "GT",
											"source": 1
										},
										{
											"begin": 15670,
											"end": 15706,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 15670,
											"end": 15706,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "563"
										},
										{
											"begin": 15670,
											"end": 15706,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 15686,
											"end": 15704,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "564"
										},
										{
											"begin": 15686,
											"end": 15704,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "399"
										},
										{
											"begin": 15686,
											"end": 15704,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 15686,
											"end": 15704,
											"name": "tag",
											"source": 1,
											"value": "564"
										},
										{
											"begin": 15686,
											"end": 15704,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 15670,
											"end": 15706,
											"name": "tag",
											"source": 1,
											"value": "563"
										},
										{
											"begin": 15670,
											"end": 15706,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 15522,
											"end": 15713,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 15522,
											"end": 15713,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 15522,
											"end": 15713,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 15522,
											"end": 15713,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 15522,
											"end": 15713,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										}
									]
								}
							},
							"sourceList": [
								"contracts/ERC20Token_flattened.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515",
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"burn(uint256)": "42966c68",
							"burnFrom(address,uint256)": "79cc6790",
							"decimals()": "313ce567",
							"eip712Domain()": "84b0196e",
							"mint(address,uint256)": "40c10f19",
							"name()": "06fdde03",
							"nonces(address)": "7ecebe00",
							"owner()": "8da5cb5b",
							"pause()": "8456cb59",
							"paused()": "5c975abb",
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf",
							"renounceOwnership()": "715018a6",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd",
							"transferOwnership(address)": "f2fde38b",
							"unpause()": "3f4ba83a"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ECDSAInvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ECDSAInvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ECDSAInvalidSignatureS\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"ERC2612ExpiredSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC2612InvalidSigner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentNonce\",\"type\":\"uint256\"}],\"name\":\"InvalidAccountNonce\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ECDSAInvalidSignature()\":[{\"details\":\"The signature derives the `address(0)`.\"}],\"ECDSAInvalidSignatureLength(uint256)\":[{\"details\":\"The signature has an invalid length.\"}],\"ECDSAInvalidSignatureS(bytes32)\":[{\"details\":\"The signature has an S value that is in the upper half order.\"}],\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC2612ExpiredSignature(uint256)\":[{\"details\":\"Permit deadline has expired.\"}],\"ERC2612InvalidSigner(address,address)\":[{\"details\":\"Mismatched signature.\"}],\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"InvalidAccountNonce(address,uint256)\":[{\"details\":\"The nonce used for an `account` is not the expected current nonce.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Destroys a `value` amount of tokens from the caller. See {ERC20-_burn}.\"},\"burnFrom(address,uint256)\":{\"details\":\"Destroys a `value` amount of tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `value`.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"eip712Domain()\":{\"details\":\"See {IERC-5267}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ERC20Token_flattened.sol\":\"VEGAN\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ERC20Token_flattened.sol\":{\"keccak256\":\"0x8f4c4437433dc1b1b99ecde98c0b4c6179f9c26187eacd9921673722f312d28a\",\"urls\":[\"bzz-raw://ec20930f29c633f826145760a539999bcd374a4d9aa9de12a761985b13f45cf7\",\"dweb:/ipfs/QmRMogmcmaDFrtw49LHuihMDwL9aGzEfK9ntSiWKQrWUQL\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 279,
								"contract": "contracts/ERC20Token_flattened.sol:VEGAN",
								"label": "_balances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 285,
								"contract": "contracts/ERC20Token_flattened.sol:VEGAN",
								"label": "_allowances",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 287,
								"contract": "contracts/ERC20Token_flattened.sol:VEGAN",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 289,
								"contract": "contracts/ERC20Token_flattened.sol:VEGAN",
								"label": "_name",
								"offset": 0,
								"slot": "3",
								"type": "t_string_storage"
							},
							{
								"astId": 291,
								"contract": "contracts/ERC20Token_flattened.sol:VEGAN",
								"label": "_symbol",
								"offset": 0,
								"slot": "4",
								"type": "t_string_storage"
							},
							{
								"astId": 818,
								"contract": "contracts/ERC20Token_flattened.sol:VEGAN",
								"label": "_paused",
								"offset": 0,
								"slot": "5",
								"type": "t_bool"
							},
							{
								"astId": 961,
								"contract": "contracts/ERC20Token_flattened.sol:VEGAN",
								"label": "_owner",
								"offset": 1,
								"slot": "5",
								"type": "t_address"
							},
							{
								"astId": 3336,
								"contract": "contracts/ERC20Token_flattened.sol:VEGAN",
								"label": "_nameFallback",
								"offset": 0,
								"slot": "6",
								"type": "t_string_storage"
							},
							{
								"astId": 3338,
								"contract": "contracts/ERC20Token_flattened.sol:VEGAN",
								"label": "_versionFallback",
								"offset": 0,
								"slot": "7",
								"type": "t_string_storage"
							},
							{
								"astId": 3539,
								"contract": "contracts/ERC20Token_flattened.sol:VEGAN",
								"label": "_nonces",
								"offset": 0,
								"slot": "8",
								"type": "t_mapping(t_address,t_uint256)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"errors": [
			{
				"component": "general",
				"errorCode": "1878",
				"formattedMessage": "Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> contracts/ERC20Token_flattened.sol\n\n",
				"message": "SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.",
				"severity": "warning",
				"sourceLocation": {
					"end": -1,
					"file": "contracts/ERC20Token_flattened.sol",
					"start": -1
				},
				"type": "Warning"
			}
		],
		"sources": {
			"contracts/ERC20Token_flattened.sol": {
				"ast": {
					"absolutePath": "contracts/ERC20Token_flattened.sol",
					"exportedSymbols": {
						"Context": [
							129
						],
						"ECDSA": [
							1482
						],
						"EIP712": [
							3526
						],
						"ERC20": [
							771
						],
						"ERC20Burnable": [
							812
						],
						"ERC20Pausable": [
							955
						],
						"ERC20Permit": [
							3736
						],
						"IERC1155Errors": [
							265
						],
						"IERC20": [
							77
						],
						"IERC20Errors": [
							170
						],
						"IERC20Metadata": [
							100
						],
						"IERC20Permit": [
							1135
						],
						"IERC5267": [
							3307
						],
						"IERC721Errors": [
							218
						],
						"Math": [
							2535
						],
						"MessageHashUtils": [
							2960
						],
						"Nonces": [
							3593
						],
						"Ownable": [
							1100
						],
						"Pausable": [
							926
						],
						"ShortString": [
							3072
						],
						"ShortStrings": [
							3283
						],
						"SignedMath": [
							2639
						],
						"StorageSlot": [
							3069
						],
						"Strings": [
							2889
						],
						"VEGAN": [
							3829
						]
					},
					"id": 3830,
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "133:24:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 2,
								"nodeType": "StructuredDocumentation",
								"src": "159:70:0",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 77,
							"linearizedBaseContracts": [
								77
							],
							"name": "IERC20",
							"nameLocation": "240:6:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 3,
										"nodeType": "StructuredDocumentation",
										"src": "253:158:0",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
									"id": 11,
									"name": "Transfer",
									"nameLocation": "422:8:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 10,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 5,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "447:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 11,
												"src": "431:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 4,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "431:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 7,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "469:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 11,
												"src": "453:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 6,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "453:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 9,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "481:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 11,
												"src": "473:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 8,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "473:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "430:57:0"
									},
									"src": "416:72:0"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 12,
										"nodeType": "StructuredDocumentation",
										"src": "494:148:0",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
									"id": 20,
									"name": "Approval",
									"nameLocation": "653:8:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 19,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 14,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "678:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 20,
												"src": "662:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 13,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "662:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 16,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "701:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 20,
												"src": "685:23:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 15,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "685:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 18,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "718:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 20,
												"src": "710:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 17,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "710:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "661:63:0"
									},
									"src": "647:78:0"
								},
								{
									"documentation": {
										"id": 21,
										"nodeType": "StructuredDocumentation",
										"src": "731:65:0",
										"text": " @dev Returns the value of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 26,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "810:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 22,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "821:2:0"
									},
									"returnParameters": {
										"id": 25,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 24,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 26,
												"src": "847:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 23,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "847:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "846:9:0"
									},
									"scope": 77,
									"src": "801:55:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 27,
										"nodeType": "StructuredDocumentation",
										"src": "862:71:0",
										"text": " @dev Returns the value of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 34,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "947:9:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 30,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 29,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "965:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 34,
												"src": "957:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 28,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "957:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "956:17:0"
									},
									"returnParameters": {
										"id": 33,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 32,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 34,
												"src": "997:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 31,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "997:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "996:9:0"
									},
									"scope": 77,
									"src": "938:68:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 35,
										"nodeType": "StructuredDocumentation",
										"src": "1012:213:0",
										"text": " @dev Moves a `value` amount of tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 44,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "1239:8:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 40,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 37,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1256:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 44,
												"src": "1248:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 36,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1248:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 39,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1268:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 44,
												"src": "1260:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 38,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1260:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1247:27:0"
									},
									"returnParameters": {
										"id": 43,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 42,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 44,
												"src": "1293:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 41,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1293:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1292:6:0"
									},
									"scope": 77,
									"src": "1230:69:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 45,
										"nodeType": "StructuredDocumentation",
										"src": "1305:264:0",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 54,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "1583:9:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 50,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 47,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1601:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 54,
												"src": "1593:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 46,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1593:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 49,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1616:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 54,
												"src": "1608:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 48,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1608:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1592:32:0"
									},
									"returnParameters": {
										"id": 53,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 52,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 54,
												"src": "1648:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 51,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1648:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1647:9:0"
									},
									"scope": 77,
									"src": "1574:83:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 55,
										"nodeType": "StructuredDocumentation",
										"src": "1663:667:0",
										"text": " @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 64,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "2344:7:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 60,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 57,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2360:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 64,
												"src": "2352:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 56,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2352:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 59,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2377:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 64,
												"src": "2369:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 58,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2369:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2351:32:0"
									},
									"returnParameters": {
										"id": 63,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 62,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 64,
												"src": "2402:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 61,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2402:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2401:6:0"
									},
									"scope": 77,
									"src": "2335:73:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 65,
										"nodeType": "StructuredDocumentation",
										"src": "2414:297:0",
										"text": " @dev Moves a `value` amount of tokens from `from` to `to` using the\n allowance mechanism. `value` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 76,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2725:12:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 72,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 67,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2746:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 76,
												"src": "2738:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 66,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2738:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 69,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2760:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 76,
												"src": "2752:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 68,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2752:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 71,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2772:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 76,
												"src": "2764:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 70,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2764:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2737:41:0"
									},
									"returnParameters": {
										"id": 75,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 74,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 76,
												"src": "2797:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 73,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2797:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2796:6:0"
									},
									"scope": 77,
									"src": "2716:87:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 3830,
							"src": "230:2575:0",
							"usedErrors": [],
							"usedEvents": [
								11,
								20
							]
						},
						{
							"id": 78,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "2977:24:0"
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 80,
										"name": "IERC20",
										"nameLocations": [
											"3119:6:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 77,
										"src": "3119:6:0"
									},
									"id": 81,
									"nodeType": "InheritanceSpecifier",
									"src": "3119:6:0"
								}
							],
							"canonicalName": "IERC20Metadata",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 79,
								"nodeType": "StructuredDocumentation",
								"src": "3004:86:0",
								"text": " @dev Interface for the optional metadata functions from the ERC20 standard."
							},
							"fullyImplemented": false,
							"id": 100,
							"linearizedBaseContracts": [
								100,
								77
							],
							"name": "IERC20Metadata",
							"nameLocation": "3101:14:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 82,
										"nodeType": "StructuredDocumentation",
										"src": "3132:54:0",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 87,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "3200:4:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 83,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3204:2:0"
									},
									"returnParameters": {
										"id": 86,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 85,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 87,
												"src": "3230:13:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 84,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3230:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3229:15:0"
									},
									"scope": 100,
									"src": "3191:54:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 88,
										"nodeType": "StructuredDocumentation",
										"src": "3251:56:0",
										"text": " @dev Returns the symbol of the token."
									},
									"functionSelector": "95d89b41",
									"id": 93,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "3321:6:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 89,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3327:2:0"
									},
									"returnParameters": {
										"id": 92,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 91,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 93,
												"src": "3353:13:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 90,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3353:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3352:15:0"
									},
									"scope": 100,
									"src": "3312:56:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 94,
										"nodeType": "StructuredDocumentation",
										"src": "3374:65:0",
										"text": " @dev Returns the decimals places of the token."
									},
									"functionSelector": "313ce567",
									"id": 99,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "3453:8:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 95,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3461:2:0"
									},
									"returnParameters": {
										"id": 98,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 97,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 99,
												"src": "3487:5:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 96,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "3487:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3486:7:0"
									},
									"scope": 100,
									"src": "3444:50:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 3830,
							"src": "3091:405:0",
							"usedErrors": [],
							"usedEvents": [
								11,
								20
							]
						},
						{
							"id": 101,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "3620:24:0"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Context",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 102,
								"nodeType": "StructuredDocumentation",
								"src": "3646:496:0",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 129,
							"linearizedBaseContracts": [
								129
							],
							"name": "Context",
							"nameLocation": "4161:7:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 110,
										"nodeType": "Block",
										"src": "4237:34:0",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 107,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "4254:3:0",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 108,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "4258:6:0",
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "4254:10:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 106,
												"id": 109,
												"nodeType": "Return",
												"src": "4247:17:0"
											}
										]
									},
									"id": 111,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "4184:10:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 103,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4194:2:0"
									},
									"returnParameters": {
										"id": 106,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 105,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 111,
												"src": "4228:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 104,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4228:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4227:9:0"
									},
									"scope": 129,
									"src": "4175:96:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 119,
										"nodeType": "Block",
										"src": "4344:32:0",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 116,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "4361:3:0",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 117,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "4365:4:0",
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "4361:8:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 115,
												"id": 118,
												"nodeType": "Return",
												"src": "4354:15:0"
											}
										]
									},
									"id": 120,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "4286:8:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 112,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4294:2:0"
									},
									"returnParameters": {
										"id": 115,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 114,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 120,
												"src": "4328:14:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 113,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4328:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4327:16:0"
									},
									"scope": 129,
									"src": "4277:99:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 127,
										"nodeType": "Block",
										"src": "4454:25:0",
										"statements": [
											{
												"expression": {
													"hexValue": "30",
													"id": 125,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4471:1:0",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"functionReturnParameters": 124,
												"id": 126,
												"nodeType": "Return",
												"src": "4464:8:0"
											}
										]
									},
									"id": 128,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_contextSuffixLength",
									"nameLocation": "4391:20:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 121,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4411:2:0"
									},
									"returnParameters": {
										"id": 124,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 123,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 128,
												"src": "4445:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 122,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4445:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4444:9:0"
									},
									"scope": 129,
									"src": "4382:97:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 3830,
							"src": "4143:338:0",
							"usedErrors": [],
							"usedEvents": []
						},
						{
							"id": 130,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "4628:24:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20Errors",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 131,
								"nodeType": "StructuredDocumentation",
								"src": "4654:139:0",
								"text": " @dev Standard ERC20 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens."
							},
							"fullyImplemented": true,
							"id": 170,
							"linearizedBaseContracts": [
								170
							],
							"name": "IERC20Errors",
							"nameLocation": "4804:12:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 132,
										"nodeType": "StructuredDocumentation",
										"src": "4823:309:0",
										"text": " @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer."
									},
									"errorSelector": "e450d38c",
									"id": 140,
									"name": "ERC20InsufficientBalance",
									"nameLocation": "5143:24:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 139,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 134,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "5176:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 140,
												"src": "5168:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 133,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5168:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 136,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "5192:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 140,
												"src": "5184:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 135,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5184:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 138,
												"mutability": "mutable",
												"name": "needed",
												"nameLocation": "5209:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 140,
												"src": "5201:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 137,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5201:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5167:49:0"
									},
									"src": "5137:80:0"
								},
								{
									"documentation": {
										"id": 141,
										"nodeType": "StructuredDocumentation",
										"src": "5223:152:0",
										"text": " @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."
									},
									"errorSelector": "96c6fd1e",
									"id": 145,
									"name": "ERC20InvalidSender",
									"nameLocation": "5386:18:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 144,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 143,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "5413:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 145,
												"src": "5405:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 142,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5405:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5404:16:0"
									},
									"src": "5380:41:0"
								},
								{
									"documentation": {
										"id": 146,
										"nodeType": "StructuredDocumentation",
										"src": "5427:159:0",
										"text": " @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."
									},
									"errorSelector": "ec442f05",
									"id": 150,
									"name": "ERC20InvalidReceiver",
									"nameLocation": "5597:20:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 149,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 148,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "5626:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 150,
												"src": "5618:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 147,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5618:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5617:18:0"
									},
									"src": "5591:45:0"
								},
								{
									"documentation": {
										"id": 151,
										"nodeType": "StructuredDocumentation",
										"src": "5642:345:0",
										"text": " @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n @param spender Address that may be allowed to operate on tokens without being their owner.\n @param allowance Amount of tokens a `spender` is allowed to operate with.\n @param needed Minimum amount required to perform a transfer."
									},
									"errorSelector": "fb8f41b2",
									"id": 159,
									"name": "ERC20InsufficientAllowance",
									"nameLocation": "5998:26:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 158,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 153,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "6033:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 159,
												"src": "6025:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 152,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6025:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 155,
												"mutability": "mutable",
												"name": "allowance",
												"nameLocation": "6050:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 159,
												"src": "6042:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 154,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6042:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 157,
												"mutability": "mutable",
												"name": "needed",
												"nameLocation": "6069:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 159,
												"src": "6061:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 156,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6061:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6024:52:0"
									},
									"src": "5992:85:0"
								},
								{
									"documentation": {
										"id": 160,
										"nodeType": "StructuredDocumentation",
										"src": "6083:174:0",
										"text": " @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."
									},
									"errorSelector": "e602df05",
									"id": 164,
									"name": "ERC20InvalidApprover",
									"nameLocation": "6268:20:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 163,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 162,
												"mutability": "mutable",
												"name": "approver",
												"nameLocation": "6297:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 164,
												"src": "6289:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 161,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6289:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6288:18:0"
									},
									"src": "6262:45:0"
								},
								{
									"documentation": {
										"id": 165,
										"nodeType": "StructuredDocumentation",
										"src": "6313:195:0",
										"text": " @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n @param spender Address that may be allowed to operate on tokens without being their owner."
									},
									"errorSelector": "94280d62",
									"id": 169,
									"name": "ERC20InvalidSpender",
									"nameLocation": "6519:19:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 168,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 167,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "6547:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 169,
												"src": "6539:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 166,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6539:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6538:17:0"
									},
									"src": "6513:43:0"
								}
							],
							"scope": 3830,
							"src": "4794:1764:0",
							"usedErrors": [
								140,
								145,
								150,
								159,
								164,
								169
							],
							"usedEvents": []
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC721Errors",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 171,
								"nodeType": "StructuredDocumentation",
								"src": "6560:141:0",
								"text": " @dev Standard ERC721 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens."
							},
							"fullyImplemented": true,
							"id": 218,
							"linearizedBaseContracts": [
								218
							],
							"name": "IERC721Errors",
							"nameLocation": "6712:13:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 172,
										"nodeType": "StructuredDocumentation",
										"src": "6732:219:0",
										"text": " @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n Used in balance queries.\n @param owner Address of the current owner of a token."
									},
									"errorSelector": "89c62b64",
									"id": 176,
									"name": "ERC721InvalidOwner",
									"nameLocation": "6962:18:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 175,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 174,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "6989:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 176,
												"src": "6981:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 173,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6981:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6980:15:0"
									},
									"src": "6956:40:0"
								},
								{
									"documentation": {
										"id": 177,
										"nodeType": "StructuredDocumentation",
										"src": "7002:132:0",
										"text": " @dev Indicates a `tokenId` whose `owner` is the zero address.\n @param tokenId Identifier number of a token."
									},
									"errorSelector": "7e273289",
									"id": 181,
									"name": "ERC721NonexistentToken",
									"nameLocation": "7145:22:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 180,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 179,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "7176:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 181,
												"src": "7168:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 178,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7168:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7167:17:0"
									},
									"src": "7139:46:0"
								},
								{
									"documentation": {
										"id": 182,
										"nodeType": "StructuredDocumentation",
										"src": "7191:289:0",
										"text": " @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param tokenId Identifier number of a token.\n @param owner Address of the current owner of a token."
									},
									"errorSelector": "64283d7b",
									"id": 190,
									"name": "ERC721IncorrectOwner",
									"nameLocation": "7491:20:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 189,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 184,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "7520:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 190,
												"src": "7512:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 183,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7512:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 186,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "7536:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 190,
												"src": "7528:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 185,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7528:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 188,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "7553:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 190,
												"src": "7545:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 187,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7545:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7511:48:0"
									},
									"src": "7485:75:0"
								},
								{
									"documentation": {
										"id": 191,
										"nodeType": "StructuredDocumentation",
										"src": "7566:152:0",
										"text": " @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."
									},
									"errorSelector": "73c6ac6e",
									"id": 195,
									"name": "ERC721InvalidSender",
									"nameLocation": "7729:19:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 194,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 193,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "7757:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 195,
												"src": "7749:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 192,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7749:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7748:16:0"
									},
									"src": "7723:42:0"
								},
								{
									"documentation": {
										"id": 196,
										"nodeType": "StructuredDocumentation",
										"src": "7771:159:0",
										"text": " @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."
									},
									"errorSelector": "64a0ae92",
									"id": 200,
									"name": "ERC721InvalidReceiver",
									"nameLocation": "7941:21:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 199,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 198,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "7971:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 200,
												"src": "7963:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 197,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7963:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7962:18:0"
									},
									"src": "7935:46:0"
								},
								{
									"documentation": {
										"id": 201,
										"nodeType": "StructuredDocumentation",
										"src": "7987:247:0",
										"text": " @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param tokenId Identifier number of a token."
									},
									"errorSelector": "177e802f",
									"id": 207,
									"name": "ERC721InsufficientApproval",
									"nameLocation": "8245:26:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 206,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 203,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "8280:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 207,
												"src": "8272:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 202,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8272:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 205,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "8298:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 207,
												"src": "8290:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 204,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8290:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8271:35:0"
									},
									"src": "8239:68:0"
								},
								{
									"documentation": {
										"id": 208,
										"nodeType": "StructuredDocumentation",
										"src": "8313:174:0",
										"text": " @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."
									},
									"errorSelector": "a9fbf51f",
									"id": 212,
									"name": "ERC721InvalidApprover",
									"nameLocation": "8498:21:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 211,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 210,
												"mutability": "mutable",
												"name": "approver",
												"nameLocation": "8528:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 212,
												"src": "8520:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 209,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8520:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8519:18:0"
									},
									"src": "8492:46:0"
								},
								{
									"documentation": {
										"id": 213,
										"nodeType": "StructuredDocumentation",
										"src": "8544:197:0",
										"text": " @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."
									},
									"errorSelector": "5b08ba18",
									"id": 217,
									"name": "ERC721InvalidOperator",
									"nameLocation": "8752:21:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 216,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 215,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "8782:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 217,
												"src": "8774:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 214,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8774:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8773:18:0"
									},
									"src": "8746:46:0"
								}
							],
							"scope": 3830,
							"src": "6702:2092:0",
							"usedErrors": [
								176,
								181,
								190,
								195,
								200,
								207,
								212,
								217
							],
							"usedEvents": []
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC1155Errors",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 219,
								"nodeType": "StructuredDocumentation",
								"src": "8796:143:0",
								"text": " @dev Standard ERC1155 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens."
							},
							"fullyImplemented": true,
							"id": 265,
							"linearizedBaseContracts": [
								265
							],
							"name": "IERC1155Errors",
							"nameLocation": "8950:14:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 220,
										"nodeType": "StructuredDocumentation",
										"src": "8971:361:0",
										"text": " @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer.\n @param tokenId Identifier number of a token."
									},
									"errorSelector": "03dee4c5",
									"id": 230,
									"name": "ERC1155InsufficientBalance",
									"nameLocation": "9343:26:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 229,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 222,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "9378:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 230,
												"src": "9370:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 221,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9370:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 224,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "9394:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 230,
												"src": "9386:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 223,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9386:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 226,
												"mutability": "mutable",
												"name": "needed",
												"nameLocation": "9411:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 230,
												"src": "9403:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 225,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9403:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 228,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "9427:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 230,
												"src": "9419:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 227,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9419:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9369:66:0"
									},
									"src": "9337:99:0"
								},
								{
									"documentation": {
										"id": 231,
										"nodeType": "StructuredDocumentation",
										"src": "9442:152:0",
										"text": " @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."
									},
									"errorSelector": "01a83514",
									"id": 235,
									"name": "ERC1155InvalidSender",
									"nameLocation": "9605:20:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 234,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 233,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "9634:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 235,
												"src": "9626:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 232,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9626:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9625:16:0"
									},
									"src": "9599:43:0"
								},
								{
									"documentation": {
										"id": 236,
										"nodeType": "StructuredDocumentation",
										"src": "9648:159:0",
										"text": " @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."
									},
									"errorSelector": "57f447ce",
									"id": 240,
									"name": "ERC1155InvalidReceiver",
									"nameLocation": "9818:22:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 239,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 238,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "9849:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 240,
												"src": "9841:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 237,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9841:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9840:18:0"
									},
									"src": "9812:47:0"
								},
								{
									"documentation": {
										"id": 241,
										"nodeType": "StructuredDocumentation",
										"src": "9865:256:0",
										"text": " @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param owner Address of the current owner of a token."
									},
									"errorSelector": "e237d922",
									"id": 247,
									"name": "ERC1155MissingApprovalForAll",
									"nameLocation": "10132:28:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 246,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 243,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "10169:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 247,
												"src": "10161:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 242,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10161:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 245,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "10187:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 247,
												"src": "10179:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 244,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10179:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10160:33:0"
									},
									"src": "10126:68:0"
								},
								{
									"documentation": {
										"id": 248,
										"nodeType": "StructuredDocumentation",
										"src": "10200:174:0",
										"text": " @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."
									},
									"errorSelector": "3e31884e",
									"id": 252,
									"name": "ERC1155InvalidApprover",
									"nameLocation": "10385:22:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 251,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 250,
												"mutability": "mutable",
												"name": "approver",
												"nameLocation": "10416:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 252,
												"src": "10408:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 249,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10408:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10407:18:0"
									},
									"src": "10379:47:0"
								},
								{
									"documentation": {
										"id": 253,
										"nodeType": "StructuredDocumentation",
										"src": "10432:197:0",
										"text": " @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."
									},
									"errorSelector": "ced3e100",
									"id": 257,
									"name": "ERC1155InvalidOperator",
									"nameLocation": "10640:22:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 256,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 255,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "10671:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 257,
												"src": "10663:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 254,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10663:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10662:18:0"
									},
									"src": "10634:47:0"
								},
								{
									"documentation": {
										"id": 258,
										"nodeType": "StructuredDocumentation",
										"src": "10687:280:0",
										"text": " @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n Used in batch transfers.\n @param idsLength Length of the array of token identifiers\n @param valuesLength Length of the array of token amounts"
									},
									"errorSelector": "5b059991",
									"id": 264,
									"name": "ERC1155InvalidArrayLength",
									"nameLocation": "10978:25:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 263,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 260,
												"mutability": "mutable",
												"name": "idsLength",
												"nameLocation": "11012:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 264,
												"src": "11004:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 259,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11004:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 262,
												"mutability": "mutable",
												"name": "valuesLength",
												"nameLocation": "11031:12:0",
												"nodeType": "VariableDeclaration",
												"scope": 264,
												"src": "11023:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 261,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11023:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11003:41:0"
									},
									"src": "10972:73:0"
								}
							],
							"scope": 3830,
							"src": "8940:2107:0",
							"usedErrors": [
								230,
								235,
								240,
								247,
								252,
								257,
								264
							],
							"usedEvents": []
						},
						{
							"id": 266,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "11179:24:0"
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 268,
										"name": "Context",
										"nameLocations": [
											"12289:7:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 129,
										"src": "12289:7:0"
									},
									"id": 269,
									"nodeType": "InheritanceSpecifier",
									"src": "12289:7:0"
								},
								{
									"baseName": {
										"id": 270,
										"name": "IERC20",
										"nameLocations": [
											"12298:6:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 77,
										"src": "12298:6:0"
									},
									"id": 271,
									"nodeType": "InheritanceSpecifier",
									"src": "12298:6:0"
								},
								{
									"baseName": {
										"id": 272,
										"name": "IERC20Metadata",
										"nameLocations": [
											"12306:14:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 100,
										"src": "12306:14:0"
									},
									"id": 273,
									"nodeType": "InheritanceSpecifier",
									"src": "12306:14:0"
								},
								{
									"baseName": {
										"id": 274,
										"name": "IERC20Errors",
										"nameLocations": [
											"12322:12:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 170,
										"src": "12322:12:0"
									},
									"id": 275,
									"nodeType": "InheritanceSpecifier",
									"src": "12322:12:0"
								}
							],
							"canonicalName": "ERC20",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 267,
								"nodeType": "StructuredDocumentation",
								"src": "11209:1052:0",
								"text": " @dev Implementation of the {IERC20} interface.\n This implementation is agnostic to the way tokens are created. This means\n that a supply mechanism has to be added in a derived contract using {_mint}.\n TIP: For a detailed writeup see our guide\n https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n to implement supply mechanisms].\n The default value of {decimals} is 18. To change this, you should override\n this function so it returns a different value.\n We have followed general OpenZeppelin Contracts guidelines: functions revert\n instead returning `false` on failure. This behavior is nonetheless\n conventional and does not conflict with the expectations of ERC20\n applications.\n Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n This allows applications to reconstruct the allowance for all accounts just\n by listening to said events. Other implementations of the EIP may not emit\n these events, as it isn't required by the specification."
							},
							"fullyImplemented": true,
							"id": 771,
							"linearizedBaseContracts": [
								771,
								170,
								100,
								77,
								129
							],
							"name": "ERC20",
							"nameLocation": "12280:5:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 279,
									"mutability": "mutable",
									"name": "_balances",
									"nameLocation": "12385:9:0",
									"nodeType": "VariableDeclaration",
									"scope": 771,
									"src": "12341:53:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 278,
										"keyName": "account",
										"keyNameLocation": "12357:7:0",
										"keyType": {
											"id": 276,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "12349:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "12341:35:0",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 277,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "12368:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 285,
									"mutability": "mutable",
									"name": "_allowances",
									"nameLocation": "12473:11:0",
									"nodeType": "VariableDeclaration",
									"scope": 771,
									"src": "12401:83:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
										"typeString": "mapping(address => mapping(address => uint256))"
									},
									"typeName": {
										"id": 284,
										"keyName": "account",
										"keyNameLocation": "12417:7:0",
										"keyType": {
											"id": 280,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "12409:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "12401:63:0",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
											"typeString": "mapping(address => mapping(address => uint256))"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 283,
											"keyName": "spender",
											"keyNameLocation": "12444:7:0",
											"keyType": {
												"id": 281,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "12436:7:0",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"nodeType": "Mapping",
											"src": "12428:35:0",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
												"typeString": "mapping(address => uint256)"
											},
											"valueName": "",
											"valueNameLocation": "-1:-1:-1",
											"valueType": {
												"id": 282,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "12455:7:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 287,
									"mutability": "mutable",
									"name": "_totalSupply",
									"nameLocation": "12507:12:0",
									"nodeType": "VariableDeclaration",
									"scope": 771,
									"src": "12491:28:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 286,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "12491:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 289,
									"mutability": "mutable",
									"name": "_name",
									"nameLocation": "12541:5:0",
									"nodeType": "VariableDeclaration",
									"scope": 771,
									"src": "12526:20:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 288,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "12526:6:0",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 291,
									"mutability": "mutable",
									"name": "_symbol",
									"nameLocation": "12567:7:0",
									"nodeType": "VariableDeclaration",
									"scope": 771,
									"src": "12552:22:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 290,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "12552:6:0",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 307,
										"nodeType": "Block",
										"src": "12813:57:0",
										"statements": [
											{
												"expression": {
													"id": 301,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 299,
														"name": "_name",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 289,
														"src": "12823:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 300,
														"name": "name_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 294,
														"src": "12831:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "12823:13:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 302,
												"nodeType": "ExpressionStatement",
												"src": "12823:13:0"
											},
											{
												"expression": {
													"id": 305,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 303,
														"name": "_symbol",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 291,
														"src": "12846:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 304,
														"name": "symbol_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 296,
														"src": "12856:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "12846:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 306,
												"nodeType": "ExpressionStatement",
												"src": "12846:17:0"
											}
										]
									},
									"documentation": {
										"id": 292,
										"nodeType": "StructuredDocumentation",
										"src": "12581:171:0",
										"text": " @dev Sets the values for {name} and {symbol}.\n All two of these values are immutable: they can only be set once during\n construction."
									},
									"id": 308,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 297,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 294,
												"mutability": "mutable",
												"name": "name_",
												"nameLocation": "12783:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 308,
												"src": "12769:19:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 293,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "12769:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 296,
												"mutability": "mutable",
												"name": "symbol_",
												"nameLocation": "12804:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 308,
												"src": "12790:21:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 295,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "12790:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12768:44:0"
									},
									"returnParameters": {
										"id": 298,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12813:0:0"
									},
									"scope": 771,
									"src": "12757:113:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										87
									],
									"body": {
										"id": 316,
										"nodeType": "Block",
										"src": "12995:29:0",
										"statements": [
											{
												"expression": {
													"id": 314,
													"name": "_name",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 289,
													"src": "13012:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 313,
												"id": 315,
												"nodeType": "Return",
												"src": "13005:12:0"
											}
										]
									},
									"documentation": {
										"id": 309,
										"nodeType": "StructuredDocumentation",
										"src": "12876:54:0",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 317,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "12944:4:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 310,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12948:2:0"
									},
									"returnParameters": {
										"id": 313,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 312,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 317,
												"src": "12980:13:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 311,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "12980:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12979:15:0"
									},
									"scope": 771,
									"src": "12935:89:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										93
									],
									"body": {
										"id": 325,
										"nodeType": "Block",
										"src": "13199:31:0",
										"statements": [
											{
												"expression": {
													"id": 323,
													"name": "_symbol",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 291,
													"src": "13216:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 322,
												"id": 324,
												"nodeType": "Return",
												"src": "13209:14:0"
											}
										]
									},
									"documentation": {
										"id": 318,
										"nodeType": "StructuredDocumentation",
										"src": "13030:102:0",
										"text": " @dev Returns the symbol of the token, usually a shorter version of the\n name."
									},
									"functionSelector": "95d89b41",
									"id": 326,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "13146:6:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 319,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "13152:2:0"
									},
									"returnParameters": {
										"id": 322,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 321,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 326,
												"src": "13184:13:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 320,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "13184:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13183:15:0"
									},
									"scope": 771,
									"src": "13137:93:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										99
									],
									"body": {
										"id": 334,
										"nodeType": "Block",
										"src": "13919:26:0",
										"statements": [
											{
												"expression": {
													"hexValue": "3138",
													"id": 332,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "13936:2:0",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_18_by_1",
														"typeString": "int_const 18"
													},
													"value": "18"
												},
												"functionReturnParameters": 331,
												"id": 333,
												"nodeType": "Return",
												"src": "13929:9:0"
											}
										]
									},
									"documentation": {
										"id": 327,
										"nodeType": "StructuredDocumentation",
										"src": "13236:622:0",
										"text": " @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5.05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the default value returned by this function, unless\n it's overridden.\n NOTE: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."
									},
									"functionSelector": "313ce567",
									"id": 335,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "13872:8:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 328,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "13880:2:0"
									},
									"returnParameters": {
										"id": 331,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 330,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 335,
												"src": "13912:5:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 329,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "13912:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13911:7:0"
									},
									"scope": 771,
									"src": "13863:82:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										26
									],
									"body": {
										"id": 343,
										"nodeType": "Block",
										"src": "14066:36:0",
										"statements": [
											{
												"expression": {
													"id": 341,
													"name": "_totalSupply",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 287,
													"src": "14083:12:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 340,
												"id": 342,
												"nodeType": "Return",
												"src": "14076:19:0"
											}
										]
									},
									"documentation": {
										"id": 336,
										"nodeType": "StructuredDocumentation",
										"src": "13951:49:0",
										"text": " @dev See {IERC20-totalSupply}."
									},
									"functionSelector": "18160ddd",
									"id": 344,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "14014:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 337,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "14025:2:0"
									},
									"returnParameters": {
										"id": 340,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 339,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 344,
												"src": "14057:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 338,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "14057:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14056:9:0"
									},
									"scope": 771,
									"src": "14005:97:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										34
									],
									"body": {
										"id": 356,
										"nodeType": "Block",
										"src": "14234:42:0",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"id": 352,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 279,
														"src": "14251:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 354,
													"indexExpression": {
														"id": 353,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 347,
														"src": "14261:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "14251:18:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 351,
												"id": 355,
												"nodeType": "Return",
												"src": "14244:25:0"
											}
										]
									},
									"documentation": {
										"id": 345,
										"nodeType": "StructuredDocumentation",
										"src": "14108:47:0",
										"text": " @dev See {IERC20-balanceOf}."
									},
									"functionSelector": "70a08231",
									"id": 357,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "14169:9:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 348,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 347,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "14187:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 357,
												"src": "14179:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 346,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "14179:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14178:17:0"
									},
									"returnParameters": {
										"id": 351,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 350,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 357,
												"src": "14225:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 349,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "14225:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14224:9:0"
									},
									"scope": 771,
									"src": "14160:116:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										44
									],
									"body": {
										"id": 380,
										"nodeType": "Block",
										"src": "14546:103:0",
										"statements": [
											{
												"assignments": [
													368
												],
												"declarations": [
													{
														"constant": false,
														"id": 368,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "14564:5:0",
														"nodeType": "VariableDeclaration",
														"scope": 380,
														"src": "14556:13:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 367,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "14556:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 371,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 369,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 111,
														"src": "14572:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 370,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "14572:12:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "14556:28:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 373,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 368,
															"src": "14604:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 374,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 360,
															"src": "14611:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 375,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 362,
															"src": "14615:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 372,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 501,
														"src": "14594:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 376,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "14594:27:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 377,
												"nodeType": "ExpressionStatement",
												"src": "14594:27:0"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 378,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "14638:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 366,
												"id": 379,
												"nodeType": "Return",
												"src": "14631:11:0"
											}
										]
									},
									"documentation": {
										"id": 358,
										"nodeType": "StructuredDocumentation",
										"src": "14282:184:0",
										"text": " @dev See {IERC20-transfer}.\n Requirements:\n - `to` cannot be the zero address.\n - the caller must have a balance of at least `value`."
									},
									"functionSelector": "a9059cbb",
									"id": 381,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "14480:8:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 363,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 360,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "14497:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 381,
												"src": "14489:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 359,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "14489:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 362,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "14509:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 381,
												"src": "14501:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 361,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "14501:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14488:27:0"
									},
									"returnParameters": {
										"id": 366,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 365,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 381,
												"src": "14540:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 364,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "14540:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14539:6:0"
									},
									"scope": 771,
									"src": "14471:178:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										54
									],
									"body": {
										"id": 397,
										"nodeType": "Block",
										"src": "14796:51:0",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"baseExpression": {
															"id": 391,
															"name": "_allowances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 285,
															"src": "14813:11:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																"typeString": "mapping(address => mapping(address => uint256))"
															}
														},
														"id": 393,
														"indexExpression": {
															"id": 392,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 384,
															"src": "14825:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "14813:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 395,
													"indexExpression": {
														"id": 394,
														"name": "spender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 386,
														"src": "14832:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "14813:27:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 390,
												"id": 396,
												"nodeType": "Return",
												"src": "14806:34:0"
											}
										]
									},
									"documentation": {
										"id": 382,
										"nodeType": "StructuredDocumentation",
										"src": "14655:47:0",
										"text": " @dev See {IERC20-allowance}."
									},
									"functionSelector": "dd62ed3e",
									"id": 398,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "14716:9:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 387,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 384,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "14734:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 398,
												"src": "14726:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 383,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "14726:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 386,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "14749:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 398,
												"src": "14741:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 385,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "14741:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14725:32:0"
									},
									"returnParameters": {
										"id": 390,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 389,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 398,
												"src": "14787:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 388,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "14787:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14786:9:0"
									},
									"scope": 771,
									"src": "14707:140:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										64
									],
									"body": {
										"id": 421,
										"nodeType": "Block",
										"src": "15233:107:0",
										"statements": [
											{
												"assignments": [
													409
												],
												"declarations": [
													{
														"constant": false,
														"id": 409,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "15251:5:0",
														"nodeType": "VariableDeclaration",
														"scope": 421,
														"src": "15243:13:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 408,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "15243:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 412,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 410,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 111,
														"src": "15259:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 411,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "15259:12:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "15243:28:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 414,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 409,
															"src": "15290:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 415,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 401,
															"src": "15297:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 416,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 403,
															"src": "15306:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 413,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															662,
															722
														],
														"referencedDeclaration": 662,
														"src": "15281:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 417,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "15281:31:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 418,
												"nodeType": "ExpressionStatement",
												"src": "15281:31:0"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 419,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "15329:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 407,
												"id": 420,
												"nodeType": "Return",
												"src": "15322:11:0"
											}
										]
									},
									"documentation": {
										"id": 399,
										"nodeType": "StructuredDocumentation",
										"src": "14853:296:0",
										"text": " @dev See {IERC20-approve}.\n NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n `transferFrom`. This is semantically equivalent to an infinite approval.\n Requirements:\n - `spender` cannot be the zero address."
									},
									"functionSelector": "095ea7b3",
									"id": 422,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "15163:7:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 404,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 401,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "15179:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 422,
												"src": "15171:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 400,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "15171:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 403,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "15196:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 422,
												"src": "15188:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 402,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "15188:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15170:32:0"
									},
									"returnParameters": {
										"id": 407,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 406,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 422,
												"src": "15227:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 405,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "15227:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15226:6:0"
									},
									"scope": 771,
									"src": "15154:186:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										76
									],
									"body": {
										"id": 453,
										"nodeType": "Block",
										"src": "15993:151:0",
										"statements": [
											{
												"assignments": [
													435
												],
												"declarations": [
													{
														"constant": false,
														"id": 435,
														"mutability": "mutable",
														"name": "spender",
														"nameLocation": "16011:7:0",
														"nodeType": "VariableDeclaration",
														"scope": 453,
														"src": "16003:15:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 434,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "16003:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 438,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 436,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 111,
														"src": "16021:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 437,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "16021:12:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "16003:30:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 440,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 425,
															"src": "16059:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 441,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 435,
															"src": "16065:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 442,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 429,
															"src": "16074:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 439,
														"name": "_spendAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 770,
														"src": "16043:15:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 443,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "16043:37:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 444,
												"nodeType": "ExpressionStatement",
												"src": "16043:37:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 446,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 425,
															"src": "16100:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 447,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 427,
															"src": "16106:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 448,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 429,
															"src": "16110:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 445,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 501,
														"src": "16090:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 449,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "16090:26:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 450,
												"nodeType": "ExpressionStatement",
												"src": "16090:26:0"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 451,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "16133:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 433,
												"id": 452,
												"nodeType": "Return",
												"src": "16126:11:0"
											}
										]
									},
									"documentation": {
										"id": 423,
										"nodeType": "StructuredDocumentation",
										"src": "15346:549:0",
										"text": " @dev See {IERC20-transferFrom}.\n Emits an {Approval} event indicating the updated allowance. This is not\n required by the EIP. See the note at the beginning of {ERC20}.\n NOTE: Does not update the allowance if the current allowance\n is the maximum `uint256`.\n Requirements:\n - `from` and `to` cannot be the zero address.\n - `from` must have a balance of at least `value`.\n - the caller must have allowance for ``from``'s tokens of at least\n `value`."
									},
									"functionSelector": "23b872dd",
									"id": 454,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "15909:12:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 430,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 425,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "15930:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 454,
												"src": "15922:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 424,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "15922:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 427,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "15944:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 454,
												"src": "15936:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 426,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "15936:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 429,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "15956:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 454,
												"src": "15948:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 428,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "15948:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15921:41:0"
									},
									"returnParameters": {
										"id": 433,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 432,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 454,
												"src": "15987:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 431,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "15987:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15986:6:0"
									},
									"scope": 771,
									"src": "15900:244:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 500,
										"nodeType": "Block",
										"src": "16586:231:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 469,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 464,
														"name": "from",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 457,
														"src": "16600:4:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 467,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "16616:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 466,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "16608:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 465,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "16608:7:0",
																"typeDescriptions": {}
															}
														},
														"id": 468,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "16608:10:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "16600:18:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 478,
												"nodeType": "IfStatement",
												"src": "16596:86:0",
												"trueBody": {
													"id": 477,
													"nodeType": "Block",
													"src": "16620:62:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 473,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "16668:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 472,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "16660:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 471,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "16660:7:0",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 474,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "16660:10:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 470,
																	"name": "ERC20InvalidSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 145,
																	"src": "16641:18:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 475,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "16641:30:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 476,
															"nodeType": "RevertStatement",
															"src": "16634:37:0"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 484,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 479,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 459,
														"src": "16695:2:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 482,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "16709:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 481,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "16701:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 480,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "16701:7:0",
																"typeDescriptions": {}
															}
														},
														"id": 483,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "16701:10:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "16695:16:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 493,
												"nodeType": "IfStatement",
												"src": "16691:86:0",
												"trueBody": {
													"id": 492,
													"nodeType": "Block",
													"src": "16713:64:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 488,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "16763:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 487,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "16755:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 486,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "16755:7:0",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 489,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "16755:10:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 485,
																	"name": "ERC20InvalidReceiver",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 150,
																	"src": "16734:20:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 490,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "16734:32:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 491,
															"nodeType": "RevertStatement",
															"src": "16727:39:0"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 495,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 457,
															"src": "16794:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 496,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 459,
															"src": "16800:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 497,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 461,
															"src": "16804:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 494,
														"name": "_update",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 578,
														"src": "16786:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 498,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "16786:24:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 499,
												"nodeType": "ExpressionStatement",
												"src": "16786:24:0"
											}
										]
									},
									"documentation": {
										"id": 455,
										"nodeType": "StructuredDocumentation",
										"src": "16150:362:0",
										"text": " @dev Moves a `value` amount of tokens from `from` to `to`.\n This internal function is equivalent to {transfer}, and can be used to\n e.g. implement automatic token fees, slashing mechanisms, etc.\n Emits a {Transfer} event.\n NOTE: This function is not virtual, {_update} should be overridden instead."
									},
									"id": 501,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transfer",
									"nameLocation": "16526:9:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 462,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 457,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "16544:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 501,
												"src": "16536:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 456,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "16536:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 459,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "16558:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 501,
												"src": "16550:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 458,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "16550:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 461,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "16570:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 501,
												"src": "16562:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 460,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "16562:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16535:41:0"
									},
									"returnParameters": {
										"id": 463,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "16586:0:0"
									},
									"scope": 771,
									"src": "16517:300:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 577,
										"nodeType": "Block",
										"src": "17207:1032:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 516,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 511,
														"name": "from",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 504,
														"src": "17221:4:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 514,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "17237:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 513,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "17229:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 512,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "17229:7:0",
																"typeDescriptions": {}
															}
														},
														"id": 515,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "17229:10:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "17221:18:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 548,
													"nodeType": "Block",
													"src": "17395:362:0",
													"statements": [
														{
															"assignments": [
																523
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 523,
																	"mutability": "mutable",
																	"name": "fromBalance",
																	"nameLocation": "17417:11:0",
																	"nodeType": "VariableDeclaration",
																	"scope": 548,
																	"src": "17409:19:0",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 522,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "17409:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 527,
															"initialValue": {
																"baseExpression": {
																	"id": 524,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 279,
																	"src": "17431:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 526,
																"indexExpression": {
																	"id": 525,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 504,
																	"src": "17441:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "17431:15:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "17409:37:0"
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 530,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 528,
																	"name": "fromBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 523,
																	"src": "17464:11:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 529,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 508,
																	"src": "17478:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "17464:19:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 538,
															"nodeType": "IfStatement",
															"src": "17460:115:0",
															"trueBody": {
																"id": 537,
																"nodeType": "Block",
																"src": "17485:90:0",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [
																				{
																					"id": 532,
																					"name": "from",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 504,
																					"src": "17535:4:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 533,
																					"name": "fromBalance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 523,
																					"src": "17541:11:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				{
																					"id": 534,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 508,
																					"src": "17554:5:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 531,
																				"name": "ERC20InsufficientBalance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 140,
																				"src": "17510:24:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
																					"typeString": "function (address,uint256,uint256) pure"
																				}
																			},
																			"id": 535,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "17510:50:0",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 536,
																		"nodeType": "RevertStatement",
																		"src": "17503:57:0"
																	}
																]
															}
														},
														{
															"id": 547,
															"nodeType": "UncheckedBlock",
															"src": "17588:159:0",
															"statements": [
																{
																	"expression": {
																		"id": 545,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"baseExpression": {
																				"id": 539,
																				"name": "_balances",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 279,
																				"src": "17695:9:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																					"typeString": "mapping(address => uint256)"
																				}
																			},
																			"id": 541,
																			"indexExpression": {
																				"id": 540,
																				"name": "from",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 504,
																				"src": "17705:4:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": true,
																			"nodeType": "IndexAccess",
																			"src": "17695:15:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 544,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 542,
																				"name": "fromBalance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 523,
																				"src": "17713:11:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"id": 543,
																				"name": "value",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 508,
																				"src": "17727:5:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "17713:19:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "17695:37:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 546,
																	"nodeType": "ExpressionStatement",
																	"src": "17695:37:0"
																}
															]
														}
													]
												},
												"id": 549,
												"nodeType": "IfStatement",
												"src": "17217:540:0",
												"trueBody": {
													"id": 521,
													"nodeType": "Block",
													"src": "17241:148:0",
													"statements": [
														{
															"expression": {
																"id": 519,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 517,
																	"name": "_totalSupply",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 287,
																	"src": "17357:12:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"id": 518,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 508,
																	"src": "17373:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "17357:21:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 520,
															"nodeType": "ExpressionStatement",
															"src": "17357:21:0"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 555,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 550,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 506,
														"src": "17771:2:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 553,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "17785:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 552,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "17777:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 551,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "17777:7:0",
																"typeDescriptions": {}
															}
														},
														"id": 554,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "17777:10:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "17771:16:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 569,
													"nodeType": "Block",
													"src": "17986:206:0",
													"statements": [
														{
															"id": 568,
															"nodeType": "UncheckedBlock",
															"src": "18000:182:0",
															"statements": [
																{
																	"expression": {
																		"id": 566,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"baseExpression": {
																				"id": 562,
																				"name": "_balances",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 279,
																				"src": "18145:9:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																					"typeString": "mapping(address => uint256)"
																				}
																			},
																			"id": 564,
																			"indexExpression": {
																				"id": 563,
																				"name": "to",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 506,
																				"src": "18155:2:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": true,
																			"nodeType": "IndexAccess",
																			"src": "18145:13:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"id": 565,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 508,
																			"src": "18162:5:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "18145:22:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 567,
																	"nodeType": "ExpressionStatement",
																	"src": "18145:22:0"
																}
															]
														}
													]
												},
												"id": 570,
												"nodeType": "IfStatement",
												"src": "17767:425:0",
												"trueBody": {
													"id": 561,
													"nodeType": "Block",
													"src": "17789:191:0",
													"statements": [
														{
															"id": 560,
															"nodeType": "UncheckedBlock",
															"src": "17803:167:0",
															"statements": [
																{
																	"expression": {
																		"id": 558,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 556,
																			"name": "_totalSupply",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 287,
																			"src": "17934:12:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "-=",
																		"rightHandSide": {
																			"id": 557,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 508,
																			"src": "17950:5:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "17934:21:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 559,
																	"nodeType": "ExpressionStatement",
																	"src": "17934:21:0"
																}
															]
														}
													]
												}
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 572,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 504,
															"src": "18216:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 573,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 506,
															"src": "18222:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 574,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 508,
															"src": "18226:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 571,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 11,
														"src": "18207:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 575,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "18207:25:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 576,
												"nodeType": "EmitStatement",
												"src": "18202:30:0"
											}
										]
									},
									"documentation": {
										"id": 502,
										"nodeType": "StructuredDocumentation",
										"src": "16823:304:0",
										"text": " @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n this function.\n Emits a {Transfer} event."
									},
									"id": 578,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_update",
									"nameLocation": "17141:7:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 509,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 504,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "17157:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 578,
												"src": "17149:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 503,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "17149:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 506,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "17171:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 578,
												"src": "17163:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 505,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "17163:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 508,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "17183:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 578,
												"src": "17175:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 507,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "17175:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "17148:41:0"
									},
									"returnParameters": {
										"id": 510,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "17207:0:0"
									},
									"scope": 771,
									"src": "17132:1107:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 610,
										"nodeType": "Block",
										"src": "18638:152:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 591,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 586,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 581,
														"src": "18652:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 589,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "18671:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 588,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "18663:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 587,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "18663:7:0",
																"typeDescriptions": {}
															}
														},
														"id": 590,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "18663:10:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "18652:21:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 600,
												"nodeType": "IfStatement",
												"src": "18648:91:0",
												"trueBody": {
													"id": 599,
													"nodeType": "Block",
													"src": "18675:64:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 595,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "18725:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 594,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "18717:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 593,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "18717:7:0",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 596,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "18717:10:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 592,
																	"name": "ERC20InvalidReceiver",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 150,
																	"src": "18696:20:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 597,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "18696:32:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 598,
															"nodeType": "RevertStatement",
															"src": "18689:39:0"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 604,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "18764:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 603,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "18756:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 602,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "18756:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 605,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "18756:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 606,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 581,
															"src": "18768:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 607,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 583,
															"src": "18777:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 601,
														"name": "_update",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 578,
														"src": "18748:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 608,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "18748:35:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 609,
												"nodeType": "ExpressionStatement",
												"src": "18748:35:0"
											}
										]
									},
									"documentation": {
										"id": 579,
										"nodeType": "StructuredDocumentation",
										"src": "18245:332:0",
										"text": " @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n Relies on the `_update` mechanism\n Emits a {Transfer} event with `from` set to the zero address.\n NOTE: This function is not virtual, {_update} should be overridden instead."
									},
									"id": 611,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_mint",
									"nameLocation": "18591:5:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 584,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 581,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "18605:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 611,
												"src": "18597:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 580,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "18597:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 583,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "18622:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 611,
												"src": "18614:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 582,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "18614:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "18596:32:0"
									},
									"returnParameters": {
										"id": 585,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "18638:0:0"
									},
									"scope": 771,
									"src": "18582:208:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 643,
										"nodeType": "Block",
										"src": "19164:150:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 624,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 619,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 614,
														"src": "19178:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 622,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "19197:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 621,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "19189:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 620,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "19189:7:0",
																"typeDescriptions": {}
															}
														},
														"id": 623,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "19189:10:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "19178:21:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 633,
												"nodeType": "IfStatement",
												"src": "19174:89:0",
												"trueBody": {
													"id": 632,
													"nodeType": "Block",
													"src": "19201:62:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 628,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "19249:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 627,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "19241:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 626,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "19241:7:0",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 629,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "19241:10:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 625,
																	"name": "ERC20InvalidSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 145,
																	"src": "19222:18:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 630,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "19222:30:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 631,
															"nodeType": "RevertStatement",
															"src": "19215:37:0"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 635,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 614,
															"src": "19280:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 638,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "19297:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 637,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "19289:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 636,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "19289:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 639,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "19289:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 640,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 616,
															"src": "19301:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 634,
														"name": "_update",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 578,
														"src": "19272:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 641,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "19272:35:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 642,
												"nodeType": "ExpressionStatement",
												"src": "19272:35:0"
											}
										]
									},
									"documentation": {
										"id": 612,
										"nodeType": "StructuredDocumentation",
										"src": "18796:307:0",
										"text": " @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n Relies on the `_update` mechanism.\n Emits a {Transfer} event with `to` set to the zero address.\n NOTE: This function is not virtual, {_update} should be overridden instead"
									},
									"id": 644,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_burn",
									"nameLocation": "19117:5:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 617,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 614,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "19131:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 644,
												"src": "19123:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 613,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "19123:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 616,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "19148:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 644,
												"src": "19140:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 615,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "19140:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "19122:32:0"
									},
									"returnParameters": {
										"id": 618,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "19164:0:0"
									},
									"scope": 771,
									"src": "19108:206:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 661,
										"nodeType": "Block",
										"src": "19924:54:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 655,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 647,
															"src": "19943:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 656,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 649,
															"src": "19950:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 657,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 651,
															"src": "19959:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "74727565",
															"id": 658,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "19966:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 654,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															662,
															722
														],
														"referencedDeclaration": 722,
														"src": "19934:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bool_$returns$__$",
															"typeString": "function (address,address,uint256,bool)"
														}
													},
													"id": 659,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "19934:37:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 660,
												"nodeType": "ExpressionStatement",
												"src": "19934:37:0"
											}
										]
									},
									"documentation": {
										"id": 645,
										"nodeType": "StructuredDocumentation",
										"src": "19320:525:0",
										"text": " @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n This internal function is equivalent to `approve`, and can be used to\n e.g. set automatic allowances for certain subsystems, etc.\n Emits an {Approval} event.\n Requirements:\n - `owner` cannot be the zero address.\n - `spender` cannot be the zero address.\n Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument."
									},
									"id": 662,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nameLocation": "19859:8:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 652,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 647,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "19876:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 662,
												"src": "19868:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 646,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "19868:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 649,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "19891:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 662,
												"src": "19883:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 648,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "19883:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 651,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "19908:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 662,
												"src": "19900:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 650,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "19900:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "19867:47:0"
									},
									"returnParameters": {
										"id": 653,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "19924:0:0"
									},
									"scope": 771,
									"src": "19850:128:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 721,
										"nodeType": "Block",
										"src": "20908:334:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 679,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 674,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 665,
														"src": "20922:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 677,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "20939:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 676,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "20931:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 675,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "20931:7:0",
																"typeDescriptions": {}
															}
														},
														"id": 678,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "20931:10:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "20922:19:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 688,
												"nodeType": "IfStatement",
												"src": "20918:89:0",
												"trueBody": {
													"id": 687,
													"nodeType": "Block",
													"src": "20943:64:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 683,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "20993:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 682,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "20985:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 681,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "20985:7:0",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 684,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "20985:10:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 680,
																	"name": "ERC20InvalidApprover",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 164,
																	"src": "20964:20:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 685,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "20964:32:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 686,
															"nodeType": "RevertStatement",
															"src": "20957:39:0"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 694,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 689,
														"name": "spender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 667,
														"src": "21020:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 692,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "21039:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 691,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "21031:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 690,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "21031:7:0",
																"typeDescriptions": {}
															}
														},
														"id": 693,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "21031:10:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "21020:21:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 703,
												"nodeType": "IfStatement",
												"src": "21016:90:0",
												"trueBody": {
													"id": 702,
													"nodeType": "Block",
													"src": "21043:63:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 698,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "21092:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 697,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "21084:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 696,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "21084:7:0",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 699,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "21084:10:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 695,
																	"name": "ERC20InvalidSpender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 169,
																	"src": "21064:19:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 700,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "21064:31:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 701,
															"nodeType": "RevertStatement",
															"src": "21057:38:0"
														}
													]
												}
											},
											{
												"expression": {
													"id": 710,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 704,
																"name": "_allowances",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 285,
																"src": "21115:11:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																	"typeString": "mapping(address => mapping(address => uint256))"
																}
															},
															"id": 707,
															"indexExpression": {
																"id": 705,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 665,
																"src": "21127:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "21115:18:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 708,
														"indexExpression": {
															"id": 706,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 667,
															"src": "21134:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "21115:27:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 709,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 669,
														"src": "21145:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "21115:35:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 711,
												"nodeType": "ExpressionStatement",
												"src": "21115:35:0"
											},
											{
												"condition": {
													"id": 712,
													"name": "emitEvent",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 671,
													"src": "21164:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 720,
												"nodeType": "IfStatement",
												"src": "21160:76:0",
												"trueBody": {
													"id": 719,
													"nodeType": "Block",
													"src": "21175:61:0",
													"statements": [
														{
															"eventCall": {
																"arguments": [
																	{
																		"id": 714,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 665,
																		"src": "21203:5:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 715,
																		"name": "spender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 667,
																		"src": "21210:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 716,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 669,
																		"src": "21219:5:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 713,
																	"name": "Approval",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 20,
																	"src": "21194:8:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (address,address,uint256)"
																	}
																},
																"id": 717,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "21194:31:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 718,
															"nodeType": "EmitStatement",
															"src": "21189:36:0"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 663,
										"nodeType": "StructuredDocumentation",
										"src": "19984:821:0",
										"text": " @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n `Approval` event during `transferFrom` operations.\n Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n true using the following override:\n ```\n function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     super._approve(owner, spender, value, true);\n }\n ```\n Requirements are the same as {_approve}."
									},
									"id": 722,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nameLocation": "20819:8:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 672,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 665,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "20836:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 722,
												"src": "20828:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 664,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "20828:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 667,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "20851:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 722,
												"src": "20843:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 666,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "20843:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 669,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "20868:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 722,
												"src": "20860:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 668,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "20860:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 671,
												"mutability": "mutable",
												"name": "emitEvent",
												"nameLocation": "20880:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 722,
												"src": "20875:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 670,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "20875:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "20827:63:0"
									},
									"returnParameters": {
										"id": 673,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "20908:0:0"
									},
									"scope": 771,
									"src": "20810:432:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 769,
										"nodeType": "Block",
										"src": "21613:388:0",
										"statements": [
											{
												"assignments": [
													733
												],
												"declarations": [
													{
														"constant": false,
														"id": 733,
														"mutability": "mutable",
														"name": "currentAllowance",
														"nameLocation": "21631:16:0",
														"nodeType": "VariableDeclaration",
														"scope": 769,
														"src": "21623:24:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 732,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "21623:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 738,
												"initialValue": {
													"arguments": [
														{
															"id": 735,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 725,
															"src": "21660:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 736,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 727,
															"src": "21667:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 734,
														"name": "allowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 398,
														"src": "21650:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view returns (uint256)"
														}
													},
													"id": 737,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "21650:25:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "21623:52:0"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 745,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 739,
														"name": "currentAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 733,
														"src": "21689:16:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 742,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "21714:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 741,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "21714:7:0",
																		"typeDescriptions": {}
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	}
																],
																"id": 740,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "21709:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 743,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "21709:13:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_uint256",
																"typeString": "type(uint256)"
															}
														},
														"id": 744,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "21723:3:0",
														"memberName": "max",
														"nodeType": "MemberAccess",
														"src": "21709:17:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "21689:37:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 768,
												"nodeType": "IfStatement",
												"src": "21685:310:0",
												"trueBody": {
													"id": 767,
													"nodeType": "Block",
													"src": "21728:267:0",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 748,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 746,
																	"name": "currentAllowance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 733,
																	"src": "21746:16:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 747,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 729,
																	"src": "21765:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "21746:24:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 756,
															"nodeType": "IfStatement",
															"src": "21742:130:0",
															"trueBody": {
																"id": 755,
																"nodeType": "Block",
																"src": "21772:100:0",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [
																				{
																					"id": 750,
																					"name": "spender",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 727,
																					"src": "21824:7:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 751,
																					"name": "currentAllowance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 733,
																					"src": "21833:16:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				{
																					"id": 752,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 729,
																					"src": "21851:5:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 749,
																				"name": "ERC20InsufficientAllowance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 159,
																				"src": "21797:26:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
																					"typeString": "function (address,uint256,uint256) pure"
																				}
																			},
																			"id": 753,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "21797:60:0",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 754,
																		"nodeType": "RevertStatement",
																		"src": "21790:67:0"
																	}
																]
															}
														},
														{
															"id": 766,
															"nodeType": "UncheckedBlock",
															"src": "21885:100:0",
															"statements": [
																{
																	"expression": {
																		"arguments": [
																			{
																				"id": 758,
																				"name": "owner",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 725,
																				"src": "21922:5:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"id": 759,
																				"name": "spender",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 727,
																				"src": "21929:7:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 762,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 760,
																					"name": "currentAllowance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 733,
																					"src": "21938:16:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "-",
																				"rightExpression": {
																					"id": 761,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 729,
																					"src": "21957:5:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "21938:24:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			{
																				"hexValue": "66616c7365",
																				"id": 763,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "bool",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "21964:5:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				},
																				"value": "false"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				{
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			],
																			"id": 757,
																			"name": "_approve",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [
																				662,
																				722
																			],
																			"referencedDeclaration": 722,
																			"src": "21913:8:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bool_$returns$__$",
																				"typeString": "function (address,address,uint256,bool)"
																			}
																		},
																		"id": 764,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "21913:57:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_tuple$__$",
																			"typeString": "tuple()"
																		}
																	},
																	"id": 765,
																	"nodeType": "ExpressionStatement",
																	"src": "21913:57:0"
																}
															]
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 723,
										"nodeType": "StructuredDocumentation",
										"src": "21248:271:0",
										"text": " @dev Updates `owner` s allowance for `spender` based on spent `value`.\n Does not update the allowance value in case of infinite allowance.\n Revert if not enough allowance is available.\n Does not emit an {Approval} event."
									},
									"id": 770,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_spendAllowance",
									"nameLocation": "21533:15:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 730,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 725,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "21557:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 770,
												"src": "21549:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 724,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "21549:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 727,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "21572:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 770,
												"src": "21564:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 726,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "21564:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 729,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "21589:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 770,
												"src": "21581:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 728,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "21581:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "21548:47:0"
									},
									"returnParameters": {
										"id": 731,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "21613:0:0"
									},
									"scope": 771,
									"src": "21524:477:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 3830,
							"src": "12262:9741:0",
							"usedErrors": [
								140,
								145,
								150,
								159,
								164,
								169
							],
							"usedEvents": [
								11,
								20
							]
						},
						{
							"id": 772,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "22173:24:0"
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 774,
										"name": "Context",
										"nameLocations": [
											"22445:7:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 129,
										"src": "22445:7:0"
									},
									"id": 775,
									"nodeType": "InheritanceSpecifier",
									"src": "22445:7:0"
								},
								{
									"baseName": {
										"id": 776,
										"name": "ERC20",
										"nameLocations": [
											"22454:5:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 771,
										"src": "22454:5:0"
									},
									"id": 777,
									"nodeType": "InheritanceSpecifier",
									"src": "22454:5:0"
								}
							],
							"canonicalName": "ERC20Burnable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 773,
								"nodeType": "StructuredDocumentation",
								"src": "22201:208:0",
								"text": " @dev Extension of {ERC20} that allows token holders to destroy both their own\n tokens and those that they have an allowance for, in a way that can be\n recognized off-chain (via event analysis)."
							},
							"fullyImplemented": true,
							"id": 812,
							"linearizedBaseContracts": [
								812,
								771,
								170,
								100,
								77,
								129
							],
							"name": "ERC20Burnable",
							"nameLocation": "22428:13:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 789,
										"nodeType": "Block",
										"src": "22624:43:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 784,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 111,
																"src": "22640:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 785,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "22640:12:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 786,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 780,
															"src": "22654:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 783,
														"name": "_burn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 644,
														"src": "22634:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 787,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "22634:26:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 788,
												"nodeType": "ExpressionStatement",
												"src": "22634:26:0"
											}
										]
									},
									"documentation": {
										"id": 778,
										"nodeType": "StructuredDocumentation",
										"src": "22466:109:0",
										"text": " @dev Destroys a `value` amount of tokens from the caller.\n See {ERC20-_burn}."
									},
									"functionSelector": "42966c68",
									"id": 790,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "burn",
									"nameLocation": "22589:4:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 781,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 780,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "22602:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 790,
												"src": "22594:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 779,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "22594:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "22593:15:0"
									},
									"returnParameters": {
										"id": 782,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "22624:0:0"
									},
									"scope": 812,
									"src": "22580:87:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 810,
										"nodeType": "Block",
										"src": "23048:93:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 799,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 793,
															"src": "23074:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 800,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 111,
																"src": "23083:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 801,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "23083:12:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 802,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 795,
															"src": "23097:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 798,
														"name": "_spendAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 770,
														"src": "23058:15:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 803,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "23058:45:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 804,
												"nodeType": "ExpressionStatement",
												"src": "23058:45:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 806,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 793,
															"src": "23119:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 807,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 795,
															"src": "23128:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 805,
														"name": "_burn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 644,
														"src": "23113:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 808,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "23113:21:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 809,
												"nodeType": "ExpressionStatement",
												"src": "23113:21:0"
											}
										]
									},
									"documentation": {
										"id": 791,
										"nodeType": "StructuredDocumentation",
										"src": "22673:305:0",
										"text": " @dev Destroys a `value` amount of tokens from `account`, deducting from\n the caller's allowance.\n See {ERC20-_burn} and {ERC20-allowance}.\n Requirements:\n - the caller must have allowance for ``accounts``'s tokens of at least\n `value`."
									},
									"functionSelector": "79cc6790",
									"id": 811,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "burnFrom",
									"nameLocation": "22992:8:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 796,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 793,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "23009:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 811,
												"src": "23001:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 792,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "23001:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 795,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "23026:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 811,
												"src": "23018:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 794,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "23018:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "23000:32:0"
									},
									"returnParameters": {
										"id": 797,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "23048:0:0"
									},
									"scope": 812,
									"src": "22983:158:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								}
							],
							"scope": 3830,
							"src": "22410:733:0",
							"usedErrors": [
								140,
								145,
								150,
								159,
								164,
								169
							],
							"usedEvents": [
								11,
								20
							]
						},
						{
							"id": 813,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "23269:24:0"
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 815,
										"name": "Context",
										"nameLocations": [
											"23766:7:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 129,
										"src": "23766:7:0"
									},
									"id": 816,
									"nodeType": "InheritanceSpecifier",
									"src": "23766:7:0"
								}
							],
							"canonicalName": "Pausable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 814,
								"nodeType": "StructuredDocumentation",
								"src": "23296:439:0",
								"text": " @dev Contract module which allows children to implement an emergency stop\n mechanism that can be triggered by an authorized account.\n This module is used through inheritance. It will make available the\n modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n the functions of your contract. Note that they will not be pausable by\n simply including this module, only once the modifiers are put in place."
							},
							"fullyImplemented": true,
							"id": 926,
							"linearizedBaseContracts": [
								926,
								129
							],
							"name": "Pausable",
							"nameLocation": "23754:8:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 818,
									"mutability": "mutable",
									"name": "_paused",
									"nameLocation": "23793:7:0",
									"nodeType": "VariableDeclaration",
									"scope": 926,
									"src": "23780:20:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bool",
										"typeString": "bool"
									},
									"typeName": {
										"id": 817,
										"name": "bool",
										"nodeType": "ElementaryTypeName",
										"src": "23780:4:0",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										}
									},
									"visibility": "private"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 819,
										"nodeType": "StructuredDocumentation",
										"src": "23807:73:0",
										"text": " @dev Emitted when the pause is triggered by `account`."
									},
									"eventSelector": "62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258",
									"id": 823,
									"name": "Paused",
									"nameLocation": "23891:6:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 822,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 821,
												"indexed": false,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "23906:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 823,
												"src": "23898:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 820,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "23898:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "23897:17:0"
									},
									"src": "23885:30:0"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 824,
										"nodeType": "StructuredDocumentation",
										"src": "23921:70:0",
										"text": " @dev Emitted when the pause is lifted by `account`."
									},
									"eventSelector": "5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa",
									"id": 828,
									"name": "Unpaused",
									"nameLocation": "24002:8:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 827,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 826,
												"indexed": false,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "24019:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 828,
												"src": "24011:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 825,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "24011:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "24010:17:0"
									},
									"src": "23996:32:0"
								},
								{
									"documentation": {
										"id": 829,
										"nodeType": "StructuredDocumentation",
										"src": "24034:76:0",
										"text": " @dev The operation failed because the contract is paused."
									},
									"errorSelector": "d93c0665",
									"id": 831,
									"name": "EnforcedPause",
									"nameLocation": "24121:13:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 830,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "24134:2:0"
									},
									"src": "24115:22:0"
								},
								{
									"documentation": {
										"id": 832,
										"nodeType": "StructuredDocumentation",
										"src": "24143:80:0",
										"text": " @dev The operation failed because the contract is not paused."
									},
									"errorSelector": "8dfc202b",
									"id": 834,
									"name": "ExpectedPause",
									"nameLocation": "24234:13:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 833,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "24247:2:0"
									},
									"src": "24228:22:0"
								},
								{
									"body": {
										"id": 842,
										"nodeType": "Block",
										"src": "24342:32:0",
										"statements": [
											{
												"expression": {
													"id": 840,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 838,
														"name": "_paused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 818,
														"src": "24352:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "66616c7365",
														"id": 839,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "24362:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "24352:15:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 841,
												"nodeType": "ExpressionStatement",
												"src": "24352:15:0"
											}
										]
									},
									"documentation": {
										"id": 835,
										"nodeType": "StructuredDocumentation",
										"src": "24256:67:0",
										"text": " @dev Initializes the contract in unpaused state."
									},
									"id": 843,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 836,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "24339:2:0"
									},
									"returnParameters": {
										"id": 837,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "24342:0:0"
									},
									"scope": 926,
									"src": "24328:46:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 850,
										"nodeType": "Block",
										"src": "24585:47:0",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 846,
														"name": "_requireNotPaused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 880,
														"src": "24595:17:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 847,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "24595:19:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 848,
												"nodeType": "ExpressionStatement",
												"src": "24595:19:0"
											},
											{
												"id": 849,
												"nodeType": "PlaceholderStatement",
												"src": "24624:1:0"
											}
										]
									},
									"documentation": {
										"id": 844,
										"nodeType": "StructuredDocumentation",
										"src": "24380:175:0",
										"text": " @dev Modifier to make a function callable only when the contract is not paused.\n Requirements:\n - The contract must not be paused."
									},
									"id": 851,
									"name": "whenNotPaused",
									"nameLocation": "24569:13:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 845,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "24582:2:0"
									},
									"src": "24560:72:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 858,
										"nodeType": "Block",
										"src": "24832:44:0",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 854,
														"name": "_requirePaused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 893,
														"src": "24842:14:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 855,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "24842:16:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 856,
												"nodeType": "ExpressionStatement",
												"src": "24842:16:0"
											},
											{
												"id": 857,
												"nodeType": "PlaceholderStatement",
												"src": "24868:1:0"
											}
										]
									},
									"documentation": {
										"id": 852,
										"nodeType": "StructuredDocumentation",
										"src": "24638:167:0",
										"text": " @dev Modifier to make a function callable only when the contract is paused.\n Requirements:\n - The contract must be paused."
									},
									"id": 859,
									"name": "whenPaused",
									"nameLocation": "24819:10:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 853,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "24829:2:0"
									},
									"src": "24810:66:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 867,
										"nodeType": "Block",
										"src": "25024:31:0",
										"statements": [
											{
												"expression": {
													"id": 865,
													"name": "_paused",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 818,
													"src": "25041:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 864,
												"id": 866,
												"nodeType": "Return",
												"src": "25034:14:0"
											}
										]
									},
									"documentation": {
										"id": 860,
										"nodeType": "StructuredDocumentation",
										"src": "24882:84:0",
										"text": " @dev Returns true if the contract is paused, and false otherwise."
									},
									"functionSelector": "5c975abb",
									"id": 868,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "paused",
									"nameLocation": "24980:6:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 861,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "24986:2:0"
									},
									"returnParameters": {
										"id": 864,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 863,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 868,
												"src": "25018:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 862,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "25018:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "25017:6:0"
									},
									"scope": 926,
									"src": "24971:84:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 879,
										"nodeType": "Block",
										"src": "25174:77:0",
										"statements": [
											{
												"condition": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 872,
														"name": "paused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 868,
														"src": "25188:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
															"typeString": "function () view returns (bool)"
														}
													},
													"id": 873,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "25188:8:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 878,
												"nodeType": "IfStatement",
												"src": "25184:61:0",
												"trueBody": {
													"id": 877,
													"nodeType": "Block",
													"src": "25198:47:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 874,
																	"name": "EnforcedPause",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 831,
																	"src": "25219:13:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 875,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "25219:15:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 876,
															"nodeType": "RevertStatement",
															"src": "25212:22:0"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 869,
										"nodeType": "StructuredDocumentation",
										"src": "25061:57:0",
										"text": " @dev Throws if the contract is paused."
									},
									"id": 880,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_requireNotPaused",
									"nameLocation": "25132:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 870,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "25149:2:0"
									},
									"returnParameters": {
										"id": 871,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "25174:0:0"
									},
									"scope": 926,
									"src": "25123:128:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 892,
										"nodeType": "Block",
										"src": "25371:78:0",
										"statements": [
											{
												"condition": {
													"id": 886,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "25385:9:0",
													"subExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 884,
															"name": "paused",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 868,
															"src": "25386:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
																"typeString": "function () view returns (bool)"
															}
														},
														"id": 885,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "25386:8:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 891,
												"nodeType": "IfStatement",
												"src": "25381:62:0",
												"trueBody": {
													"id": 890,
													"nodeType": "Block",
													"src": "25396:47:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 887,
																	"name": "ExpectedPause",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 834,
																	"src": "25417:13:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 888,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "25417:15:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 889,
															"nodeType": "RevertStatement",
															"src": "25410:22:0"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 881,
										"nodeType": "StructuredDocumentation",
										"src": "25257:61:0",
										"text": " @dev Throws if the contract is not paused."
									},
									"id": 893,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_requirePaused",
									"nameLocation": "25332:14:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 882,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "25346:2:0"
									},
									"returnParameters": {
										"id": 883,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "25371:0:0"
									},
									"scope": 926,
									"src": "25323:126:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 908,
										"nodeType": "Block",
										"src": "25633:66:0",
										"statements": [
											{
												"expression": {
													"id": 901,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 899,
														"name": "_paused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 818,
														"src": "25643:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 900,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "25653:4:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "25643:14:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 902,
												"nodeType": "ExpressionStatement",
												"src": "25643:14:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 904,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 111,
																"src": "25679:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 905,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "25679:12:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 903,
														"name": "Paused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 823,
														"src": "25672:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 906,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "25672:20:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 907,
												"nodeType": "EmitStatement",
												"src": "25667:25:0"
											}
										]
									},
									"documentation": {
										"id": 894,
										"nodeType": "StructuredDocumentation",
										"src": "25455:124:0",
										"text": " @dev Triggers stopped state.\n Requirements:\n - The contract must not be paused."
									},
									"id": 909,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 897,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 896,
												"name": "whenNotPaused",
												"nameLocations": [
													"25619:13:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 851,
												"src": "25619:13:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "25619:13:0"
										}
									],
									"name": "_pause",
									"nameLocation": "25593:6:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 895,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "25599:2:0"
									},
									"returnParameters": {
										"id": 898,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "25633:0:0"
									},
									"scope": 926,
									"src": "25584:115:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 924,
										"nodeType": "Block",
										"src": "25879:69:0",
										"statements": [
											{
												"expression": {
													"id": 917,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 915,
														"name": "_paused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 818,
														"src": "25889:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "66616c7365",
														"id": 916,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "25899:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "25889:15:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 918,
												"nodeType": "ExpressionStatement",
												"src": "25889:15:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 920,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 111,
																"src": "25928:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 921,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "25928:12:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 919,
														"name": "Unpaused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 828,
														"src": "25919:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 922,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "25919:22:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 923,
												"nodeType": "EmitStatement",
												"src": "25914:27:0"
											}
										]
									},
									"documentation": {
										"id": 910,
										"nodeType": "StructuredDocumentation",
										"src": "25705:121:0",
										"text": " @dev Returns to normal state.\n Requirements:\n - The contract must be paused."
									},
									"id": 925,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 913,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 912,
												"name": "whenPaused",
												"nameLocations": [
													"25868:10:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 859,
												"src": "25868:10:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "25868:10:0"
										}
									],
									"name": "_unpause",
									"nameLocation": "25840:8:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 911,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "25848:2:0"
									},
									"returnParameters": {
										"id": 914,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "25879:0:0"
									},
									"scope": 926,
									"src": "25831:117:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 3830,
							"src": "23736:2214:0",
							"usedErrors": [
								831,
								834
							],
							"usedEvents": [
								823,
								828
							]
						},
						{
							"id": 927,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "26120:24:0"
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 929,
										"name": "ERC20",
										"nameLocations": [
											"26871:5:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 771,
										"src": "26871:5:0"
									},
									"id": 930,
									"nodeType": "InheritanceSpecifier",
									"src": "26871:5:0"
								},
								{
									"baseName": {
										"id": 931,
										"name": "Pausable",
										"nameLocations": [
											"26878:8:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 926,
										"src": "26878:8:0"
									},
									"id": 932,
									"nodeType": "InheritanceSpecifier",
									"src": "26878:8:0"
								}
							],
							"canonicalName": "ERC20Pausable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 928,
								"nodeType": "StructuredDocumentation",
								"src": "26148:687:0",
								"text": " @dev ERC20 token with pausable token transfers, minting and burning.\n Useful for scenarios such as preventing trades until the end of an evaluation\n period, or having an emergency switch for freezing all token transfers in the\n event of a large bug.\n IMPORTANT: This contract does not include public pause and unpause functions. In\n addition to inheriting this contract, you must define both functions, invoking the\n {Pausable-_pause} and {Pausable-_unpause} internal functions, with appropriate\n access control, e.g. using {AccessControl} or {Ownable}. Not doing so will\n make the contract pause mechanism of the contract unreachable, and thus unusable."
							},
							"fullyImplemented": true,
							"id": 955,
							"linearizedBaseContracts": [
								955,
								926,
								771,
								170,
								100,
								77,
								129
							],
							"name": "ERC20Pausable",
							"nameLocation": "26854:13:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"baseFunctions": [
										578
									],
									"body": {
										"id": 953,
										"nodeType": "Block",
										"src": "27117:47:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 948,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 935,
															"src": "27141:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 949,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 937,
															"src": "27147:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 950,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 939,
															"src": "27151:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 945,
															"name": "super",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967271,
															"src": "27127:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_super$_ERC20Pausable_$955_$",
																"typeString": "type(contract super ERC20Pausable)"
															}
														},
														"id": 947,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "27133:7:0",
														"memberName": "_update",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 578,
														"src": "27127:13:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 951,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "27127:30:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 952,
												"nodeType": "ExpressionStatement",
												"src": "27127:30:0"
											}
										]
									},
									"documentation": {
										"id": 933,
										"nodeType": "StructuredDocumentation",
										"src": "26893:121:0",
										"text": " @dev See {ERC20-_update}.\n Requirements:\n - the contract must not be paused."
									},
									"id": 954,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 943,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 942,
												"name": "whenNotPaused",
												"nameLocations": [
													"27103:13:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 851,
												"src": "27103:13:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "27103:13:0"
										}
									],
									"name": "_update",
									"nameLocation": "27028:7:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 941,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "27094:8:0"
									},
									"parameters": {
										"id": 940,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 935,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "27044:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 954,
												"src": "27036:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 934,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "27036:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 937,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "27058:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 954,
												"src": "27050:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 936,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "27050:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 939,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "27070:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 954,
												"src": "27062:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 938,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "27062:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "27035:41:0"
									},
									"returnParameters": {
										"id": 944,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "27117:0:0"
									},
									"scope": 955,
									"src": "27019:145:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 3830,
							"src": "26836:330:0",
							"usedErrors": [
								140,
								145,
								150,
								159,
								164,
								169,
								831,
								834
							],
							"usedEvents": [
								11,
								20,
								823,
								828
							]
						},
						{
							"id": 956,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "27292:24:0"
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 958,
										"name": "Context",
										"nameLocations": [
											"27836:7:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 129,
										"src": "27836:7:0"
									},
									"id": 959,
									"nodeType": "InheritanceSpecifier",
									"src": "27836:7:0"
								}
							],
							"canonicalName": "Ownable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 957,
								"nodeType": "StructuredDocumentation",
								"src": "27319:487:0",
								"text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n The initial owner is set to the address provided by the deployer. This can\n later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
							},
							"fullyImplemented": true,
							"id": 1100,
							"linearizedBaseContracts": [
								1100,
								129
							],
							"name": "Ownable",
							"nameLocation": "27825:7:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 961,
									"mutability": "mutable",
									"name": "_owner",
									"nameLocation": "27866:6:0",
									"nodeType": "VariableDeclaration",
									"scope": 1100,
									"src": "27850:22:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 960,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "27850:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"documentation": {
										"id": 962,
										"nodeType": "StructuredDocumentation",
										"src": "27879:85:0",
										"text": " @dev The caller account is not authorized to perform an operation."
									},
									"errorSelector": "118cdaa7",
									"id": 966,
									"name": "OwnableUnauthorizedAccount",
									"nameLocation": "27975:26:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 965,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 964,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "28010:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 966,
												"src": "28002:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 963,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "28002:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "28001:17:0"
									},
									"src": "27969:50:0"
								},
								{
									"documentation": {
										"id": 967,
										"nodeType": "StructuredDocumentation",
										"src": "28025:82:0",
										"text": " @dev The owner is not a valid owner account. (eg. `address(0)`)"
									},
									"errorSelector": "1e4fbdf7",
									"id": 971,
									"name": "OwnableInvalidOwner",
									"nameLocation": "28118:19:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 970,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 969,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "28146:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 971,
												"src": "28138:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 968,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "28138:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "28137:15:0"
									},
									"src": "28112:41:0"
								},
								{
									"anonymous": false,
									"eventSelector": "8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
									"id": 977,
									"name": "OwnershipTransferred",
									"nameLocation": "28165:20:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 976,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 973,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousOwner",
												"nameLocation": "28202:13:0",
												"nodeType": "VariableDeclaration",
												"scope": 977,
												"src": "28186:29:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 972,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "28186:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 975,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "28233:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 977,
												"src": "28217:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 974,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "28217:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "28185:57:0"
									},
									"src": "28159:84:0"
								},
								{
									"body": {
										"id": 1002,
										"nodeType": "Block",
										"src": "28403:153:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 988,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 983,
														"name": "initialOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 980,
														"src": "28417:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 986,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "28441:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 985,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "28433:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 984,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "28433:7:0",
																"typeDescriptions": {}
															}
														},
														"id": 987,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "28433:10:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "28417:26:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 997,
												"nodeType": "IfStatement",
												"src": "28413:95:0",
												"trueBody": {
													"id": 996,
													"nodeType": "Block",
													"src": "28445:63:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 992,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "28494:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 991,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "28486:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 990,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "28486:7:0",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 993,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "28486:10:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 989,
																	"name": "OwnableInvalidOwner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 971,
																	"src": "28466:19:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 994,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "28466:31:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 995,
															"nodeType": "RevertStatement",
															"src": "28459:38:0"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 999,
															"name": "initialOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 980,
															"src": "28536:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 998,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1099,
														"src": "28517:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 1000,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "28517:32:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1001,
												"nodeType": "ExpressionStatement",
												"src": "28517:32:0"
											}
										]
									},
									"documentation": {
										"id": 978,
										"nodeType": "StructuredDocumentation",
										"src": "28249:115:0",
										"text": " @dev Initializes the contract setting the address provided by the deployer as the initial owner."
									},
									"id": 1003,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 981,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 980,
												"mutability": "mutable",
												"name": "initialOwner",
												"nameLocation": "28389:12:0",
												"nodeType": "VariableDeclaration",
												"scope": 1003,
												"src": "28381:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 979,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "28381:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "28380:22:0"
									},
									"returnParameters": {
										"id": 982,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "28403:0:0"
									},
									"scope": 1100,
									"src": "28369:187:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1010,
										"nodeType": "Block",
										"src": "28665:41:0",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1006,
														"name": "_checkOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1037,
														"src": "28675:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 1007,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "28675:13:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1008,
												"nodeType": "ExpressionStatement",
												"src": "28675:13:0"
											},
											{
												"id": 1009,
												"nodeType": "PlaceholderStatement",
												"src": "28698:1:0"
											}
										]
									},
									"documentation": {
										"id": 1004,
										"nodeType": "StructuredDocumentation",
										"src": "28562:77:0",
										"text": " @dev Throws if called by any account other than the owner."
									},
									"id": 1011,
									"name": "onlyOwner",
									"nameLocation": "28653:9:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 1005,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "28662:2:0"
									},
									"src": "28644:62:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1019,
										"nodeType": "Block",
										"src": "28837:30:0",
										"statements": [
											{
												"expression": {
													"id": 1017,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 961,
													"src": "28854:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 1016,
												"id": 1018,
												"nodeType": "Return",
												"src": "28847:13:0"
											}
										]
									},
									"documentation": {
										"id": 1012,
										"nodeType": "StructuredDocumentation",
										"src": "28712:65:0",
										"text": " @dev Returns the address of the current owner."
									},
									"functionSelector": "8da5cb5b",
									"id": 1020,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nameLocation": "28791:5:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1013,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "28796:2:0"
									},
									"returnParameters": {
										"id": 1016,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1015,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1020,
												"src": "28828:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1014,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "28828:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "28827:9:0"
									},
									"scope": 1100,
									"src": "28782:85:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1036,
										"nodeType": "Block",
										"src": "28985:117:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1028,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1024,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1020,
															"src": "28999:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																"typeString": "function () view returns (address)"
															}
														},
														"id": 1025,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "28999:7:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1026,
															"name": "_msgSender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 111,
															"src": "29010:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																"typeString": "function () view returns (address)"
															}
														},
														"id": 1027,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "29010:12:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "28999:23:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1035,
												"nodeType": "IfStatement",
												"src": "28995:101:0",
												"trueBody": {
													"id": 1034,
													"nodeType": "Block",
													"src": "29024:72:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 1030,
																			"name": "_msgSender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 111,
																			"src": "29072:10:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																				"typeString": "function () view returns (address)"
																			}
																		},
																		"id": 1031,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "29072:12:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 1029,
																	"name": "OwnableUnauthorizedAccount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 966,
																	"src": "29045:26:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 1032,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "29045:40:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1033,
															"nodeType": "RevertStatement",
															"src": "29038:47:0"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1021,
										"nodeType": "StructuredDocumentation",
										"src": "28873:62:0",
										"text": " @dev Throws if the sender is not the owner."
									},
									"id": 1037,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkOwner",
									"nameLocation": "28949:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1022,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "28960:2:0"
									},
									"returnParameters": {
										"id": 1023,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "28985:0:0"
									},
									"scope": 1100,
									"src": "28940:162:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1050,
										"nodeType": "Block",
										"src": "29491:47:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1046,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "29528:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1045,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "29520:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1044,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "29520:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 1047,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "29520:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1043,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1099,
														"src": "29501:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 1048,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "29501:30:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1049,
												"nodeType": "ExpressionStatement",
												"src": "29501:30:0"
											}
										]
									},
									"documentation": {
										"id": 1038,
										"nodeType": "StructuredDocumentation",
										"src": "29108:324:0",
										"text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby disabling any functionality that is only available to the owner."
									},
									"functionSelector": "715018a6",
									"id": 1051,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1041,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1040,
												"name": "onlyOwner",
												"nameLocations": [
													"29481:9:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1011,
												"src": "29481:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "29481:9:0"
										}
									],
									"name": "renounceOwnership",
									"nameLocation": "29446:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1039,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "29463:2:0"
									},
									"returnParameters": {
										"id": 1042,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "29491:0:0"
									},
									"scope": 1100,
									"src": "29437:101:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1078,
										"nodeType": "Block",
										"src": "29757:145:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1064,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1059,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1054,
														"src": "29771:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 1062,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "29791:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 1061,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "29783:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 1060,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "29783:7:0",
																"typeDescriptions": {}
															}
														},
														"id": 1063,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "29783:10:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "29771:22:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1073,
												"nodeType": "IfStatement",
												"src": "29767:91:0",
												"trueBody": {
													"id": 1072,
													"nodeType": "Block",
													"src": "29795:63:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 1068,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "29844:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 1067,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "29836:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 1066,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "29836:7:0",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1069,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "29836:10:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 1065,
																	"name": "OwnableInvalidOwner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 971,
																	"src": "29816:19:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 1070,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "29816:31:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1071,
															"nodeType": "RevertStatement",
															"src": "29809:38:0"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1075,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1054,
															"src": "29886:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1074,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1099,
														"src": "29867:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 1076,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "29867:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1077,
												"nodeType": "ExpressionStatement",
												"src": "29867:28:0"
											}
										]
									},
									"documentation": {
										"id": 1052,
										"nodeType": "StructuredDocumentation",
										"src": "29544:138:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
									},
									"functionSelector": "f2fde38b",
									"id": 1079,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1057,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1056,
												"name": "onlyOwner",
												"nameLocations": [
													"29747:9:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1011,
												"src": "29747:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "29747:9:0"
										}
									],
									"name": "transferOwnership",
									"nameLocation": "29696:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1055,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1054,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "29722:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 1079,
												"src": "29714:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1053,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "29714:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "29713:18:0"
									},
									"returnParameters": {
										"id": 1058,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "29757:0:0"
									},
									"scope": 1100,
									"src": "29687:215:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1098,
										"nodeType": "Block",
										"src": "30119:124:0",
										"statements": [
											{
												"assignments": [
													1086
												],
												"declarations": [
													{
														"constant": false,
														"id": 1086,
														"mutability": "mutable",
														"name": "oldOwner",
														"nameLocation": "30137:8:0",
														"nodeType": "VariableDeclaration",
														"scope": 1098,
														"src": "30129:16:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1085,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "30129:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1088,
												"initialValue": {
													"id": 1087,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 961,
													"src": "30148:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "30129:25:0"
											},
											{
												"expression": {
													"id": 1091,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1089,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 961,
														"src": "30164:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1090,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1082,
														"src": "30173:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "30164:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 1092,
												"nodeType": "ExpressionStatement",
												"src": "30164:17:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1094,
															"name": "oldOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1086,
															"src": "30217:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1095,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1082,
															"src": "30227:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1093,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 977,
														"src": "30196:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 1096,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "30196:40:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1097,
												"nodeType": "EmitStatement",
												"src": "30191:45:0"
											}
										]
									},
									"documentation": {
										"id": 1080,
										"nodeType": "StructuredDocumentation",
										"src": "29908:143:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."
									},
									"id": 1099,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferOwnership",
									"nameLocation": "30065:18:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1083,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1082,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "30092:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 1099,
												"src": "30084:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1081,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "30084:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "30083:18:0"
									},
									"returnParameters": {
										"id": 1084,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "30119:0:0"
									},
									"scope": 1100,
									"src": "30056:187:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 3830,
							"src": "27807:2438:0",
							"usedErrors": [
								966,
								971
							],
							"usedEvents": [
								977
							]
						},
						{
							"id": 1101,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "30413:24:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20Permit",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1102,
								"nodeType": "StructuredDocumentation",
								"src": "30439:1963:0",
								"text": " @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all.\n ==== Security Considerations\n There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n considered as an intention to spend the allowance in any specific way. The second is that because permits have\n built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n generally recommended is:\n ```solidity\n function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n     doThing(..., value);\n }\n function doThing(..., uint256 value) public {\n     token.safeTransferFrom(msg.sender, address(this), value);\n     ...\n }\n ```\n Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n {SafeERC20-safeTransferFrom}).\n Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n contracts should have entry points that don't rely on permit."
							},
							"fullyImplemented": false,
							"id": 1135,
							"linearizedBaseContracts": [
								1135
							],
							"name": "IERC20Permit",
							"nameLocation": "32413:12:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1103,
										"nodeType": "StructuredDocumentation",
										"src": "32432:850:0",
										"text": " @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n given ``owner``'s signed approval.\n IMPORTANT: The same issues {IERC20-approve} has related to transaction\n ordering also apply here.\n Emits an {Approval} event.\n Requirements:\n - `spender` cannot be the zero address.\n - `deadline` must be a timestamp in the future.\n - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n over the EIP712-formatted function arguments.\n - the signature must use ``owner``'s current nonce (see {nonces}).\n For more information on the signature format, see the\n https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n section].\n CAUTION: See Security Considerations above."
									},
									"functionSelector": "d505accf",
									"id": 1120,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "permit",
									"nameLocation": "33296:6:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1118,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1105,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "33320:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 1120,
												"src": "33312:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1104,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "33312:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1107,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "33343:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 1120,
												"src": "33335:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1106,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "33335:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1109,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "33368:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 1120,
												"src": "33360:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1108,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "33360:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1111,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "33391:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 1120,
												"src": "33383:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1110,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "33383:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1113,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "33415:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 1120,
												"src": "33409:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1112,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "33409:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1115,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "33434:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 1120,
												"src": "33426:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1114,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "33426:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1117,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "33453:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 1120,
												"src": "33445:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1116,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "33445:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "33302:158:0"
									},
									"returnParameters": {
										"id": 1119,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "33469:0:0"
									},
									"scope": 1135,
									"src": "33287:183:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1121,
										"nodeType": "StructuredDocumentation",
										"src": "33476:294:0",
										"text": " @dev Returns the current nonce for `owner`. This value must be\n included whenever a signature is generated for {permit}.\n Every successful call to {permit} increases ``owner``'s nonce by one. This\n prevents a signature from being used multiple times."
									},
									"functionSelector": "7ecebe00",
									"id": 1128,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "nonces",
									"nameLocation": "33784:6:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1124,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1123,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "33799:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 1128,
												"src": "33791:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1122,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "33791:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "33790:15:0"
									},
									"returnParameters": {
										"id": 1127,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1126,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1128,
												"src": "33829:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1125,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "33829:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "33828:9:0"
									},
									"scope": 1135,
									"src": "33775:63:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1129,
										"nodeType": "StructuredDocumentation",
										"src": "33844:128:0",
										"text": " @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
									},
									"functionSelector": "3644e515",
									"id": 1134,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "DOMAIN_SEPARATOR",
									"nameLocation": "34039:16:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1130,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "34055:2:0"
									},
									"returnParameters": {
										"id": 1133,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1132,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1134,
												"src": "34081:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1131,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "34081:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "34080:9:0"
									},
									"scope": 1135,
									"src": "34030:60:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 3830,
							"src": "32403:1689:0",
							"usedErrors": [],
							"usedEvents": []
						},
						{
							"id": 1136,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "34238:24:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "ECDSA",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1137,
								"nodeType": "StructuredDocumentation",
								"src": "34264:205:0",
								"text": " @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n These functions can be used to verify that a message was signed by the holder\n of the private keys of a given address."
							},
							"fullyImplemented": true,
							"id": 1482,
							"linearizedBaseContracts": [
								1482
							],
							"name": "ECDSA",
							"nameLocation": "34478:5:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "ECDSA.RecoverError",
									"id": 1142,
									"members": [
										{
											"id": 1138,
											"name": "NoError",
											"nameLocation": "34518:7:0",
											"nodeType": "EnumValue",
											"src": "34518:7:0"
										},
										{
											"id": 1139,
											"name": "InvalidSignature",
											"nameLocation": "34535:16:0",
											"nodeType": "EnumValue",
											"src": "34535:16:0"
										},
										{
											"id": 1140,
											"name": "InvalidSignatureLength",
											"nameLocation": "34561:22:0",
											"nodeType": "EnumValue",
											"src": "34561:22:0"
										},
										{
											"id": 1141,
											"name": "InvalidSignatureS",
											"nameLocation": "34593:17:0",
											"nodeType": "EnumValue",
											"src": "34593:17:0"
										}
									],
									"name": "RecoverError",
									"nameLocation": "34495:12:0",
									"nodeType": "EnumDefinition",
									"src": "34490:126:0"
								},
								{
									"documentation": {
										"id": 1143,
										"nodeType": "StructuredDocumentation",
										"src": "34622:63:0",
										"text": " @dev The signature derives the `address(0)`."
									},
									"errorSelector": "f645eedf",
									"id": 1145,
									"name": "ECDSAInvalidSignature",
									"nameLocation": "34696:21:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1144,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "34717:2:0"
									},
									"src": "34690:30:0"
								},
								{
									"documentation": {
										"id": 1146,
										"nodeType": "StructuredDocumentation",
										"src": "34726:60:0",
										"text": " @dev The signature has an invalid length."
									},
									"errorSelector": "fce698f7",
									"id": 1150,
									"name": "ECDSAInvalidSignatureLength",
									"nameLocation": "34797:27:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1149,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1148,
												"mutability": "mutable",
												"name": "length",
												"nameLocation": "34833:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 1150,
												"src": "34825:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1147,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "34825:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "34824:16:0"
									},
									"src": "34791:50:0"
								},
								{
									"documentation": {
										"id": 1151,
										"nodeType": "StructuredDocumentation",
										"src": "34847:85:0",
										"text": " @dev The signature has an S value that is in the upper half order."
									},
									"errorSelector": "d78bce0c",
									"id": 1155,
									"name": "ECDSAInvalidSignatureS",
									"nameLocation": "34943:22:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1154,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1153,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "34974:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 1155,
												"src": "34966:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1152,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "34966:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "34965:11:0"
									},
									"src": "34937:40:0"
								},
								{
									"body": {
										"id": 1207,
										"nodeType": "Block",
										"src": "36368:653:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1173,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 1170,
															"name": "signature",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1160,
															"src": "36382:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1171,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "36392:6:0",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "36382:16:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "3635",
														"id": 1172,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "36402:2:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_65_by_1",
															"typeString": "int_const 65"
														},
														"value": "65"
													},
													"src": "36382:22:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1205,
													"nodeType": "Block",
													"src": "36907:108:0",
													"statements": [
														{
															"expression": {
																"components": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 1194,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "36937:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 1193,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "36929:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 1192,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "36929:7:0",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1195,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "36929:10:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"expression": {
																			"id": 1196,
																			"name": "RecoverError",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1142,
																			"src": "36941:12:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_enum$_RecoverError_$1142_$",
																				"typeString": "type(enum ECDSA.RecoverError)"
																			}
																		},
																		"id": 1197,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberLocation": "36954:22:0",
																		"memberName": "InvalidSignatureLength",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1140,
																		"src": "36941:35:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_enum$_RecoverError_$1142",
																			"typeString": "enum ECDSA.RecoverError"
																		}
																	},
																	{
																		"arguments": [
																			{
																				"expression": {
																					"id": 1200,
																					"name": "signature",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1160,
																					"src": "36986:9:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					}
																				},
																				"id": 1201,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "36996:6:0",
																				"memberName": "length",
																				"nodeType": "MemberAccess",
																				"src": "36986:16:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"id": 1199,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "36978:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_bytes32_$",
																				"typeString": "type(bytes32)"
																			},
																			"typeName": {
																				"id": 1198,
																				"name": "bytes32",
																				"nodeType": "ElementaryTypeName",
																				"src": "36978:7:0",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1202,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "36978:25:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	}
																],
																"id": 1203,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "36928:76:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1142_$_t_bytes32_$",
																	"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
																}
															},
															"functionReturnParameters": 1169,
															"id": 1204,
															"nodeType": "Return",
															"src": "36921:83:0"
														}
													]
												},
												"id": 1206,
												"nodeType": "IfStatement",
												"src": "36378:637:0",
												"trueBody": {
													"id": 1191,
													"nodeType": "Block",
													"src": "36406:495:0",
													"statements": [
														{
															"assignments": [
																1175
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1175,
																	"mutability": "mutable",
																	"name": "r",
																	"nameLocation": "36428:1:0",
																	"nodeType": "VariableDeclaration",
																	"scope": 1191,
																	"src": "36420:9:0",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	"typeName": {
																		"id": 1174,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "36420:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1176,
															"nodeType": "VariableDeclarationStatement",
															"src": "36420:9:0"
														},
														{
															"assignments": [
																1178
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1178,
																	"mutability": "mutable",
																	"name": "s",
																	"nameLocation": "36451:1:0",
																	"nodeType": "VariableDeclaration",
																	"scope": 1191,
																	"src": "36443:9:0",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	"typeName": {
																		"id": 1177,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "36443:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1179,
															"nodeType": "VariableDeclarationStatement",
															"src": "36443:9:0"
														},
														{
															"assignments": [
																1181
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1181,
																	"mutability": "mutable",
																	"name": "v",
																	"nameLocation": "36472:1:0",
																	"nodeType": "VariableDeclaration",
																	"scope": 1191,
																	"src": "36466:7:0",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	},
																	"typeName": {
																		"id": 1180,
																		"name": "uint8",
																		"nodeType": "ElementaryTypeName",
																		"src": "36466:5:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1182,
															"nodeType": "VariableDeclarationStatement",
															"src": "36466:7:0"
														},
														{
															"AST": {
																"nodeType": "YulBlock",
																"src": "36674:171:0",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "36692:32:0",
																		"value": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "signature",
																							"nodeType": "YulIdentifier",
																							"src": "36707:9:0"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "36718:4:0",
																							"type": "",
																							"value": "0x20"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "36703:3:0"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "36703:20:0"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nodeType": "YulIdentifier",
																				"src": "36697:5:0"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "36697:27:0"
																		},
																		"variableNames": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "36692:1:0"
																			}
																		]
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "36741:32:0",
																		"value": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "signature",
																							"nodeType": "YulIdentifier",
																							"src": "36756:9:0"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "36767:4:0",
																							"type": "",
																							"value": "0x40"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "36752:3:0"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "36752:20:0"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nodeType": "YulIdentifier",
																				"src": "36746:5:0"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "36746:27:0"
																		},
																		"variableNames": [
																			{
																				"name": "s",
																				"nodeType": "YulIdentifier",
																				"src": "36741:1:0"
																			}
																		]
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "36790:41:0",
																		"value": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "36800:1:0",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "signature",
																									"nodeType": "YulIdentifier",
																									"src": "36813:9:0"
																								},
																								{
																									"kind": "number",
																									"nodeType": "YulLiteral",
																									"src": "36824:4:0",
																									"type": "",
																									"value": "0x60"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "36809:3:0"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "36809:20:0"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "36803:5:0"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "36803:27:0"
																				}
																			],
																			"functionName": {
																				"name": "byte",
																				"nodeType": "YulIdentifier",
																				"src": "36795:4:0"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "36795:36:0"
																		},
																		"variableNames": [
																			{
																				"name": "v",
																				"nodeType": "YulIdentifier",
																				"src": "36790:1:0"
																			}
																		]
																	}
																]
															},
															"documentation": "@solidity memory-safe-assembly",
															"evmVersion": "shanghai",
															"externalReferences": [
																{
																	"declaration": 1175,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "36692:1:0",
																	"valueSize": 1
																},
																{
																	"declaration": 1178,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "36741:1:0",
																	"valueSize": 1
																},
																{
																	"declaration": 1160,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "36707:9:0",
																	"valueSize": 1
																},
																{
																	"declaration": 1160,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "36756:9:0",
																	"valueSize": 1
																},
																{
																	"declaration": 1160,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "36813:9:0",
																	"valueSize": 1
																},
																{
																	"declaration": 1181,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "36790:1:0",
																	"valueSize": 1
																}
															],
															"id": 1183,
															"nodeType": "InlineAssembly",
															"src": "36665:180:0"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1185,
																		"name": "hash",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1158,
																		"src": "36876:4:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	{
																		"id": 1186,
																		"name": "v",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1181,
																		"src": "36882:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	},
																	{
																		"id": 1187,
																		"name": "r",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1175,
																		"src": "36885:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	{
																		"id": 1188,
																		"name": "s",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1178,
																		"src": "36888:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		},
																		{
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		},
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		},
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	],
																	"id": 1184,
																	"name": "tryRecover",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		1208,
																		1288,
																		1396
																	],
																	"referencedDeclaration": 1396,
																	"src": "36865:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1142_$_t_bytes32_$",
																		"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError,bytes32)"
																	}
																},
																"id": 1189,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "36865:25:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1142_$_t_bytes32_$",
																	"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
																}
															},
															"functionReturnParameters": 1169,
															"id": 1190,
															"nodeType": "Return",
															"src": "36858:32:0"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1156,
										"nodeType": "StructuredDocumentation",
										"src": "34983:1267:0",
										"text": " @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\n return address(0) without also returning an error description. Errors are documented using an enum (error type)\n and a bytes32 providing additional information about the error.\n If no error is returned, then the address can be used for verification purposes.\n The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n Documentation for signature generation:\n - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]"
									},
									"id": 1208,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryRecover",
									"nameLocation": "36264:10:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1161,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1158,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "36283:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 1208,
												"src": "36275:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1157,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "36275:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1160,
												"mutability": "mutable",
												"name": "signature",
												"nameLocation": "36302:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 1208,
												"src": "36289:22:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1159,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "36289:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "36274:38:0"
									},
									"returnParameters": {
										"id": 1169,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1163,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1208,
												"src": "36336:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1162,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "36336:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1166,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1208,
												"src": "36345:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_RecoverError_$1142",
													"typeString": "enum ECDSA.RecoverError"
												},
												"typeName": {
													"id": 1165,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1164,
														"name": "RecoverError",
														"nameLocations": [
															"36345:12:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1142,
														"src": "36345:12:0"
													},
													"referencedDeclaration": 1142,
													"src": "36345:12:0",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_RecoverError_$1142",
														"typeString": "enum ECDSA.RecoverError"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1168,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1208,
												"src": "36359:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1167,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "36359:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "36335:32:0"
									},
									"scope": 1482,
									"src": "36255:766:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1237,
										"nodeType": "Block",
										"src": "37915:168:0",
										"statements": [
											{
												"assignments": [
													1219,
													1222,
													1224
												],
												"declarations": [
													{
														"constant": false,
														"id": 1219,
														"mutability": "mutable",
														"name": "recovered",
														"nameLocation": "37934:9:0",
														"nodeType": "VariableDeclaration",
														"scope": 1237,
														"src": "37926:17:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1218,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "37926:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1222,
														"mutability": "mutable",
														"name": "error",
														"nameLocation": "37958:5:0",
														"nodeType": "VariableDeclaration",
														"scope": 1237,
														"src": "37945:18:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$1142",
															"typeString": "enum ECDSA.RecoverError"
														},
														"typeName": {
															"id": 1221,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1220,
																"name": "RecoverError",
																"nameLocations": [
																	"37945:12:0"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 1142,
																"src": "37945:12:0"
															},
															"referencedDeclaration": 1142,
															"src": "37945:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1142",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1224,
														"mutability": "mutable",
														"name": "errorArg",
														"nameLocation": "37973:8:0",
														"nodeType": "VariableDeclaration",
														"scope": 1237,
														"src": "37965:16:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 1223,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "37965:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1229,
												"initialValue": {
													"arguments": [
														{
															"id": 1226,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1211,
															"src": "37996:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1227,
															"name": "signature",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1213,
															"src": "38002:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1225,
														"name": "tryRecover",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1208,
															1288,
															1396
														],
														"referencedDeclaration": 1208,
														"src": "37985:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_address_$_t_enum$_RecoverError_$1142_$_t_bytes32_$",
															"typeString": "function (bytes32,bytes memory) pure returns (address,enum ECDSA.RecoverError,bytes32)"
														}
													},
													"id": 1228,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "37985:27:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1142_$_t_bytes32_$",
														"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "37925:87:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1231,
															"name": "error",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1222,
															"src": "38034:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1142",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														{
															"id": 1232,
															"name": "errorArg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1224,
															"src": "38041:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_enum$_RecoverError_$1142",
																"typeString": "enum ECDSA.RecoverError"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 1230,
														"name": "_throwError",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1481,
														"src": "38022:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_enum$_RecoverError_$1142_$_t_bytes32_$returns$__$",
															"typeString": "function (enum ECDSA.RecoverError,bytes32) pure"
														}
													},
													"id": 1233,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "38022:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1234,
												"nodeType": "ExpressionStatement",
												"src": "38022:28:0"
											},
											{
												"expression": {
													"id": 1235,
													"name": "recovered",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1219,
													"src": "38067:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 1217,
												"id": 1236,
												"nodeType": "Return",
												"src": "38060:16:0"
											}
										]
									},
									"documentation": {
										"id": 1209,
										"nodeType": "StructuredDocumentation",
										"src": "37027:796:0",
										"text": " @dev Returns the address that signed a hashed message (`hash`) with\n `signature`. This address can then be used for verification purposes.\n The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it."
									},
									"id": 1238,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "recover",
									"nameLocation": "37837:7:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1214,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1211,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "37853:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 1238,
												"src": "37845:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1210,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "37845:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1213,
												"mutability": "mutable",
												"name": "signature",
												"nameLocation": "37872:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 1238,
												"src": "37859:22:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1212,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "37859:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "37844:38:0"
									},
									"returnParameters": {
										"id": 1217,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1216,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1238,
												"src": "37906:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1215,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "37906:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "37905:9:0"
									},
									"scope": 1482,
									"src": "37828:255:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1287,
										"nodeType": "Block",
										"src": "38411:342:0",
										"statements": [
											{
												"id": 1286,
												"nodeType": "UncheckedBlock",
												"src": "38421:326:0",
												"statements": [
													{
														"assignments": [
															1256
														],
														"declarations": [
															{
																"constant": false,
																"id": 1256,
																"mutability": "mutable",
																"name": "s",
																"nameLocation": "38453:1:0",
																"nodeType": "VariableDeclaration",
																"scope": 1286,
																"src": "38445:9:0",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 1255,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "38445:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1263,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															"id": 1262,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1257,
																"name": "vs",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1245,
																"src": "38457:2:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "307837666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666",
																		"id": 1260,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "38470:66:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1",
																			"typeString": "int_const 5789...(69 digits omitted)...9967"
																		},
																		"value": "0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1",
																			"typeString": "int_const 5789...(69 digits omitted)...9967"
																		}
																	],
																	"id": 1259,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "38462:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes32_$",
																		"typeString": "type(bytes32)"
																	},
																	"typeName": {
																		"id": 1258,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "38462:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 1261,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "38462:75:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"src": "38457:80:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "38445:92:0"
													},
													{
														"assignments": [
															1265
														],
														"declarations": [
															{
																"constant": false,
																"id": 1265,
																"mutability": "mutable",
																"name": "v",
																"nameLocation": "38654:1:0",
																"nodeType": "VariableDeclaration",
																"scope": 1286,
																"src": "38648:7:0",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																},
																"typeName": {
																	"id": 1264,
																	"name": "uint8",
																	"nodeType": "ElementaryTypeName",
																	"src": "38648:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1278,
														"initialValue": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1276,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"components": [
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1273,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"arguments": [
																						{
																							"id": 1270,
																							"name": "vs",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1245,
																							"src": "38673:2:0",
																							"typeDescriptions": {
																								"typeIdentifier": "t_bytes32",
																								"typeString": "bytes32"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_bytes32",
																								"typeString": "bytes32"
																							}
																						],
																						"id": 1269,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "38665:7:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_uint256_$",
																							"typeString": "type(uint256)"
																						},
																						"typeName": {
																							"id": 1268,
																							"name": "uint256",
																							"nodeType": "ElementaryTypeName",
																							"src": "38665:7:0",
																							"typeDescriptions": {}
																						}
																					},
																					"id": 1271,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "typeConversion",
																					"lValueRequested": false,
																					"nameLocations": [],
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "38665:11:0",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": ">>",
																				"rightExpression": {
																					"hexValue": "323535",
																					"id": 1272,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "38680:3:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_255_by_1",
																						"typeString": "int_const 255"
																					},
																					"value": "255"
																				},
																				"src": "38665:18:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"id": 1274,
																		"isConstant": false,
																		"isInlineArray": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "TupleExpression",
																		"src": "38664:20:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "+",
																	"rightExpression": {
																		"hexValue": "3237",
																		"id": 1275,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "38687:2:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_27_by_1",
																			"typeString": "int_const 27"
																		},
																		"value": "27"
																	},
																	"src": "38664:25:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1267,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "38658:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint8_$",
																	"typeString": "type(uint8)"
																},
																"typeName": {
																	"id": 1266,
																	"name": "uint8",
																	"nodeType": "ElementaryTypeName",
																	"src": "38658:5:0",
																	"typeDescriptions": {}
																}
															},
															"id": 1277,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "38658:32:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "38648:42:0"
													},
													{
														"expression": {
															"arguments": [
																{
																	"id": 1280,
																	"name": "hash",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1241,
																	"src": "38722:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"id": 1281,
																	"name": "v",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1265,
																	"src": "38728:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																{
																	"id": 1282,
																	"name": "r",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1243,
																	"src": "38731:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"id": 1283,
																	"name": "s",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1256,
																	"src": "38734:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																],
																"id": 1279,
																"name": "tryRecover",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	1208,
																	1288,
																	1396
																],
																"referencedDeclaration": 1396,
																"src": "38711:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1142_$_t_bytes32_$",
																	"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError,bytes32)"
																}
															},
															"id": 1284,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "38711:25:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1142_$_t_bytes32_$",
																"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
															}
														},
														"functionReturnParameters": 1254,
														"id": 1285,
														"nodeType": "Return",
														"src": "38704:32:0"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1239,
										"nodeType": "StructuredDocumentation",
										"src": "38089:205:0",
										"text": " @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]"
									},
									"id": 1288,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryRecover",
									"nameLocation": "38308:10:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1246,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1241,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "38327:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 1288,
												"src": "38319:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1240,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "38319:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1243,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "38341:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 1288,
												"src": "38333:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1242,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "38333:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1245,
												"mutability": "mutable",
												"name": "vs",
												"nameLocation": "38352:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 1288,
												"src": "38344:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1244,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "38344:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "38318:37:0"
									},
									"returnParameters": {
										"id": 1254,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1248,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1288,
												"src": "38379:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1247,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "38379:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1251,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1288,
												"src": "38388:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_RecoverError_$1142",
													"typeString": "enum ECDSA.RecoverError"
												},
												"typeName": {
													"id": 1250,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1249,
														"name": "RecoverError",
														"nameLocations": [
															"38388:12:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1142,
														"src": "38388:12:0"
													},
													"referencedDeclaration": 1142,
													"src": "38388:12:0",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_RecoverError_$1142",
														"typeString": "enum ECDSA.RecoverError"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1253,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1288,
												"src": "38402:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1252,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "38402:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "38378:32:0"
									},
									"scope": 1482,
									"src": "38299:454:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1320,
										"nodeType": "Block",
										"src": "38966:164:0",
										"statements": [
											{
												"assignments": [
													1301,
													1304,
													1306
												],
												"declarations": [
													{
														"constant": false,
														"id": 1301,
														"mutability": "mutable",
														"name": "recovered",
														"nameLocation": "38985:9:0",
														"nodeType": "VariableDeclaration",
														"scope": 1320,
														"src": "38977:17:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1300,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "38977:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1304,
														"mutability": "mutable",
														"name": "error",
														"nameLocation": "39009:5:0",
														"nodeType": "VariableDeclaration",
														"scope": 1320,
														"src": "38996:18:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$1142",
															"typeString": "enum ECDSA.RecoverError"
														},
														"typeName": {
															"id": 1303,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1302,
																"name": "RecoverError",
																"nameLocations": [
																	"38996:12:0"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 1142,
																"src": "38996:12:0"
															},
															"referencedDeclaration": 1142,
															"src": "38996:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1142",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1306,
														"mutability": "mutable",
														"name": "errorArg",
														"nameLocation": "39024:8:0",
														"nodeType": "VariableDeclaration",
														"scope": 1320,
														"src": "39016:16:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 1305,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "39016:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1312,
												"initialValue": {
													"arguments": [
														{
															"id": 1308,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1291,
															"src": "39047:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1309,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1293,
															"src": "39053:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1310,
															"name": "vs",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1295,
															"src": "39056:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 1307,
														"name": "tryRecover",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1208,
															1288,
															1396
														],
														"referencedDeclaration": 1288,
														"src": "39036:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1142_$_t_bytes32_$",
															"typeString": "function (bytes32,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError,bytes32)"
														}
													},
													"id": 1311,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "39036:23:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1142_$_t_bytes32_$",
														"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "38976:83:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1314,
															"name": "error",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1304,
															"src": "39081:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1142",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														{
															"id": 1315,
															"name": "errorArg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1306,
															"src": "39088:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_enum$_RecoverError_$1142",
																"typeString": "enum ECDSA.RecoverError"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 1313,
														"name": "_throwError",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1481,
														"src": "39069:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_enum$_RecoverError_$1142_$_t_bytes32_$returns$__$",
															"typeString": "function (enum ECDSA.RecoverError,bytes32) pure"
														}
													},
													"id": 1316,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "39069:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1317,
												"nodeType": "ExpressionStatement",
												"src": "39069:28:0"
											},
											{
												"expression": {
													"id": 1318,
													"name": "recovered",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1301,
													"src": "39114:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 1299,
												"id": 1319,
												"nodeType": "Return",
												"src": "39107:16:0"
											}
										]
									},
									"documentation": {
										"id": 1289,
										"nodeType": "StructuredDocumentation",
										"src": "38759:116:0",
										"text": " @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately."
									},
									"id": 1321,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "recover",
									"nameLocation": "38889:7:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1296,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1291,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "38905:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 1321,
												"src": "38897:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1290,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "38897:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1293,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "38919:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 1321,
												"src": "38911:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1292,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "38911:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1295,
												"mutability": "mutable",
												"name": "vs",
												"nameLocation": "38930:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 1321,
												"src": "38922:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1294,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "38922:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "38896:37:0"
									},
									"returnParameters": {
										"id": 1299,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1298,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1321,
												"src": "38957:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1297,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "38957:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "38956:9:0"
									},
									"scope": 1482,
									"src": "38880:250:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1395,
										"nodeType": "Block",
										"src": "39424:1372:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1345,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 1342,
																"name": "s",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1330,
																"src": "40320:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															],
															"id": 1341,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "40312:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint256_$",
																"typeString": "type(uint256)"
															},
															"typeName": {
																"id": 1340,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "40312:7:0",
																"typeDescriptions": {}
															}
														},
														"id": 1343,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "40312:10:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "307837464646464646464646464646464646464646464646464646464646464646463544353736453733353741343530314444464539324634363638314232304130",
														"id": 1344,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "40325:66:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_57896044618658097711785492504343953926418782139537452191302581570759080747168_by_1",
															"typeString": "int_const 5789...(69 digits omitted)...7168"
														},
														"value": "0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0"
													},
													"src": "40312:79:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1356,
												"nodeType": "IfStatement",
												"src": "40308:164:0",
												"trueBody": {
													"id": 1355,
													"nodeType": "Block",
													"src": "40393:79:0",
													"statements": [
														{
															"expression": {
																"components": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 1348,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "40423:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 1347,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "40415:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 1346,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "40415:7:0",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1349,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "40415:10:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"expression": {
																			"id": 1350,
																			"name": "RecoverError",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1142,
																			"src": "40427:12:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_enum$_RecoverError_$1142_$",
																				"typeString": "type(enum ECDSA.RecoverError)"
																			}
																		},
																		"id": 1351,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberLocation": "40440:17:0",
																		"memberName": "InvalidSignatureS",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1141,
																		"src": "40427:30:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_enum$_RecoverError_$1142",
																			"typeString": "enum ECDSA.RecoverError"
																		}
																	},
																	{
																		"id": 1352,
																		"name": "s",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1330,
																		"src": "40459:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	}
																],
																"id": 1353,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "40414:47:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1142_$_t_bytes32_$",
																	"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
																}
															},
															"functionReturnParameters": 1339,
															"id": 1354,
															"nodeType": "Return",
															"src": "40407:54:0"
														}
													]
												}
											},
											{
												"assignments": [
													1358
												],
												"declarations": [
													{
														"constant": false,
														"id": 1358,
														"mutability": "mutable",
														"name": "signer",
														"nameLocation": "40574:6:0",
														"nodeType": "VariableDeclaration",
														"scope": 1395,
														"src": "40566:14:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1357,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "40566:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1365,
												"initialValue": {
													"arguments": [
														{
															"id": 1360,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1324,
															"src": "40593:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1361,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1326,
															"src": "40599:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"id": 1362,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1328,
															"src": "40602:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1363,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1330,
															"src": "40605:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 1359,
														"name": "ecrecover",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967290,
														"src": "40583:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_ecrecover_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$",
															"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address)"
														}
													},
													"id": 1364,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "40583:24:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "40566:41:0"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1371,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1366,
														"name": "signer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1358,
														"src": "40621:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 1369,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "40639:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 1368,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "40631:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 1367,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "40631:7:0",
																"typeDescriptions": {}
															}
														},
														"id": 1370,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "40631:10:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "40621:20:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1385,
												"nodeType": "IfStatement",
												"src": "40617:113:0",
												"trueBody": {
													"id": 1384,
													"nodeType": "Block",
													"src": "40643:87:0",
													"statements": [
														{
															"expression": {
																"components": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 1374,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "40673:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 1373,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "40665:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 1372,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "40665:7:0",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1375,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "40665:10:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"expression": {
																			"id": 1376,
																			"name": "RecoverError",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1142,
																			"src": "40677:12:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_enum$_RecoverError_$1142_$",
																				"typeString": "type(enum ECDSA.RecoverError)"
																			}
																		},
																		"id": 1377,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberLocation": "40690:16:0",
																		"memberName": "InvalidSignature",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1139,
																		"src": "40677:29:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_enum$_RecoverError_$1142",
																			"typeString": "enum ECDSA.RecoverError"
																		}
																	},
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 1380,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "40716:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 1379,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "40708:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_bytes32_$",
																				"typeString": "type(bytes32)"
																			},
																			"typeName": {
																				"id": 1378,
																				"name": "bytes32",
																				"nodeType": "ElementaryTypeName",
																				"src": "40708:7:0",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1381,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "40708:10:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	}
																],
																"id": 1382,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "40664:55:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1142_$_t_bytes32_$",
																	"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
																}
															},
															"functionReturnParameters": 1339,
															"id": 1383,
															"nodeType": "Return",
															"src": "40657:62:0"
														}
													]
												}
											},
											{
												"expression": {
													"components": [
														{
															"id": 1386,
															"name": "signer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1358,
															"src": "40748:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"id": 1387,
																"name": "RecoverError",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1142,
																"src": "40756:12:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_enum$_RecoverError_$1142_$",
																	"typeString": "type(enum ECDSA.RecoverError)"
																}
															},
															"id": 1388,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "40769:7:0",
															"memberName": "NoError",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1138,
															"src": "40756:20:0",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1142",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1391,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "40786:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1390,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "40778:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes32_$",
																	"typeString": "type(bytes32)"
																},
																"typeName": {
																	"id": 1389,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "40778:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 1392,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "40778:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"id": 1393,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "40747:42:0",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1142_$_t_bytes32_$",
														"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
													}
												},
												"functionReturnParameters": 1339,
												"id": 1394,
												"nodeType": "Return",
												"src": "40740:49:0"
											}
										]
									},
									"documentation": {
										"id": 1322,
										"nodeType": "StructuredDocumentation",
										"src": "39136:125:0",
										"text": " @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n `r` and `s` signature fields separately."
									},
									"id": 1396,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryRecover",
									"nameLocation": "39275:10:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1331,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1324,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "39303:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 1396,
												"src": "39295:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1323,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "39295:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1326,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "39323:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 1396,
												"src": "39317:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1325,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "39317:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1328,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "39342:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 1396,
												"src": "39334:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1327,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "39334:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1330,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "39361:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 1396,
												"src": "39353:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1329,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "39353:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "39285:83:0"
									},
									"returnParameters": {
										"id": 1339,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1333,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1396,
												"src": "39392:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1332,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "39392:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1336,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1396,
												"src": "39401:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_RecoverError_$1142",
													"typeString": "enum ECDSA.RecoverError"
												},
												"typeName": {
													"id": 1335,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1334,
														"name": "RecoverError",
														"nameLocations": [
															"39401:12:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1142,
														"src": "39401:12:0"
													},
													"referencedDeclaration": 1142,
													"src": "39401:12:0",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_RecoverError_$1142",
														"typeString": "enum ECDSA.RecoverError"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1338,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1396,
												"src": "39415:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1337,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "39415:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "39391:32:0"
									},
									"scope": 1482,
									"src": "39266:1530:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1431,
										"nodeType": "Block",
										"src": "41023:166:0",
										"statements": [
											{
												"assignments": [
													1411,
													1414,
													1416
												],
												"declarations": [
													{
														"constant": false,
														"id": 1411,
														"mutability": "mutable",
														"name": "recovered",
														"nameLocation": "41042:9:0",
														"nodeType": "VariableDeclaration",
														"scope": 1431,
														"src": "41034:17:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1410,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "41034:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1414,
														"mutability": "mutable",
														"name": "error",
														"nameLocation": "41066:5:0",
														"nodeType": "VariableDeclaration",
														"scope": 1431,
														"src": "41053:18:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$1142",
															"typeString": "enum ECDSA.RecoverError"
														},
														"typeName": {
															"id": 1413,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1412,
																"name": "RecoverError",
																"nameLocations": [
																	"41053:12:0"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 1142,
																"src": "41053:12:0"
															},
															"referencedDeclaration": 1142,
															"src": "41053:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1142",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1416,
														"mutability": "mutable",
														"name": "errorArg",
														"nameLocation": "41081:8:0",
														"nodeType": "VariableDeclaration",
														"scope": 1431,
														"src": "41073:16:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 1415,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "41073:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1423,
												"initialValue": {
													"arguments": [
														{
															"id": 1418,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1399,
															"src": "41104:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1419,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1401,
															"src": "41110:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"id": 1420,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1403,
															"src": "41113:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1421,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1405,
															"src": "41116:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 1417,
														"name": "tryRecover",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1208,
															1288,
															1396
														],
														"referencedDeclaration": 1396,
														"src": "41093:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1142_$_t_bytes32_$",
															"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError,bytes32)"
														}
													},
													"id": 1422,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "41093:25:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1142_$_t_bytes32_$",
														"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "41033:85:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1425,
															"name": "error",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1414,
															"src": "41140:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1142",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														{
															"id": 1426,
															"name": "errorArg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1416,
															"src": "41147:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_enum$_RecoverError_$1142",
																"typeString": "enum ECDSA.RecoverError"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 1424,
														"name": "_throwError",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1481,
														"src": "41128:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_enum$_RecoverError_$1142_$_t_bytes32_$returns$__$",
															"typeString": "function (enum ECDSA.RecoverError,bytes32) pure"
														}
													},
													"id": 1427,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "41128:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1428,
												"nodeType": "ExpressionStatement",
												"src": "41128:28:0"
											},
											{
												"expression": {
													"id": 1429,
													"name": "recovered",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1411,
													"src": "41173:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 1409,
												"id": 1430,
												"nodeType": "Return",
												"src": "41166:16:0"
											}
										]
									},
									"documentation": {
										"id": 1397,
										"nodeType": "StructuredDocumentation",
										"src": "40802:122:0",
										"text": " @dev Overload of {ECDSA-recover} that receives the `v`,\n `r` and `s` signature fields separately."
									},
									"id": 1432,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "recover",
									"nameLocation": "40938:7:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1406,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1399,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "40954:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 1432,
												"src": "40946:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1398,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "40946:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1401,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "40966:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 1432,
												"src": "40960:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1400,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "40960:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1403,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "40977:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 1432,
												"src": "40969:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1402,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "40969:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1405,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "40988:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 1432,
												"src": "40980:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1404,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "40980:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "40945:45:0"
									},
									"returnParameters": {
										"id": 1409,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1408,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1432,
												"src": "41014:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1407,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "41014:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "41013:9:0"
									},
									"scope": 1482,
									"src": "40929:260:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1480,
										"nodeType": "Block",
										"src": "41394:460:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_enum$_RecoverError_$1142",
														"typeString": "enum ECDSA.RecoverError"
													},
													"id": 1444,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1441,
														"name": "error",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1436,
														"src": "41408:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$1142",
															"typeString": "enum ECDSA.RecoverError"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"expression": {
															"id": 1442,
															"name": "RecoverError",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1142,
															"src": "41417:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_enum$_RecoverError_$1142_$",
																"typeString": "type(enum ECDSA.RecoverError)"
															}
														},
														"id": 1443,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "41430:7:0",
														"memberName": "NoError",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1138,
														"src": "41417:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$1142",
															"typeString": "enum ECDSA.RecoverError"
														}
													},
													"src": "41408:29:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_enum$_RecoverError_$1142",
															"typeString": "enum ECDSA.RecoverError"
														},
														"id": 1450,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1447,
															"name": "error",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1436,
															"src": "41504:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1142",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"expression": {
																"id": 1448,
																"name": "RecoverError",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1142,
																"src": "41513:12:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_enum$_RecoverError_$1142_$",
																	"typeString": "type(enum ECDSA.RecoverError)"
																}
															},
															"id": 1449,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "41526:16:0",
															"memberName": "InvalidSignature",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1139,
															"src": "41513:29:0",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1142",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"src": "41504:38:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseBody": {
														"condition": {
															"commonType": {
																"typeIdentifier": "t_enum$_RecoverError_$1142",
																"typeString": "enum ECDSA.RecoverError"
															},
															"id": 1458,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1455,
																"name": "error",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1436,
																"src": "41609:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_RecoverError_$1142",
																	"typeString": "enum ECDSA.RecoverError"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"expression": {
																	"id": 1456,
																	"name": "RecoverError",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1142,
																	"src": "41618:12:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_enum$_RecoverError_$1142_$",
																		"typeString": "type(enum ECDSA.RecoverError)"
																	}
																},
																"id": 1457,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "41631:22:0",
																"memberName": "InvalidSignatureLength",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1140,
																"src": "41618:35:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_RecoverError_$1142",
																	"typeString": "enum ECDSA.RecoverError"
																}
															},
															"src": "41609:44:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"falseBody": {
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_enum$_RecoverError_$1142",
																	"typeString": "enum ECDSA.RecoverError"
																},
																"id": 1470,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1467,
																	"name": "error",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1436,
																	"src": "41743:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_enum$_RecoverError_$1142",
																		"typeString": "enum ECDSA.RecoverError"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"expression": {
																		"id": 1468,
																		"name": "RecoverError",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1142,
																		"src": "41752:12:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_enum$_RecoverError_$1142_$",
																			"typeString": "type(enum ECDSA.RecoverError)"
																		}
																	},
																	"id": 1469,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberLocation": "41765:17:0",
																	"memberName": "InvalidSignatureS",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1141,
																	"src": "41752:30:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_enum$_RecoverError_$1142",
																		"typeString": "enum ECDSA.RecoverError"
																	}
																},
																"src": "41743:39:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1476,
															"nodeType": "IfStatement",
															"src": "41739:109:0",
															"trueBody": {
																"id": 1475,
																"nodeType": "Block",
																"src": "41784:64:0",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [
																				{
																					"id": 1472,
																					"name": "errorArg",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1438,
																					"src": "41828:8:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes32",
																						"typeString": "bytes32"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_bytes32",
																						"typeString": "bytes32"
																					}
																				],
																				"id": 1471,
																				"name": "ECDSAInvalidSignatureS",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1155,
																				"src": "41805:22:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$_t_bytes32_$returns$__$",
																					"typeString": "function (bytes32) pure"
																				}
																			},
																			"id": 1473,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "41805:32:0",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 1474,
																		"nodeType": "RevertStatement",
																		"src": "41798:39:0"
																	}
																]
															}
														},
														"id": 1477,
														"nodeType": "IfStatement",
														"src": "41605:243:0",
														"trueBody": {
															"id": 1466,
															"nodeType": "Block",
															"src": "41655:78:0",
															"statements": [
																{
																	"errorCall": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"id": 1462,
																						"name": "errorArg",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1438,
																						"src": "41712:8:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						}
																					],
																					"id": 1461,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "41704:7:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_uint256_$",
																						"typeString": "type(uint256)"
																					},
																					"typeName": {
																						"id": 1460,
																						"name": "uint256",
																						"nodeType": "ElementaryTypeName",
																						"src": "41704:7:0",
																						"typeDescriptions": {}
																					}
																				},
																				"id": 1463,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "typeConversion",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "41704:17:0",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"id": 1459,
																			"name": "ECDSAInvalidSignatureLength",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1150,
																			"src": "41676:27:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_error_pure$_t_uint256_$returns$__$",
																				"typeString": "function (uint256) pure"
																			}
																		},
																		"id": 1464,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "41676:46:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_tuple$__$",
																			"typeString": "tuple()"
																		}
																	},
																	"id": 1465,
																	"nodeType": "RevertStatement",
																	"src": "41669:53:0"
																}
															]
														}
													},
													"id": 1478,
													"nodeType": "IfStatement",
													"src": "41500:348:0",
													"trueBody": {
														"id": 1454,
														"nodeType": "Block",
														"src": "41544:55:0",
														"statements": [
															{
																"errorCall": {
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"id": 1451,
																		"name": "ECDSAInvalidSignature",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1145,
																		"src": "41565:21:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_error_pure$__$returns$__$",
																			"typeString": "function () pure"
																		}
																	},
																	"id": 1452,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "41565:23:0",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$__$",
																		"typeString": "tuple()"
																	}
																},
																"id": 1453,
																"nodeType": "RevertStatement",
																"src": "41558:30:0"
															}
														]
													}
												},
												"id": 1479,
												"nodeType": "IfStatement",
												"src": "41404:444:0",
												"trueBody": {
													"id": 1446,
													"nodeType": "Block",
													"src": "41439:55:0",
													"statements": [
														{
															"functionReturnParameters": 1440,
															"id": 1445,
															"nodeType": "Return",
															"src": "41453:7:0"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1433,
										"nodeType": "StructuredDocumentation",
										"src": "41195:122:0",
										"text": " @dev Optionally reverts with the corresponding custom error according to the `error` argument provided."
									},
									"id": 1481,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_throwError",
									"nameLocation": "41331:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1439,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1436,
												"mutability": "mutable",
												"name": "error",
												"nameLocation": "41356:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 1481,
												"src": "41343:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_RecoverError_$1142",
													"typeString": "enum ECDSA.RecoverError"
												},
												"typeName": {
													"id": 1435,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1434,
														"name": "RecoverError",
														"nameLocations": [
															"41343:12:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1142,
														"src": "41343:12:0"
													},
													"referencedDeclaration": 1142,
													"src": "41343:12:0",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_RecoverError_$1142",
														"typeString": "enum ECDSA.RecoverError"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1438,
												"mutability": "mutable",
												"name": "errorArg",
												"nameLocation": "41371:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 1481,
												"src": "41363:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1437,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "41363:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "41342:38:0"
									},
									"returnParameters": {
										"id": 1440,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "41394:0:0"
									},
									"scope": 1482,
									"src": "41322:532:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 3830,
							"src": "34470:7386:0",
							"usedErrors": [
								1145,
								1150,
								1155
							],
							"usedEvents": []
						},
						{
							"id": 1483,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "41984:24:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Math",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1484,
								"nodeType": "StructuredDocumentation",
								"src": "42010:73:0",
								"text": " @dev Standard math utilities missing in the Solidity language."
							},
							"fullyImplemented": true,
							"id": 2535,
							"linearizedBaseContracts": [
								2535
							],
							"name": "Math",
							"nameLocation": "42092:4:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1485,
										"nodeType": "StructuredDocumentation",
										"src": "42103:50:0",
										"text": " @dev Muldiv operation overflow."
									},
									"errorSelector": "227bc153",
									"id": 1487,
									"name": "MathOverflowedMulDiv",
									"nameLocation": "42164:20:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1486,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "42184:2:0"
									},
									"src": "42158:29:0"
								},
								{
									"canonicalName": "Math.Rounding",
									"id": 1492,
									"members": [
										{
											"id": 1488,
											"name": "Floor",
											"nameLocation": "42217:5:0",
											"nodeType": "EnumValue",
											"src": "42217:5:0"
										},
										{
											"id": 1489,
											"name": "Ceil",
											"nameLocation": "42260:4:0",
											"nodeType": "EnumValue",
											"src": "42260:4:0"
										},
										{
											"id": 1490,
											"name": "Trunc",
											"nameLocation": "42302:5:0",
											"nodeType": "EnumValue",
											"src": "42302:5:0"
										},
										{
											"id": 1491,
											"name": "Expand",
											"nameLocation": "42332:6:0",
											"nodeType": "EnumValue",
											"src": "42332:6:0"
										}
									],
									"name": "Rounding",
									"nameLocation": "42198:8:0",
									"nodeType": "EnumDefinition",
									"src": "42193:169:0"
								},
								{
									"body": {
										"id": 1523,
										"nodeType": "Block",
										"src": "42542:140:0",
										"statements": [
											{
												"id": 1522,
												"nodeType": "UncheckedBlock",
												"src": "42552:124:0",
												"statements": [
													{
														"assignments": [
															1505
														],
														"declarations": [
															{
																"constant": false,
																"id": 1505,
																"mutability": "mutable",
																"name": "c",
																"nameLocation": "42584:1:0",
																"nodeType": "VariableDeclaration",
																"scope": 1522,
																"src": "42576:9:0",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1504,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "42576:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1509,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1508,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1506,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1495,
																"src": "42588:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"id": 1507,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1497,
																"src": "42592:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "42588:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "42576:17:0"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1512,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1510,
																"name": "c",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1505,
																"src": "42611:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"id": 1511,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1495,
																"src": "42615:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "42611:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1517,
														"nodeType": "IfStatement",
														"src": "42607:28:0",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 1513,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "42626:5:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 1514,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "42633:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 1515,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "42625:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 1503,
															"id": 1516,
															"nodeType": "Return",
															"src": "42618:17:0"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 1518,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "42657:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"id": 1519,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1505,
																	"src": "42663:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 1520,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "42656:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 1503,
														"id": 1521,
														"nodeType": "Return",
														"src": "42649:16:0"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1493,
										"nodeType": "StructuredDocumentation",
										"src": "42368:93:0",
										"text": " @dev Returns the addition of two unsigned integers, with an overflow flag."
									},
									"id": 1524,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryAdd",
									"nameLocation": "42475:6:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1498,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1495,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "42490:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 1524,
												"src": "42482:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1494,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "42482:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1497,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "42501:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 1524,
												"src": "42493:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1496,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "42493:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "42481:22:0"
									},
									"returnParameters": {
										"id": 1503,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1500,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1524,
												"src": "42527:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1499,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "42527:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1502,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1524,
												"src": "42533:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1501,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "42533:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "42526:15:0"
									},
									"scope": 2535,
									"src": "42466:216:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1551,
										"nodeType": "Block",
										"src": "42865:113:0",
										"statements": [
											{
												"id": 1550,
												"nodeType": "UncheckedBlock",
												"src": "42875:97:0",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1538,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1536,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1529,
																"src": "42903:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"id": 1537,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1527,
																"src": "42907:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "42903:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1543,
														"nodeType": "IfStatement",
														"src": "42899:28:0",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 1539,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "42918:5:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 1540,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "42925:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 1541,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "42917:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 1535,
															"id": 1542,
															"nodeType": "Return",
															"src": "42910:17:0"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 1544,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "42949:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1547,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1545,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1527,
																		"src": "42955:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"id": 1546,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1529,
																		"src": "42959:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "42955:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 1548,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "42948:13:0",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 1535,
														"id": 1549,
														"nodeType": "Return",
														"src": "42941:20:0"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1525,
										"nodeType": "StructuredDocumentation",
										"src": "42688:96:0",
										"text": " @dev Returns the subtraction of two unsigned integers, with an overflow flag."
									},
									"id": 1552,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "trySub",
									"nameLocation": "42798:6:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1530,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1527,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "42813:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 1552,
												"src": "42805:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1526,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "42805:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1529,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "42824:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 1552,
												"src": "42816:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1528,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "42816:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "42804:22:0"
									},
									"returnParameters": {
										"id": 1535,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1532,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1552,
												"src": "42850:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1531,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "42850:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1534,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1552,
												"src": "42856:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1533,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "42856:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "42849:15:0"
									},
									"scope": 2535,
									"src": "42789:189:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1593,
										"nodeType": "Block",
										"src": "43164:417:0",
										"statements": [
											{
												"id": 1592,
												"nodeType": "UncheckedBlock",
												"src": "43174:401:0",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1566,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1564,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1555,
																"src": "43432:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 1565,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "43437:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "43432:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1571,
														"nodeType": "IfStatement",
														"src": "43428:28:0",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "74727565",
																		"id": 1567,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "43448:4:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "true"
																	},
																	{
																		"hexValue": "30",
																		"id": 1568,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "43454:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 1569,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "43447:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 1563,
															"id": 1570,
															"nodeType": "Return",
															"src": "43440:16:0"
														}
													},
													{
														"assignments": [
															1573
														],
														"declarations": [
															{
																"constant": false,
																"id": 1573,
																"mutability": "mutable",
																"name": "c",
																"nameLocation": "43478:1:0",
																"nodeType": "VariableDeclaration",
																"scope": 1592,
																"src": "43470:9:0",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1572,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "43470:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1577,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1576,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1574,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1555,
																"src": "43482:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 1575,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1557,
																"src": "43486:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "43482:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "43470:17:0"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1582,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1580,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1578,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1573,
																	"src": "43505:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"id": 1579,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1555,
																	"src": "43509:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "43505:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"id": 1581,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1557,
																"src": "43514:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "43505:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1587,
														"nodeType": "IfStatement",
														"src": "43501:33:0",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 1583,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "43525:5:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 1584,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "43532:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 1585,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "43524:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 1563,
															"id": 1586,
															"nodeType": "Return",
															"src": "43517:17:0"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 1588,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "43556:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"id": 1589,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1573,
																	"src": "43562:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 1590,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "43555:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 1563,
														"id": 1591,
														"nodeType": "Return",
														"src": "43548:16:0"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1553,
										"nodeType": "StructuredDocumentation",
										"src": "42984:99:0",
										"text": " @dev Returns the multiplication of two unsigned integers, with an overflow flag."
									},
									"id": 1594,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryMul",
									"nameLocation": "43097:6:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1558,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1555,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "43112:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 1594,
												"src": "43104:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1554,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "43104:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1557,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "43123:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 1594,
												"src": "43115:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1556,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "43115:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "43103:22:0"
									},
									"returnParameters": {
										"id": 1563,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1560,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1594,
												"src": "43149:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1559,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "43149:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1562,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1594,
												"src": "43155:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1561,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "43155:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "43148:15:0"
									},
									"scope": 2535,
									"src": "43088:493:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1621,
										"nodeType": "Block",
										"src": "43768:114:0",
										"statements": [
											{
												"id": 1620,
												"nodeType": "UncheckedBlock",
												"src": "43778:98:0",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1608,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1606,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1599,
																"src": "43806:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 1607,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "43811:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "43806:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1613,
														"nodeType": "IfStatement",
														"src": "43802:29:0",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 1609,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "43822:5:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 1610,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "43829:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 1611,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "43821:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 1605,
															"id": 1612,
															"nodeType": "Return",
															"src": "43814:17:0"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 1614,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "43853:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1617,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1615,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1597,
																		"src": "43859:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "/",
																	"rightExpression": {
																		"id": 1616,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1599,
																		"src": "43863:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "43859:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 1618,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "43852:13:0",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 1605,
														"id": 1619,
														"nodeType": "Return",
														"src": "43845:20:0"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1595,
										"nodeType": "StructuredDocumentation",
										"src": "43587:100:0",
										"text": " @dev Returns the division of two unsigned integers, with a division by zero flag."
									},
									"id": 1622,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryDiv",
									"nameLocation": "43701:6:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1600,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1597,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "43716:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 1622,
												"src": "43708:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1596,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "43708:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1599,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "43727:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 1622,
												"src": "43719:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1598,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "43719:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "43707:22:0"
									},
									"returnParameters": {
										"id": 1605,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1602,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1622,
												"src": "43753:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1601,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "43753:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1604,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1622,
												"src": "43759:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1603,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "43759:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "43752:15:0"
									},
									"scope": 2535,
									"src": "43692:190:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1649,
										"nodeType": "Block",
										"src": "44079:114:0",
										"statements": [
											{
												"id": 1648,
												"nodeType": "UncheckedBlock",
												"src": "44089:98:0",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1636,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1634,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1627,
																"src": "44117:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 1635,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "44122:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "44117:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1641,
														"nodeType": "IfStatement",
														"src": "44113:29:0",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 1637,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "44133:5:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 1638,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "44140:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 1639,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "44132:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 1633,
															"id": 1640,
															"nodeType": "Return",
															"src": "44125:17:0"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 1642,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "44164:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1645,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1643,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1625,
																		"src": "44170:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "%",
																	"rightExpression": {
																		"id": 1644,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1627,
																		"src": "44174:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "44170:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 1646,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "44163:13:0",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 1633,
														"id": 1647,
														"nodeType": "Return",
														"src": "44156:20:0"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1623,
										"nodeType": "StructuredDocumentation",
										"src": "43888:110:0",
										"text": " @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag."
									},
									"id": 1650,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryMod",
									"nameLocation": "44012:6:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1628,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1625,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "44027:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 1650,
												"src": "44019:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1624,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "44019:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1627,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "44038:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 1650,
												"src": "44030:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1626,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "44030:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "44018:22:0"
									},
									"returnParameters": {
										"id": 1633,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1630,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1650,
												"src": "44064:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1629,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "44064:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1632,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1650,
												"src": "44070:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1631,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "44070:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "44063:15:0"
									},
									"scope": 2535,
									"src": "44003:190:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1667,
										"nodeType": "Block",
										"src": "44330:37:0",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1662,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1660,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1653,
															"src": "44347:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"id": 1661,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1655,
															"src": "44351:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "44347:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"id": 1664,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1655,
														"src": "44359:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1665,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "44347:13:0",
													"trueExpression": {
														"id": 1663,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1653,
														"src": "44355:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1659,
												"id": 1666,
												"nodeType": "Return",
												"src": "44340:20:0"
											}
										]
									},
									"documentation": {
										"id": 1651,
										"nodeType": "StructuredDocumentation",
										"src": "44199:59:0",
										"text": " @dev Returns the largest of two numbers."
									},
									"id": 1668,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "max",
									"nameLocation": "44272:3:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1656,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1653,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "44284:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 1668,
												"src": "44276:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1652,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "44276:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1655,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "44295:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 1668,
												"src": "44287:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1654,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "44287:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "44275:22:0"
									},
									"returnParameters": {
										"id": 1659,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1658,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1668,
												"src": "44321:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1657,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "44321:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "44320:9:0"
									},
									"scope": 2535,
									"src": "44263:104:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1685,
										"nodeType": "Block",
										"src": "44505:37:0",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1680,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1678,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1671,
															"src": "44522:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"id": 1679,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1673,
															"src": "44526:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "44522:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"id": 1682,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1673,
														"src": "44534:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1683,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "44522:13:0",
													"trueExpression": {
														"id": 1681,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1671,
														"src": "44530:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1677,
												"id": 1684,
												"nodeType": "Return",
												"src": "44515:20:0"
											}
										]
									},
									"documentation": {
										"id": 1669,
										"nodeType": "StructuredDocumentation",
										"src": "44373:60:0",
										"text": " @dev Returns the smallest of two numbers."
									},
									"id": 1686,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "min",
									"nameLocation": "44447:3:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1674,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1671,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "44459:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 1686,
												"src": "44451:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1670,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "44451:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1673,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "44470:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 1686,
												"src": "44462:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1672,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "44462:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "44450:22:0"
									},
									"returnParameters": {
										"id": 1677,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1676,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1686,
												"src": "44496:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1675,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "44496:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "44495:9:0"
									},
									"scope": 2535,
									"src": "44438:104:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1708,
										"nodeType": "Block",
										"src": "44726:82:0",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1706,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1698,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1696,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1689,
																	"src": "44781:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&",
																"rightExpression": {
																	"id": 1697,
																	"name": "b",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1691,
																	"src": "44785:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "44781:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 1699,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "44780:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1705,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"components": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1702,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1700,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1689,
																		"src": "44791:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "^",
																	"rightExpression": {
																		"id": 1701,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1691,
																		"src": "44795:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "44791:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 1703,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "44790:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "/",
														"rightExpression": {
															"hexValue": "32",
															"id": 1704,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "44800:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"src": "44790:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "44780:21:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1695,
												"id": 1707,
												"nodeType": "Return",
												"src": "44773:28:0"
											}
										]
									},
									"documentation": {
										"id": 1687,
										"nodeType": "StructuredDocumentation",
										"src": "44548:102:0",
										"text": " @dev Returns the average of two numbers. The result is rounded towards\n zero."
									},
									"id": 1709,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "average",
									"nameLocation": "44664:7:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1692,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1689,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "44680:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 1709,
												"src": "44672:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1688,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "44672:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1691,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "44691:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 1709,
												"src": "44683:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1690,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "44683:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "44671:22:0"
									},
									"returnParameters": {
										"id": 1695,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1694,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1709,
												"src": "44717:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1693,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "44717:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "44716:9:0"
									},
									"scope": 2535,
									"src": "44655:153:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1742,
										"nodeType": "Block",
										"src": "45100:260:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1721,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1719,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1714,
														"src": "45114:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 1720,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "45119:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "45114:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1727,
												"nodeType": "IfStatement",
												"src": "45110:127:0",
												"trueBody": {
													"id": 1726,
													"nodeType": "Block",
													"src": "45122:115:0",
													"statements": [
														{
															"expression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1724,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1722,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1712,
																	"src": "45221:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"id": 1723,
																	"name": "b",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1714,
																	"src": "45225:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "45221:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"functionReturnParameters": 1718,
															"id": 1725,
															"nodeType": "Return",
															"src": "45214:12:0"
														}
													]
												}
											},
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1730,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1728,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1712,
															"src": "45325:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"hexValue": "30",
															"id": 1729,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "45330:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "45325:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1739,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1737,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1734,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1732,
																			"name": "a",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1712,
																			"src": "45339:1:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"hexValue": "31",
																			"id": 1733,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "45343:1:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "45339:5:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1735,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "45338:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "/",
															"rightExpression": {
																"id": 1736,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1714,
																"src": "45348:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "45338:11:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"hexValue": "31",
															"id": 1738,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "45352:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "45338:15:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1740,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "45325:28:0",
													"trueExpression": {
														"hexValue": "30",
														"id": 1731,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "45334:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1718,
												"id": 1741,
												"nodeType": "Return",
												"src": "45318:35:0"
											}
										]
									},
									"documentation": {
										"id": 1710,
										"nodeType": "StructuredDocumentation",
										"src": "44814:210:0",
										"text": " @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds towards infinity instead\n of rounding towards zero."
									},
									"id": 1743,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "ceilDiv",
									"nameLocation": "45038:7:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1715,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1712,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "45054:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 1743,
												"src": "45046:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1711,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "45046:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1714,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "45065:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 1743,
												"src": "45057:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1713,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "45057:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "45045:22:0"
									},
									"returnParameters": {
										"id": 1718,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1717,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1743,
												"src": "45091:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1716,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "45091:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "45090:9:0"
									},
									"scope": 2535,
									"src": "45029:331:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1868,
										"nodeType": "Block",
										"src": "45782:4018:0",
										"statements": [
											{
												"id": 1867,
												"nodeType": "UncheckedBlock",
												"src": "45792:4002:0",
												"statements": [
													{
														"assignments": [
															1756
														],
														"declarations": [
															{
																"constant": false,
																"id": 1756,
																"mutability": "mutable",
																"name": "prod0",
																"nameLocation": "46121:5:0",
																"nodeType": "VariableDeclaration",
																"scope": 1867,
																"src": "46113:13:0",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1755,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "46113:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1760,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1759,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1757,
																"name": "x",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1746,
																"src": "46129:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 1758,
																"name": "y",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1748,
																"src": "46133:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "46129:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "46113:21:0"
													},
													{
														"assignments": [
															1762
														],
														"declarations": [
															{
																"constant": false,
																"id": 1762,
																"mutability": "mutable",
																"name": "prod1",
																"nameLocation": "46201:5:0",
																"nodeType": "VariableDeclaration",
																"scope": 1867,
																"src": "46193:13:0",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1761,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "46193:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1763,
														"nodeType": "VariableDeclarationStatement",
														"src": "46193:13:0"
													},
													{
														"AST": {
															"nodeType": "YulBlock",
															"src": "46273:122:0",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "46291:30:0",
																	"value": {
																		"arguments": [
																			{
																				"name": "x",
																				"nodeType": "YulIdentifier",
																				"src": "46308:1:0"
																			},
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "46311:1:0"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "46318:1:0",
																						"type": "",
																						"value": "0"
																					}
																				],
																				"functionName": {
																					"name": "not",
																					"nodeType": "YulIdentifier",
																					"src": "46314:3:0"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "46314:6:0"
																			}
																		],
																		"functionName": {
																			"name": "mulmod",
																			"nodeType": "YulIdentifier",
																			"src": "46301:6:0"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "46301:20:0"
																	},
																	"variables": [
																		{
																			"name": "mm",
																			"nodeType": "YulTypedName",
																			"src": "46295:2:0",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "46338:43:0",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "mm",
																						"nodeType": "YulIdentifier",
																						"src": "46355:2:0"
																					},
																					{
																						"name": "prod0",
																						"nodeType": "YulIdentifier",
																						"src": "46359:5:0"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "46351:3:0"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "46351:14:0"
																			},
																			{
																				"arguments": [
																					{
																						"name": "mm",
																						"nodeType": "YulIdentifier",
																						"src": "46370:2:0"
																					},
																					{
																						"name": "prod0",
																						"nodeType": "YulIdentifier",
																						"src": "46374:5:0"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nodeType": "YulIdentifier",
																					"src": "46367:2:0"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "46367:13:0"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "46347:3:0"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "46347:34:0"
																	},
																	"variableNames": [
																		{
																			"name": "prod1",
																			"nodeType": "YulIdentifier",
																			"src": "46338:5:0"
																		}
																	]
																}
															]
														},
														"evmVersion": "shanghai",
														"externalReferences": [
															{
																"declaration": 1756,
																"isOffset": false,
																"isSlot": false,
																"src": "46359:5:0",
																"valueSize": 1
															},
															{
																"declaration": 1756,
																"isOffset": false,
																"isSlot": false,
																"src": "46374:5:0",
																"valueSize": 1
															},
															{
																"declaration": 1762,
																"isOffset": false,
																"isSlot": false,
																"src": "46338:5:0",
																"valueSize": 1
															},
															{
																"declaration": 1746,
																"isOffset": false,
																"isSlot": false,
																"src": "46308:1:0",
																"valueSize": 1
															},
															{
																"declaration": 1748,
																"isOffset": false,
																"isSlot": false,
																"src": "46311:1:0",
																"valueSize": 1
															}
														],
														"id": 1764,
														"nodeType": "InlineAssembly",
														"src": "46264:131:0"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1767,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1765,
																"name": "prod1",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1762,
																"src": "46476:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 1766,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "46485:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "46476:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1773,
														"nodeType": "IfStatement",
														"src": "46472:368:0",
														"trueBody": {
															"id": 1772,
															"nodeType": "Block",
															"src": "46488:352:0",
															"statements": [
																{
																	"expression": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1770,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1768,
																			"name": "prod0",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1756,
																			"src": "46806:5:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "/",
																		"rightExpression": {
																			"id": 1769,
																			"name": "denominator",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1750,
																			"src": "46814:11:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "46806:19:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"functionReturnParameters": 1754,
																	"id": 1771,
																	"nodeType": "Return",
																	"src": "46799:26:0"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1776,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1774,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1750,
																"src": "46946:11:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"id": 1775,
																"name": "prod1",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1762,
																"src": "46961:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "46946:20:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1781,
														"nodeType": "IfStatement",
														"src": "46942:88:0",
														"trueBody": {
															"id": 1780,
															"nodeType": "Block",
															"src": "46968:62:0",
															"statements": [
																{
																	"errorCall": {
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 1777,
																			"name": "MathOverflowedMulDiv",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1487,
																			"src": "46993:20:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_error_pure$__$returns$__$",
																				"typeString": "function () pure"
																			}
																		},
																		"id": 1778,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "46993:22:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_tuple$__$",
																			"typeString": "tuple()"
																		}
																	},
																	"id": 1779,
																	"nodeType": "RevertStatement",
																	"src": "46986:29:0"
																}
															]
														}
													},
													{
														"assignments": [
															1783
														],
														"declarations": [
															{
																"constant": false,
																"id": 1783,
																"mutability": "mutable",
																"name": "remainder",
																"nameLocation": "47293:9:0",
																"nodeType": "VariableDeclaration",
																"scope": 1867,
																"src": "47285:17:0",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1782,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "47285:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1784,
														"nodeType": "VariableDeclarationStatement",
														"src": "47285:17:0"
													},
													{
														"AST": {
															"nodeType": "YulBlock",
															"src": "47325:291:0",
															"statements": [
																{
																	"nodeType": "YulAssignment",
																	"src": "47394:38:0",
																	"value": {
																		"arguments": [
																			{
																				"name": "x",
																				"nodeType": "YulIdentifier",
																				"src": "47414:1:0"
																			},
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "47417:1:0"
																			},
																			{
																				"name": "denominator",
																				"nodeType": "YulIdentifier",
																				"src": "47420:11:0"
																			}
																		],
																		"functionName": {
																			"name": "mulmod",
																			"nodeType": "YulIdentifier",
																			"src": "47407:6:0"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "47407:25:0"
																	},
																	"variableNames": [
																		{
																			"name": "remainder",
																			"nodeType": "YulIdentifier",
																			"src": "47394:9:0"
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "47514:41:0",
																	"value": {
																		"arguments": [
																			{
																				"name": "prod1",
																				"nodeType": "YulIdentifier",
																				"src": "47527:5:0"
																			},
																			{
																				"arguments": [
																					{
																						"name": "remainder",
																						"nodeType": "YulIdentifier",
																						"src": "47537:9:0"
																					},
																					{
																						"name": "prod0",
																						"nodeType": "YulIdentifier",
																						"src": "47548:5:0"
																					}
																				],
																				"functionName": {
																					"name": "gt",
																					"nodeType": "YulIdentifier",
																					"src": "47534:2:0"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "47534:20:0"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "47523:3:0"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "47523:32:0"
																	},
																	"variableNames": [
																		{
																			"name": "prod1",
																			"nodeType": "YulIdentifier",
																			"src": "47514:5:0"
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "47572:30:0",
																	"value": {
																		"arguments": [
																			{
																				"name": "prod0",
																				"nodeType": "YulIdentifier",
																				"src": "47585:5:0"
																			},
																			{
																				"name": "remainder",
																				"nodeType": "YulIdentifier",
																				"src": "47592:9:0"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "47581:3:0"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "47581:21:0"
																	},
																	"variableNames": [
																		{
																			"name": "prod0",
																			"nodeType": "YulIdentifier",
																			"src": "47572:5:0"
																		}
																	]
																}
															]
														},
														"evmVersion": "shanghai",
														"externalReferences": [
															{
																"declaration": 1750,
																"isOffset": false,
																"isSlot": false,
																"src": "47420:11:0",
																"valueSize": 1
															},
															{
																"declaration": 1756,
																"isOffset": false,
																"isSlot": false,
																"src": "47548:5:0",
																"valueSize": 1
															},
															{
																"declaration": 1756,
																"isOffset": false,
																"isSlot": false,
																"src": "47572:5:0",
																"valueSize": 1
															},
															{
																"declaration": 1756,
																"isOffset": false,
																"isSlot": false,
																"src": "47585:5:0",
																"valueSize": 1
															},
															{
																"declaration": 1762,
																"isOffset": false,
																"isSlot": false,
																"src": "47514:5:0",
																"valueSize": 1
															},
															{
																"declaration": 1762,
																"isOffset": false,
																"isSlot": false,
																"src": "47527:5:0",
																"valueSize": 1
															},
															{
																"declaration": 1783,
																"isOffset": false,
																"isSlot": false,
																"src": "47394:9:0",
																"valueSize": 1
															},
															{
																"declaration": 1783,
																"isOffset": false,
																"isSlot": false,
																"src": "47537:9:0",
																"valueSize": 1
															},
															{
																"declaration": 1783,
																"isOffset": false,
																"isSlot": false,
																"src": "47592:9:0",
																"valueSize": 1
															},
															{
																"declaration": 1746,
																"isOffset": false,
																"isSlot": false,
																"src": "47414:1:0",
																"valueSize": 1
															},
															{
																"declaration": 1748,
																"isOffset": false,
																"isSlot": false,
																"src": "47417:1:0",
																"valueSize": 1
															}
														],
														"id": 1785,
														"nodeType": "InlineAssembly",
														"src": "47316:300:0"
													},
													{
														"assignments": [
															1787
														],
														"declarations": [
															{
																"constant": false,
																"id": 1787,
																"mutability": "mutable",
																"name": "twos",
																"nameLocation": "47828:4:0",
																"nodeType": "VariableDeclaration",
																"scope": 1867,
																"src": "47820:12:0",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1786,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "47820:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1794,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1793,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1788,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1750,
																"src": "47835:11:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1791,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"hexValue": "30",
																			"id": 1789,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "47850:1:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"id": 1790,
																			"name": "denominator",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1750,
																			"src": "47854:11:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "47850:15:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1792,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "47849:17:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "47835:31:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "47820:46:0"
													},
													{
														"AST": {
															"nodeType": "YulBlock",
															"src": "47889:362:0",
															"statements": [
																{
																	"nodeType": "YulAssignment",
																	"src": "47954:37:0",
																	"value": {
																		"arguments": [
																			{
																				"name": "denominator",
																				"nodeType": "YulIdentifier",
																				"src": "47973:11:0"
																			},
																			{
																				"name": "twos",
																				"nodeType": "YulIdentifier",
																				"src": "47986:4:0"
																			}
																		],
																		"functionName": {
																			"name": "div",
																			"nodeType": "YulIdentifier",
																			"src": "47969:3:0"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "47969:22:0"
																	},
																	"variableNames": [
																		{
																			"name": "denominator",
																			"nodeType": "YulIdentifier",
																			"src": "47954:11:0"
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "48058:25:0",
																	"value": {
																		"arguments": [
																			{
																				"name": "prod0",
																				"nodeType": "YulIdentifier",
																				"src": "48071:5:0"
																			},
																			{
																				"name": "twos",
																				"nodeType": "YulIdentifier",
																				"src": "48078:4:0"
																			}
																		],
																		"functionName": {
																			"name": "div",
																			"nodeType": "YulIdentifier",
																			"src": "48067:3:0"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "48067:16:0"
																	},
																	"variableNames": [
																		{
																			"name": "prod0",
																			"nodeType": "YulIdentifier",
																			"src": "48058:5:0"
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "48198:39:0",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "48218:1:0",
																								"type": "",
																								"value": "0"
																							},
																							{
																								"name": "twos",
																								"nodeType": "YulIdentifier",
																								"src": "48221:4:0"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "48214:3:0"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "48214:12:0"
																					},
																					{
																						"name": "twos",
																						"nodeType": "YulIdentifier",
																						"src": "48228:4:0"
																					}
																				],
																				"functionName": {
																					"name": "div",
																					"nodeType": "YulIdentifier",
																					"src": "48210:3:0"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "48210:23:0"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "48235:1:0",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "48206:3:0"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "48206:31:0"
																	},
																	"variableNames": [
																		{
																			"name": "twos",
																			"nodeType": "YulIdentifier",
																			"src": "48198:4:0"
																		}
																	]
																}
															]
														},
														"evmVersion": "shanghai",
														"externalReferences": [
															{
																"declaration": 1750,
																"isOffset": false,
																"isSlot": false,
																"src": "47954:11:0",
																"valueSize": 1
															},
															{
																"declaration": 1750,
																"isOffset": false,
																"isSlot": false,
																"src": "47973:11:0",
																"valueSize": 1
															},
															{
																"declaration": 1756,
																"isOffset": false,
																"isSlot": false,
																"src": "48058:5:0",
																"valueSize": 1
															},
															{
																"declaration": 1756,
																"isOffset": false,
																"isSlot": false,
																"src": "48071:5:0",
																"valueSize": 1
															},
															{
																"declaration": 1787,
																"isOffset": false,
																"isSlot": false,
																"src": "47986:4:0",
																"valueSize": 1
															},
															{
																"declaration": 1787,
																"isOffset": false,
																"isSlot": false,
																"src": "48078:4:0",
																"valueSize": 1
															},
															{
																"declaration": 1787,
																"isOffset": false,
																"isSlot": false,
																"src": "48198:4:0",
																"valueSize": 1
															},
															{
																"declaration": 1787,
																"isOffset": false,
																"isSlot": false,
																"src": "48221:4:0",
																"valueSize": 1
															},
															{
																"declaration": 1787,
																"isOffset": false,
																"isSlot": false,
																"src": "48228:4:0",
																"valueSize": 1
															}
														],
														"id": 1795,
														"nodeType": "InlineAssembly",
														"src": "47880:371:0"
													},
													{
														"expression": {
															"id": 1800,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 1796,
																"name": "prod0",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1756,
																"src": "48317:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "|=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1799,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1797,
																	"name": "prod1",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1762,
																	"src": "48326:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 1798,
																	"name": "twos",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1787,
																	"src": "48334:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "48326:12:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "48317:21:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1801,
														"nodeType": "ExpressionStatement",
														"src": "48317:21:0"
													},
													{
														"assignments": [
															1803
														],
														"declarations": [
															{
																"constant": false,
																"id": 1803,
																"mutability": "mutable",
																"name": "inverse",
																"nameLocation": "48664:7:0",
																"nodeType": "VariableDeclaration",
																"scope": 1867,
																"src": "48656:15:0",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1802,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "48656:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1810,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1809,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1806,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"hexValue": "33",
																			"id": 1804,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "48675:1:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_3_by_1",
																				"typeString": "int_const 3"
																			},
																			"value": "3"
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"id": 1805,
																			"name": "denominator",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1750,
																			"src": "48679:11:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "48675:15:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 1807,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "48674:17:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "^",
															"rightExpression": {
																"hexValue": "32",
																"id": 1808,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "48694:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"src": "48674:21:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "48656:39:0"
													},
													{
														"expression": {
															"id": 1817,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 1811,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1803,
																"src": "48912:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1816,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 1812,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "48923:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1815,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1813,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1750,
																		"src": "48927:11:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 1814,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1803,
																		"src": "48941:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "48927:21:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "48923:25:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "48912:36:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1818,
														"nodeType": "ExpressionStatement",
														"src": "48912:36:0"
													},
													{
														"expression": {
															"id": 1825,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 1819,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1803,
																"src": "48981:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1824,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 1820,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "48992:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1823,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1821,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1750,
																		"src": "48996:11:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 1822,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1803,
																		"src": "49010:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "48996:21:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "48992:25:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "48981:36:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1826,
														"nodeType": "ExpressionStatement",
														"src": "48981:36:0"
													},
													{
														"expression": {
															"id": 1833,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 1827,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1803,
																"src": "49051:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1832,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 1828,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "49062:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1831,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1829,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1750,
																		"src": "49066:11:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 1830,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1803,
																		"src": "49080:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "49066:21:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "49062:25:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "49051:36:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1834,
														"nodeType": "ExpressionStatement",
														"src": "49051:36:0"
													},
													{
														"expression": {
															"id": 1841,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 1835,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1803,
																"src": "49121:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1840,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 1836,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "49132:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1839,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1837,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1750,
																		"src": "49136:11:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 1838,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1803,
																		"src": "49150:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "49136:21:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "49132:25:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "49121:36:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1842,
														"nodeType": "ExpressionStatement",
														"src": "49121:36:0"
													},
													{
														"expression": {
															"id": 1849,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 1843,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1803,
																"src": "49191:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1848,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 1844,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "49202:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1847,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1845,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1750,
																		"src": "49206:11:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 1846,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1803,
																		"src": "49220:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "49206:21:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "49202:25:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "49191:36:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1850,
														"nodeType": "ExpressionStatement",
														"src": "49191:36:0"
													},
													{
														"expression": {
															"id": 1857,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 1851,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1803,
																"src": "49262:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1856,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 1852,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "49273:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1855,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1853,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1750,
																		"src": "49277:11:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 1854,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1803,
																		"src": "49291:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "49277:21:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "49273:25:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "49262:36:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1858,
														"nodeType": "ExpressionStatement",
														"src": "49262:36:0"
													},
													{
														"expression": {
															"id": 1863,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 1859,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1753,
																"src": "49732:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1862,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1860,
																	"name": "prod0",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1756,
																	"src": "49741:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 1861,
																	"name": "inverse",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1803,
																	"src": "49749:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "49741:15:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "49732:24:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1864,
														"nodeType": "ExpressionStatement",
														"src": "49732:24:0"
													},
													{
														"expression": {
															"id": 1865,
															"name": "result",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1753,
															"src": "49777:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 1754,
														"id": 1866,
														"nodeType": "Return",
														"src": "49770:13:0"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1744,
										"nodeType": "StructuredDocumentation",
										"src": "45366:313:0",
										"text": " @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n denominator == 0.\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n Uniswap Labs also under MIT license."
									},
									"id": 1869,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mulDiv",
									"nameLocation": "45693:6:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1751,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1746,
												"mutability": "mutable",
												"name": "x",
												"nameLocation": "45708:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 1869,
												"src": "45700:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1745,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "45700:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1748,
												"mutability": "mutable",
												"name": "y",
												"nameLocation": "45719:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 1869,
												"src": "45711:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1747,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "45711:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1750,
												"mutability": "mutable",
												"name": "denominator",
												"nameLocation": "45730:11:0",
												"nodeType": "VariableDeclaration",
												"scope": 1869,
												"src": "45722:19:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1749,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "45722:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "45699:43:0"
									},
									"returnParameters": {
										"id": 1754,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1753,
												"mutability": "mutable",
												"name": "result",
												"nameLocation": "45774:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 1869,
												"src": "45766:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1752,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "45766:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "45765:16:0"
									},
									"scope": 2535,
									"src": "45684:4116:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1911,
										"nodeType": "Block",
										"src": "50042:192:0",
										"statements": [
											{
												"assignments": [
													1885
												],
												"declarations": [
													{
														"constant": false,
														"id": 1885,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "50060:6:0",
														"nodeType": "VariableDeclaration",
														"scope": 1911,
														"src": "50052:14:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1884,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "50052:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1891,
												"initialValue": {
													"arguments": [
														{
															"id": 1887,
															"name": "x",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1872,
															"src": "50076:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1888,
															"name": "y",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1874,
															"src": "50079:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1889,
															"name": "denominator",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1876,
															"src": "50082:11:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1886,
														"name": "mulDiv",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1869,
															1912
														],
														"referencedDeclaration": 1869,
														"src": "50069:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 1890,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "50069:25:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "50052:42:0"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 1902,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 1893,
																"name": "rounding",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1879,
																"src": "50125:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_Rounding_$1492",
																	"typeString": "enum Math.Rounding"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_enum$_Rounding_$1492",
																	"typeString": "enum Math.Rounding"
																}
															],
															"id": 1892,
															"name": "unsignedRoundsUp",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2534,
															"src": "50108:16:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_enum$_Rounding_$1492_$returns$_t_bool_$",
																"typeString": "function (enum Math.Rounding) pure returns (bool)"
															}
														},
														"id": 1894,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "50108:26:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1901,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"arguments": [
																{
																	"id": 1896,
																	"name": "x",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1872,
																	"src": "50145:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 1897,
																	"name": "y",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1874,
																	"src": "50148:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 1898,
																	"name": "denominator",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1876,
																	"src": "50151:11:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1895,
																"name": "mulmod",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967280,
																"src": "50138:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 1899,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "50138:25:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"hexValue": "30",
															"id": 1900,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "50166:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "50138:29:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "50108:59:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1908,
												"nodeType": "IfStatement",
												"src": "50104:101:0",
												"trueBody": {
													"id": 1907,
													"nodeType": "Block",
													"src": "50169:36:0",
													"statements": [
														{
															"expression": {
																"id": 1905,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1903,
																	"name": "result",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1885,
																	"src": "50183:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"hexValue": "31",
																	"id": 1904,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "50193:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "50183:11:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1906,
															"nodeType": "ExpressionStatement",
															"src": "50183:11:0"
														}
													]
												}
											},
											{
												"expression": {
													"id": 1909,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1885,
													"src": "50221:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1883,
												"id": 1910,
												"nodeType": "Return",
												"src": "50214:13:0"
											}
										]
									},
									"documentation": {
										"id": 1870,
										"nodeType": "StructuredDocumentation",
										"src": "49806:121:0",
										"text": " @notice Calculates x * y / denominator with full precision, following the selected rounding direction."
									},
									"id": 1912,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mulDiv",
									"nameLocation": "49941:6:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1880,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1872,
												"mutability": "mutable",
												"name": "x",
												"nameLocation": "49956:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 1912,
												"src": "49948:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1871,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "49948:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1874,
												"mutability": "mutable",
												"name": "y",
												"nameLocation": "49967:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 1912,
												"src": "49959:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1873,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "49959:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1876,
												"mutability": "mutable",
												"name": "denominator",
												"nameLocation": "49978:11:0",
												"nodeType": "VariableDeclaration",
												"scope": 1912,
												"src": "49970:19:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1875,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "49970:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1879,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "50000:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 1912,
												"src": "49991:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$1492",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 1878,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1877,
														"name": "Rounding",
														"nameLocations": [
															"49991:8:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1492,
														"src": "49991:8:0"
													},
													"referencedDeclaration": 1492,
													"src": "49991:8:0",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$1492",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "49947:62:0"
									},
									"returnParameters": {
										"id": 1883,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1882,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1912,
												"src": "50033:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1881,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "50033:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "50032:9:0"
									},
									"scope": 2535,
									"src": "49932:302:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2023,
										"nodeType": "Block",
										"src": "50525:1585:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1922,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1920,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1915,
														"src": "50539:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 1921,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "50544:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "50539:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1926,
												"nodeType": "IfStatement",
												"src": "50535:45:0",
												"trueBody": {
													"id": 1925,
													"nodeType": "Block",
													"src": "50547:33:0",
													"statements": [
														{
															"expression": {
																"hexValue": "30",
																"id": 1923,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "50568:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"functionReturnParameters": 1919,
															"id": 1924,
															"nodeType": "Return",
															"src": "50561:8:0"
														}
													]
												}
											},
											{
												"assignments": [
													1928
												],
												"declarations": [
													{
														"constant": false,
														"id": 1928,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "51267:6:0",
														"nodeType": "VariableDeclaration",
														"scope": 2023,
														"src": "51259:14:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1927,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "51259:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1937,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1936,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"hexValue": "31",
														"id": 1929,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "51276:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"nodeType": "BinaryOperation",
													"operator": "<<",
													"rightExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1934,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"id": 1931,
																			"name": "a",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1915,
																			"src": "51287:1:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 1930,
																		"name": "log2",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [
																			2191,
																			2226
																		],
																		"referencedDeclaration": 2191,
																		"src": "51282:4:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																			"typeString": "function (uint256) pure returns (uint256)"
																		}
																	},
																	"id": 1932,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "51282:7:0",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 1933,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "51293:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "51282:12:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 1935,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "51281:14:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "51276:19:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "51259:36:0"
											},
											{
												"id": 2022,
												"nodeType": "UncheckedBlock",
												"src": "51696:408:0",
												"statements": [
													{
														"expression": {
															"id": 1947,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 1938,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1928,
																"src": "51720:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1946,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1943,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1939,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1928,
																				"src": "51730:6:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1942,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1940,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1915,
																					"src": "51739:1:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 1941,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1928,
																					"src": "51743:6:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "51739:10:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "51730:19:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1944,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "51729:21:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 1945,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "51754:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "51729:26:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "51720:35:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1948,
														"nodeType": "ExpressionStatement",
														"src": "51720:35:0"
													},
													{
														"expression": {
															"id": 1958,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 1949,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1928,
																"src": "51769:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1957,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1954,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1950,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1928,
																				"src": "51779:6:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1953,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1951,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1915,
																					"src": "51788:1:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 1952,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1928,
																					"src": "51792:6:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "51788:10:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "51779:19:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1955,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "51778:21:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 1956,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "51803:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "51778:26:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "51769:35:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1959,
														"nodeType": "ExpressionStatement",
														"src": "51769:35:0"
													},
													{
														"expression": {
															"id": 1969,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 1960,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1928,
																"src": "51818:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1968,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1965,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1961,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1928,
																				"src": "51828:6:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1964,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1962,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1915,
																					"src": "51837:1:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 1963,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1928,
																					"src": "51841:6:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "51837:10:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "51828:19:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1966,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "51827:21:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 1967,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "51852:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "51827:26:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "51818:35:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1970,
														"nodeType": "ExpressionStatement",
														"src": "51818:35:0"
													},
													{
														"expression": {
															"id": 1980,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 1971,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1928,
																"src": "51867:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1979,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1976,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1972,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1928,
																				"src": "51877:6:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1975,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1973,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1915,
																					"src": "51886:1:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 1974,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1928,
																					"src": "51890:6:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "51886:10:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "51877:19:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1977,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "51876:21:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 1978,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "51901:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "51876:26:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "51867:35:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1981,
														"nodeType": "ExpressionStatement",
														"src": "51867:35:0"
													},
													{
														"expression": {
															"id": 1991,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 1982,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1928,
																"src": "51916:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1990,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1987,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1983,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1928,
																				"src": "51926:6:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1986,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1984,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1915,
																					"src": "51935:1:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 1985,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1928,
																					"src": "51939:6:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "51935:10:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "51926:19:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1988,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "51925:21:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 1989,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "51950:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "51925:26:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "51916:35:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1992,
														"nodeType": "ExpressionStatement",
														"src": "51916:35:0"
													},
													{
														"expression": {
															"id": 2002,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 1993,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1928,
																"src": "51965:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2001,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1998,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1994,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1928,
																				"src": "51975:6:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1997,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1995,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1915,
																					"src": "51984:1:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 1996,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1928,
																					"src": "51988:6:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "51984:10:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "51975:19:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1999,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "51974:21:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2000,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "51999:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "51974:26:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "51965:35:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2003,
														"nodeType": "ExpressionStatement",
														"src": "51965:35:0"
													},
													{
														"expression": {
															"id": 2013,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2004,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1928,
																"src": "52014:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2012,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2009,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2005,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1928,
																				"src": "52024:6:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2008,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2006,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1915,
																					"src": "52033:1:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2007,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1928,
																					"src": "52037:6:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "52033:10:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "52024:19:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2010,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "52023:21:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2011,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "52048:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "52023:26:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "52014:35:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2014,
														"nodeType": "ExpressionStatement",
														"src": "52014:35:0"
													},
													{
														"expression": {
															"arguments": [
																{
																	"id": 2016,
																	"name": "result",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1928,
																	"src": "52074:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2019,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2017,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1915,
																		"src": "52082:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "/",
																	"rightExpression": {
																		"id": 2018,
																		"name": "result",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1928,
																		"src": "52086:6:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "52082:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2015,
																"name": "min",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1686,
																"src": "52070:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 2020,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "52070:23:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 1919,
														"id": 2021,
														"nodeType": "Return",
														"src": "52063:30:0"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1913,
										"nodeType": "StructuredDocumentation",
										"src": "50240:223:0",
										"text": " @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n towards zero.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."
									},
									"id": 2024,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sqrt",
									"nameLocation": "50477:4:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1916,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1915,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "50490:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 2024,
												"src": "50482:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1914,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "50482:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "50481:11:0"
									},
									"returnParameters": {
										"id": 1919,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1918,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2024,
												"src": "50516:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1917,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "50516:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "50515:9:0"
									},
									"scope": 2535,
									"src": "50468:1642:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2058,
										"nodeType": "Block",
										"src": "52286:164:0",
										"statements": [
											{
												"id": 2057,
												"nodeType": "UncheckedBlock",
												"src": "52296:148:0",
												"statements": [
													{
														"assignments": [
															2036
														],
														"declarations": [
															{
																"constant": false,
																"id": 2036,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "52328:6:0",
																"nodeType": "VariableDeclaration",
																"scope": 2057,
																"src": "52320:14:0",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2035,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "52320:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2040,
														"initialValue": {
															"arguments": [
																{
																	"id": 2038,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2027,
																	"src": "52342:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2037,
																"name": "sqrt",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	2024,
																	2059
																],
																"referencedDeclaration": 2024,
																"src": "52337:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 2039,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "52337:7:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "52320:24:0"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2055,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2041,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2036,
																"src": "52365:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 2050,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"arguments": [
																					{
																						"id": 2043,
																						"name": "rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2030,
																						"src": "52392:8:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_enum$_Rounding_$1492",
																							"typeString": "enum Math.Rounding"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_enum$_Rounding_$1492",
																							"typeString": "enum Math.Rounding"
																						}
																					],
																					"id": 2042,
																					"name": "unsignedRoundsUp",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2534,
																					"src": "52375:16:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_pure$_t_enum$_Rounding_$1492_$returns$_t_bool_$",
																						"typeString": "function (enum Math.Rounding) pure returns (bool)"
																					}
																				},
																				"id": 2044,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "52375:26:0",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2049,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 2047,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 2045,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2036,
																						"src": "52405:6:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "*",
																					"rightExpression": {
																						"id": 2046,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2036,
																						"src": "52414:6:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "52405:15:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 2048,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2027,
																					"src": "52423:1:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "52405:19:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "52375:49:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 2052,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "52431:1:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 2053,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "52375:57:0",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 2051,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "52427:1:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 2054,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "52374:59:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "52365:68:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 2034,
														"id": 2056,
														"nodeType": "Return",
														"src": "52358:75:0"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2025,
										"nodeType": "StructuredDocumentation",
										"src": "52116:89:0",
										"text": " @notice Calculates sqrt(a), following the selected rounding direction."
									},
									"id": 2059,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sqrt",
									"nameLocation": "52219:4:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2031,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2027,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "52232:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 2059,
												"src": "52224:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2026,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "52224:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2030,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "52244:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 2059,
												"src": "52235:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$1492",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 2029,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2028,
														"name": "Rounding",
														"nameLocations": [
															"52235:8:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1492,
														"src": "52235:8:0"
													},
													"referencedDeclaration": 1492,
													"src": "52235:8:0",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$1492",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "52223:30:0"
									},
									"returnParameters": {
										"id": 2034,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2033,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2059,
												"src": "52277:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2032,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "52277:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "52276:9:0"
									},
									"scope": 2535,
									"src": "52210:240:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2190,
										"nodeType": "Block",
										"src": "52641:922:0",
										"statements": [
											{
												"assignments": [
													2068
												],
												"declarations": [
													{
														"constant": false,
														"id": 2068,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "52659:6:0",
														"nodeType": "VariableDeclaration",
														"scope": 2190,
														"src": "52651:14:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2067,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "52651:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2070,
												"initialValue": {
													"hexValue": "30",
													"id": 2069,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "52668:1:0",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "52651:18:0"
											},
											{
												"id": 2187,
												"nodeType": "UncheckedBlock",
												"src": "52679:855:0",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2075,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2073,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2071,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2062,
																	"src": "52707:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "313238",
																	"id": 2072,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "52716:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_128_by_1",
																		"typeString": "int_const 128"
																	},
																	"value": "128"
																},
																"src": "52707:12:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2074,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "52722:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "52707:16:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2085,
														"nodeType": "IfStatement",
														"src": "52703:99:0",
														"trueBody": {
															"id": 2084,
															"nodeType": "Block",
															"src": "52725:77:0",
															"statements": [
																{
																	"expression": {
																		"id": 2078,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2076,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2062,
																			"src": "52743:5:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "313238",
																			"id": 2077,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "52753:3:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_128_by_1",
																				"typeString": "int_const 128"
																			},
																			"value": "128"
																		},
																		"src": "52743:13:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2079,
																	"nodeType": "ExpressionStatement",
																	"src": "52743:13:0"
																},
																{
																	"expression": {
																		"id": 2082,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2080,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2068,
																			"src": "52774:6:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "313238",
																			"id": 2081,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "52784:3:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_128_by_1",
																				"typeString": "int_const 128"
																			},
																			"value": "128"
																		},
																		"src": "52774:13:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2083,
																	"nodeType": "ExpressionStatement",
																	"src": "52774:13:0"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2090,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2088,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2086,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2062,
																	"src": "52819:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3634",
																	"id": 2087,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "52828:2:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_64_by_1",
																		"typeString": "int_const 64"
																	},
																	"value": "64"
																},
																"src": "52819:11:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2089,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "52833:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "52819:15:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2100,
														"nodeType": "IfStatement",
														"src": "52815:96:0",
														"trueBody": {
															"id": 2099,
															"nodeType": "Block",
															"src": "52836:75:0",
															"statements": [
																{
																	"expression": {
																		"id": 2093,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2091,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2062,
																			"src": "52854:5:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 2092,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "52864:2:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "52854:12:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2094,
																	"nodeType": "ExpressionStatement",
																	"src": "52854:12:0"
																},
																{
																	"expression": {
																		"id": 2097,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2095,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2068,
																			"src": "52884:6:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 2096,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "52894:2:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "52884:12:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2098,
																	"nodeType": "ExpressionStatement",
																	"src": "52884:12:0"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2105,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2103,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2101,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2062,
																	"src": "52928:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3332",
																	"id": 2102,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "52937:2:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "52928:11:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2104,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "52942:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "52928:15:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2115,
														"nodeType": "IfStatement",
														"src": "52924:96:0",
														"trueBody": {
															"id": 2114,
															"nodeType": "Block",
															"src": "52945:75:0",
															"statements": [
																{
																	"expression": {
																		"id": 2108,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2106,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2062,
																			"src": "52963:5:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 2107,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "52973:2:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "52963:12:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2109,
																	"nodeType": "ExpressionStatement",
																	"src": "52963:12:0"
																},
																{
																	"expression": {
																		"id": 2112,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2110,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2068,
																			"src": "52993:6:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 2111,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "53003:2:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "52993:12:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2113,
																	"nodeType": "ExpressionStatement",
																	"src": "52993:12:0"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2120,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2118,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2116,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2062,
																	"src": "53037:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3136",
																	"id": 2117,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "53046:2:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"src": "53037:11:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2119,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "53051:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "53037:15:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2130,
														"nodeType": "IfStatement",
														"src": "53033:96:0",
														"trueBody": {
															"id": 2129,
															"nodeType": "Block",
															"src": "53054:75:0",
															"statements": [
																{
																	"expression": {
																		"id": 2123,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2121,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2062,
																			"src": "53072:5:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 2122,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "53082:2:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "53072:12:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2124,
																	"nodeType": "ExpressionStatement",
																	"src": "53072:12:0"
																},
																{
																	"expression": {
																		"id": 2127,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2125,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2068,
																			"src": "53102:6:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 2126,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "53112:2:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "53102:12:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2128,
																	"nodeType": "ExpressionStatement",
																	"src": "53102:12:0"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2135,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2133,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2131,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2062,
																	"src": "53146:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "38",
																	"id": 2132,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "53155:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "53146:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2134,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "53159:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "53146:14:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2145,
														"nodeType": "IfStatement",
														"src": "53142:93:0",
														"trueBody": {
															"id": 2144,
															"nodeType": "Block",
															"src": "53162:73:0",
															"statements": [
																{
																	"expression": {
																		"id": 2138,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2136,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2062,
																			"src": "53180:5:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 2137,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "53190:1:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "53180:11:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2139,
																	"nodeType": "ExpressionStatement",
																	"src": "53180:11:0"
																},
																{
																	"expression": {
																		"id": 2142,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2140,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2068,
																			"src": "53209:6:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 2141,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "53219:1:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "53209:11:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2143,
																	"nodeType": "ExpressionStatement",
																	"src": "53209:11:0"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2150,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2148,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2146,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2062,
																	"src": "53252:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "34",
																	"id": 2147,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "53261:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "53252:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2149,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "53265:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "53252:14:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2160,
														"nodeType": "IfStatement",
														"src": "53248:93:0",
														"trueBody": {
															"id": 2159,
															"nodeType": "Block",
															"src": "53268:73:0",
															"statements": [
																{
																	"expression": {
																		"id": 2153,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2151,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2062,
																			"src": "53286:5:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 2152,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "53296:1:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "53286:11:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2154,
																	"nodeType": "ExpressionStatement",
																	"src": "53286:11:0"
																},
																{
																	"expression": {
																		"id": 2157,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2155,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2068,
																			"src": "53315:6:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 2156,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "53325:1:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "53315:11:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2158,
																	"nodeType": "ExpressionStatement",
																	"src": "53315:11:0"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2165,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2163,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2161,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2062,
																	"src": "53358:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "32",
																	"id": 2162,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "53367:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"src": "53358:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2164,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "53371:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "53358:14:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2175,
														"nodeType": "IfStatement",
														"src": "53354:93:0",
														"trueBody": {
															"id": 2174,
															"nodeType": "Block",
															"src": "53374:73:0",
															"statements": [
																{
																	"expression": {
																		"id": 2168,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2166,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2062,
																			"src": "53392:5:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 2167,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "53402:1:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "53392:11:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2169,
																	"nodeType": "ExpressionStatement",
																	"src": "53392:11:0"
																},
																{
																	"expression": {
																		"id": 2172,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2170,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2068,
																			"src": "53421:6:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 2171,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "53431:1:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "53421:11:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2173,
																	"nodeType": "ExpressionStatement",
																	"src": "53421:11:0"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2180,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2178,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2176,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2062,
																	"src": "53464:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2177,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "53473:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "53464:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2179,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "53477:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "53464:14:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2186,
														"nodeType": "IfStatement",
														"src": "53460:64:0",
														"trueBody": {
															"id": 2185,
															"nodeType": "Block",
															"src": "53480:44:0",
															"statements": [
																{
																	"expression": {
																		"id": 2183,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2181,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2068,
																			"src": "53498:6:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "31",
																			"id": 2182,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "53508:1:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "53498:11:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2184,
																	"nodeType": "ExpressionStatement",
																	"src": "53498:11:0"
																}
															]
														}
													}
												]
											},
											{
												"expression": {
													"id": 2188,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2068,
													"src": "53550:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2066,
												"id": 2189,
												"nodeType": "Return",
												"src": "53543:13:0"
											}
										]
									},
									"documentation": {
										"id": 2060,
										"nodeType": "StructuredDocumentation",
										"src": "52456:119:0",
										"text": " @dev Return the log in base 2 of a positive value rounded towards zero.\n Returns 0 if given 0."
									},
									"id": 2191,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log2",
									"nameLocation": "52589:4:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2063,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2062,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "52602:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 2191,
												"src": "52594:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2061,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "52594:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "52593:15:0"
									},
									"returnParameters": {
										"id": 2066,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2065,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2191,
												"src": "52632:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2064,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "52632:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "52631:9:0"
									},
									"scope": 2535,
									"src": "52580:983:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2225,
										"nodeType": "Block",
										"src": "53796:168:0",
										"statements": [
											{
												"id": 2224,
												"nodeType": "UncheckedBlock",
												"src": "53806:152:0",
												"statements": [
													{
														"assignments": [
															2203
														],
														"declarations": [
															{
																"constant": false,
																"id": 2203,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "53838:6:0",
																"nodeType": "VariableDeclaration",
																"scope": 2224,
																"src": "53830:14:0",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2202,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "53830:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2207,
														"initialValue": {
															"arguments": [
																{
																	"id": 2205,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2194,
																	"src": "53852:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2204,
																"name": "log2",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	2191,
																	2226
																],
																"referencedDeclaration": 2191,
																"src": "53847:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 2206,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "53847:11:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "53830:28:0"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2222,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2208,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2203,
																"src": "53879:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 2217,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"arguments": [
																					{
																						"id": 2210,
																						"name": "rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2197,
																						"src": "53906:8:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_enum$_Rounding_$1492",
																							"typeString": "enum Math.Rounding"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_enum$_Rounding_$1492",
																							"typeString": "enum Math.Rounding"
																						}
																					],
																					"id": 2209,
																					"name": "unsignedRoundsUp",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2534,
																					"src": "53889:16:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_pure$_t_enum$_Rounding_$1492_$returns$_t_bool_$",
																						"typeString": "function (enum Math.Rounding) pure returns (bool)"
																					}
																				},
																				"id": 2211,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "53889:26:0",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2216,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 2214,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "31",
																						"id": 2212,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "53919:1:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_1_by_1",
																							"typeString": "int_const 1"
																						},
																						"value": "1"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "<<",
																					"rightExpression": {
																						"id": 2213,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2203,
																						"src": "53924:6:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "53919:11:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 2215,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2194,
																					"src": "53933:5:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "53919:19:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "53889:49:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 2219,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "53945:1:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 2220,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "53889:57:0",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 2218,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "53941:1:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 2221,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "53888:59:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "53879:68:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 2201,
														"id": 2223,
														"nodeType": "Return",
														"src": "53872:75:0"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2192,
										"nodeType": "StructuredDocumentation",
										"src": "53569:142:0",
										"text": " @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."
									},
									"id": 2226,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log2",
									"nameLocation": "53725:4:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2198,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2194,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "53738:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 2226,
												"src": "53730:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2193,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "53730:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2197,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "53754:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 2226,
												"src": "53745:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$1492",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 2196,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2195,
														"name": "Rounding",
														"nameLocations": [
															"53745:8:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1492,
														"src": "53745:8:0"
													},
													"referencedDeclaration": 1492,
													"src": "53745:8:0",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$1492",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "53729:34:0"
									},
									"returnParameters": {
										"id": 2201,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2200,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2226,
												"src": "53787:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2199,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "53787:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "53786:9:0"
									},
									"scope": 2535,
									"src": "53716:248:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2354,
										"nodeType": "Block",
										"src": "54157:854:0",
										"statements": [
											{
												"assignments": [
													2235
												],
												"declarations": [
													{
														"constant": false,
														"id": 2235,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "54175:6:0",
														"nodeType": "VariableDeclaration",
														"scope": 2354,
														"src": "54167:14:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2234,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "54167:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2237,
												"initialValue": {
													"hexValue": "30",
													"id": 2236,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "54184:1:0",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "54167:18:0"
											},
											{
												"id": 2351,
												"nodeType": "UncheckedBlock",
												"src": "54195:787:0",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2242,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2238,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2229,
																"src": "54223:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(57 digits omitted)...0000"
																},
																"id": 2241,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 2239,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "54232:2:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "3634",
																	"id": 2240,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "54238:2:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_64_by_1",
																		"typeString": "int_const 64"
																	},
																	"value": "64"
																},
																"src": "54232:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(57 digits omitted)...0000"
																}
															},
															"src": "54223:17:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2254,
														"nodeType": "IfStatement",
														"src": "54219:103:0",
														"trueBody": {
															"id": 2253,
															"nodeType": "Block",
															"src": "54242:80:0",
															"statements": [
																{
																	"expression": {
																		"id": 2247,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2243,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2229,
																			"src": "54260:5:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(57 digits omitted)...0000"
																			},
																			"id": 2246,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 2244,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "54269:2:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "3634",
																				"id": 2245,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "54275:2:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_64_by_1",
																					"typeString": "int_const 64"
																				},
																				"value": "64"
																			},
																			"src": "54269:8:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(57 digits omitted)...0000"
																			}
																		},
																		"src": "54260:17:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2248,
																	"nodeType": "ExpressionStatement",
																	"src": "54260:17:0"
																},
																{
																	"expression": {
																		"id": 2251,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2249,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2235,
																			"src": "54295:6:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 2250,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "54305:2:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "54295:12:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2252,
																	"nodeType": "ExpressionStatement",
																	"src": "54295:12:0"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2259,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2255,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2229,
																"src": "54339:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(25 digits omitted)...0000"
																},
																"id": 2258,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 2256,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "54348:2:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "3332",
																	"id": 2257,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "54354:2:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "54348:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(25 digits omitted)...0000"
																}
															},
															"src": "54339:17:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2271,
														"nodeType": "IfStatement",
														"src": "54335:103:0",
														"trueBody": {
															"id": 2270,
															"nodeType": "Block",
															"src": "54358:80:0",
															"statements": [
																{
																	"expression": {
																		"id": 2264,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2260,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2229,
																			"src": "54376:5:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(25 digits omitted)...0000"
																			},
																			"id": 2263,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 2261,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "54385:2:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "3332",
																				"id": 2262,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "54391:2:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_32_by_1",
																					"typeString": "int_const 32"
																				},
																				"value": "32"
																			},
																			"src": "54385:8:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(25 digits omitted)...0000"
																			}
																		},
																		"src": "54376:17:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2265,
																	"nodeType": "ExpressionStatement",
																	"src": "54376:17:0"
																},
																{
																	"expression": {
																		"id": 2268,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2266,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2235,
																			"src": "54411:6:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 2267,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "54421:2:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "54411:12:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2269,
																	"nodeType": "ExpressionStatement",
																	"src": "54411:12:0"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2276,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2272,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2229,
																"src": "54455:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10000000000000000_by_1",
																	"typeString": "int_const 10000000000000000"
																},
																"id": 2275,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 2273,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "54464:2:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "3136",
																	"id": 2274,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "54470:2:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"src": "54464:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10000000000000000_by_1",
																	"typeString": "int_const 10000000000000000"
																}
															},
															"src": "54455:17:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2288,
														"nodeType": "IfStatement",
														"src": "54451:103:0",
														"trueBody": {
															"id": 2287,
															"nodeType": "Block",
															"src": "54474:80:0",
															"statements": [
																{
																	"expression": {
																		"id": 2281,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2277,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2229,
																			"src": "54492:5:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_10000000000000000_by_1",
																				"typeString": "int_const 10000000000000000"
																			},
																			"id": 2280,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 2278,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "54501:2:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "3136",
																				"id": 2279,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "54507:2:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_16_by_1",
																					"typeString": "int_const 16"
																				},
																				"value": "16"
																			},
																			"src": "54501:8:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10000000000000000_by_1",
																				"typeString": "int_const 10000000000000000"
																			}
																		},
																		"src": "54492:17:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2282,
																	"nodeType": "ExpressionStatement",
																	"src": "54492:17:0"
																},
																{
																	"expression": {
																		"id": 2285,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2283,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2235,
																			"src": "54527:6:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 2284,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "54537:2:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "54527:12:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2286,
																	"nodeType": "ExpressionStatement",
																	"src": "54527:12:0"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2293,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2289,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2229,
																"src": "54571:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_100000000_by_1",
																	"typeString": "int_const 100000000"
																},
																"id": 2292,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 2290,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "54580:2:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "38",
																	"id": 2291,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "54586:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "54580:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100000000_by_1",
																	"typeString": "int_const 100000000"
																}
															},
															"src": "54571:16:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2305,
														"nodeType": "IfStatement",
														"src": "54567:100:0",
														"trueBody": {
															"id": 2304,
															"nodeType": "Block",
															"src": "54589:78:0",
															"statements": [
																{
																	"expression": {
																		"id": 2298,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2294,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2229,
																			"src": "54607:5:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_100000000_by_1",
																				"typeString": "int_const 100000000"
																			},
																			"id": 2297,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 2295,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "54616:2:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "38",
																				"id": 2296,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "54622:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_8_by_1",
																					"typeString": "int_const 8"
																				},
																				"value": "8"
																			},
																			"src": "54616:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_100000000_by_1",
																				"typeString": "int_const 100000000"
																			}
																		},
																		"src": "54607:16:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2299,
																	"nodeType": "ExpressionStatement",
																	"src": "54607:16:0"
																},
																{
																	"expression": {
																		"id": 2302,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2300,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2235,
																			"src": "54641:6:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 2301,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "54651:1:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "54641:11:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2303,
																	"nodeType": "ExpressionStatement",
																	"src": "54641:11:0"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2310,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2306,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2229,
																"src": "54684:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10000_by_1",
																	"typeString": "int_const 10000"
																},
																"id": 2309,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 2307,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "54693:2:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "34",
																	"id": 2308,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "54699:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "54693:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10000_by_1",
																	"typeString": "int_const 10000"
																}
															},
															"src": "54684:16:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2322,
														"nodeType": "IfStatement",
														"src": "54680:100:0",
														"trueBody": {
															"id": 2321,
															"nodeType": "Block",
															"src": "54702:78:0",
															"statements": [
																{
																	"expression": {
																		"id": 2315,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2311,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2229,
																			"src": "54720:5:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_10000_by_1",
																				"typeString": "int_const 10000"
																			},
																			"id": 2314,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 2312,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "54729:2:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "34",
																				"id": 2313,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "54735:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_4_by_1",
																					"typeString": "int_const 4"
																				},
																				"value": "4"
																			},
																			"src": "54729:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10000_by_1",
																				"typeString": "int_const 10000"
																			}
																		},
																		"src": "54720:16:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2316,
																	"nodeType": "ExpressionStatement",
																	"src": "54720:16:0"
																},
																{
																	"expression": {
																		"id": 2319,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2317,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2235,
																			"src": "54754:6:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 2318,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "54764:1:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "54754:11:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2320,
																	"nodeType": "ExpressionStatement",
																	"src": "54754:11:0"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2327,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2323,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2229,
																"src": "54797:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_100_by_1",
																	"typeString": "int_const 100"
																},
																"id": 2326,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 2324,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "54806:2:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "32",
																	"id": 2325,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "54812:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"src": "54806:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100_by_1",
																	"typeString": "int_const 100"
																}
															},
															"src": "54797:16:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2339,
														"nodeType": "IfStatement",
														"src": "54793:100:0",
														"trueBody": {
															"id": 2338,
															"nodeType": "Block",
															"src": "54815:78:0",
															"statements": [
																{
																	"expression": {
																		"id": 2332,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2328,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2229,
																			"src": "54833:5:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_100_by_1",
																				"typeString": "int_const 100"
																			},
																			"id": 2331,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 2329,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "54842:2:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "32",
																				"id": 2330,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "54848:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_2_by_1",
																					"typeString": "int_const 2"
																				},
																				"value": "2"
																			},
																			"src": "54842:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_100_by_1",
																				"typeString": "int_const 100"
																			}
																		},
																		"src": "54833:16:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2333,
																	"nodeType": "ExpressionStatement",
																	"src": "54833:16:0"
																},
																{
																	"expression": {
																		"id": 2336,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2334,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2235,
																			"src": "54867:6:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 2335,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "54877:1:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "54867:11:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2337,
																	"nodeType": "ExpressionStatement",
																	"src": "54867:11:0"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2344,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2340,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2229,
																"src": "54910:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10_by_1",
																	"typeString": "int_const 10"
																},
																"id": 2343,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 2341,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "54919:2:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2342,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "54925:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "54919:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10_by_1",
																	"typeString": "int_const 10"
																}
															},
															"src": "54910:16:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2350,
														"nodeType": "IfStatement",
														"src": "54906:66:0",
														"trueBody": {
															"id": 2349,
															"nodeType": "Block",
															"src": "54928:44:0",
															"statements": [
																{
																	"expression": {
																		"id": 2347,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2345,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2235,
																			"src": "54946:6:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "31",
																			"id": 2346,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "54956:1:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "54946:11:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2348,
																	"nodeType": "ExpressionStatement",
																	"src": "54946:11:0"
																}
															]
														}
													}
												]
											},
											{
												"expression": {
													"id": 2352,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2235,
													"src": "54998:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2233,
												"id": 2353,
												"nodeType": "Return",
												"src": "54991:13:0"
											}
										]
									},
									"documentation": {
										"id": 2227,
										"nodeType": "StructuredDocumentation",
										"src": "53970:120:0",
										"text": " @dev Return the log in base 10 of a positive value rounded towards zero.\n Returns 0 if given 0."
									},
									"id": 2355,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log10",
									"nameLocation": "54104:5:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2230,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2229,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "54118:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 2355,
												"src": "54110:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2228,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "54110:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "54109:15:0"
									},
									"returnParameters": {
										"id": 2233,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2232,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2355,
												"src": "54148:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2231,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "54148:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "54147:9:0"
									},
									"scope": 2535,
									"src": "54095:916:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2389,
										"nodeType": "Block",
										"src": "55246:170:0",
										"statements": [
											{
												"id": 2388,
												"nodeType": "UncheckedBlock",
												"src": "55256:154:0",
												"statements": [
													{
														"assignments": [
															2367
														],
														"declarations": [
															{
																"constant": false,
																"id": 2367,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "55288:6:0",
																"nodeType": "VariableDeclaration",
																"scope": 2388,
																"src": "55280:14:0",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2366,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "55280:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2371,
														"initialValue": {
															"arguments": [
																{
																	"id": 2369,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2358,
																	"src": "55303:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2368,
																"name": "log10",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	2355,
																	2390
																],
																"referencedDeclaration": 2355,
																"src": "55297:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 2370,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "55297:12:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "55280:29:0"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2386,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2372,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2367,
																"src": "55330:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 2381,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"arguments": [
																					{
																						"id": 2374,
																						"name": "rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2361,
																						"src": "55357:8:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_enum$_Rounding_$1492",
																							"typeString": "enum Math.Rounding"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_enum$_Rounding_$1492",
																							"typeString": "enum Math.Rounding"
																						}
																					],
																					"id": 2373,
																					"name": "unsignedRoundsUp",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2534,
																					"src": "55340:16:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_pure$_t_enum$_Rounding_$1492_$returns$_t_bool_$",
																						"typeString": "function (enum Math.Rounding) pure returns (bool)"
																					}
																				},
																				"id": 2375,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "55340:26:0",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2380,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 2378,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "3130",
																						"id": 2376,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "55370:2:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_10_by_1",
																							"typeString": "int_const 10"
																						},
																						"value": "10"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "**",
																					"rightExpression": {
																						"id": 2377,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2367,
																						"src": "55376:6:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "55370:12:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 2379,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2358,
																					"src": "55385:5:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "55370:20:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "55340:50:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 2383,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "55397:1:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 2384,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "55340:58:0",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 2382,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "55393:1:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 2385,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "55339:60:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "55330:69:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 2365,
														"id": 2387,
														"nodeType": "Return",
														"src": "55323:76:0"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2356,
										"nodeType": "StructuredDocumentation",
										"src": "55017:143:0",
										"text": " @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."
									},
									"id": 2390,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log10",
									"nameLocation": "55174:5:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2362,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2358,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "55188:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 2390,
												"src": "55180:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2357,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "55180:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2361,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "55204:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 2390,
												"src": "55195:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$1492",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 2360,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2359,
														"name": "Rounding",
														"nameLocations": [
															"55195:8:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1492,
														"src": "55195:8:0"
													},
													"referencedDeclaration": 1492,
													"src": "55195:8:0",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$1492",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "55179:34:0"
									},
									"returnParameters": {
										"id": 2365,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2364,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2390,
												"src": "55237:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2363,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "55237:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "55236:9:0"
									},
									"scope": 2535,
									"src": "55165:251:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2476,
										"nodeType": "Block",
										"src": "55736:600:0",
										"statements": [
											{
												"assignments": [
													2399
												],
												"declarations": [
													{
														"constant": false,
														"id": 2399,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "55754:6:0",
														"nodeType": "VariableDeclaration",
														"scope": 2476,
														"src": "55746:14:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2398,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "55746:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2401,
												"initialValue": {
													"hexValue": "30",
													"id": 2400,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "55763:1:0",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "55746:18:0"
											},
											{
												"id": 2473,
												"nodeType": "UncheckedBlock",
												"src": "55774:533:0",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2406,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2404,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2402,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2393,
																	"src": "55802:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "313238",
																	"id": 2403,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "55811:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_128_by_1",
																		"typeString": "int_const 128"
																	},
																	"value": "128"
																},
																"src": "55802:12:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2405,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "55817:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "55802:16:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2416,
														"nodeType": "IfStatement",
														"src": "55798:98:0",
														"trueBody": {
															"id": 2415,
															"nodeType": "Block",
															"src": "55820:76:0",
															"statements": [
																{
																	"expression": {
																		"id": 2409,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2407,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2393,
																			"src": "55838:5:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "313238",
																			"id": 2408,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "55848:3:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_128_by_1",
																				"typeString": "int_const 128"
																			},
																			"value": "128"
																		},
																		"src": "55838:13:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2410,
																	"nodeType": "ExpressionStatement",
																	"src": "55838:13:0"
																},
																{
																	"expression": {
																		"id": 2413,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2411,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2399,
																			"src": "55869:6:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 2412,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "55879:2:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "55869:12:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2414,
																	"nodeType": "ExpressionStatement",
																	"src": "55869:12:0"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2421,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2419,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2417,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2393,
																	"src": "55913:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3634",
																	"id": 2418,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "55922:2:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_64_by_1",
																		"typeString": "int_const 64"
																	},
																	"value": "64"
																},
																"src": "55913:11:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2420,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "55927:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "55913:15:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2431,
														"nodeType": "IfStatement",
														"src": "55909:95:0",
														"trueBody": {
															"id": 2430,
															"nodeType": "Block",
															"src": "55930:74:0",
															"statements": [
																{
																	"expression": {
																		"id": 2424,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2422,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2393,
																			"src": "55948:5:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 2423,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "55958:2:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "55948:12:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2425,
																	"nodeType": "ExpressionStatement",
																	"src": "55948:12:0"
																},
																{
																	"expression": {
																		"id": 2428,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2426,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2399,
																			"src": "55978:6:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 2427,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "55988:1:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "55978:11:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2429,
																	"nodeType": "ExpressionStatement",
																	"src": "55978:11:0"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2436,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2434,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2432,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2393,
																	"src": "56021:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3332",
																	"id": 2433,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "56030:2:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "56021:11:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2435,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "56035:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "56021:15:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2446,
														"nodeType": "IfStatement",
														"src": "56017:95:0",
														"trueBody": {
															"id": 2445,
															"nodeType": "Block",
															"src": "56038:74:0",
															"statements": [
																{
																	"expression": {
																		"id": 2439,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2437,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2393,
																			"src": "56056:5:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 2438,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "56066:2:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "56056:12:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2440,
																	"nodeType": "ExpressionStatement",
																	"src": "56056:12:0"
																},
																{
																	"expression": {
																		"id": 2443,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2441,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2399,
																			"src": "56086:6:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 2442,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "56096:1:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "56086:11:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2444,
																	"nodeType": "ExpressionStatement",
																	"src": "56086:11:0"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2451,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2449,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2447,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2393,
																	"src": "56129:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3136",
																	"id": 2448,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "56138:2:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"src": "56129:11:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2450,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "56143:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "56129:15:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2461,
														"nodeType": "IfStatement",
														"src": "56125:95:0",
														"trueBody": {
															"id": 2460,
															"nodeType": "Block",
															"src": "56146:74:0",
															"statements": [
																{
																	"expression": {
																		"id": 2454,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2452,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2393,
																			"src": "56164:5:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 2453,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "56174:2:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "56164:12:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2455,
																	"nodeType": "ExpressionStatement",
																	"src": "56164:12:0"
																},
																{
																	"expression": {
																		"id": 2458,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2456,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2399,
																			"src": "56194:6:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 2457,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "56204:1:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "56194:11:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2459,
																	"nodeType": "ExpressionStatement",
																	"src": "56194:11:0"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2466,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2464,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2462,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2393,
																	"src": "56237:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "38",
																	"id": 2463,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "56246:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "56237:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2465,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "56250:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "56237:14:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2472,
														"nodeType": "IfStatement",
														"src": "56233:64:0",
														"trueBody": {
															"id": 2471,
															"nodeType": "Block",
															"src": "56253:44:0",
															"statements": [
																{
																	"expression": {
																		"id": 2469,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2467,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2399,
																			"src": "56271:6:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "31",
																			"id": 2468,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "56281:1:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "56271:11:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2470,
																	"nodeType": "ExpressionStatement",
																	"src": "56271:11:0"
																}
															]
														}
													}
												]
											},
											{
												"expression": {
													"id": 2474,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2399,
													"src": "56323:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2397,
												"id": 2475,
												"nodeType": "Return",
												"src": "56316:13:0"
											}
										]
									},
									"documentation": {
										"id": 2391,
										"nodeType": "StructuredDocumentation",
										"src": "55422:246:0",
										"text": " @dev Return the log in base 256 of a positive value rounded towards zero.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."
									},
									"id": 2477,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log256",
									"nameLocation": "55682:6:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2394,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2393,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "55697:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 2477,
												"src": "55689:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2392,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "55689:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "55688:15:0"
									},
									"returnParameters": {
										"id": 2397,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2396,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2477,
												"src": "55727:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2395,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "55727:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "55726:9:0"
									},
									"scope": 2535,
									"src": "55673:663:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2514,
										"nodeType": "Block",
										"src": "56573:177:0",
										"statements": [
											{
												"id": 2513,
												"nodeType": "UncheckedBlock",
												"src": "56583:161:0",
												"statements": [
													{
														"assignments": [
															2489
														],
														"declarations": [
															{
																"constant": false,
																"id": 2489,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "56615:6:0",
																"nodeType": "VariableDeclaration",
																"scope": 2513,
																"src": "56607:14:0",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2488,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "56607:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2493,
														"initialValue": {
															"arguments": [
																{
																	"id": 2491,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2480,
																	"src": "56631:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2490,
																"name": "log256",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	2477,
																	2515
																],
																"referencedDeclaration": 2477,
																"src": "56624:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 2492,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "56624:13:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "56607:30:0"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2511,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2494,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2489,
																"src": "56658:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 2506,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"arguments": [
																					{
																						"id": 2496,
																						"name": "rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2483,
																						"src": "56685:8:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_enum$_Rounding_$1492",
																							"typeString": "enum Math.Rounding"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_enum$_Rounding_$1492",
																							"typeString": "enum Math.Rounding"
																						}
																					],
																					"id": 2495,
																					"name": "unsignedRoundsUp",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2534,
																					"src": "56668:16:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_pure$_t_enum$_Rounding_$1492_$returns$_t_bool_$",
																						"typeString": "function (enum Math.Rounding) pure returns (bool)"
																					}
																				},
																				"id": 2497,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "56668:26:0",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2505,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 2503,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "31",
																						"id": 2498,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "56698:1:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_1_by_1",
																							"typeString": "int_const 1"
																						},
																						"value": "1"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "<<",
																					"rightExpression": {
																						"components": [
																							{
																								"commonType": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								"id": 2501,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"leftExpression": {
																									"id": 2499,
																									"name": "result",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 2489,
																									"src": "56704:6:0",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "<<",
																								"rightExpression": {
																									"hexValue": "33",
																									"id": 2500,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "56714:1:0",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_3_by_1",
																										"typeString": "int_const 3"
																									},
																									"value": "3"
																								},
																								"src": "56704:11:0",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							}
																						],
																						"id": 2502,
																						"isConstant": false,
																						"isInlineArray": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"nodeType": "TupleExpression",
																						"src": "56703:13:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "56698:18:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 2504,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2480,
																					"src": "56719:5:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "56698:26:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "56668:56:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 2508,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "56731:1:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 2509,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "56668:64:0",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 2507,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "56727:1:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 2510,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "56667:66:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "56658:75:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 2487,
														"id": 2512,
														"nodeType": "Return",
														"src": "56651:82:0"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2478,
										"nodeType": "StructuredDocumentation",
										"src": "56342:144:0",
										"text": " @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."
									},
									"id": 2515,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log256",
									"nameLocation": "56500:6:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2484,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2480,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "56515:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 2515,
												"src": "56507:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2479,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "56507:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2483,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "56531:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 2515,
												"src": "56522:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$1492",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 2482,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2481,
														"name": "Rounding",
														"nameLocations": [
															"56522:8:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1492,
														"src": "56522:8:0"
													},
													"referencedDeclaration": 1492,
													"src": "56522:8:0",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$1492",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "56506:34:0"
									},
									"returnParameters": {
										"id": 2487,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2486,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2515,
												"src": "56564:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2485,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "56564:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "56563:9:0"
									},
									"scope": 2535,
									"src": "56491:259:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2533,
										"nodeType": "Block",
										"src": "56948:48:0",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													},
													"id": 2531,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														},
														"id": 2529,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"arguments": [
																{
																	"id": 2526,
																	"name": "rounding",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2519,
																	"src": "56971:8:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_enum$_Rounding_$1492",
																		"typeString": "enum Math.Rounding"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_enum$_Rounding_$1492",
																		"typeString": "enum Math.Rounding"
																	}
																],
																"id": 2525,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "56965:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint8_$",
																	"typeString": "type(uint8)"
																},
																"typeName": {
																	"id": 2524,
																	"name": "uint8",
																	"nodeType": "ElementaryTypeName",
																	"src": "56965:5:0",
																	"typeDescriptions": {}
																}
															},
															"id": 2527,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "56965:15:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "%",
														"rightExpression": {
															"hexValue": "32",
															"id": 2528,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "56983:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"src": "56965:19:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "31",
														"id": 2530,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "56988:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "56965:24:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 2523,
												"id": 2532,
												"nodeType": "Return",
												"src": "56958:31:0"
											}
										]
									},
									"documentation": {
										"id": 2516,
										"nodeType": "StructuredDocumentation",
										"src": "56756:113:0",
										"text": " @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers."
									},
									"id": 2534,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "unsignedRoundsUp",
									"nameLocation": "56883:16:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2520,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2519,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "56909:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 2534,
												"src": "56900:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$1492",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 2518,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2517,
														"name": "Rounding",
														"nameLocations": [
															"56900:8:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1492,
														"src": "56900:8:0"
													},
													"referencedDeclaration": 1492,
													"src": "56900:8:0",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$1492",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "56899:19:0"
									},
									"returnParameters": {
										"id": 2523,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2522,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2534,
												"src": "56942:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2521,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "56942:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "56941:6:0"
									},
									"scope": 2535,
									"src": "56874:122:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 3830,
							"src": "42084:14914:0",
							"usedErrors": [
								1487
							],
							"usedEvents": []
						},
						{
							"id": 2536,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "57138:24:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "SignedMath",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2537,
								"nodeType": "StructuredDocumentation",
								"src": "57164:80:0",
								"text": " @dev Standard signed math utilities missing in the Solidity language."
							},
							"fullyImplemented": true,
							"id": 2639,
							"linearizedBaseContracts": [
								2639
							],
							"name": "SignedMath",
							"nameLocation": "57253:10:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 2554,
										"nodeType": "Block",
										"src": "57405:37:0",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"id": 2549,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2547,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2540,
															"src": "57422:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"id": 2548,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2542,
															"src": "57426:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"src": "57422:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"id": 2551,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2542,
														"src": "57434:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"id": 2552,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "57422:13:0",
													"trueExpression": {
														"id": 2550,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2540,
														"src": "57430:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"functionReturnParameters": 2546,
												"id": 2553,
												"nodeType": "Return",
												"src": "57415:20:0"
											}
										]
									},
									"documentation": {
										"id": 2538,
										"nodeType": "StructuredDocumentation",
										"src": "57270:66:0",
										"text": " @dev Returns the largest of two signed numbers."
									},
									"id": 2555,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "max",
									"nameLocation": "57350:3:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2543,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2540,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "57361:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 2555,
												"src": "57354:8:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 2539,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "57354:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2542,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "57371:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 2555,
												"src": "57364:8:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 2541,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "57364:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "57353:20:0"
									},
									"returnParameters": {
										"id": 2546,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2545,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2555,
												"src": "57397:6:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 2544,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "57397:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "57396:8:0"
									},
									"scope": 2639,
									"src": "57341:101:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2572,
										"nodeType": "Block",
										"src": "57584:37:0",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"id": 2567,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2565,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2558,
															"src": "57601:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"id": 2566,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2560,
															"src": "57605:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"src": "57601:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"id": 2569,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2560,
														"src": "57613:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"id": 2570,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "57601:13:0",
													"trueExpression": {
														"id": 2568,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2558,
														"src": "57609:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"functionReturnParameters": 2564,
												"id": 2571,
												"nodeType": "Return",
												"src": "57594:20:0"
											}
										]
									},
									"documentation": {
										"id": 2556,
										"nodeType": "StructuredDocumentation",
										"src": "57448:67:0",
										"text": " @dev Returns the smallest of two signed numbers."
									},
									"id": 2573,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "min",
									"nameLocation": "57529:3:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2561,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2558,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "57540:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 2573,
												"src": "57533:8:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 2557,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "57533:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2560,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "57550:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 2573,
												"src": "57543:8:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 2559,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "57543:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "57532:20:0"
									},
									"returnParameters": {
										"id": 2564,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2563,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2573,
												"src": "57576:6:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 2562,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "57576:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "57575:8:0"
									},
									"scope": 2639,
									"src": "57520:101:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2616,
										"nodeType": "Block",
										"src": "57826:162:0",
										"statements": [
											{
												"assignments": [
													2584
												],
												"declarations": [
													{
														"constant": false,
														"id": 2584,
														"mutability": "mutable",
														"name": "x",
														"nameLocation": "57895:1:0",
														"nodeType": "VariableDeclaration",
														"scope": 2616,
														"src": "57888:8:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"typeName": {
															"id": 2583,
															"name": "int256",
															"nodeType": "ElementaryTypeName",
															"src": "57888:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2597,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													},
													"id": 2596,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 2587,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2585,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2576,
																	"src": "57900:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&",
																"rightExpression": {
																	"id": 2586,
																	"name": "b",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2578,
																	"src": "57904:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"src": "57900:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															}
														],
														"id": 2588,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "57899:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 2594,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			},
																			"id": 2591,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2589,
																				"name": "a",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2576,
																				"src": "57911:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "^",
																			"rightExpression": {
																				"id": 2590,
																				"name": "b",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2578,
																				"src": "57915:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			},
																			"src": "57911:5:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		}
																	],
																	"id": 2592,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "57910:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2593,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "57921:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "57910:12:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															}
														],
														"id": 2595,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "57909:14:0",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"src": "57899:24:0",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "57888:35:0"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													},
													"id": 2614,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2598,
														"name": "x",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2584,
														"src": "57940:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 2612,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2606,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"arguments": [
																					{
																						"id": 2603,
																						"name": "x",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2584,
																						"src": "57960:1:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_int256",
																							"typeString": "int256"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_int256",
																							"typeString": "int256"
																						}
																					],
																					"id": 2602,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "57952:7:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_uint256_$",
																						"typeString": "type(uint256)"
																					},
																					"typeName": {
																						"id": 2601,
																						"name": "uint256",
																						"nodeType": "ElementaryTypeName",
																						"src": "57952:7:0",
																						"typeDescriptions": {}
																					}
																				},
																				"id": 2604,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "typeConversion",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "57952:10:0",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": ">>",
																			"rightExpression": {
																				"hexValue": "323535",
																				"id": 2605,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "57966:3:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_255_by_1",
																					"typeString": "int_const 255"
																				},
																				"value": "255"
																			},
																			"src": "57952:17:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 2600,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "57945:6:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_int256_$",
																			"typeString": "type(int256)"
																		},
																		"typeName": {
																			"id": 2599,
																			"name": "int256",
																			"nodeType": "ElementaryTypeName",
																			"src": "57945:6:0",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 2607,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "57945:25:0",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&",
																"rightExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			},
																			"id": 2610,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2608,
																				"name": "a",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2576,
																				"src": "57974:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "^",
																			"rightExpression": {
																				"id": 2609,
																				"name": "b",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2578,
																				"src": "57978:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			},
																			"src": "57974:5:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		}
																	],
																	"id": 2611,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "57973:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"src": "57945:35:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															}
														],
														"id": 2613,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "57944:37:0",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"src": "57940:41:0",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"functionReturnParameters": 2582,
												"id": 2615,
												"nodeType": "Return",
												"src": "57933:48:0"
											}
										]
									},
									"documentation": {
										"id": 2574,
										"nodeType": "StructuredDocumentation",
										"src": "57627:126:0",
										"text": " @dev Returns the average of two signed numbers without overflow.\n The result is rounded towards zero."
									},
									"id": 2617,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "average",
									"nameLocation": "57767:7:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2579,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2576,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "57782:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 2617,
												"src": "57775:8:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 2575,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "57775:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2578,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "57792:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 2617,
												"src": "57785:8:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 2577,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "57785:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "57774:20:0"
									},
									"returnParameters": {
										"id": 2582,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2581,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2617,
												"src": "57818:6:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 2580,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "57818:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "57817:8:0"
									},
									"scope": 2639,
									"src": "57758:230:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2637,
										"nodeType": "Block",
										"src": "58132:158:0",
										"statements": [
											{
												"id": 2636,
												"nodeType": "UncheckedBlock",
												"src": "58142:142:0",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"condition": {
																		"commonType": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		},
																		"id": 2629,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2627,
																			"name": "n",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2620,
																			"src": "58257:1:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": ">=",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 2628,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "58262:1:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "58257:6:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"falseExpression": {
																		"id": 2632,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "-",
																		"prefix": true,
																		"src": "58270:2:0",
																		"subExpression": {
																			"id": 2631,
																			"name": "n",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2620,
																			"src": "58271:1:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		}
																	},
																	"id": 2633,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "Conditional",
																	"src": "58257:15:0",
																	"trueExpression": {
																		"id": 2630,
																		"name": "n",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2620,
																		"src": "58266:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		}
																	},
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																],
																"id": 2626,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "58249:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint256_$",
																	"typeString": "type(uint256)"
																},
																"typeName": {
																	"id": 2625,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "58249:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 2634,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "58249:24:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 2624,
														"id": 2635,
														"nodeType": "Return",
														"src": "58242:31:0"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2618,
										"nodeType": "StructuredDocumentation",
										"src": "57994:78:0",
										"text": " @dev Returns the absolute unsigned value of a signed value."
									},
									"id": 2638,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "abs",
									"nameLocation": "58086:3:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2621,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2620,
												"mutability": "mutable",
												"name": "n",
												"nameLocation": "58097:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 2638,
												"src": "58090:8:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 2619,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "58090:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "58089:10:0"
									},
									"returnParameters": {
										"id": 2624,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2623,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2638,
												"src": "58123:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2622,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "58123:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "58122:9:0"
									},
									"scope": 2639,
									"src": "58077:213:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 3830,
							"src": "57245:1047:0",
							"usedErrors": [],
							"usedEvents": []
						},
						{
							"id": 2640,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "58416:24:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Strings",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2641,
								"nodeType": "StructuredDocumentation",
								"src": "58444:34:0",
								"text": " @dev String operations."
							},
							"fullyImplemented": true,
							"id": 2889,
							"linearizedBaseContracts": [
								2889
							],
							"name": "Strings",
							"nameLocation": "58487:7:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 2644,
									"mutability": "constant",
									"name": "HEX_DIGITS",
									"nameLocation": "58526:10:0",
									"nodeType": "VariableDeclaration",
									"scope": 2889,
									"src": "58501:56:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes16",
										"typeString": "bytes16"
									},
									"typeName": {
										"id": 2642,
										"name": "bytes16",
										"nodeType": "ElementaryTypeName",
										"src": "58501:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes16",
											"typeString": "bytes16"
										}
									},
									"value": {
										"hexValue": "30313233343536373839616263646566",
										"id": 2643,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "string",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "58539:18:0",
										"typeDescriptions": {
											"typeIdentifier": "t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f",
											"typeString": "literal_string \"0123456789abcdef\""
										},
										"value": "0123456789abcdef"
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"id": 2647,
									"mutability": "constant",
									"name": "ADDRESS_LENGTH",
									"nameLocation": "58586:14:0",
									"nodeType": "VariableDeclaration",
									"scope": 2889,
									"src": "58563:42:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint8",
										"typeString": "uint8"
									},
									"typeName": {
										"id": 2645,
										"name": "uint8",
										"nodeType": "ElementaryTypeName",
										"src": "58563:5:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"value": {
										"hexValue": "3230",
										"id": 2646,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "58603:2:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_20_by_1",
											"typeString": "int_const 20"
										},
										"value": "20"
									},
									"visibility": "private"
								},
								{
									"documentation": {
										"id": 2648,
										"nodeType": "StructuredDocumentation",
										"src": "58612:81:0",
										"text": " @dev The `value` string doesn't fit in the specified `length`."
									},
									"errorSelector": "e22e27eb",
									"id": 2654,
									"name": "StringsInsufficientHexLength",
									"nameLocation": "58704:28:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2653,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2650,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "58741:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 2654,
												"src": "58733:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2649,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "58733:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2652,
												"mutability": "mutable",
												"name": "length",
												"nameLocation": "58756:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 2654,
												"src": "58748:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2651,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "58748:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "58732:31:0"
									},
									"src": "58698:66:0"
								},
								{
									"body": {
										"id": 2701,
										"nodeType": "Block",
										"src": "58936:627:0",
										"statements": [
											{
												"id": 2700,
												"nodeType": "UncheckedBlock",
												"src": "58946:611:0",
												"statements": [
													{
														"assignments": [
															2663
														],
														"declarations": [
															{
																"constant": false,
																"id": 2663,
																"mutability": "mutable",
																"name": "length",
																"nameLocation": "58978:6:0",
																"nodeType": "VariableDeclaration",
																"scope": 2700,
																"src": "58970:14:0",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2662,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "58970:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2670,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2669,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [
																	{
																		"id": 2666,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2657,
																		"src": "58998:5:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 2664,
																		"name": "Math",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2535,
																		"src": "58987:4:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_Math_$2535_$",
																			"typeString": "type(library Math)"
																		}
																	},
																	"id": 2665,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "58992:5:0",
																	"memberName": "log10",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2355,
																	"src": "58987:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																		"typeString": "function (uint256) pure returns (uint256)"
																	}
																},
																"id": 2667,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "58987:17:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"hexValue": "31",
																"id": 2668,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "59007:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "58987:21:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "58970:38:0"
													},
													{
														"assignments": [
															2672
														],
														"declarations": [
															{
																"constant": false,
																"id": 2672,
																"mutability": "mutable",
																"name": "buffer",
																"nameLocation": "59036:6:0",
																"nodeType": "VariableDeclaration",
																"scope": 2700,
																"src": "59022:20:0",
																"stateVariable": false,
																"storageLocation": "memory",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_memory_ptr",
																	"typeString": "string"
																},
																"typeName": {
																	"id": 2671,
																	"name": "string",
																	"nodeType": "ElementaryTypeName",
																	"src": "59022:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_storage_ptr",
																		"typeString": "string"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2677,
														"initialValue": {
															"arguments": [
																{
																	"id": 2675,
																	"name": "length",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2663,
																	"src": "59056:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2674,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "NewExpression",
																"src": "59045:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
																	"typeString": "function (uint256) pure returns (string memory)"
																},
																"typeName": {
																	"id": 2673,
																	"name": "string",
																	"nodeType": "ElementaryTypeName",
																	"src": "59049:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_storage_ptr",
																		"typeString": "string"
																	}
																}
															},
															"id": 2676,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "59045:18:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "59022:41:0"
													},
													{
														"assignments": [
															2679
														],
														"declarations": [
															{
																"constant": false,
																"id": 2679,
																"mutability": "mutable",
																"name": "ptr",
																"nameLocation": "59085:3:0",
																"nodeType": "VariableDeclaration",
																"scope": 2700,
																"src": "59077:11:0",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2678,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "59077:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2680,
														"nodeType": "VariableDeclarationStatement",
														"src": "59077:11:0"
													},
													{
														"AST": {
															"nodeType": "YulBlock",
															"src": "59158:67:0",
															"statements": [
																{
																	"nodeType": "YulAssignment",
																	"src": "59176:35:0",
																	"value": {
																		"arguments": [
																			{
																				"name": "buffer",
																				"nodeType": "YulIdentifier",
																				"src": "59187:6:0"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "59199:2:0",
																						"type": "",
																						"value": "32"
																					},
																					{
																						"name": "length",
																						"nodeType": "YulIdentifier",
																						"src": "59203:6:0"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "59195:3:0"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "59195:15:0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "59183:3:0"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "59183:28:0"
																	},
																	"variableNames": [
																		{
																			"name": "ptr",
																			"nodeType": "YulIdentifier",
																			"src": "59176:3:0"
																		}
																	]
																}
															]
														},
														"documentation": "@solidity memory-safe-assembly",
														"evmVersion": "shanghai",
														"externalReferences": [
															{
																"declaration": 2672,
																"isOffset": false,
																"isSlot": false,
																"src": "59187:6:0",
																"valueSize": 1
															},
															{
																"declaration": 2663,
																"isOffset": false,
																"isSlot": false,
																"src": "59203:6:0",
																"valueSize": 1
															},
															{
																"declaration": 2679,
																"isOffset": false,
																"isSlot": false,
																"src": "59176:3:0",
																"valueSize": 1
															}
														],
														"id": 2681,
														"nodeType": "InlineAssembly",
														"src": "59149:76:0"
													},
													{
														"body": {
															"id": 2696,
															"nodeType": "Block",
															"src": "59251:269:0",
															"statements": [
																{
																	"expression": {
																		"id": 2684,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "--",
																		"prefix": false,
																		"src": "59269:5:0",
																		"subExpression": {
																			"id": 2683,
																			"name": "ptr",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2679,
																			"src": "59269:3:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2685,
																	"nodeType": "ExpressionStatement",
																	"src": "59269:5:0"
																},
																{
																	"AST": {
																		"nodeType": "YulBlock",
																		"src": "59352:86:0",
																		"statements": [
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "ptr",
																							"nodeType": "YulIdentifier",
																							"src": "59382:3:0"
																						},
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "value",
																											"nodeType": "YulIdentifier",
																											"src": "59396:5:0"
																										},
																										{
																											"kind": "number",
																											"nodeType": "YulLiteral",
																											"src": "59403:2:0",
																											"type": "",
																											"value": "10"
																										}
																									],
																									"functionName": {
																										"name": "mod",
																										"nodeType": "YulIdentifier",
																										"src": "59392:3:0"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "59392:14:0"
																								},
																								{
																									"name": "HEX_DIGITS",
																									"nodeType": "YulIdentifier",
																									"src": "59408:10:0"
																								}
																							],
																							"functionName": {
																								"name": "byte",
																								"nodeType": "YulIdentifier",
																								"src": "59387:4:0"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "59387:32:0"
																						}
																					],
																					"functionName": {
																						"name": "mstore8",
																						"nodeType": "YulIdentifier",
																						"src": "59374:7:0"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "59374:46:0"
																				},
																				"nodeType": "YulExpressionStatement",
																				"src": "59374:46:0"
																			}
																		]
																	},
																	"documentation": "@solidity memory-safe-assembly",
																	"evmVersion": "shanghai",
																	"externalReferences": [
																		{
																			"declaration": 2644,
																			"isOffset": false,
																			"isSlot": false,
																			"src": "59408:10:0",
																			"valueSize": 1
																		},
																		{
																			"declaration": 2679,
																			"isOffset": false,
																			"isSlot": false,
																			"src": "59382:3:0",
																			"valueSize": 1
																		},
																		{
																			"declaration": 2657,
																			"isOffset": false,
																			"isSlot": false,
																			"src": "59396:5:0",
																			"valueSize": 1
																		}
																	],
																	"id": 2686,
																	"nodeType": "InlineAssembly",
																	"src": "59343:95:0"
																},
																{
																	"expression": {
																		"id": 2689,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2687,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2657,
																			"src": "59455:5:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"hexValue": "3130",
																			"id": 2688,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "59464:2:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10_by_1",
																				"typeString": "int_const 10"
																			},
																			"value": "10"
																		},
																		"src": "59455:11:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2690,
																	"nodeType": "ExpressionStatement",
																	"src": "59455:11:0"
																},
																{
																	"condition": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2693,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2691,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2657,
																			"src": "59488:5:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 2692,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "59497:1:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "59488:10:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"id": 2695,
																	"nodeType": "IfStatement",
																	"src": "59484:21:0",
																	"trueBody": {
																		"id": 2694,
																		"nodeType": "Break",
																		"src": "59500:5:0"
																	}
																}
															]
														},
														"condition": {
															"hexValue": "74727565",
															"id": 2682,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "59245:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														},
														"id": 2697,
														"nodeType": "WhileStatement",
														"src": "59238:282:0"
													},
													{
														"expression": {
															"id": 2698,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2672,
															"src": "59540:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														"functionReturnParameters": 2661,
														"id": 2699,
														"nodeType": "Return",
														"src": "59533:13:0"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2655,
										"nodeType": "StructuredDocumentation",
										"src": "58770:90:0",
										"text": " @dev Converts a `uint256` to its ASCII `string` decimal representation."
									},
									"id": 2702,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toString",
									"nameLocation": "58874:8:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2658,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2657,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "58891:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 2702,
												"src": "58883:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2656,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "58883:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "58882:15:0"
									},
									"returnParameters": {
										"id": 2661,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2660,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2702,
												"src": "58921:13:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2659,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "58921:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "58920:15:0"
									},
									"scope": 2889,
									"src": "58865:698:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2727,
										"nodeType": "Block",
										"src": "59739:92:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 2715,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2713,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2705,
																	"src": "59770:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 2714,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "59778:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "59770:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseExpression": {
																"hexValue": "",
																"id": 2717,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "string",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "59788:2:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																},
																"value": ""
															},
															"id": 2718,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "Conditional",
															"src": "59770:20:0",
															"trueExpression": {
																"hexValue": "2d",
																"id": 2716,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "string",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "59782:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_stringliteral_d3b8281179950f98149eefdb158d0e1acb56f56e8e343aa9fefafa7e36959561",
																	"typeString": "literal_string \"-\""
																},
																"value": "-"
															},
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 2722,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2705,
																			"src": "59816:5:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		],
																		"expression": {
																			"id": 2720,
																			"name": "SignedMath",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2639,
																			"src": "59801:10:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_SignedMath_$2639_$",
																				"typeString": "type(library SignedMath)"
																			}
																		},
																		"id": 2721,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "59812:3:0",
																		"memberName": "abs",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 2638,
																		"src": "59801:14:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_int256_$returns$_t_uint256_$",
																			"typeString": "function (int256) pure returns (uint256)"
																		}
																	},
																	"id": 2723,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "59801:21:0",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2719,
																"name": "toString",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2702,
																"src": "59792:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
																	"typeString": "function (uint256) pure returns (string memory)"
																}
															},
															"id": 2724,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "59792:31:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"expression": {
															"id": 2711,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "59756:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_string_storage_ptr_$",
																"typeString": "type(string storage pointer)"
															},
															"typeName": {
																"id": 2710,
																"name": "string",
																"nodeType": "ElementaryTypeName",
																"src": "59756:6:0",
																"typeDescriptions": {}
															}
														},
														"id": 2712,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "59763:6:0",
														"memberName": "concat",
														"nodeType": "MemberAccess",
														"src": "59756:13:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_stringconcat_pure$__$returns$_t_string_memory_ptr_$",
															"typeString": "function () pure returns (string memory)"
														}
													},
													"id": 2725,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "59756:68:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 2709,
												"id": 2726,
												"nodeType": "Return",
												"src": "59749:75:0"
											}
										]
									},
									"documentation": {
										"id": 2703,
										"nodeType": "StructuredDocumentation",
										"src": "59569:89:0",
										"text": " @dev Converts a `int256` to its ASCII `string` decimal representation."
									},
									"id": 2728,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toStringSigned",
									"nameLocation": "59672:14:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2706,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2705,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "59694:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 2728,
												"src": "59687:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 2704,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "59687:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "59686:14:0"
									},
									"returnParameters": {
										"id": 2709,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2708,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2728,
												"src": "59724:13:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2707,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "59724:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "59723:15:0"
									},
									"scope": 2889,
									"src": "59663:168:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2747,
										"nodeType": "Block",
										"src": "60010:100:0",
										"statements": [
											{
												"id": 2746,
												"nodeType": "UncheckedBlock",
												"src": "60020:84:0",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"id": 2737,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2731,
																	"src": "60063:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2743,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"arguments": [
																			{
																				"id": 2740,
																				"name": "value",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2731,
																				"src": "60082:5:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"expression": {
																				"id": 2738,
																				"name": "Math",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2535,
																				"src": "60070:4:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_contract$_Math_$2535_$",
																					"typeString": "type(library Math)"
																				}
																			},
																			"id": 2739,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "60075:6:0",
																			"memberName": "log256",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 2477,
																			"src": "60070:11:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																				"typeString": "function (uint256) pure returns (uint256)"
																			}
																		},
																		"id": 2741,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "60070:18:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "+",
																	"rightExpression": {
																		"hexValue": "31",
																		"id": 2742,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "60091:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		},
																		"value": "1"
																	},
																	"src": "60070:22:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2736,
																"name": "toHexString",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	2748,
																	2831,
																	2851
																],
																"referencedDeclaration": 2831,
																"src": "60051:11:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$",
																	"typeString": "function (uint256,uint256) pure returns (string memory)"
																}
															},
															"id": 2744,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "60051:42:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														"functionReturnParameters": 2735,
														"id": 2745,
														"nodeType": "Return",
														"src": "60044:49:0"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2729,
										"nodeType": "StructuredDocumentation",
										"src": "59837:94:0",
										"text": " @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."
									},
									"id": 2748,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toHexString",
									"nameLocation": "59945:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2732,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2731,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "59965:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 2748,
												"src": "59957:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2730,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "59957:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "59956:15:0"
									},
									"returnParameters": {
										"id": 2735,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2734,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2748,
												"src": "59995:13:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2733,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "59995:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "59994:15:0"
									},
									"scope": 2889,
									"src": "59936:174:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2830,
										"nodeType": "Block",
										"src": "60323:435:0",
										"statements": [
											{
												"assignments": [
													2759
												],
												"declarations": [
													{
														"constant": false,
														"id": 2759,
														"mutability": "mutable",
														"name": "localValue",
														"nameLocation": "60341:10:0",
														"nodeType": "VariableDeclaration",
														"scope": 2830,
														"src": "60333:18:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2758,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "60333:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2761,
												"initialValue": {
													"id": 2760,
													"name": "value",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2751,
													"src": "60354:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "60333:26:0"
											},
											{
												"assignments": [
													2763
												],
												"declarations": [
													{
														"constant": false,
														"id": 2763,
														"mutability": "mutable",
														"name": "buffer",
														"nameLocation": "60382:6:0",
														"nodeType": "VariableDeclaration",
														"scope": 2830,
														"src": "60369:19:0",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 2762,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "60369:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2772,
												"initialValue": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2770,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2768,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2766,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "60401:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 2767,
																	"name": "length",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2753,
																	"src": "60405:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "60401:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"hexValue": "32",
																"id": 2769,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "60414:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"src": "60401:14:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 2765,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "60391:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (uint256) pure returns (bytes memory)"
														},
														"typeName": {
															"id": 2764,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "60395:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														}
													},
													"id": 2771,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "60391:25:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "60369:47:0"
											},
											{
												"expression": {
													"id": 2777,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 2773,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2763,
															"src": "60426:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 2775,
														"indexExpression": {
															"hexValue": "30",
															"id": 2774,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "60433:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "60426:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes1",
															"typeString": "bytes1"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "30",
														"id": 2776,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "string",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "60438:3:0",
														"typeDescriptions": {
															"typeIdentifier": "t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d",
															"typeString": "literal_string \"0\""
														},
														"value": "0"
													},
													"src": "60426:15:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes1",
														"typeString": "bytes1"
													}
												},
												"id": 2778,
												"nodeType": "ExpressionStatement",
												"src": "60426:15:0"
											},
											{
												"expression": {
													"id": 2783,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 2779,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2763,
															"src": "60451:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 2781,
														"indexExpression": {
															"hexValue": "31",
															"id": 2780,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "60458:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "60451:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes1",
															"typeString": "bytes1"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "78",
														"id": 2782,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "string",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "60463:3:0",
														"typeDescriptions": {
															"typeIdentifier": "t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83",
															"typeString": "literal_string \"x\""
														},
														"value": "x"
													},
													"src": "60451:15:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes1",
														"typeString": "bytes1"
													}
												},
												"id": 2784,
												"nodeType": "ExpressionStatement",
												"src": "60451:15:0"
											},
											{
												"body": {
													"id": 2813,
													"nodeType": "Block",
													"src": "60521:95:0",
													"statements": [
														{
															"expression": {
																"id": 2807,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 2799,
																		"name": "buffer",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2763,
																		"src": "60535:6:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 2801,
																	"indexExpression": {
																		"id": 2800,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2786,
																		"src": "60542:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "60535:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"baseExpression": {
																		"id": 2802,
																		"name": "HEX_DIGITS",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2644,
																		"src": "60547:10:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes16",
																			"typeString": "bytes16"
																		}
																	},
																	"id": 2806,
																	"indexExpression": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2805,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2803,
																			"name": "localValue",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2759,
																			"src": "60558:10:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "&",
																		"rightExpression": {
																			"hexValue": "307866",
																			"id": 2804,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "60571:3:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_15_by_1",
																				"typeString": "int_const 15"
																			},
																			"value": "0xf"
																		},
																		"src": "60558:16:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "60547:28:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"src": "60535:40:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes1",
																	"typeString": "bytes1"
																}
															},
															"id": 2808,
															"nodeType": "ExpressionStatement",
															"src": "60535:40:0"
														},
														{
															"expression": {
																"id": 2811,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 2809,
																	"name": "localValue",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2759,
																	"src": "60589:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": ">>=",
																"rightHandSide": {
																	"hexValue": "34",
																	"id": 2810,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "60604:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "60589:16:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 2812,
															"nodeType": "ExpressionStatement",
															"src": "60589:16:0"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2795,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2793,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2786,
														"src": "60509:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "31",
														"id": 2794,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "60513:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "60509:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2814,
												"initializationExpression": {
													"assignments": [
														2786
													],
													"declarations": [
														{
															"constant": false,
															"id": 2786,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "60489:1:0",
															"nodeType": "VariableDeclaration",
															"scope": 2814,
															"src": "60481:9:0",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 2785,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "60481:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 2792,
													"initialValue": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2791,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2789,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "32",
																"id": 2787,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "60493:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 2788,
																"name": "length",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2753,
																"src": "60497:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "60493:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"hexValue": "31",
															"id": 2790,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "60506:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "60493:14:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "60481:26:0"
												},
												"loopExpression": {
													"expression": {
														"id": 2797,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "--",
														"prefix": true,
														"src": "60516:3:0",
														"subExpression": {
															"id": 2796,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2786,
															"src": "60518:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2798,
													"nodeType": "ExpressionStatement",
													"src": "60516:3:0"
												},
												"nodeType": "ForStatement",
												"src": "60476:140:0"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2817,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2815,
														"name": "localValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2759,
														"src": "60629:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 2816,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "60643:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "60629:15:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2824,
												"nodeType": "IfStatement",
												"src": "60625:96:0",
												"trueBody": {
													"id": 2823,
													"nodeType": "Block",
													"src": "60646:75:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"id": 2819,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2751,
																		"src": "60696:5:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"id": 2820,
																		"name": "length",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2753,
																		"src": "60703:6:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 2818,
																	"name": "StringsInsufficientHexLength",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2654,
																	"src": "60667:28:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_uint256_$_t_uint256_$returns$__$",
																		"typeString": "function (uint256,uint256) pure"
																	}
																},
																"id": 2821,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "60667:43:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2822,
															"nodeType": "RevertStatement",
															"src": "60660:50:0"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2827,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2763,
															"src": "60744:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 2826,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "60737:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_string_storage_ptr_$",
															"typeString": "type(string storage pointer)"
														},
														"typeName": {
															"id": 2825,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "60737:6:0",
															"typeDescriptions": {}
														}
													},
													"id": 2828,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "60737:14:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 2757,
												"id": 2829,
												"nodeType": "Return",
												"src": "60730:21:0"
											}
										]
									},
									"documentation": {
										"id": 2749,
										"nodeType": "StructuredDocumentation",
										"src": "60116:112:0",
										"text": " @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."
									},
									"id": 2831,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toHexString",
									"nameLocation": "60242:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2754,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2751,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "60262:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 2831,
												"src": "60254:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2750,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "60254:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2753,
												"mutability": "mutable",
												"name": "length",
												"nameLocation": "60277:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 2831,
												"src": "60269:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2752,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "60269:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "60253:31:0"
									},
									"returnParameters": {
										"id": 2757,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2756,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2831,
												"src": "60308:13:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2755,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "60308:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "60307:15:0"
									},
									"scope": 2889,
									"src": "60233:525:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2850,
										"nodeType": "Block",
										"src": "60990:75:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 2844,
																			"name": "addr",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2834,
																			"src": "61035:4:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		],
																		"id": 2843,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "61027:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint160_$",
																			"typeString": "type(uint160)"
																		},
																		"typeName": {
																			"id": 2842,
																			"name": "uint160",
																			"nodeType": "ElementaryTypeName",
																			"src": "61027:7:0",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 2845,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "61027:13:0",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																],
																"id": 2841,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "61019:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint256_$",
																	"typeString": "type(uint256)"
																},
																"typeName": {
																	"id": 2840,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "61019:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 2846,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "61019:22:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 2847,
															"name": "ADDRESS_LENGTH",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2647,
															"src": "61043:14:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														],
														"id": 2839,
														"name": "toHexString",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															2748,
															2831,
															2851
														],
														"referencedDeclaration": 2831,
														"src": "61007:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$",
															"typeString": "function (uint256,uint256) pure returns (string memory)"
														}
													},
													"id": 2848,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "61007:51:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 2838,
												"id": 2849,
												"nodeType": "Return",
												"src": "61000:58:0"
											}
										]
									},
									"documentation": {
										"id": 2832,
										"nodeType": "StructuredDocumentation",
										"src": "60764:148:0",
										"text": " @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n representation."
									},
									"id": 2851,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toHexString",
									"nameLocation": "60926:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2835,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2834,
												"mutability": "mutable",
												"name": "addr",
												"nameLocation": "60946:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 2851,
												"src": "60938:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2833,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "60938:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "60937:14:0"
									},
									"returnParameters": {
										"id": 2838,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2837,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2851,
												"src": "60975:13:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2836,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "60975:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "60974:15:0"
									},
									"scope": 2889,
									"src": "60917:148:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2887,
										"nodeType": "Block",
										"src": "61220:104:0",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 2885,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2871,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"arguments": [
																	{
																		"id": 2863,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2854,
																		"src": "61243:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 2862,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "61237:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																		"typeString": "type(bytes storage pointer)"
																	},
																	"typeName": {
																		"id": 2861,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "61237:5:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 2864,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "61237:8:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 2865,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "61246:6:0",
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "61237:15:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"expression": {
																"arguments": [
																	{
																		"id": 2868,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2856,
																		"src": "61262:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 2867,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "61256:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																		"typeString": "type(bytes storage pointer)"
																	},
																	"typeName": {
																		"id": 2866,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "61256:5:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 2869,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "61256:8:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 2870,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "61265:6:0",
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "61256:15:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "61237:34:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"id": 2884,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 2875,
																			"name": "a",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2854,
																			"src": "61291:1:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_string_memory_ptr",
																				"typeString": "string memory"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_string_memory_ptr",
																				"typeString": "string memory"
																			}
																		],
																		"id": 2874,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "61285:5:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																			"typeString": "type(bytes storage pointer)"
																		},
																		"typeName": {
																			"id": 2873,
																			"name": "bytes",
																			"nodeType": "ElementaryTypeName",
																			"src": "61285:5:0",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 2876,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "61285:8:0",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"id": 2872,
																"name": "keccak256",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967288,
																"src": "61275:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																	"typeString": "function (bytes memory) pure returns (bytes32)"
																}
															},
															"id": 2877,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "61275:19:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 2881,
																			"name": "b",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2856,
																			"src": "61314:1:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_string_memory_ptr",
																				"typeString": "string memory"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_string_memory_ptr",
																				"typeString": "string memory"
																			}
																		],
																		"id": 2880,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "61308:5:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																			"typeString": "type(bytes storage pointer)"
																		},
																		"typeName": {
																			"id": 2879,
																			"name": "bytes",
																			"nodeType": "ElementaryTypeName",
																			"src": "61308:5:0",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 2882,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "61308:8:0",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"id": 2878,
																"name": "keccak256",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967288,
																"src": "61298:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																	"typeString": "function (bytes memory) pure returns (bytes32)"
																}
															},
															"id": 2883,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "61298:19:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"src": "61275:42:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "61237:80:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 2860,
												"id": 2886,
												"nodeType": "Return",
												"src": "61230:87:0"
											}
										]
									},
									"documentation": {
										"id": 2852,
										"nodeType": "StructuredDocumentation",
										"src": "61071:66:0",
										"text": " @dev Returns true if the two strings are equal."
									},
									"id": 2888,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "equal",
									"nameLocation": "61151:5:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2857,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2854,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "61171:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 2888,
												"src": "61157:15:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2853,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "61157:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2856,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "61188:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 2888,
												"src": "61174:15:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2855,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "61174:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "61156:34:0"
									},
									"returnParameters": {
										"id": 2860,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2859,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2888,
												"src": "61214:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2858,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "61214:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "61213:6:0"
									},
									"scope": 2889,
									"src": "61142:182:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 3830,
							"src": "58479:2847:0",
							"usedErrors": [
								2654
							],
							"usedEvents": []
						},
						{
							"id": 2890,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "61494:24:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "MessageHashUtils",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2891,
								"nodeType": "StructuredDocumentation",
								"src": "61521:330:0",
								"text": " @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\n The library provides methods for generating a hash of a message that conforms to the\n https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\n specifications."
							},
							"fullyImplemented": true,
							"id": 2960,
							"linearizedBaseContracts": [
								2960
							],
							"name": "MessageHashUtils",
							"nameLocation": "61860:16:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 2900,
										"nodeType": "Block",
										"src": "62645:368:0",
										"statements": [
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "62707:300:0",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "62728:4:0",
																		"type": "",
																		"value": "0x00"
																	},
																	{
																		"hexValue": "19457468657265756d205369676e6564204d6573736167653a0a3332",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "62734:34:0",
																		"type": "",
																		"value": "\u0019Ethereum Signed Message:\n32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "62721:6:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "62721:48:0"
															},
															"nodeType": "YulExpressionStatement",
															"src": "62721:48:0"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "62830:4:0",
																		"type": "",
																		"value": "0x1c"
																	},
																	{
																		"name": "messageHash",
																		"nodeType": "YulIdentifier",
																		"src": "62836:11:0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "62823:6:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "62823:25:0"
															},
															"nodeType": "YulExpressionStatement",
															"src": "62823:25:0"
														},
														{
															"nodeType": "YulAssignment",
															"src": "62902:31:0",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "62922:4:0",
																		"type": "",
																		"value": "0x00"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "62928:4:0",
																		"type": "",
																		"value": "0x3c"
																	}
																],
																"functionName": {
																	"name": "keccak256",
																	"nodeType": "YulIdentifier",
																	"src": "62912:9:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "62912:21:0"
															},
															"variableNames": [
																{
																	"name": "digest",
																	"nodeType": "YulIdentifier",
																	"src": "62902:6:0"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "shanghai",
												"externalReferences": [
													{
														"declaration": 2897,
														"isOffset": false,
														"isSlot": false,
														"src": "62902:6:0",
														"valueSize": 1
													},
													{
														"declaration": 2894,
														"isOffset": false,
														"isSlot": false,
														"src": "62836:11:0",
														"valueSize": 1
													}
												],
												"id": 2899,
												"nodeType": "InlineAssembly",
												"src": "62698:309:0"
											}
										]
									},
									"documentation": {
										"id": 2892,
										"nodeType": "StructuredDocumentation",
										"src": "61883:665:0",
										"text": " @dev Returns the keccak256 digest of an EIP-191 signed data with version\n `0x45` (`personal_sign` messages).\n The digest is calculated by prefixing a bytes32 `messageHash` with\n `\"\\x19Ethereum Signed Message:\\n32\"` and hashing the result. It corresponds with the\n hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\n NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\n keccak256, although any bytes32 value can be safely used because the final digest will\n be re-hashed.\n See {ECDSA-recover}."
									},
									"id": 2901,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toEthSignedMessageHash",
									"nameLocation": "62562:22:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2895,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2894,
												"mutability": "mutable",
												"name": "messageHash",
												"nameLocation": "62593:11:0",
												"nodeType": "VariableDeclaration",
												"scope": 2901,
												"src": "62585:19:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2893,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "62585:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "62584:21:0"
									},
									"returnParameters": {
										"id": 2898,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2897,
												"mutability": "mutable",
												"name": "digest",
												"nameLocation": "62637:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 2901,
												"src": "62629:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2896,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "62629:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "62628:16:0"
									},
									"scope": 2960,
									"src": "62553:460:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2926,
										"nodeType": "Block",
										"src": "63565:143:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "19457468657265756d205369676e6564204d6573736167653a0a",
																	"id": 2913,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "string",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "63617:32:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4",
																		"typeString": "literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""
																	},
																	"value": "\u0019Ethereum Signed Message:\n"
																},
																{
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"expression": {
																						"id": 2918,
																						"name": "message",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2904,
																						"src": "63674:7:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes_memory_ptr",
																							"typeString": "bytes memory"
																						}
																					},
																					"id": 2919,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberLocation": "63682:6:0",
																					"memberName": "length",
																					"nodeType": "MemberAccess",
																					"src": "63674:14:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"expression": {
																					"id": 2916,
																					"name": "Strings",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2889,
																					"src": "63657:7:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_contract$_Strings_$2889_$",
																						"typeString": "type(library Strings)"
																					}
																				},
																				"id": 2917,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "63665:8:0",
																				"memberName": "toString",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 2702,
																				"src": "63657:16:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
																					"typeString": "function (uint256) pure returns (string memory)"
																				}
																			},
																			"id": 2920,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "63657:32:0",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_string_memory_ptr",
																				"typeString": "string memory"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_string_memory_ptr",
																				"typeString": "string memory"
																			}
																		],
																		"id": 2915,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "63651:5:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																			"typeString": "type(bytes storage pointer)"
																		},
																		"typeName": {
																			"id": 2914,
																			"name": "bytes",
																			"nodeType": "ElementaryTypeName",
																			"src": "63651:5:0",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 2921,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "63651:39:0",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																},
																{
																	"id": 2922,
																	"name": "message",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2904,
																	"src": "63692:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4",
																		"typeString": "literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"expression": {
																	"id": 2911,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "63604:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																		"typeString": "type(bytes storage pointer)"
																	},
																	"typeName": {
																		"id": 2910,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "63604:5:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 2912,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "63610:6:0",
																"memberName": "concat",
																"nodeType": "MemberAccess",
																"src": "63604:12:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_bytesconcat_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 2923,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "63604:96:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 2909,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "63594:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 2924,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "63594:107:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 2908,
												"id": 2925,
												"nodeType": "Return",
												"src": "63575:126:0"
											}
										]
									},
									"documentation": {
										"id": 2902,
										"nodeType": "StructuredDocumentation",
										"src": "63019:455:0",
										"text": " @dev Returns the keccak256 digest of an EIP-191 signed data with version\n `0x45` (`personal_sign` messages).\n The digest is calculated by prefixing an arbitrary `message` with\n `\"\\x19Ethereum Signed Message:\\n\" + len(message)` and hashing the result. It corresponds with the\n hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\n See {ECDSA-recover}."
									},
									"id": 2927,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toEthSignedMessageHash",
									"nameLocation": "63488:22:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2905,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2904,
												"mutability": "mutable",
												"name": "message",
												"nameLocation": "63524:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 2927,
												"src": "63511:20:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2903,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "63511:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "63510:22:0"
									},
									"returnParameters": {
										"id": 2908,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2907,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2927,
												"src": "63556:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2906,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "63556:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "63555:9:0"
									},
									"scope": 2960,
									"src": "63479:229:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2946,
										"nodeType": "Block",
										"src": "64162:80:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "1900",
																	"id": 2940,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "hexString",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "64206:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_73fd5d154550a4a103564cb191928cd38898034de1b952dc21b290898b4b697a",
																		"typeString": "literal_string hex\"1900\""
																	},
																	"value": "\u0019\u0000"
																},
																{
																	"id": 2941,
																	"name": "validator",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2930,
																	"src": "64218:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 2942,
																	"name": "data",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2932,
																	"src": "64229:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_stringliteral_73fd5d154550a4a103564cb191928cd38898034de1b952dc21b290898b4b697a",
																		"typeString": "literal_string hex\"1900\""
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"expression": {
																	"id": 2938,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "64189:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 2939,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "64193:12:0",
																"memberName": "encodePacked",
																"nodeType": "MemberAccess",
																"src": "64189:16:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 2943,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "64189:45:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 2937,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "64179:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 2944,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "64179:56:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 2936,
												"id": 2945,
												"nodeType": "Return",
												"src": "64172:63:0"
											}
										]
									},
									"documentation": {
										"id": 2928,
										"nodeType": "StructuredDocumentation",
										"src": "63714:332:0",
										"text": " @dev Returns the keccak256 digest of an EIP-191 signed data with version\n `0x00` (data with intended validator).\n The digest is calculated by prefixing an arbitrary `data` with `\"\\x19\\x00\"` and the intended\n `validator` address. Then hashing the result.\n See {ECDSA-recover}."
									},
									"id": 2947,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toDataWithIntendedValidatorHash",
									"nameLocation": "64060:31:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2933,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2930,
												"mutability": "mutable",
												"name": "validator",
												"nameLocation": "64100:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 2947,
												"src": "64092:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2929,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "64092:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2932,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "64124:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 2947,
												"src": "64111:17:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2931,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "64111:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "64091:38:0"
									},
									"returnParameters": {
										"id": 2936,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2935,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2947,
												"src": "64153:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2934,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "64153:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "64152:9:0"
									},
									"scope": 2960,
									"src": "64051:191:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2958,
										"nodeType": "Block",
										"src": "64793:292:0",
										"statements": [
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "64855:224:0",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "64869:22:0",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "64886:4:0",
																		"type": "",
																		"value": "0x40"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "64880:5:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "64880:11:0"
															},
															"variables": [
																{
																	"name": "ptr",
																	"nodeType": "YulTypedName",
																	"src": "64873:3:0",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "ptr",
																		"nodeType": "YulIdentifier",
																		"src": "64911:3:0"
																	},
																	{
																		"hexValue": "1901",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "64916:10:0",
																		"type": "",
																		"value": "\u0019\u0001"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "64904:6:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "64904:23:0"
															},
															"nodeType": "YulExpressionStatement",
															"src": "64904:23:0"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "ptr",
																				"nodeType": "YulIdentifier",
																				"src": "64951:3:0"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "64956:4:0",
																				"type": "",
																				"value": "0x02"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "64947:3:0"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "64947:14:0"
																	},
																	{
																		"name": "domainSeparator",
																		"nodeType": "YulIdentifier",
																		"src": "64963:15:0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "64940:6:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "64940:39:0"
															},
															"nodeType": "YulExpressionStatement",
															"src": "64940:39:0"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "ptr",
																				"nodeType": "YulIdentifier",
																				"src": "65003:3:0"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "65008:4:0",
																				"type": "",
																				"value": "0x22"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "64999:3:0"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "64999:14:0"
																	},
																	{
																		"name": "structHash",
																		"nodeType": "YulIdentifier",
																		"src": "65015:10:0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "64992:6:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "64992:34:0"
															},
															"nodeType": "YulExpressionStatement",
															"src": "64992:34:0"
														},
														{
															"nodeType": "YulAssignment",
															"src": "65039:30:0",
															"value": {
																"arguments": [
																	{
																		"name": "ptr",
																		"nodeType": "YulIdentifier",
																		"src": "65059:3:0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "65064:4:0",
																		"type": "",
																		"value": "0x42"
																	}
																],
																"functionName": {
																	"name": "keccak256",
																	"nodeType": "YulIdentifier",
																	"src": "65049:9:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "65049:20:0"
															},
															"variableNames": [
																{
																	"name": "digest",
																	"nodeType": "YulIdentifier",
																	"src": "65039:6:0"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "shanghai",
												"externalReferences": [
													{
														"declaration": 2955,
														"isOffset": false,
														"isSlot": false,
														"src": "65039:6:0",
														"valueSize": 1
													},
													{
														"declaration": 2950,
														"isOffset": false,
														"isSlot": false,
														"src": "64963:15:0",
														"valueSize": 1
													},
													{
														"declaration": 2952,
														"isOffset": false,
														"isSlot": false,
														"src": "65015:10:0",
														"valueSize": 1
													}
												],
												"id": 2957,
												"nodeType": "InlineAssembly",
												"src": "64846:233:0"
											}
										]
									},
									"documentation": {
										"id": 2948,
										"nodeType": "StructuredDocumentation",
										"src": "64248:431:0",
										"text": " @dev Returns the keccak256 digest of an EIP-712 typed data (EIP-191 version `0x01`).\n The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\n `\\x19\\x01` and hashing the result. It corresponds to the hash signed by the\n https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\n See {ECDSA-recover}."
									},
									"id": 2959,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toTypedDataHash",
									"nameLocation": "64693:15:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2953,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2950,
												"mutability": "mutable",
												"name": "domainSeparator",
												"nameLocation": "64717:15:0",
												"nodeType": "VariableDeclaration",
												"scope": 2959,
												"src": "64709:23:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2949,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "64709:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2952,
												"mutability": "mutable",
												"name": "structHash",
												"nameLocation": "64742:10:0",
												"nodeType": "VariableDeclaration",
												"scope": 2959,
												"src": "64734:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2951,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "64734:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "64708:45:0"
									},
									"returnParameters": {
										"id": 2956,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2955,
												"mutability": "mutable",
												"name": "digest",
												"nameLocation": "64785:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 2959,
												"src": "64777:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2954,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "64777:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "64776:16:0"
									},
									"scope": 2960,
									"src": "64684:401:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 3830,
							"src": "61852:3235:0",
							"usedErrors": [],
							"usedEvents": []
						},
						{
							"id": 2961,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "65307:24:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "StorageSlot",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2962,
								"nodeType": "StructuredDocumentation",
								"src": "65333:1025:0",
								"text": " @dev Library for reading and writing primitive types to specific storage slots.\n Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n This library helps with reading and writing to such slots without the need for inline assembly.\n The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n Example usage to set ERC1967 implementation slot:\n ```solidity\n contract ERC1967 {\n     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n     function _getImplementation() internal view returns (address) {\n         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n     }\n     function _setImplementation(address newImplementation) internal {\n         require(newImplementation.code.length > 0);\n         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n     }\n }\n ```"
							},
							"fullyImplemented": true,
							"id": 3069,
							"linearizedBaseContracts": [
								3069
							],
							"name": "StorageSlot",
							"nameLocation": "66367:11:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "StorageSlot.AddressSlot",
									"id": 2965,
									"members": [
										{
											"constant": false,
											"id": 2964,
											"mutability": "mutable",
											"name": "value",
											"nameLocation": "66422:5:0",
											"nodeType": "VariableDeclaration",
											"scope": 2965,
											"src": "66414:13:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 2963,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "66414:7:0",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "AddressSlot",
									"nameLocation": "66392:11:0",
									"nodeType": "StructDefinition",
									"scope": 3069,
									"src": "66385:49:0",
									"visibility": "public"
								},
								{
									"canonicalName": "StorageSlot.BooleanSlot",
									"id": 2968,
									"members": [
										{
											"constant": false,
											"id": 2967,
											"mutability": "mutable",
											"name": "value",
											"nameLocation": "66474:5:0",
											"nodeType": "VariableDeclaration",
											"scope": 2968,
											"src": "66469:10:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 2966,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "66469:4:0",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "BooleanSlot",
									"nameLocation": "66447:11:0",
									"nodeType": "StructDefinition",
									"scope": 3069,
									"src": "66440:46:0",
									"visibility": "public"
								},
								{
									"canonicalName": "StorageSlot.Bytes32Slot",
									"id": 2971,
									"members": [
										{
											"constant": false,
											"id": 2970,
											"mutability": "mutable",
											"name": "value",
											"nameLocation": "66529:5:0",
											"nodeType": "VariableDeclaration",
											"scope": 2971,
											"src": "66521:13:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											},
											"typeName": {
												"id": 2969,
												"name": "bytes32",
												"nodeType": "ElementaryTypeName",
												"src": "66521:7:0",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Bytes32Slot",
									"nameLocation": "66499:11:0",
									"nodeType": "StructDefinition",
									"scope": 3069,
									"src": "66492:49:0",
									"visibility": "public"
								},
								{
									"canonicalName": "StorageSlot.Uint256Slot",
									"id": 2974,
									"members": [
										{
											"constant": false,
											"id": 2973,
											"mutability": "mutable",
											"name": "value",
											"nameLocation": "66584:5:0",
											"nodeType": "VariableDeclaration",
											"scope": 2974,
											"src": "66576:13:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 2972,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "66576:7:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Uint256Slot",
									"nameLocation": "66554:11:0",
									"nodeType": "StructDefinition",
									"scope": 3069,
									"src": "66547:49:0",
									"visibility": "public"
								},
								{
									"canonicalName": "StorageSlot.StringSlot",
									"id": 2977,
									"members": [
										{
											"constant": false,
											"id": 2976,
											"mutability": "mutable",
											"name": "value",
											"nameLocation": "66637:5:0",
											"nodeType": "VariableDeclaration",
											"scope": 2977,
											"src": "66630:12:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_string_storage_ptr",
												"typeString": "string"
											},
											"typeName": {
												"id": 2975,
												"name": "string",
												"nodeType": "ElementaryTypeName",
												"src": "66630:6:0",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "StringSlot",
									"nameLocation": "66609:10:0",
									"nodeType": "StructDefinition",
									"scope": 3069,
									"src": "66602:47:0",
									"visibility": "public"
								},
								{
									"canonicalName": "StorageSlot.BytesSlot",
									"id": 2980,
									"members": [
										{
											"constant": false,
											"id": 2979,
											"mutability": "mutable",
											"name": "value",
											"nameLocation": "66688:5:0",
											"nodeType": "VariableDeclaration",
											"scope": 2980,
											"src": "66682:11:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes_storage_ptr",
												"typeString": "bytes"
											},
											"typeName": {
												"id": 2978,
												"name": "bytes",
												"nodeType": "ElementaryTypeName",
												"src": "66682:5:0",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_storage_ptr",
													"typeString": "bytes"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "BytesSlot",
									"nameLocation": "66662:9:0",
									"nodeType": "StructDefinition",
									"scope": 3069,
									"src": "66655:45:0",
									"visibility": "public"
								},
								{
									"body": {
										"id": 2990,
										"nodeType": "Block",
										"src": "66882:106:0",
										"statements": [
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "66944:38:0",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "66958:14:0",
															"value": {
																"name": "slot",
																"nodeType": "YulIdentifier",
																"src": "66968:4:0"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nodeType": "YulIdentifier",
																	"src": "66958:6:0"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "shanghai",
												"externalReferences": [
													{
														"declaration": 2987,
														"isOffset": false,
														"isSlot": true,
														"src": "66958:6:0",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 2983,
														"isOffset": false,
														"isSlot": false,
														"src": "66968:4:0",
														"valueSize": 1
													}
												],
												"id": 2989,
												"nodeType": "InlineAssembly",
												"src": "66935:47:0"
											}
										]
									},
									"documentation": {
										"id": 2981,
										"nodeType": "StructuredDocumentation",
										"src": "66706:87:0",
										"text": " @dev Returns an `AddressSlot` with member `value` located at `slot`."
									},
									"id": 2991,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getAddressSlot",
									"nameLocation": "66807:14:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2984,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2983,
												"mutability": "mutable",
												"name": "slot",
												"nameLocation": "66830:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 2991,
												"src": "66822:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2982,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "66822:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "66821:14:0"
									},
									"returnParameters": {
										"id": 2988,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2987,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "66879:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 2991,
												"src": "66859:21:0",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_AddressSlot_$2965_storage_ptr",
													"typeString": "struct StorageSlot.AddressSlot"
												},
												"typeName": {
													"id": 2986,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2985,
														"name": "AddressSlot",
														"nameLocations": [
															"66859:11:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2965,
														"src": "66859:11:0"
													},
													"referencedDeclaration": 2965,
													"src": "66859:11:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_AddressSlot_$2965_storage_ptr",
														"typeString": "struct StorageSlot.AddressSlot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "66858:23:0"
									},
									"scope": 3069,
									"src": "66798:190:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3001,
										"nodeType": "Block",
										"src": "67170:106:0",
										"statements": [
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "67232:38:0",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "67246:14:0",
															"value": {
																"name": "slot",
																"nodeType": "YulIdentifier",
																"src": "67256:4:0"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nodeType": "YulIdentifier",
																	"src": "67246:6:0"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "shanghai",
												"externalReferences": [
													{
														"declaration": 2998,
														"isOffset": false,
														"isSlot": true,
														"src": "67246:6:0",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 2994,
														"isOffset": false,
														"isSlot": false,
														"src": "67256:4:0",
														"valueSize": 1
													}
												],
												"id": 3000,
												"nodeType": "InlineAssembly",
												"src": "67223:47:0"
											}
										]
									},
									"documentation": {
										"id": 2992,
										"nodeType": "StructuredDocumentation",
										"src": "66994:87:0",
										"text": " @dev Returns an `BooleanSlot` with member `value` located at `slot`."
									},
									"id": 3002,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getBooleanSlot",
									"nameLocation": "67095:14:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2995,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2994,
												"mutability": "mutable",
												"name": "slot",
												"nameLocation": "67118:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 3002,
												"src": "67110:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2993,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "67110:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "67109:14:0"
									},
									"returnParameters": {
										"id": 2999,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2998,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "67167:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 3002,
												"src": "67147:21:0",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_BooleanSlot_$2968_storage_ptr",
													"typeString": "struct StorageSlot.BooleanSlot"
												},
												"typeName": {
													"id": 2997,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2996,
														"name": "BooleanSlot",
														"nameLocations": [
															"67147:11:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2968,
														"src": "67147:11:0"
													},
													"referencedDeclaration": 2968,
													"src": "67147:11:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_BooleanSlot_$2968_storage_ptr",
														"typeString": "struct StorageSlot.BooleanSlot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "67146:23:0"
									},
									"scope": 3069,
									"src": "67086:190:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3012,
										"nodeType": "Block",
										"src": "67458:106:0",
										"statements": [
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "67520:38:0",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "67534:14:0",
															"value": {
																"name": "slot",
																"nodeType": "YulIdentifier",
																"src": "67544:4:0"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nodeType": "YulIdentifier",
																	"src": "67534:6:0"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "shanghai",
												"externalReferences": [
													{
														"declaration": 3009,
														"isOffset": false,
														"isSlot": true,
														"src": "67534:6:0",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 3005,
														"isOffset": false,
														"isSlot": false,
														"src": "67544:4:0",
														"valueSize": 1
													}
												],
												"id": 3011,
												"nodeType": "InlineAssembly",
												"src": "67511:47:0"
											}
										]
									},
									"documentation": {
										"id": 3003,
										"nodeType": "StructuredDocumentation",
										"src": "67282:87:0",
										"text": " @dev Returns an `Bytes32Slot` with member `value` located at `slot`."
									},
									"id": 3013,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getBytes32Slot",
									"nameLocation": "67383:14:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3006,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3005,
												"mutability": "mutable",
												"name": "slot",
												"nameLocation": "67406:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 3013,
												"src": "67398:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 3004,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "67398:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "67397:14:0"
									},
									"returnParameters": {
										"id": 3010,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3009,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "67455:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 3013,
												"src": "67435:21:0",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Bytes32Slot_$2971_storage_ptr",
													"typeString": "struct StorageSlot.Bytes32Slot"
												},
												"typeName": {
													"id": 3008,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3007,
														"name": "Bytes32Slot",
														"nameLocations": [
															"67435:11:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2971,
														"src": "67435:11:0"
													},
													"referencedDeclaration": 2971,
													"src": "67435:11:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Bytes32Slot_$2971_storage_ptr",
														"typeString": "struct StorageSlot.Bytes32Slot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "67434:23:0"
									},
									"scope": 3069,
									"src": "67374:190:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3023,
										"nodeType": "Block",
										"src": "67746:106:0",
										"statements": [
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "67808:38:0",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "67822:14:0",
															"value": {
																"name": "slot",
																"nodeType": "YulIdentifier",
																"src": "67832:4:0"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nodeType": "YulIdentifier",
																	"src": "67822:6:0"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "shanghai",
												"externalReferences": [
													{
														"declaration": 3020,
														"isOffset": false,
														"isSlot": true,
														"src": "67822:6:0",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 3016,
														"isOffset": false,
														"isSlot": false,
														"src": "67832:4:0",
														"valueSize": 1
													}
												],
												"id": 3022,
												"nodeType": "InlineAssembly",
												"src": "67799:47:0"
											}
										]
									},
									"documentation": {
										"id": 3014,
										"nodeType": "StructuredDocumentation",
										"src": "67570:87:0",
										"text": " @dev Returns an `Uint256Slot` with member `value` located at `slot`."
									},
									"id": 3024,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getUint256Slot",
									"nameLocation": "67671:14:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3017,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3016,
												"mutability": "mutable",
												"name": "slot",
												"nameLocation": "67694:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 3024,
												"src": "67686:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 3015,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "67686:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "67685:14:0"
									},
									"returnParameters": {
										"id": 3021,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3020,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "67743:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 3024,
												"src": "67723:21:0",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Uint256Slot_$2974_storage_ptr",
													"typeString": "struct StorageSlot.Uint256Slot"
												},
												"typeName": {
													"id": 3019,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3018,
														"name": "Uint256Slot",
														"nameLocations": [
															"67723:11:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2974,
														"src": "67723:11:0"
													},
													"referencedDeclaration": 2974,
													"src": "67723:11:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Uint256Slot_$2974_storage_ptr",
														"typeString": "struct StorageSlot.Uint256Slot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "67722:23:0"
									},
									"scope": 3069,
									"src": "67662:190:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3034,
										"nodeType": "Block",
										"src": "68031:106:0",
										"statements": [
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "68093:38:0",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "68107:14:0",
															"value": {
																"name": "slot",
																"nodeType": "YulIdentifier",
																"src": "68117:4:0"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nodeType": "YulIdentifier",
																	"src": "68107:6:0"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "shanghai",
												"externalReferences": [
													{
														"declaration": 3031,
														"isOffset": false,
														"isSlot": true,
														"src": "68107:6:0",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 3027,
														"isOffset": false,
														"isSlot": false,
														"src": "68117:4:0",
														"valueSize": 1
													}
												],
												"id": 3033,
												"nodeType": "InlineAssembly",
												"src": "68084:47:0"
											}
										]
									},
									"documentation": {
										"id": 3025,
										"nodeType": "StructuredDocumentation",
										"src": "67858:86:0",
										"text": " @dev Returns an `StringSlot` with member `value` located at `slot`."
									},
									"id": 3035,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getStringSlot",
									"nameLocation": "67958:13:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3028,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3027,
												"mutability": "mutable",
												"name": "slot",
												"nameLocation": "67980:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 3035,
												"src": "67972:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 3026,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "67972:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "67971:14:0"
									},
									"returnParameters": {
										"id": 3032,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3031,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "68028:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 3035,
												"src": "68009:20:0",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_StringSlot_$2977_storage_ptr",
													"typeString": "struct StorageSlot.StringSlot"
												},
												"typeName": {
													"id": 3030,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3029,
														"name": "StringSlot",
														"nameLocations": [
															"68009:10:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2977,
														"src": "68009:10:0"
													},
													"referencedDeclaration": 2977,
													"src": "68009:10:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_StringSlot_$2977_storage_ptr",
														"typeString": "struct StorageSlot.StringSlot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "68008:22:0"
									},
									"scope": 3069,
									"src": "67949:188:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3045,
										"nodeType": "Block",
										"src": "68339:112:0",
										"statements": [
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "68401:44:0",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "68415:20:0",
															"value": {
																"name": "store.slot",
																"nodeType": "YulIdentifier",
																"src": "68425:10:0"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nodeType": "YulIdentifier",
																	"src": "68415:6:0"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "shanghai",
												"externalReferences": [
													{
														"declaration": 3042,
														"isOffset": false,
														"isSlot": true,
														"src": "68415:6:0",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 3038,
														"isOffset": false,
														"isSlot": true,
														"src": "68425:10:0",
														"suffix": "slot",
														"valueSize": 1
													}
												],
												"id": 3044,
												"nodeType": "InlineAssembly",
												"src": "68392:53:0"
											}
										]
									},
									"documentation": {
										"id": 3036,
										"nodeType": "StructuredDocumentation",
										"src": "68143:101:0",
										"text": " @dev Returns an `StringSlot` representation of the string storage pointer `store`."
									},
									"id": 3046,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getStringSlot",
									"nameLocation": "68258:13:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3039,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3038,
												"mutability": "mutable",
												"name": "store",
												"nameLocation": "68287:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 3046,
												"src": "68272:20:0",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 3037,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "68272:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "68271:22:0"
									},
									"returnParameters": {
										"id": 3043,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3042,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "68336:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 3046,
												"src": "68317:20:0",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_StringSlot_$2977_storage_ptr",
													"typeString": "struct StorageSlot.StringSlot"
												},
												"typeName": {
													"id": 3041,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3040,
														"name": "StringSlot",
														"nameLocations": [
															"68317:10:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2977,
														"src": "68317:10:0"
													},
													"referencedDeclaration": 2977,
													"src": "68317:10:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_StringSlot_$2977_storage_ptr",
														"typeString": "struct StorageSlot.StringSlot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "68316:22:0"
									},
									"scope": 3069,
									"src": "68249:202:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3056,
										"nodeType": "Block",
										"src": "68627:106:0",
										"statements": [
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "68689:38:0",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "68703:14:0",
															"value": {
																"name": "slot",
																"nodeType": "YulIdentifier",
																"src": "68713:4:0"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nodeType": "YulIdentifier",
																	"src": "68703:6:0"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "shanghai",
												"externalReferences": [
													{
														"declaration": 3053,
														"isOffset": false,
														"isSlot": true,
														"src": "68703:6:0",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 3049,
														"isOffset": false,
														"isSlot": false,
														"src": "68713:4:0",
														"valueSize": 1
													}
												],
												"id": 3055,
												"nodeType": "InlineAssembly",
												"src": "68680:47:0"
											}
										]
									},
									"documentation": {
										"id": 3047,
										"nodeType": "StructuredDocumentation",
										"src": "68457:85:0",
										"text": " @dev Returns an `BytesSlot` with member `value` located at `slot`."
									},
									"id": 3057,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getBytesSlot",
									"nameLocation": "68556:12:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3050,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3049,
												"mutability": "mutable",
												"name": "slot",
												"nameLocation": "68577:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 3057,
												"src": "68569:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 3048,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "68569:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "68568:14:0"
									},
									"returnParameters": {
										"id": 3054,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3053,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "68624:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 3057,
												"src": "68606:19:0",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_BytesSlot_$2980_storage_ptr",
													"typeString": "struct StorageSlot.BytesSlot"
												},
												"typeName": {
													"id": 3052,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3051,
														"name": "BytesSlot",
														"nameLocations": [
															"68606:9:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2980,
														"src": "68606:9:0"
													},
													"referencedDeclaration": 2980,
													"src": "68606:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_BytesSlot_$2980_storage_ptr",
														"typeString": "struct StorageSlot.BytesSlot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "68605:21:0"
									},
									"scope": 3069,
									"src": "68547:186:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3067,
										"nodeType": "Block",
										"src": "68930:112:0",
										"statements": [
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "68992:44:0",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "69006:20:0",
															"value": {
																"name": "store.slot",
																"nodeType": "YulIdentifier",
																"src": "69016:10:0"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nodeType": "YulIdentifier",
																	"src": "69006:6:0"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "shanghai",
												"externalReferences": [
													{
														"declaration": 3064,
														"isOffset": false,
														"isSlot": true,
														"src": "69006:6:0",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 3060,
														"isOffset": false,
														"isSlot": true,
														"src": "69016:10:0",
														"suffix": "slot",
														"valueSize": 1
													}
												],
												"id": 3066,
												"nodeType": "InlineAssembly",
												"src": "68983:53:0"
											}
										]
									},
									"documentation": {
										"id": 3058,
										"nodeType": "StructuredDocumentation",
										"src": "68739:99:0",
										"text": " @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`."
									},
									"id": 3068,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getBytesSlot",
									"nameLocation": "68852:12:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3061,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3060,
												"mutability": "mutable",
												"name": "store",
												"nameLocation": "68879:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 3068,
												"src": "68865:19:0",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_storage_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 3059,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "68865:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "68864:21:0"
									},
									"returnParameters": {
										"id": 3065,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3064,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "68927:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 3068,
												"src": "68909:19:0",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_BytesSlot_$2980_storage_ptr",
													"typeString": "struct StorageSlot.BytesSlot"
												},
												"typeName": {
													"id": 3063,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3062,
														"name": "BytesSlot",
														"nameLocations": [
															"68909:9:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2980,
														"src": "68909:9:0"
													},
													"referencedDeclaration": 2980,
													"src": "68909:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_BytesSlot_$2980_storage_ptr",
														"typeString": "struct StorageSlot.BytesSlot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "68908:21:0"
									},
									"scope": 3069,
									"src": "68843:199:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 3830,
							"src": "66359:2685:0",
							"usedErrors": [],
							"usedEvents": []
						},
						{
							"id": 3070,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "69178:24:0"
						},
						{
							"canonicalName": "ShortString",
							"id": 3072,
							"name": "ShortString",
							"nameLocation": "69378:11:0",
							"nodeType": "UserDefinedValueTypeDefinition",
							"src": "69373:28:0",
							"underlyingType": {
								"id": 3071,
								"name": "bytes32",
								"nodeType": "ElementaryTypeName",
								"src": "69393:7:0",
								"typeDescriptions": {
									"typeIdentifier": "t_bytes32",
									"typeString": "bytes32"
								}
							}
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "ShortStrings",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 3073,
								"nodeType": "StructuredDocumentation",
								"src": "69403:876:0",
								"text": " @dev This library provides functions to convert short memory strings\n into a `ShortString` type that can be used as an immutable variable.\n Strings of arbitrary length can be optimized using this library if\n they are short enough (up to 31 bytes) by packing them with their\n length (1 byte) in a single EVM word (32 bytes). Additionally, a\n fallback mechanism can be used for every other case.\n Usage example:\n ```solidity\n contract Named {\n     using ShortStrings for *;\n     ShortString private immutable _name;\n     string private _nameFallback;\n     constructor(string memory contractName) {\n         _name = contractName.toShortStringWithFallback(_nameFallback);\n     }\n     function name() external view returns (string memory) {\n         return _name.toStringWithFallback(_nameFallback);\n     }\n }\n ```"
							},
							"fullyImplemented": true,
							"id": 3283,
							"linearizedBaseContracts": [
								3283
							],
							"name": "ShortStrings",
							"nameLocation": "70288:12:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 3076,
									"mutability": "constant",
									"name": "FALLBACK_SENTINEL",
									"nameLocation": "70395:17:0",
									"nodeType": "VariableDeclaration",
									"scope": 3283,
									"src": "70370:111:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 3074,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "70370:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"hexValue": "307830303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030304646",
										"id": 3075,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "70415:66:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_255_by_1",
											"typeString": "int_const 255"
										},
										"value": "0x00000000000000000000000000000000000000000000000000000000000000FF"
									},
									"visibility": "private"
								},
								{
									"errorSelector": "305a27a9",
									"id": 3080,
									"name": "StringTooLong",
									"nameLocation": "70494:13:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 3079,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3078,
												"mutability": "mutable",
												"name": "str",
												"nameLocation": "70515:3:0",
												"nodeType": "VariableDeclaration",
												"scope": 3080,
												"src": "70508:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 3077,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "70508:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "70507:12:0"
									},
									"src": "70488:32:0"
								},
								{
									"errorSelector": "b3512b0c",
									"id": 3082,
									"name": "InvalidShortString",
									"nameLocation": "70531:18:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 3081,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "70549:2:0"
									},
									"src": "70525:27:0"
								},
								{
									"body": {
										"id": 3125,
										"nodeType": "Block",
										"src": "70811:208:0",
										"statements": [
											{
												"assignments": [
													3092
												],
												"declarations": [
													{
														"constant": false,
														"id": 3092,
														"mutability": "mutable",
														"name": "bstr",
														"nameLocation": "70834:4:0",
														"nodeType": "VariableDeclaration",
														"scope": 3125,
														"src": "70821:17:0",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 3091,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "70821:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3097,
												"initialValue": {
													"arguments": [
														{
															"id": 3095,
															"name": "str",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3085,
															"src": "70847:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 3094,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "70841:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
															"typeString": "type(bytes storage pointer)"
														},
														"typeName": {
															"id": 3093,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "70841:5:0",
															"typeDescriptions": {}
														}
													},
													"id": 3096,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "70841:10:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "70821:30:0"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 3101,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 3098,
															"name": "bstr",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3092,
															"src": "70865:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 3099,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "70870:6:0",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "70865:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "3331",
														"id": 3100,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "70879:2:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_31_by_1",
															"typeString": "int_const 31"
														},
														"value": "31"
													},
													"src": "70865:16:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 3107,
												"nodeType": "IfStatement",
												"src": "70861:72:0",
												"trueBody": {
													"id": 3106,
													"nodeType": "Block",
													"src": "70883:50:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"id": 3103,
																		"name": "str",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3085,
																		"src": "70918:3:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 3102,
																	"name": "StringTooLong",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3080,
																	"src": "70904:13:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (string memory) pure"
																	}
																},
																"id": 3104,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "70904:18:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 3105,
															"nodeType": "RevertStatement",
															"src": "70897:25:0"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 3121,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"id": 3116,
																						"name": "bstr",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3092,
																						"src": "70990:4:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes_memory_ptr",
																							"typeString": "bytes memory"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_bytes_memory_ptr",
																							"typeString": "bytes memory"
																						}
																					],
																					"id": 3115,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "70982:7:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_bytes32_$",
																						"typeString": "type(bytes32)"
																					},
																					"typeName": {
																						"id": 3114,
																						"name": "bytes32",
																						"nodeType": "ElementaryTypeName",
																						"src": "70982:7:0",
																						"typeDescriptions": {}
																					}
																				},
																				"id": 3117,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "typeConversion",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "70982:13:0",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			],
																			"id": 3113,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "70974:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_uint256_$",
																				"typeString": "type(uint256)"
																			},
																			"typeName": {
																				"id": 3112,
																				"name": "uint256",
																				"nodeType": "ElementaryTypeName",
																				"src": "70974:7:0",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 3118,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "70974:22:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "|",
																	"rightExpression": {
																		"expression": {
																			"id": 3119,
																			"name": "bstr",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3092,
																			"src": "70999:4:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes_memory_ptr",
																				"typeString": "bytes memory"
																			}
																		},
																		"id": 3120,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "71004:6:0",
																		"memberName": "length",
																		"nodeType": "MemberAccess",
																		"src": "70999:11:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "70974:36:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 3111,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "70966:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes32_$",
																	"typeString": "type(bytes32)"
																},
																"typeName": {
																	"id": 3110,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "70966:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 3122,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "70966:45:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"expression": {
															"id": 3108,
															"name": "ShortString",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3072,
															"src": "70949:11:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_userDefinedValueType$_ShortString_$3072_$",
																"typeString": "type(ShortString)"
															}
														},
														"id": 3109,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "70961:4:0",
														"memberName": "wrap",
														"nodeType": "MemberAccess",
														"src": "70949:16:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_wrap_pure$_t_bytes32_$returns$_t_userDefinedValueType$_ShortString_$3072_$",
															"typeString": "function (bytes32) pure returns (ShortString)"
														}
													},
													"id": 3123,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "70949:63:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_userDefinedValueType$_ShortString_$3072",
														"typeString": "ShortString"
													}
												},
												"functionReturnParameters": 3090,
												"id": 3124,
												"nodeType": "Return",
												"src": "70942:70:0"
											}
										]
									},
									"documentation": {
										"id": 3083,
										"nodeType": "StructuredDocumentation",
										"src": "70558:170:0",
										"text": " @dev Encode a string of at most 31 chars into a `ShortString`.\n This will trigger a `StringTooLong` error is the input string is too long."
									},
									"id": 3126,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toShortString",
									"nameLocation": "70742:13:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3086,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3085,
												"mutability": "mutable",
												"name": "str",
												"nameLocation": "70770:3:0",
												"nodeType": "VariableDeclaration",
												"scope": 3126,
												"src": "70756:17:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 3084,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "70756:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "70755:19:0"
									},
									"returnParameters": {
										"id": 3090,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3089,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3126,
												"src": "70798:11:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_userDefinedValueType$_ShortString_$3072",
													"typeString": "ShortString"
												},
												"typeName": {
													"id": 3088,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3087,
														"name": "ShortString",
														"nameLocations": [
															"70798:11:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3072,
														"src": "70798:11:0"
													},
													"referencedDeclaration": 3072,
													"src": "70798:11:0",
													"typeDescriptions": {
														"typeIdentifier": "t_userDefinedValueType$_ShortString_$3072",
														"typeString": "ShortString"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "70797:13:0"
									},
									"scope": 3283,
									"src": "70733:286:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3151,
										"nodeType": "Block",
										"src": "71177:331:0",
										"statements": [
											{
												"assignments": [
													3136
												],
												"declarations": [
													{
														"constant": false,
														"id": 3136,
														"mutability": "mutable",
														"name": "len",
														"nameLocation": "71195:3:0",
														"nodeType": "VariableDeclaration",
														"scope": 3151,
														"src": "71187:11:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 3135,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "71187:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3140,
												"initialValue": {
													"arguments": [
														{
															"id": 3138,
															"name": "sstr",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3130,
															"src": "71212:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_userDefinedValueType$_ShortString_$3072",
																"typeString": "ShortString"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_userDefinedValueType$_ShortString_$3072",
																"typeString": "ShortString"
															}
														],
														"id": 3137,
														"name": "byteLength",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3184,
														"src": "71201:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_userDefinedValueType$_ShortString_$3072_$returns$_t_uint256_$",
															"typeString": "function (ShortString) pure returns (uint256)"
														}
													},
													"id": 3139,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "71201:16:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "71187:30:0"
											},
											{
												"assignments": [
													3142
												],
												"declarations": [
													{
														"constant": false,
														"id": 3142,
														"mutability": "mutable",
														"name": "str",
														"nameLocation": "71319:3:0",
														"nodeType": "VariableDeclaration",
														"scope": 3151,
														"src": "71305:17:0",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string"
														},
														"typeName": {
															"id": 3141,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "71305:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_string_storage_ptr",
																"typeString": "string"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3147,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "3332",
															"id": 3145,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "71336:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_32_by_1",
																"typeString": "int_const 32"
															},
															"value": "32"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_rational_32_by_1",
																"typeString": "int_const 32"
															}
														],
														"id": 3144,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "71325:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
															"typeString": "function (uint256) pure returns (string memory)"
														},
														"typeName": {
															"id": 3143,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "71329:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_string_storage_ptr",
																"typeString": "string"
															}
														}
													},
													"id": 3146,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "71325:14:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "71305:34:0"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "71401:81:0",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "str",
																		"nodeType": "YulIdentifier",
																		"src": "71422:3:0"
																	},
																	{
																		"name": "len",
																		"nodeType": "YulIdentifier",
																		"src": "71427:3:0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "71415:6:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "71415:16:0"
															},
															"nodeType": "YulExpressionStatement",
															"src": "71415:16:0"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "str",
																				"nodeType": "YulIdentifier",
																				"src": "71455:3:0"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "71460:4:0",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "71451:3:0"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "71451:14:0"
																	},
																	{
																		"name": "sstr",
																		"nodeType": "YulIdentifier",
																		"src": "71467:4:0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "71444:6:0"
																},
																"nodeType": "YulFunctionCall",
																"src": "71444:28:0"
															},
															"nodeType": "YulExpressionStatement",
															"src": "71444:28:0"
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "shanghai",
												"externalReferences": [
													{
														"declaration": 3136,
														"isOffset": false,
														"isSlot": false,
														"src": "71427:3:0",
														"valueSize": 1
													},
													{
														"declaration": 3130,
														"isOffset": false,
														"isSlot": false,
														"src": "71467:4:0",
														"valueSize": 1
													},
													{
														"declaration": 3142,
														"isOffset": false,
														"isSlot": false,
														"src": "71422:3:0",
														"valueSize": 1
													},
													{
														"declaration": 3142,
														"isOffset": false,
														"isSlot": false,
														"src": "71455:3:0",
														"valueSize": 1
													}
												],
												"id": 3148,
												"nodeType": "InlineAssembly",
												"src": "71392:90:0"
											},
											{
												"expression": {
													"id": 3149,
													"name": "str",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 3142,
													"src": "71498:3:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 3134,
												"id": 3150,
												"nodeType": "Return",
												"src": "71491:10:0"
											}
										]
									},
									"documentation": {
										"id": 3127,
										"nodeType": "StructuredDocumentation",
										"src": "71025:73:0",
										"text": " @dev Decode a `ShortString` back to a \"normal\" string."
									},
									"id": 3152,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toString",
									"nameLocation": "71112:8:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3131,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3130,
												"mutability": "mutable",
												"name": "sstr",
												"nameLocation": "71133:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 3152,
												"src": "71121:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_userDefinedValueType$_ShortString_$3072",
													"typeString": "ShortString"
												},
												"typeName": {
													"id": 3129,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3128,
														"name": "ShortString",
														"nameLocations": [
															"71121:11:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3072,
														"src": "71121:11:0"
													},
													"referencedDeclaration": 3072,
													"src": "71121:11:0",
													"typeDescriptions": {
														"typeIdentifier": "t_userDefinedValueType$_ShortString_$3072",
														"typeString": "ShortString"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "71120:18:0"
									},
									"returnParameters": {
										"id": 3134,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3133,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3152,
												"src": "71162:13:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 3132,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "71162:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "71161:15:0"
									},
									"scope": 3283,
									"src": "71103:405:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3183,
										"nodeType": "Block",
										"src": "71650:175:0",
										"statements": [
											{
												"assignments": [
													3162
												],
												"declarations": [
													{
														"constant": false,
														"id": 3162,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "71668:6:0",
														"nodeType": "VariableDeclaration",
														"scope": 3183,
														"src": "71660:14:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 3161,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "71660:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3172,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 3171,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 3167,
																		"name": "sstr",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3156,
																		"src": "71704:4:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_userDefinedValueType$_ShortString_$3072",
																			"typeString": "ShortString"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_userDefinedValueType$_ShortString_$3072",
																			"typeString": "ShortString"
																		}
																	],
																	"expression": {
																		"id": 3165,
																		"name": "ShortString",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3072,
																		"src": "71685:11:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_userDefinedValueType$_ShortString_$3072_$",
																			"typeString": "type(ShortString)"
																		}
																	},
																	"id": 3166,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberLocation": "71697:6:0",
																	"memberName": "unwrap",
																	"nodeType": "MemberAccess",
																	"src": "71685:18:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_unwrap_pure$_t_userDefinedValueType$_ShortString_$3072_$returns$_t_bytes32_$",
																		"typeString": "function (ShortString) pure returns (bytes32)"
																	}
																},
																"id": 3168,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "71685:24:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															],
															"id": 3164,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "71677:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint256_$",
																"typeString": "type(uint256)"
															},
															"typeName": {
																"id": 3163,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "71677:7:0",
																"typeDescriptions": {}
															}
														},
														"id": 3169,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "71677:33:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&",
													"rightExpression": {
														"hexValue": "30784646",
														"id": 3170,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "71713:4:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_255_by_1",
															"typeString": "int_const 255"
														},
														"value": "0xFF"
													},
													"src": "71677:40:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "71660:57:0"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 3175,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 3173,
														"name": "result",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3162,
														"src": "71731:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "3331",
														"id": 3174,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "71740:2:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_31_by_1",
															"typeString": "int_const 31"
														},
														"value": "31"
													},
													"src": "71731:11:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 3180,
												"nodeType": "IfStatement",
												"src": "71727:69:0",
												"trueBody": {
													"id": 3179,
													"nodeType": "Block",
													"src": "71744:52:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 3176,
																	"name": "InvalidShortString",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3082,
																	"src": "71765:18:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 3177,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "71765:20:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 3178,
															"nodeType": "RevertStatement",
															"src": "71758:27:0"
														}
													]
												}
											},
											{
												"expression": {
													"id": 3181,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 3162,
													"src": "71812:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 3160,
												"id": 3182,
												"nodeType": "Return",
												"src": "71805:13:0"
											}
										]
									},
									"documentation": {
										"id": 3153,
										"nodeType": "StructuredDocumentation",
										"src": "71514:61:0",
										"text": " @dev Return the length of a `ShortString`."
									},
									"id": 3184,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "byteLength",
									"nameLocation": "71589:10:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3157,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3156,
												"mutability": "mutable",
												"name": "sstr",
												"nameLocation": "71612:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 3184,
												"src": "71600:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_userDefinedValueType$_ShortString_$3072",
													"typeString": "ShortString"
												},
												"typeName": {
													"id": 3155,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3154,
														"name": "ShortString",
														"nameLocations": [
															"71600:11:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3072,
														"src": "71600:11:0"
													},
													"referencedDeclaration": 3072,
													"src": "71600:11:0",
													"typeDescriptions": {
														"typeIdentifier": "t_userDefinedValueType$_ShortString_$3072",
														"typeString": "ShortString"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "71599:18:0"
									},
									"returnParameters": {
										"id": 3160,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3159,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3184,
												"src": "71641:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3158,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "71641:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "71640:9:0"
									},
									"scope": 3283,
									"src": "71580:245:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3223,
										"nodeType": "Block",
										"src": "72048:231:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 3201,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 3197,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3187,
																	"src": "72068:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"id": 3196,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "72062:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																	"typeString": "type(bytes storage pointer)"
																},
																"typeName": {
																	"id": 3195,
																	"name": "bytes",
																	"nodeType": "ElementaryTypeName",
																	"src": "72062:5:0",
																	"typeDescriptions": {}
																}
															},
															"id": 3198,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "72062:12:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 3199,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "72075:6:0",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "72062:19:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"hexValue": "3332",
														"id": 3200,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "72084:2:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_32_by_1",
															"typeString": "int_const 32"
														},
														"value": "32"
													},
													"src": "72062:24:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 3221,
													"nodeType": "Block",
													"src": "72146:127:0",
													"statements": [
														{
															"expression": {
																"id": 3214,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"arguments": [
																			{
																				"id": 3210,
																				"name": "store",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3189,
																				"src": "72186:5:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_string_storage_ptr",
																					"typeString": "string storage pointer"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_string_storage_ptr",
																					"typeString": "string storage pointer"
																				}
																			],
																			"expression": {
																				"id": 3207,
																				"name": "StorageSlot",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3069,
																				"src": "72160:11:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_contract$_StorageSlot_$3069_$",
																					"typeString": "type(library StorageSlot)"
																				}
																			},
																			"id": 3209,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "72172:13:0",
																			"memberName": "getStringSlot",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 3046,
																			"src": "72160:25:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_pure$_t_string_storage_ptr_$returns$_t_struct$_StringSlot_$2977_storage_ptr_$",
																				"typeString": "function (string storage pointer) pure returns (struct StorageSlot.StringSlot storage pointer)"
																			}
																		},
																		"id": 3211,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "72160:32:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_StringSlot_$2977_storage_ptr",
																			"typeString": "struct StorageSlot.StringSlot storage pointer"
																		}
																	},
																	"id": 3212,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberLocation": "72193:5:0",
																	"memberName": "value",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2976,
																	"src": "72160:38:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_storage",
																		"typeString": "string storage ref"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"id": 3213,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3187,
																	"src": "72201:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																},
																"src": "72160:46:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_storage",
																	"typeString": "string storage ref"
																}
															},
															"id": 3215,
															"nodeType": "ExpressionStatement",
															"src": "72160:46:0"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 3218,
																		"name": "FALLBACK_SENTINEL",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3076,
																		"src": "72244:17:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	],
																	"expression": {
																		"id": 3216,
																		"name": "ShortString",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3072,
																		"src": "72227:11:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_userDefinedValueType$_ShortString_$3072_$",
																			"typeString": "type(ShortString)"
																		}
																	},
																	"id": 3217,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberLocation": "72239:4:0",
																	"memberName": "wrap",
																	"nodeType": "MemberAccess",
																	"src": "72227:16:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_wrap_pure$_t_bytes32_$returns$_t_userDefinedValueType$_ShortString_$3072_$",
																		"typeString": "function (bytes32) pure returns (ShortString)"
																	}
																},
																"id": 3219,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "72227:35:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_userDefinedValueType$_ShortString_$3072",
																	"typeString": "ShortString"
																}
															},
															"functionReturnParameters": 3194,
															"id": 3220,
															"nodeType": "Return",
															"src": "72220:42:0"
														}
													]
												},
												"id": 3222,
												"nodeType": "IfStatement",
												"src": "72058:215:0",
												"trueBody": {
													"id": 3206,
													"nodeType": "Block",
													"src": "72088:52:0",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 3203,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3187,
																		"src": "72123:5:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 3202,
																	"name": "toShortString",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3126,
																	"src": "72109:13:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_string_memory_ptr_$returns$_t_userDefinedValueType$_ShortString_$3072_$",
																		"typeString": "function (string memory) pure returns (ShortString)"
																	}
																},
																"id": 3204,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "72109:20:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_userDefinedValueType$_ShortString_$3072",
																	"typeString": "ShortString"
																}
															},
															"functionReturnParameters": 3194,
															"id": 3205,
															"nodeType": "Return",
															"src": "72102:27:0"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 3185,
										"nodeType": "StructuredDocumentation",
										"src": "71831:103:0",
										"text": " @dev Encode a string into a `ShortString`, or write it to storage if it is too long."
									},
									"id": 3224,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toShortStringWithFallback",
									"nameLocation": "71948:25:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3190,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3187,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "71988:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 3224,
												"src": "71974:19:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 3186,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "71974:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3189,
												"mutability": "mutable",
												"name": "store",
												"nameLocation": "72010:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 3224,
												"src": "71995:20:0",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 3188,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "71995:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "71973:43:0"
									},
									"returnParameters": {
										"id": 3194,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3193,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3224,
												"src": "72035:11:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_userDefinedValueType$_ShortString_$3072",
													"typeString": "ShortString"
												},
												"typeName": {
													"id": 3192,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3191,
														"name": "ShortString",
														"nameLocations": [
															"72035:11:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3072,
														"src": "72035:11:0"
													},
													"referencedDeclaration": 3072,
													"src": "72035:11:0",
													"typeDescriptions": {
														"typeIdentifier": "t_userDefinedValueType$_ShortString_$3072",
														"typeString": "ShortString"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "72034:13:0"
									},
									"scope": 3283,
									"src": "71939:340:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3250,
										"nodeType": "Block",
										"src": "72519:158:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													},
													"id": 3240,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 3237,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3228,
																"src": "72552:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_userDefinedValueType$_ShortString_$3072",
																	"typeString": "ShortString"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_userDefinedValueType$_ShortString_$3072",
																	"typeString": "ShortString"
																}
															],
															"expression": {
																"id": 3235,
																"name": "ShortString",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3072,
																"src": "72533:11:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_userDefinedValueType$_ShortString_$3072_$",
																	"typeString": "type(ShortString)"
																}
															},
															"id": 3236,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "72545:6:0",
															"memberName": "unwrap",
															"nodeType": "MemberAccess",
															"src": "72533:18:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_unwrap_pure$_t_userDefinedValueType$_ShortString_$3072_$returns$_t_bytes32_$",
																"typeString": "function (ShortString) pure returns (bytes32)"
															}
														},
														"id": 3238,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "72533:25:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"id": 3239,
														"name": "FALLBACK_SENTINEL",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3076,
														"src": "72562:17:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "72533:46:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 3248,
													"nodeType": "Block",
													"src": "72634:37:0",
													"statements": [
														{
															"expression": {
																"id": 3246,
																"name": "store",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3230,
																"src": "72655:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_storage_ptr",
																	"typeString": "string storage pointer"
																}
															},
															"functionReturnParameters": 3234,
															"id": 3247,
															"nodeType": "Return",
															"src": "72648:12:0"
														}
													]
												},
												"id": 3249,
												"nodeType": "IfStatement",
												"src": "72529:142:0",
												"trueBody": {
													"id": 3245,
													"nodeType": "Block",
													"src": "72581:47:0",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 3242,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3228,
																		"src": "72611:5:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_userDefinedValueType$_ShortString_$3072",
																			"typeString": "ShortString"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_userDefinedValueType$_ShortString_$3072",
																			"typeString": "ShortString"
																		}
																	],
																	"id": 3241,
																	"name": "toString",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3152,
																	"src": "72602:8:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_userDefinedValueType$_ShortString_$3072_$returns$_t_string_memory_ptr_$",
																		"typeString": "function (ShortString) pure returns (string memory)"
																	}
																},
																"id": 3243,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "72602:15:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_string_memory_ptr",
																	"typeString": "string memory"
																}
															},
															"functionReturnParameters": 3234,
															"id": 3244,
															"nodeType": "Return",
															"src": "72595:22:0"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 3225,
										"nodeType": "StructuredDocumentation",
										"src": "72285:120:0",
										"text": " @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}."
									},
									"id": 3251,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toStringWithFallback",
									"nameLocation": "72419:20:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3231,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3228,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "72452:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 3251,
												"src": "72440:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_userDefinedValueType$_ShortString_$3072",
													"typeString": "ShortString"
												},
												"typeName": {
													"id": 3227,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3226,
														"name": "ShortString",
														"nameLocations": [
															"72440:11:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3072,
														"src": "72440:11:0"
													},
													"referencedDeclaration": 3072,
													"src": "72440:11:0",
													"typeDescriptions": {
														"typeIdentifier": "t_userDefinedValueType$_ShortString_$3072",
														"typeString": "ShortString"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3230,
												"mutability": "mutable",
												"name": "store",
												"nameLocation": "72474:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 3251,
												"src": "72459:20:0",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 3229,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "72459:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "72439:41:0"
									},
									"returnParameters": {
										"id": 3234,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3233,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3251,
												"src": "72504:13:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 3232,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "72504:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "72503:15:0"
									},
									"scope": 3283,
									"src": "72410:267:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3281,
										"nodeType": "Block",
										"src": "73157:174:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													},
													"id": 3267,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 3264,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3255,
																"src": "73190:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_userDefinedValueType$_ShortString_$3072",
																	"typeString": "ShortString"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_userDefinedValueType$_ShortString_$3072",
																	"typeString": "ShortString"
																}
															],
															"expression": {
																"id": 3262,
																"name": "ShortString",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3072,
																"src": "73171:11:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_userDefinedValueType$_ShortString_$3072_$",
																	"typeString": "type(ShortString)"
																}
															},
															"id": 3263,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "73183:6:0",
															"memberName": "unwrap",
															"nodeType": "MemberAccess",
															"src": "73171:18:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_unwrap_pure$_t_userDefinedValueType$_ShortString_$3072_$returns$_t_bytes32_$",
																"typeString": "function (ShortString) pure returns (bytes32)"
															}
														},
														"id": 3265,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "73171:25:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"id": 3266,
														"name": "FALLBACK_SENTINEL",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3076,
														"src": "73200:17:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "73171:46:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 3279,
													"nodeType": "Block",
													"src": "73274:51:0",
													"statements": [
														{
															"expression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 3275,
																			"name": "store",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3257,
																			"src": "73301:5:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_string_storage_ptr",
																				"typeString": "string storage pointer"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_string_storage_ptr",
																				"typeString": "string storage pointer"
																			}
																		],
																		"id": 3274,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "73295:5:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																			"typeString": "type(bytes storage pointer)"
																		},
																		"typeName": {
																			"id": 3273,
																			"name": "bytes",
																			"nodeType": "ElementaryTypeName",
																			"src": "73295:5:0",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 3276,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "73295:12:0",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_storage_ptr",
																		"typeString": "bytes storage pointer"
																	}
																},
																"id": 3277,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "73308:6:0",
																"memberName": "length",
																"nodeType": "MemberAccess",
																"src": "73295:19:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"functionReturnParameters": 3261,
															"id": 3278,
															"nodeType": "Return",
															"src": "73288:26:0"
														}
													]
												},
												"id": 3280,
												"nodeType": "IfStatement",
												"src": "73167:158:0",
												"trueBody": {
													"id": 3272,
													"nodeType": "Block",
													"src": "73219:49:0",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 3269,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3255,
																		"src": "73251:5:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_userDefinedValueType$_ShortString_$3072",
																			"typeString": "ShortString"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_userDefinedValueType$_ShortString_$3072",
																			"typeString": "ShortString"
																		}
																	],
																	"id": 3268,
																	"name": "byteLength",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3184,
																	"src": "73240:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_userDefinedValueType$_ShortString_$3072_$returns$_t_uint256_$",
																		"typeString": "function (ShortString) pure returns (uint256)"
																	}
																},
																"id": 3270,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "73240:17:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"functionReturnParameters": 3261,
															"id": 3271,
															"nodeType": "Return",
															"src": "73233:24:0"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 3252,
										"nodeType": "StructuredDocumentation",
										"src": "72683:364:0",
										"text": " @dev Return the length of a string that was encoded to `ShortString` or written to storage using\n {setWithFallback}.\n WARNING: This will return the \"byte length\" of the string. This may not reflect the actual length in terms of\n actual characters as the UTF-8 encoding of a single character can span over multiple bytes."
									},
									"id": 3282,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "byteLengthWithFallback",
									"nameLocation": "73061:22:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3258,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3255,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "73096:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 3282,
												"src": "73084:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_userDefinedValueType$_ShortString_$3072",
													"typeString": "ShortString"
												},
												"typeName": {
													"id": 3254,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3253,
														"name": "ShortString",
														"nameLocations": [
															"73084:11:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3072,
														"src": "73084:11:0"
													},
													"referencedDeclaration": 3072,
													"src": "73084:11:0",
													"typeDescriptions": {
														"typeIdentifier": "t_userDefinedValueType$_ShortString_$3072",
														"typeString": "ShortString"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3257,
												"mutability": "mutable",
												"name": "store",
												"nameLocation": "73118:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 3282,
												"src": "73103:20:0",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 3256,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "73103:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "73083:41:0"
									},
									"returnParameters": {
										"id": 3261,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3260,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3282,
												"src": "73148:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3259,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "73148:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "73147:9:0"
									},
									"scope": 3283,
									"src": "73052:279:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 3830,
							"src": "70280:3053:0",
							"usedErrors": [
								3080,
								3082
							],
							"usedEvents": []
						},
						{
							"id": 3284,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "73469:24:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC5267",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 3307,
							"linearizedBaseContracts": [
								3307
							],
							"name": "IERC5267",
							"nameLocation": "73505:8:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 3285,
										"nodeType": "StructuredDocumentation",
										"src": "73520:84:0",
										"text": " @dev MAY be emitted to signal that the domain could have changed."
									},
									"eventSelector": "0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31",
									"id": 3287,
									"name": "EIP712DomainChanged",
									"nameLocation": "73615:19:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 3286,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "73634:2:0"
									},
									"src": "73609:28:0"
								},
								{
									"documentation": {
										"id": 3288,
										"nodeType": "StructuredDocumentation",
										"src": "73643:140:0",
										"text": " @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\n signature."
									},
									"functionSelector": "84b0196e",
									"id": 3306,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "eip712Domain",
									"nameLocation": "73797:12:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3289,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "73809:2:0"
									},
									"returnParameters": {
										"id": 3305,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3291,
												"mutability": "mutable",
												"name": "fields",
												"nameLocation": "73879:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 3306,
												"src": "73872:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes1",
													"typeString": "bytes1"
												},
												"typeName": {
													"id": 3290,
													"name": "bytes1",
													"nodeType": "ElementaryTypeName",
													"src": "73872:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes1",
														"typeString": "bytes1"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3293,
												"mutability": "mutable",
												"name": "name",
												"nameLocation": "73913:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 3306,
												"src": "73899:18:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 3292,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "73899:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3295,
												"mutability": "mutable",
												"name": "version",
												"nameLocation": "73945:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 3306,
												"src": "73931:21:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 3294,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "73931:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3297,
												"mutability": "mutable",
												"name": "chainId",
												"nameLocation": "73974:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 3306,
												"src": "73966:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3296,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "73966:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3299,
												"mutability": "mutable",
												"name": "verifyingContract",
												"nameLocation": "74003:17:0",
												"nodeType": "VariableDeclaration",
												"scope": 3306,
												"src": "73995:25:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3298,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "73995:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3301,
												"mutability": "mutable",
												"name": "salt",
												"nameLocation": "74042:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 3306,
												"src": "74034:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 3300,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "74034:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3304,
												"mutability": "mutable",
												"name": "extensions",
												"nameLocation": "74077:10:0",
												"nodeType": "VariableDeclaration",
												"scope": 3306,
												"src": "74060:27:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 3302,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "74060:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 3303,
													"nodeType": "ArrayTypeName",
													"src": "74060:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "73858:239:0"
									},
									"scope": 3307,
									"src": "73788:310:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 3830,
							"src": "73495:605:0",
							"usedErrors": [],
							"usedEvents": [
								3287
							]
						},
						{
							"id": 3308,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "74248:24:0"
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 3310,
										"name": "IERC5267",
										"nameLocations": [
											"75949:8:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 3307,
										"src": "75949:8:0"
									},
									"id": 3311,
									"nodeType": "InheritanceSpecifier",
									"src": "75949:8:0"
								}
							],
							"canonicalName": "EIP712",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 3309,
								"nodeType": "StructuredDocumentation",
								"src": "74277:1643:0",
								"text": " @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose\n encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract\n does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to\n produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.\n This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n ({_hashTypedDataV4}).\n The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n the chain id to protect against replay attacks on an eventual fork of the chain.\n NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\n separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the\n separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\n @custom:oz-upgrades-unsafe-allow state-variable-immutable"
							},
							"fullyImplemented": true,
							"id": 3526,
							"linearizedBaseContracts": [
								3526,
								3307
							],
							"name": "EIP712",
							"nameLocation": "75939:6:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"global": false,
									"id": 3313,
									"libraryName": {
										"id": 3312,
										"name": "ShortStrings",
										"nameLocations": [
											"75970:12:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 3283,
										"src": "75970:12:0"
									},
									"nodeType": "UsingForDirective",
									"src": "75964:25:0"
								},
								{
									"constant": true,
									"id": 3318,
									"mutability": "constant",
									"name": "TYPE_HASH",
									"nameLocation": "76020:9:0",
									"nodeType": "VariableDeclaration",
									"scope": 3526,
									"src": "75995:140:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 3314,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "75995:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"arguments": [
											{
												"hexValue": "454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429",
												"id": 3316,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"kind": "string",
												"lValueRequested": false,
												"nodeType": "Literal",
												"src": "76050:84:0",
												"typeDescriptions": {
													"typeIdentifier": "t_stringliteral_8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f",
													"typeString": "literal_string \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\""
												},
												"value": "EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)"
											}
										],
										"expression": {
											"argumentTypes": [
												{
													"typeIdentifier": "t_stringliteral_8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f",
													"typeString": "literal_string \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\""
												}
											],
											"id": 3315,
											"name": "keccak256",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 4294967288,
											"src": "76040:9:0",
											"typeDescriptions": {
												"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
												"typeString": "function (bytes memory) pure returns (bytes32)"
											}
										},
										"id": 3317,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "functionCall",
										"lValueRequested": false,
										"nameLocations": [],
										"names": [],
										"nodeType": "FunctionCall",
										"src": "76040:95:0",
										"tryCall": false,
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 3320,
									"mutability": "immutable",
									"name": "_cachedDomainSeparator",
									"nameLocation": "76360:22:0",
									"nodeType": "VariableDeclaration",
									"scope": 3526,
									"src": "76334:48:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 3319,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "76334:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 3322,
									"mutability": "immutable",
									"name": "_cachedChainId",
									"nameLocation": "76414:14:0",
									"nodeType": "VariableDeclaration",
									"scope": 3526,
									"src": "76388:40:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 3321,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "76388:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 3324,
									"mutability": "immutable",
									"name": "_cachedThis",
									"nameLocation": "76460:11:0",
									"nodeType": "VariableDeclaration",
									"scope": 3526,
									"src": "76434:37:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 3323,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "76434:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 3326,
									"mutability": "immutable",
									"name": "_hashedName",
									"nameLocation": "76504:11:0",
									"nodeType": "VariableDeclaration",
									"scope": 3526,
									"src": "76478:37:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 3325,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "76478:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 3328,
									"mutability": "immutable",
									"name": "_hashedVersion",
									"nameLocation": "76547:14:0",
									"nodeType": "VariableDeclaration",
									"scope": 3526,
									"src": "76521:40:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 3327,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "76521:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 3331,
									"mutability": "immutable",
									"name": "_name",
									"nameLocation": "76598:5:0",
									"nodeType": "VariableDeclaration",
									"scope": 3526,
									"src": "76568:35:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_userDefinedValueType$_ShortString_$3072",
										"typeString": "ShortString"
									},
									"typeName": {
										"id": 3330,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 3329,
											"name": "ShortString",
											"nameLocations": [
												"76568:11:0"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 3072,
											"src": "76568:11:0"
										},
										"referencedDeclaration": 3072,
										"src": "76568:11:0",
										"typeDescriptions": {
											"typeIdentifier": "t_userDefinedValueType$_ShortString_$3072",
											"typeString": "ShortString"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 3334,
									"mutability": "immutable",
									"name": "_version",
									"nameLocation": "76639:8:0",
									"nodeType": "VariableDeclaration",
									"scope": 3526,
									"src": "76609:38:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_userDefinedValueType$_ShortString_$3072",
										"typeString": "ShortString"
									},
									"typeName": {
										"id": 3333,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 3332,
											"name": "ShortString",
											"nameLocations": [
												"76609:11:0"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 3072,
											"src": "76609:11:0"
										},
										"referencedDeclaration": 3072,
										"src": "76609:11:0",
										"typeDescriptions": {
											"typeIdentifier": "t_userDefinedValueType$_ShortString_$3072",
											"typeString": "ShortString"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 3336,
									"mutability": "mutable",
									"name": "_nameFallback",
									"nameLocation": "76668:13:0",
									"nodeType": "VariableDeclaration",
									"scope": 3526,
									"src": "76653:28:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 3335,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "76653:6:0",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 3338,
									"mutability": "mutable",
									"name": "_versionFallback",
									"nameLocation": "76702:16:0",
									"nodeType": "VariableDeclaration",
									"scope": 3526,
									"src": "76687:31:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 3337,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "76687:6:0",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 3395,
										"nodeType": "Block",
										"src": "77344:376:0",
										"statements": [
											{
												"expression": {
													"id": 3351,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 3346,
														"name": "_name",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3331,
														"src": "77354:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_userDefinedValueType$_ShortString_$3072",
															"typeString": "ShortString"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 3349,
																"name": "_nameFallback",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3336,
																"src": "77393:13:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_storage",
																	"typeString": "string storage ref"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_string_storage",
																	"typeString": "string storage ref"
																}
															],
															"expression": {
																"id": 3347,
																"name": "name",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3341,
																"src": "77362:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_memory_ptr",
																	"typeString": "string memory"
																}
															},
															"id": 3348,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "77367:25:0",
															"memberName": "toShortStringWithFallback",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 3224,
															"src": "77362:30:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_storage_ptr_$returns$_t_userDefinedValueType$_ShortString_$3072_$attached_to$_t_string_memory_ptr_$",
																"typeString": "function (string memory,string storage pointer) returns (ShortString)"
															}
														},
														"id": 3350,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "77362:45:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_userDefinedValueType$_ShortString_$3072",
															"typeString": "ShortString"
														}
													},
													"src": "77354:53:0",
													"typeDescriptions": {
														"typeIdentifier": "t_userDefinedValueType$_ShortString_$3072",
														"typeString": "ShortString"
													}
												},
												"id": 3352,
												"nodeType": "ExpressionStatement",
												"src": "77354:53:0"
											},
											{
												"expression": {
													"id": 3358,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 3353,
														"name": "_version",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3334,
														"src": "77417:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_userDefinedValueType$_ShortString_$3072",
															"typeString": "ShortString"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 3356,
																"name": "_versionFallback",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3338,
																"src": "77462:16:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_storage",
																	"typeString": "string storage ref"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_string_storage",
																	"typeString": "string storage ref"
																}
															],
															"expression": {
																"id": 3354,
																"name": "version",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3343,
																"src": "77428:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_memory_ptr",
																	"typeString": "string memory"
																}
															},
															"id": 3355,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "77436:25:0",
															"memberName": "toShortStringWithFallback",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 3224,
															"src": "77428:33:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_storage_ptr_$returns$_t_userDefinedValueType$_ShortString_$3072_$attached_to$_t_string_memory_ptr_$",
																"typeString": "function (string memory,string storage pointer) returns (ShortString)"
															}
														},
														"id": 3357,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "77428:51:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_userDefinedValueType$_ShortString_$3072",
															"typeString": "ShortString"
														}
													},
													"src": "77417:62:0",
													"typeDescriptions": {
														"typeIdentifier": "t_userDefinedValueType$_ShortString_$3072",
														"typeString": "ShortString"
													}
												},
												"id": 3359,
												"nodeType": "ExpressionStatement",
												"src": "77417:62:0"
											},
											{
												"expression": {
													"id": 3367,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 3360,
														"name": "_hashedName",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3326,
														"src": "77489:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 3364,
																		"name": "name",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3341,
																		"src": "77519:4:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 3363,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "77513:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																		"typeString": "type(bytes storage pointer)"
																	},
																	"typeName": {
																		"id": 3362,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "77513:5:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 3365,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "77513:11:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"id": 3361,
															"name": "keccak256",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967288,
															"src": "77503:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																"typeString": "function (bytes memory) pure returns (bytes32)"
															}
														},
														"id": 3366,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "77503:22:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "77489:36:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"id": 3368,
												"nodeType": "ExpressionStatement",
												"src": "77489:36:0"
											},
											{
												"expression": {
													"id": 3376,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 3369,
														"name": "_hashedVersion",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3328,
														"src": "77535:14:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 3373,
																		"name": "version",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3343,
																		"src": "77568:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 3372,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "77562:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																		"typeString": "type(bytes storage pointer)"
																	},
																	"typeName": {
																		"id": 3371,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "77562:5:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 3374,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "77562:14:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"id": 3370,
															"name": "keccak256",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967288,
															"src": "77552:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																"typeString": "function (bytes memory) pure returns (bytes32)"
															}
														},
														"id": 3375,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "77552:25:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "77535:42:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"id": 3377,
												"nodeType": "ExpressionStatement",
												"src": "77535:42:0"
											},
											{
												"expression": {
													"id": 3381,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 3378,
														"name": "_cachedChainId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3322,
														"src": "77588:14:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 3379,
															"name": "block",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967292,
															"src": "77605:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_block",
																"typeString": "block"
															}
														},
														"id": 3380,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "77611:7:0",
														"memberName": "chainid",
														"nodeType": "MemberAccess",
														"src": "77605:13:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "77588:30:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 3382,
												"nodeType": "ExpressionStatement",
												"src": "77588:30:0"
											},
											{
												"expression": {
													"id": 3386,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 3383,
														"name": "_cachedDomainSeparator",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3320,
														"src": "77628:22:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 3384,
															"name": "_buildDomainSeparator",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3443,
															"src": "77653:21:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_bytes32_$",
																"typeString": "function () view returns (bytes32)"
															}
														},
														"id": 3385,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "77653:23:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "77628:48:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"id": 3387,
												"nodeType": "ExpressionStatement",
												"src": "77628:48:0"
											},
											{
												"expression": {
													"id": 3393,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 3388,
														"name": "_cachedThis",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3324,
														"src": "77686:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 3391,
																"name": "this",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967268,
																"src": "77708:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_EIP712_$3526",
																	"typeString": "contract EIP712"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_contract$_EIP712_$3526",
																	"typeString": "contract EIP712"
																}
															],
															"id": 3390,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "77700:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 3389,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "77700:7:0",
																"typeDescriptions": {}
															}
														},
														"id": 3392,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "77700:13:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "77686:27:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 3394,
												"nodeType": "ExpressionStatement",
												"src": "77686:27:0"
											}
										]
									},
									"documentation": {
										"id": 3339,
										"nodeType": "StructuredDocumentation",
										"src": "76725:559:0",
										"text": " @dev Initializes the domain separator and parameter caches.\n The meaning of `name` and `version` is specified in\n https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n - `version`: the current major version of the signing domain.\n NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n contract upgrade]."
									},
									"id": 3396,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3344,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3341,
												"mutability": "mutable",
												"name": "name",
												"nameLocation": "77315:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 3396,
												"src": "77301:18:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 3340,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "77301:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3343,
												"mutability": "mutable",
												"name": "version",
												"nameLocation": "77335:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 3396,
												"src": "77321:21:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 3342,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "77321:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "77300:43:0"
									},
									"returnParameters": {
										"id": 3345,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "77344:0:0"
									},
									"scope": 3526,
									"src": "77289:431:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3421,
										"nodeType": "Block",
										"src": "77868:200:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 3412,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"id": 3407,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"arguments": [
																{
																	"id": 3404,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "77890:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_EIP712_$3526",
																		"typeString": "contract EIP712"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_EIP712_$3526",
																		"typeString": "contract EIP712"
																	}
																],
																"id": 3403,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "77882:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 3402,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "77882:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 3405,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "77882:13:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"id": 3406,
															"name": "_cachedThis",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3324,
															"src": "77899:11:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"src": "77882:28:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 3411,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"id": 3408,
																"name": "block",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967292,
																"src": "77914:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_block",
																	"typeString": "block"
																}
															},
															"id": 3409,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "77920:7:0",
															"memberName": "chainid",
															"nodeType": "MemberAccess",
															"src": "77914:13:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"id": 3410,
															"name": "_cachedChainId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3322,
															"src": "77931:14:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "77914:31:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "77882:63:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 3419,
													"nodeType": "Block",
													"src": "78007:55:0",
													"statements": [
														{
															"expression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 3416,
																	"name": "_buildDomainSeparator",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3443,
																	"src": "78028:21:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_bytes32_$",
																		"typeString": "function () view returns (bytes32)"
																	}
																},
																"id": 3417,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "78028:23:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"functionReturnParameters": 3401,
															"id": 3418,
															"nodeType": "Return",
															"src": "78021:30:0"
														}
													]
												},
												"id": 3420,
												"nodeType": "IfStatement",
												"src": "77878:184:0",
												"trueBody": {
													"id": 3415,
													"nodeType": "Block",
													"src": "77947:54:0",
													"statements": [
														{
															"expression": {
																"id": 3413,
																"name": "_cachedDomainSeparator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3320,
																"src": "77968:22:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"functionReturnParameters": 3401,
															"id": 3414,
															"nodeType": "Return",
															"src": "77961:29:0"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 3397,
										"nodeType": "StructuredDocumentation",
										"src": "77726:75:0",
										"text": " @dev Returns the domain separator for the current chain."
									},
									"id": 3422,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_domainSeparatorV4",
									"nameLocation": "77815:18:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3398,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "77833:2:0"
									},
									"returnParameters": {
										"id": 3401,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3400,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3422,
												"src": "77859:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 3399,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "77859:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "77858:9:0"
									},
									"scope": 3526,
									"src": "77806:262:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3442,
										"nodeType": "Block",
										"src": "78138:115:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 3430,
																	"name": "TYPE_HASH",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3318,
																	"src": "78176:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"id": 3431,
																	"name": "_hashedName",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3326,
																	"src": "78187:11:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"id": 3432,
																	"name": "_hashedVersion",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3328,
																	"src": "78200:14:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"expression": {
																		"id": 3433,
																		"name": "block",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967292,
																		"src": "78216:5:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_block",
																			"typeString": "block"
																		}
																	},
																	"id": 3434,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "78222:7:0",
																	"memberName": "chainid",
																	"nodeType": "MemberAccess",
																	"src": "78216:13:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"arguments": [
																		{
																			"id": 3437,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "78239:4:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_EIP712_$3526",
																				"typeString": "contract EIP712"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_EIP712_$3526",
																				"typeString": "contract EIP712"
																			}
																		],
																		"id": 3436,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "78231:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 3435,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "78231:7:0",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 3438,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "78231:13:0",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 3428,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "78165:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 3429,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "78169:6:0",
																"memberName": "encode",
																"nodeType": "MemberAccess",
																"src": "78165:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 3439,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "78165:80:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 3427,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "78155:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 3440,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "78155:91:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 3426,
												"id": 3441,
												"nodeType": "Return",
												"src": "78148:98:0"
											}
										]
									},
									"id": 3443,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_buildDomainSeparator",
									"nameLocation": "78083:21:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3423,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "78104:2:0"
									},
									"returnParameters": {
										"id": 3426,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3425,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3443,
												"src": "78129:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 3424,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "78129:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "78128:9:0"
									},
									"scope": 3526,
									"src": "78074:179:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 3458,
										"nodeType": "Block",
										"src": "78964:90:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 3453,
																"name": "_domainSeparatorV4",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3422,
																"src": "79014:18:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_bytes32_$",
																	"typeString": "function () view returns (bytes32)"
																}
															},
															"id": 3454,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "79014:20:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 3455,
															"name": "structHash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3446,
															"src": "79036:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"expression": {
															"id": 3451,
															"name": "MessageHashUtils",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2960,
															"src": "78981:16:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_MessageHashUtils_$2960_$",
																"typeString": "type(library MessageHashUtils)"
															}
														},
														"id": 3452,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "78998:15:0",
														"memberName": "toTypedDataHash",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2959,
														"src": "78981:32:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
															"typeString": "function (bytes32,bytes32) pure returns (bytes32)"
														}
													},
													"id": 3456,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "78981:66:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 3450,
												"id": 3457,
												"nodeType": "Return",
												"src": "78974:73:0"
											}
										]
									},
									"documentation": {
										"id": 3444,
										"nodeType": "StructuredDocumentation",
										"src": "78259:614:0",
										"text": " @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n function returns the hash of the fully encoded EIP712 message for this domain.\n This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n ```solidity\n bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     keccak256(\"Mail(address to,string contents)\"),\n     mailTo,\n     keccak256(bytes(mailContents))\n )));\n address signer = ECDSA.recover(digest, signature);\n ```"
									},
									"id": 3459,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_hashTypedDataV4",
									"nameLocation": "78887:16:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3447,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3446,
												"mutability": "mutable",
												"name": "structHash",
												"nameLocation": "78912:10:0",
												"nodeType": "VariableDeclaration",
												"scope": 3459,
												"src": "78904:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 3445,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "78904:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "78903:20:0"
									},
									"returnParameters": {
										"id": 3450,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3449,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3459,
												"src": "78955:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 3448,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "78955:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "78954:9:0"
									},
									"scope": 3526,
									"src": "78878:176:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										3306
									],
									"body": {
										"id": 3500,
										"nodeType": "Block",
										"src": "79433:229:0",
										"statements": [
											{
												"expression": {
													"components": [
														{
															"hexValue": "0f",
															"id": 3478,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "hexString",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "79464:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_3d725c5ee53025f027da36bea8d3af3b6a3e9d2d1542d47c162631de48e66c1c",
																"typeString": "literal_string hex\"0f\""
															},
															"value": "\u000f"
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 3479,
																"name": "_EIP712Name",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3513,
																"src": "79494:11:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_string_memory_ptr_$",
																	"typeString": "function () view returns (string memory)"
																}
															},
															"id": 3480,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "79494:13:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 3481,
																"name": "_EIP712Version",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3525,
																"src": "79521:14:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_string_memory_ptr_$",
																	"typeString": "function () view returns (string memory)"
																}
															},
															"id": 3482,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "79521:16:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														{
															"expression": {
																"id": 3483,
																"name": "block",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967292,
																"src": "79551:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_block",
																	"typeString": "block"
																}
															},
															"id": 3484,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "79557:7:0",
															"memberName": "chainid",
															"nodeType": "MemberAccess",
															"src": "79551:13:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"arguments": [
																{
																	"id": 3487,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "79586:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_EIP712_$3526",
																		"typeString": "contract EIP712"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_EIP712_$3526",
																		"typeString": "contract EIP712"
																	}
																],
																"id": 3486,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "79578:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 3485,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "79578:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 3488,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "79578:13:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 3491,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "79613:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 3490,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "79605:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes32_$",
																	"typeString": "type(bytes32)"
																},
																"typeName": {
																	"id": 3489,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "79605:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 3492,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "79605:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 3496,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "79643:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 3495,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "NewExpression",
																"src": "79629:13:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$",
																	"typeString": "function (uint256) pure returns (uint256[] memory)"
																},
																"typeName": {
																	"baseType": {
																		"id": 3493,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "79633:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3494,
																	"nodeType": "ArrayTypeName",
																	"src": "79633:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
																		"typeString": "uint256[]"
																	}
																}
															},
															"id": 3497,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "79629:16:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
																"typeString": "uint256[] memory"
															}
														}
													],
													"id": 3498,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "79450:205:0",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_stringliteral_3d725c5ee53025f027da36bea8d3af3b6a3e9d2d1542d47c162631de48e66c1c_$_t_string_memory_ptr_$_t_string_memory_ptr_$_t_uint256_$_t_address_$_t_bytes32_$_t_array$_t_uint256_$dyn_memory_ptr_$",
														"typeString": "tuple(literal_string hex\"0f\",string memory,string memory,uint256,address,bytes32,uint256[] memory)"
													}
												},
												"functionReturnParameters": 3477,
												"id": 3499,
												"nodeType": "Return",
												"src": "79443:212:0"
											}
										]
									},
									"documentation": {
										"id": 3460,
										"nodeType": "StructuredDocumentation",
										"src": "79060:40:0",
										"text": " @dev See {IERC-5267}."
									},
									"functionSelector": "84b0196e",
									"id": 3501,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "eip712Domain",
									"nameLocation": "79114:12:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3461,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "79126:2:0"
									},
									"returnParameters": {
										"id": 3477,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3463,
												"mutability": "mutable",
												"name": "fields",
												"nameLocation": "79210:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 3501,
												"src": "79203:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes1",
													"typeString": "bytes1"
												},
												"typeName": {
													"id": 3462,
													"name": "bytes1",
													"nodeType": "ElementaryTypeName",
													"src": "79203:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes1",
														"typeString": "bytes1"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3465,
												"mutability": "mutable",
												"name": "name",
												"nameLocation": "79244:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 3501,
												"src": "79230:18:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 3464,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "79230:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3467,
												"mutability": "mutable",
												"name": "version",
												"nameLocation": "79276:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 3501,
												"src": "79262:21:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 3466,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "79262:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3469,
												"mutability": "mutable",
												"name": "chainId",
												"nameLocation": "79305:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 3501,
												"src": "79297:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3468,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "79297:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3471,
												"mutability": "mutable",
												"name": "verifyingContract",
												"nameLocation": "79334:17:0",
												"nodeType": "VariableDeclaration",
												"scope": 3501,
												"src": "79326:25:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3470,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "79326:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3473,
												"mutability": "mutable",
												"name": "salt",
												"nameLocation": "79373:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 3501,
												"src": "79365:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 3472,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "79365:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3476,
												"mutability": "mutable",
												"name": "extensions",
												"nameLocation": "79408:10:0",
												"nodeType": "VariableDeclaration",
												"scope": 3501,
												"src": "79391:27:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 3474,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "79391:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 3475,
													"nodeType": "ArrayTypeName",
													"src": "79391:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "79189:239:0"
									},
									"scope": 3526,
									"src": "79105:557:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 3512,
										"nodeType": "Block",
										"src": "80043:65:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 3509,
															"name": "_nameFallback",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3336,
															"src": "80087:13:0",
															"typeDescriptions": {
																"typeIdentifier": "t_string_storage",
																"typeString": "string storage ref"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_string_storage",
																"typeString": "string storage ref"
															}
														],
														"expression": {
															"id": 3507,
															"name": "_name",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3331,
															"src": "80060:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_userDefinedValueType$_ShortString_$3072",
																"typeString": "ShortString"
															}
														},
														"id": 3508,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "80066:20:0",
														"memberName": "toStringWithFallback",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 3251,
														"src": "80060:26:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_userDefinedValueType$_ShortString_$3072_$_t_string_storage_ptr_$returns$_t_string_memory_ptr_$attached_to$_t_userDefinedValueType$_ShortString_$3072_$",
															"typeString": "function (ShortString,string storage pointer) pure returns (string memory)"
														}
													},
													"id": 3510,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "80060:41:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 3506,
												"id": 3511,
												"nodeType": "Return",
												"src": "80053:48:0"
											}
										]
									},
									"documentation": {
										"id": 3502,
										"nodeType": "StructuredDocumentation",
										"src": "79668:256:0",
										"text": " @dev The name parameter for the EIP712 domain.\n NOTE: By default this function reads _name which is an immutable value.\n It only reads from storage if necessary (in case the value is too large to fit in a ShortString)."
									},
									"id": 3513,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_EIP712Name",
									"nameLocation": "79991:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3503,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "80002:2:0"
									},
									"returnParameters": {
										"id": 3506,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3505,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3513,
												"src": "80028:13:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 3504,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "80028:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "80027:15:0"
									},
									"scope": 3526,
									"src": "79982:126:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3524,
										"nodeType": "Block",
										"src": "80498:71:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 3521,
															"name": "_versionFallback",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3338,
															"src": "80545:16:0",
															"typeDescriptions": {
																"typeIdentifier": "t_string_storage",
																"typeString": "string storage ref"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_string_storage",
																"typeString": "string storage ref"
															}
														],
														"expression": {
															"id": 3519,
															"name": "_version",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3334,
															"src": "80515:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_userDefinedValueType$_ShortString_$3072",
																"typeString": "ShortString"
															}
														},
														"id": 3520,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "80524:20:0",
														"memberName": "toStringWithFallback",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 3251,
														"src": "80515:29:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_userDefinedValueType$_ShortString_$3072_$_t_string_storage_ptr_$returns$_t_string_memory_ptr_$attached_to$_t_userDefinedValueType$_ShortString_$3072_$",
															"typeString": "function (ShortString,string storage pointer) pure returns (string memory)"
														}
													},
													"id": 3522,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "80515:47:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 3518,
												"id": 3523,
												"nodeType": "Return",
												"src": "80508:54:0"
											}
										]
									},
									"documentation": {
										"id": 3514,
										"nodeType": "StructuredDocumentation",
										"src": "80114:262:0",
										"text": " @dev The version parameter for the EIP712 domain.\n NOTE: By default this function reads _version which is an immutable value.\n It only reads from storage if necessary (in case the value is too large to fit in a ShortString)."
									},
									"id": 3525,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_EIP712Version",
									"nameLocation": "80443:14:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3515,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "80457:2:0"
									},
									"returnParameters": {
										"id": 3518,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3517,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3525,
												"src": "80483:13:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 3516,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "80483:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "80482:15:0"
									},
									"scope": 3526,
									"src": "80434:135:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 3830,
							"src": "75921:4650:0",
							"usedErrors": [
								3080,
								3082
							],
							"usedEvents": [
								3287
							]
						},
						{
							"id": 3527,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "80692:24:0"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Nonces",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 3528,
								"nodeType": "StructuredDocumentation",
								"src": "80718:83:0",
								"text": " @dev Provides tracking nonces for addresses. Nonces will only increment."
							},
							"fullyImplemented": true,
							"id": 3593,
							"linearizedBaseContracts": [
								3593
							],
							"name": "Nonces",
							"nameLocation": "80820:6:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 3529,
										"nodeType": "StructuredDocumentation",
										"src": "80833:90:0",
										"text": " @dev The nonce used for an `account` is not the expected current nonce."
									},
									"errorSelector": "752d88c0",
									"id": 3535,
									"name": "InvalidAccountNonce",
									"nameLocation": "80934:19:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 3534,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3531,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "80962:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 3535,
												"src": "80954:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3530,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "80954:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3533,
												"mutability": "mutable",
												"name": "currentNonce",
												"nameLocation": "80979:12:0",
												"nodeType": "VariableDeclaration",
												"scope": 3535,
												"src": "80971:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3532,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "80971:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "80953:39:0"
									},
									"src": "80928:65:0"
								},
								{
									"constant": false,
									"id": 3539,
									"mutability": "mutable",
									"name": "_nonces",
									"nameLocation": "81043:7:0",
									"nodeType": "VariableDeclaration",
									"scope": 3593,
									"src": "80999:51:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 3538,
										"keyName": "account",
										"keyNameLocation": "81015:7:0",
										"keyType": {
											"id": 3536,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "81007:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "80999:35:0",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 3537,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "81026:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 3551,
										"nodeType": "Block",
										"src": "81200:38:0",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"id": 3547,
														"name": "_nonces",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3539,
														"src": "81217:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 3549,
													"indexExpression": {
														"id": 3548,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3542,
														"src": "81225:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "81217:14:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 3546,
												"id": 3550,
												"nodeType": "Return",
												"src": "81210:21:0"
											}
										]
									},
									"documentation": {
										"id": 3540,
										"nodeType": "StructuredDocumentation",
										"src": "81057:69:0",
										"text": " @dev Returns the next unused nonce for an address."
									},
									"functionSelector": "7ecebe00",
									"id": 3552,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "nonces",
									"nameLocation": "81140:6:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3543,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3542,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "81155:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 3552,
												"src": "81147:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3541,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "81147:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "81146:15:0"
									},
									"returnParameters": {
										"id": 3546,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3545,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3552,
												"src": "81191:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3544,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "81191:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "81190:9:0"
									},
									"scope": 3593,
									"src": "81131:107:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 3566,
										"nodeType": "Block",
										"src": "81421:326:0",
										"statements": [
											{
												"id": 3565,
												"nodeType": "UncheckedBlock",
												"src": "81624:117:0",
												"statements": [
													{
														"expression": {
															"id": 3563,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "UnaryOperation",
															"operator": "++",
															"prefix": false,
															"src": "81714:16:0",
															"subExpression": {
																"baseExpression": {
																	"id": 3560,
																	"name": "_nonces",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3539,
																	"src": "81714:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 3562,
																"indexExpression": {
																	"id": 3561,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3555,
																	"src": "81722:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "81714:14:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 3559,
														"id": 3564,
														"nodeType": "Return",
														"src": "81707:23:0"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 3553,
										"nodeType": "StructuredDocumentation",
										"src": "81244:103:0",
										"text": " @dev Consumes a nonce.\n Returns the current value and increments nonce."
									},
									"id": 3567,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_useNonce",
									"nameLocation": "81361:9:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3556,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3555,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "81379:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 3567,
												"src": "81371:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3554,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "81371:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "81370:15:0"
									},
									"returnParameters": {
										"id": 3559,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3558,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3567,
												"src": "81412:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3557,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "81412:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "81411:9:0"
									},
									"scope": 3593,
									"src": "81352:395:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3591,
										"nodeType": "Block",
										"src": "81931:149:0",
										"statements": [
											{
												"assignments": [
													3576
												],
												"declarations": [
													{
														"constant": false,
														"id": 3576,
														"mutability": "mutable",
														"name": "current",
														"nameLocation": "81949:7:0",
														"nodeType": "VariableDeclaration",
														"scope": 3591,
														"src": "81941:15:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 3575,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "81941:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3580,
												"initialValue": {
													"arguments": [
														{
															"id": 3578,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3570,
															"src": "81969:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 3577,
														"name": "_useNonce",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3567,
														"src": "81959:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) returns (uint256)"
														}
													},
													"id": 3579,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "81959:16:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "81941:34:0"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 3583,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 3581,
														"name": "nonce",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3572,
														"src": "81989:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"id": 3582,
														"name": "current",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3576,
														"src": "81998:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "81989:16:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 3590,
												"nodeType": "IfStatement",
												"src": "81985:89:0",
												"trueBody": {
													"id": 3589,
													"nodeType": "Block",
													"src": "82007:67:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"id": 3585,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3570,
																		"src": "82048:5:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 3586,
																		"name": "current",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3576,
																		"src": "82055:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 3584,
																	"name": "InvalidAccountNonce",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3535,
																	"src": "82028:19:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (address,uint256) pure"
																	}
																},
																"id": 3587,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "82028:35:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 3588,
															"nodeType": "RevertStatement",
															"src": "82021:42:0"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 3568,
										"nodeType": "StructuredDocumentation",
										"src": "81753:100:0",
										"text": " @dev Same as {_useNonce} but checking that `nonce` is the next valid for `owner`."
									},
									"id": 3592,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_useCheckedNonce",
									"nameLocation": "81867:16:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3573,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3570,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "81892:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 3592,
												"src": "81884:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3569,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "81884:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3572,
												"mutability": "mutable",
												"name": "nonce",
												"nameLocation": "81907:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 3592,
												"src": "81899:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3571,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "81899:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "81883:30:0"
									},
									"returnParameters": {
										"id": 3574,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "81931:0:0"
									},
									"scope": 3593,
									"src": "81858:222:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 3830,
							"src": "80802:1280:0",
							"usedErrors": [
								3535
							],
							"usedEvents": []
						},
						{
							"id": 3594,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "82248:24:0"
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 3596,
										"name": "ERC20",
										"nameLocations": [
											"82800:5:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 771,
										"src": "82800:5:0"
									},
									"id": 3597,
									"nodeType": "InheritanceSpecifier",
									"src": "82800:5:0"
								},
								{
									"baseName": {
										"id": 3598,
										"name": "IERC20Permit",
										"nameLocations": [
											"82807:12:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1135,
										"src": "82807:12:0"
									},
									"id": 3599,
									"nodeType": "InheritanceSpecifier",
									"src": "82807:12:0"
								},
								{
									"baseName": {
										"id": 3600,
										"name": "EIP712",
										"nameLocations": [
											"82821:6:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 3526,
										"src": "82821:6:0"
									},
									"id": 3601,
									"nodeType": "InheritanceSpecifier",
									"src": "82821:6:0"
								},
								{
									"baseName": {
										"id": 3602,
										"name": "Nonces",
										"nameLocations": [
											"82829:6:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 3593,
										"src": "82829:6:0"
									},
									"id": 3603,
									"nodeType": "InheritanceSpecifier",
									"src": "82829:6:0"
								}
							],
							"canonicalName": "ERC20Permit",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 3595,
								"nodeType": "StructuredDocumentation",
								"src": "82279:487:0",
								"text": " @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all."
							},
							"fullyImplemented": true,
							"id": 3736,
							"linearizedBaseContracts": [
								3736,
								3593,
								3526,
								3307,
								1135,
								771,
								170,
								100,
								77,
								129
							],
							"name": "ERC20Permit",
							"nameLocation": "82785:11:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 3608,
									"mutability": "constant",
									"name": "PERMIT_TYPEHASH",
									"nameLocation": "82867:15:0",
									"nodeType": "VariableDeclaration",
									"scope": 3736,
									"src": "82842:146:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 3604,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "82842:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"arguments": [
											{
												"hexValue": "5065726d69742861646472657373206f776e65722c61646472657373207370656e6465722c75696e743235362076616c75652c75696e74323536206e6f6e63652c75696e7432353620646561646c696e6529",
												"id": 3606,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"kind": "string",
												"lValueRequested": false,
												"nodeType": "Literal",
												"src": "82903:84:0",
												"typeDescriptions": {
													"typeIdentifier": "t_stringliteral_6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9",
													"typeString": "literal_string \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\""
												},
												"value": "Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)"
											}
										],
										"expression": {
											"argumentTypes": [
												{
													"typeIdentifier": "t_stringliteral_6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9",
													"typeString": "literal_string \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\""
												}
											],
											"id": 3605,
											"name": "keccak256",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 4294967288,
											"src": "82893:9:0",
											"typeDescriptions": {
												"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
												"typeString": "function (bytes memory) pure returns (bytes32)"
											}
										},
										"id": 3607,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "functionCall",
										"lValueRequested": false,
										"nameLocations": [],
										"names": [],
										"nodeType": "FunctionCall",
										"src": "82893:95:0",
										"tryCall": false,
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "private"
								},
								{
									"documentation": {
										"id": 3609,
										"nodeType": "StructuredDocumentation",
										"src": "82995:52:0",
										"text": " @dev Permit deadline has expired."
									},
									"errorSelector": "62791302",
									"id": 3613,
									"name": "ERC2612ExpiredSignature",
									"nameLocation": "83058:23:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 3612,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3611,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "83090:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 3613,
												"src": "83082:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3610,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "83082:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "83081:18:0"
									},
									"src": "83052:48:0"
								},
								{
									"documentation": {
										"id": 3614,
										"nodeType": "StructuredDocumentation",
										"src": "83106:45:0",
										"text": " @dev Mismatched signature."
									},
									"errorSelector": "4b800e46",
									"id": 3620,
									"name": "ERC2612InvalidSigner",
									"nameLocation": "83162:20:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 3619,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3616,
												"mutability": "mutable",
												"name": "signer",
												"nameLocation": "83191:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 3620,
												"src": "83183:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3615,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "83183:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3618,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "83207:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 3620,
												"src": "83199:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3617,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "83199:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "83182:31:0"
									},
									"src": "83156:58:0"
								},
								{
									"body": {
										"id": 3630,
										"nodeType": "Block",
										"src": "83495:2:0",
										"statements": []
									},
									"documentation": {
										"id": 3621,
										"nodeType": "StructuredDocumentation",
										"src": "83220:220:0",
										"text": " @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n It's a good idea to use the same `name` that is defined as the ERC20 token name."
									},
									"id": 3631,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [
										{
											"arguments": [
												{
													"id": 3626,
													"name": "name",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 3623,
													"src": "83484:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												{
													"hexValue": "31",
													"id": 3627,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "string",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "83490:3:0",
													"typeDescriptions": {
														"typeIdentifier": "t_stringliteral_c89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6",
														"typeString": "literal_string \"1\""
													},
													"value": "1"
												}
											],
											"id": 3628,
											"kind": "baseConstructorSpecifier",
											"modifierName": {
												"id": 3625,
												"name": "EIP712",
												"nameLocations": [
													"83477:6:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 3526,
												"src": "83477:6:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "83477:17:0"
										}
									],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3624,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3623,
												"mutability": "mutable",
												"name": "name",
												"nameLocation": "83471:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 3631,
												"src": "83457:18:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 3622,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "83457:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "83456:20:0"
									},
									"returnParameters": {
										"id": 3629,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "83495:0:0"
									},
									"scope": 3736,
									"src": "83445:52:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										1120
									],
									"body": {
										"id": 3707,
										"nodeType": "Block",
										"src": "83740:483:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 3652,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 3649,
															"name": "block",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967292,
															"src": "83754:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_block",
																"typeString": "block"
															}
														},
														"id": 3650,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "83760:9:0",
														"memberName": "timestamp",
														"nodeType": "MemberAccess",
														"src": "83754:15:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"id": 3651,
														"name": "deadline",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3640,
														"src": "83772:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "83754:26:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 3658,
												"nodeType": "IfStatement",
												"src": "83750:97:0",
												"trueBody": {
													"id": 3657,
													"nodeType": "Block",
													"src": "83782:65:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"id": 3654,
																		"name": "deadline",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3640,
																		"src": "83827:8:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 3653,
																	"name": "ERC2612ExpiredSignature",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3613,
																	"src": "83803:23:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_uint256_$returns$__$",
																		"typeString": "function (uint256) pure"
																	}
																},
																"id": 3655,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "83803:33:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 3656,
															"nodeType": "RevertStatement",
															"src": "83796:40:0"
														}
													]
												}
											},
											{
												"assignments": [
													3660
												],
												"declarations": [
													{
														"constant": false,
														"id": 3660,
														"mutability": "mutable",
														"name": "structHash",
														"nameLocation": "83865:10:0",
														"nodeType": "VariableDeclaration",
														"scope": 3707,
														"src": "83857:18:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 3659,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "83857:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3674,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 3664,
																	"name": "PERMIT_TYPEHASH",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3608,
																	"src": "83899:15:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"id": 3665,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3634,
																	"src": "83916:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 3666,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3636,
																	"src": "83923:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 3667,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3638,
																	"src": "83932:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"arguments": [
																		{
																			"id": 3669,
																			"name": "owner",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3634,
																			"src": "83949:5:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		],
																		"id": 3668,
																		"name": "_useNonce",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3567,
																		"src": "83939:9:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$_t_uint256_$",
																			"typeString": "function (address) returns (uint256)"
																		}
																	},
																	"id": 3670,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "83939:16:0",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 3671,
																	"name": "deadline",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3640,
																	"src": "83957:8:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 3662,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "83888:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 3663,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "83892:6:0",
																"memberName": "encode",
																"nodeType": "MemberAccess",
																"src": "83888:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 3672,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "83888:78:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 3661,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "83878:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 3673,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "83878:89:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "83857:110:0"
											},
											{
												"assignments": [
													3676
												],
												"declarations": [
													{
														"constant": false,
														"id": 3676,
														"mutability": "mutable",
														"name": "hash",
														"nameLocation": "83986:4:0",
														"nodeType": "VariableDeclaration",
														"scope": 3707,
														"src": "83978:12:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 3675,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "83978:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3680,
												"initialValue": {
													"arguments": [
														{
															"id": 3678,
															"name": "structHash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3660,
															"src": "84010:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 3677,
														"name": "_hashTypedDataV4",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3459,
														"src": "83993:16:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$",
															"typeString": "function (bytes32) view returns (bytes32)"
														}
													},
													"id": 3679,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "83993:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "83978:43:0"
											},
											{
												"assignments": [
													3682
												],
												"declarations": [
													{
														"constant": false,
														"id": 3682,
														"mutability": "mutable",
														"name": "signer",
														"nameLocation": "84040:6:0",
														"nodeType": "VariableDeclaration",
														"scope": 3707,
														"src": "84032:14:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 3681,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "84032:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3690,
												"initialValue": {
													"arguments": [
														{
															"id": 3685,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3676,
															"src": "84063:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 3686,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3642,
															"src": "84069:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"id": 3687,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3644,
															"src": "84072:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 3688,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3646,
															"src": "84075:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"expression": {
															"id": 3683,
															"name": "ECDSA",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1482,
															"src": "84049:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_ECDSA_$1482_$",
																"typeString": "type(library ECDSA)"
															}
														},
														"id": 3684,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "84055:7:0",
														"memberName": "recover",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1432,
														"src": "84049:13:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$",
															"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address)"
														}
													},
													"id": 3689,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "84049:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "84032:45:0"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 3693,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 3691,
														"name": "signer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3682,
														"src": "84091:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"id": 3692,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3634,
														"src": "84101:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "84091:15:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 3700,
												"nodeType": "IfStatement",
												"src": "84087:88:0",
												"trueBody": {
													"id": 3699,
													"nodeType": "Block",
													"src": "84108:67:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"id": 3695,
																		"name": "signer",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3682,
																		"src": "84150:6:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 3696,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3634,
																		"src": "84158:5:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 3694,
																	"name": "ERC2612InvalidSigner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3620,
																	"src": "84129:20:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$_t_address_$returns$__$",
																		"typeString": "function (address,address) pure"
																	}
																},
																"id": 3697,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "84129:35:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 3698,
															"nodeType": "RevertStatement",
															"src": "84122:42:0"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 3702,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3634,
															"src": "84194:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 3703,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3636,
															"src": "84201:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 3704,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3638,
															"src": "84210:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 3701,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															662,
															722
														],
														"referencedDeclaration": 662,
														"src": "84185:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 3705,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "84185:31:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3706,
												"nodeType": "ExpressionStatement",
												"src": "84185:31:0"
											}
										]
									},
									"documentation": {
										"id": 3632,
										"nodeType": "StructuredDocumentation",
										"src": "83503:43:0",
										"text": " @inheritdoc IERC20Permit"
									},
									"functionSelector": "d505accf",
									"id": 3708,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "permit",
									"nameLocation": "83560:6:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3647,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3634,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "83584:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 3708,
												"src": "83576:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3633,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "83576:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3636,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "83607:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 3708,
												"src": "83599:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3635,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "83599:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3638,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "83632:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 3708,
												"src": "83624:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3637,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "83624:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3640,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "83655:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 3708,
												"src": "83647:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3639,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "83647:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3642,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "83679:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 3708,
												"src": "83673:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 3641,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "83673:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3644,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "83698:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 3708,
												"src": "83690:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 3643,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "83690:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3646,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "83717:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 3708,
												"src": "83709:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 3645,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "83709:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "83566:158:0"
									},
									"returnParameters": {
										"id": 3648,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "83740:0:0"
									},
									"scope": 3736,
									"src": "83551:672:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1128,
										3552
									],
									"body": {
										"id": 3724,
										"nodeType": "Block",
										"src": "84377:43:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 3721,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3711,
															"src": "84407:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 3719,
															"name": "super",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967271,
															"src": "84394:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_super$_ERC20Permit_$3736_$",
																"typeString": "type(contract super ERC20Permit)"
															}
														},
														"id": 3720,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "84400:6:0",
														"memberName": "nonces",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 3552,
														"src": "84394:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view returns (uint256)"
														}
													},
													"id": 3722,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "84394:19:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 3718,
												"id": 3723,
												"nodeType": "Return",
												"src": "84387:26:0"
											}
										]
									},
									"documentation": {
										"id": 3709,
										"nodeType": "StructuredDocumentation",
										"src": "84229:43:0",
										"text": " @inheritdoc IERC20Permit"
									},
									"functionSelector": "7ecebe00",
									"id": 3725,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "nonces",
									"nameLocation": "84286:6:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 3715,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 3713,
												"name": "IERC20Permit",
												"nameLocations": [
													"84337:12:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1135,
												"src": "84337:12:0"
											},
											{
												"id": 3714,
												"name": "Nonces",
												"nameLocations": [
													"84351:6:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 3593,
												"src": "84351:6:0"
											}
										],
										"src": "84328:30:0"
									},
									"parameters": {
										"id": 3712,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3711,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "84301:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 3725,
												"src": "84293:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3710,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "84293:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "84292:15:0"
									},
									"returnParameters": {
										"id": 3718,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3717,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3725,
												"src": "84368:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3716,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "84368:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "84367:9:0"
									},
									"scope": 3736,
									"src": "84277:143:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1134
									],
									"body": {
										"id": 3734,
										"nodeType": "Block",
										"src": "84595:44:0",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 3731,
														"name": "_domainSeparatorV4",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3422,
														"src": "84612:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_bytes32_$",
															"typeString": "function () view returns (bytes32)"
														}
													},
													"id": 3732,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "84612:20:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 3730,
												"id": 3733,
												"nodeType": "Return",
												"src": "84605:27:0"
											}
										]
									},
									"documentation": {
										"id": 3726,
										"nodeType": "StructuredDocumentation",
										"src": "84426:43:0",
										"text": " @inheritdoc IERC20Permit"
									},
									"functionSelector": "3644e515",
									"id": 3735,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "DOMAIN_SEPARATOR",
									"nameLocation": "84536:16:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3727,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "84552:2:0"
									},
									"returnParameters": {
										"id": 3730,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3729,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3735,
												"src": "84586:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 3728,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "84586:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "84585:9:0"
									},
									"scope": 3736,
									"src": "84527:112:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "external"
								}
							],
							"scope": 3830,
							"src": "82767:1874:0",
							"usedErrors": [
								140,
								145,
								150,
								159,
								164,
								169,
								1145,
								1150,
								1155,
								3080,
								3082,
								3535,
								3613,
								3620
							],
							"usedEvents": [
								11,
								20,
								3287
							]
						},
						{
							"id": 3737,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "84728:24:0"
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 3738,
										"name": "ERC20",
										"nameLocations": [
											"84777:5:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 771,
										"src": "84777:5:0"
									},
									"id": 3739,
									"nodeType": "InheritanceSpecifier",
									"src": "84777:5:0"
								},
								{
									"baseName": {
										"id": 3740,
										"name": "ERC20Burnable",
										"nameLocations": [
											"84784:13:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 812,
										"src": "84784:13:0"
									},
									"id": 3741,
									"nodeType": "InheritanceSpecifier",
									"src": "84784:13:0"
								},
								{
									"baseName": {
										"id": 3742,
										"name": "ERC20Pausable",
										"nameLocations": [
											"84799:13:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 955,
										"src": "84799:13:0"
									},
									"id": 3743,
									"nodeType": "InheritanceSpecifier",
									"src": "84799:13:0"
								},
								{
									"baseName": {
										"id": 3744,
										"name": "Ownable",
										"nameLocations": [
											"84814:7:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1100,
										"src": "84814:7:0"
									},
									"id": 3745,
									"nodeType": "InheritanceSpecifier",
									"src": "84814:7:0"
								},
								{
									"baseName": {
										"id": 3746,
										"name": "ERC20Permit",
										"nameLocations": [
											"84823:11:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 3736,
										"src": "84823:11:0"
									},
									"id": 3747,
									"nodeType": "InheritanceSpecifier",
									"src": "84823:11:0"
								}
							],
							"canonicalName": "VEGAN",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 3829,
							"linearizedBaseContracts": [
								3829,
								3736,
								3593,
								3526,
								3307,
								1135,
								1100,
								955,
								926,
								812,
								771,
								170,
								100,
								77,
								129
							],
							"name": "VEGAN",
							"nameLocation": "84768:5:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 3773,
										"nodeType": "Block",
										"src": "84968:63:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 3763,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "84984:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 3764,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "84988:6:0",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "84984:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3770,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "3231303030303030",
																"id": 3765,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "84996:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_21000000_by_1",
																	"typeString": "int_const 21000000"
																},
																"value": "21000000"
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3769,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3766,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "85007:2:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"id": 3767,
																		"name": "decimals",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 335,
																		"src": "85013:8:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$__$returns$_t_uint8_$",
																			"typeString": "function () view returns (uint8)"
																		}
																	},
																	"id": 3768,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "85013:10:0",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"src": "85007:16:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "84996:27:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 3762,
														"name": "_mint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 611,
														"src": "84978:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 3771,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "84978:46:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3772,
												"nodeType": "ExpressionStatement",
												"src": "84978:46:0"
											}
										]
									},
									"id": 3774,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [
										{
											"arguments": [
												{
													"hexValue": "564547414e",
													"id": 3752,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "string",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "84889:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_stringliteral_99709675afee65fe101b770d3dc86aa0705f6cc0a2e7c1111289a13f4c7a1a2a",
														"typeString": "literal_string \"VEGAN\""
													},
													"value": "VEGAN"
												},
												{
													"hexValue": "56474e",
													"id": 3753,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "string",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "84898:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_stringliteral_0915239d20e094264df6aa12c4e9a5a75c2b624c19aeeaf23de51cb4ea0578b0",
														"typeString": "literal_string \"VGN\""
													},
													"value": "VGN"
												}
											],
											"id": 3754,
											"kind": "baseConstructorSpecifier",
											"modifierName": {
												"id": 3751,
												"name": "ERC20",
												"nameLocations": [
													"84883:5:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 771,
												"src": "84883:5:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "84883:21:0"
										},
										{
											"arguments": [
												{
													"id": 3756,
													"name": "initialOwner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 3749,
													"src": "84921:12:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												}
											],
											"id": 3757,
											"kind": "baseConstructorSpecifier",
											"modifierName": {
												"id": 3755,
												"name": "Ownable",
												"nameLocations": [
													"84913:7:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1100,
												"src": "84913:7:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "84913:21:0"
										},
										{
											"arguments": [
												{
													"hexValue": "564547414e",
													"id": 3759,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "string",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "84955:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_stringliteral_99709675afee65fe101b770d3dc86aa0705f6cc0a2e7c1111289a13f4c7a1a2a",
														"typeString": "literal_string \"VEGAN\""
													},
													"value": "VEGAN"
												}
											],
											"id": 3760,
											"kind": "baseConstructorSpecifier",
											"modifierName": {
												"id": 3758,
												"name": "ERC20Permit",
												"nameLocations": [
													"84943:11:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 3736,
												"src": "84943:11:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "84943:20:0"
										}
									],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3750,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3749,
												"mutability": "mutable",
												"name": "initialOwner",
												"nameLocation": "84861:12:0",
												"nodeType": "VariableDeclaration",
												"scope": 3774,
												"src": "84853:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3748,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "84853:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "84852:22:0"
									},
									"returnParameters": {
										"id": 3761,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "84968:0:0"
									},
									"scope": 3829,
									"src": "84841:190:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 3782,
										"nodeType": "Block",
										"src": "85071:25:0",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 3779,
														"name": "_pause",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 909,
														"src": "85081:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 3780,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "85081:8:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3781,
												"nodeType": "ExpressionStatement",
												"src": "85081:8:0"
											}
										]
									},
									"functionSelector": "8456cb59",
									"id": 3783,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 3777,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 3776,
												"name": "onlyOwner",
												"nameLocations": [
													"85061:9:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1011,
												"src": "85061:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "85061:9:0"
										}
									],
									"name": "pause",
									"nameLocation": "85046:5:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3775,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "85051:2:0"
									},
									"returnParameters": {
										"id": 3778,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "85071:0:0"
									},
									"scope": 3829,
									"src": "85037:59:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 3791,
										"nodeType": "Block",
										"src": "85138:27:0",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 3788,
														"name": "_unpause",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 925,
														"src": "85148:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 3789,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "85148:10:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3790,
												"nodeType": "ExpressionStatement",
												"src": "85148:10:0"
											}
										]
									},
									"functionSelector": "3f4ba83a",
									"id": 3792,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 3786,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 3785,
												"name": "onlyOwner",
												"nameLocations": [
													"85128:9:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1011,
												"src": "85128:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "85128:9:0"
										}
									],
									"name": "unpause",
									"nameLocation": "85111:7:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3784,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "85118:2:0"
									},
									"returnParameters": {
										"id": 3787,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "85138:0:0"
									},
									"scope": 3829,
									"src": "85102:63:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 3806,
										"nodeType": "Block",
										"src": "85230:34:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 3802,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3794,
															"src": "85246:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 3803,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3796,
															"src": "85250:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 3801,
														"name": "_mint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 611,
														"src": "85240:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 3804,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "85240:17:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3805,
												"nodeType": "ExpressionStatement",
												"src": "85240:17:0"
											}
										]
									},
									"functionSelector": "40c10f19",
									"id": 3807,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 3799,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 3798,
												"name": "onlyOwner",
												"nameLocations": [
													"85220:9:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1011,
												"src": "85220:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "85220:9:0"
										}
									],
									"name": "mint",
									"nameLocation": "85180:4:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3797,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3794,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "85193:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 3807,
												"src": "85185:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3793,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "85185:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3796,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "85205:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 3807,
												"src": "85197:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3795,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "85197:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "85184:28:0"
									},
									"returnParameters": {
										"id": 3800,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "85230:0:0"
									},
									"scope": 3829,
									"src": "85171:93:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										578,
										954
									],
									"body": {
										"id": 3827,
										"nodeType": "Block",
										"src": "85456:47:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 3822,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3809,
															"src": "85480:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 3823,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3811,
															"src": "85486:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 3824,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3813,
															"src": "85490:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 3819,
															"name": "super",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967271,
															"src": "85466:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_super$_VEGAN_$3829_$",
																"typeString": "type(contract super VEGAN)"
															}
														},
														"id": 3821,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "85472:7:0",
														"memberName": "_update",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 954,
														"src": "85466:13:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 3825,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "85466:30:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3826,
												"nodeType": "ExpressionStatement",
												"src": "85466:30:0"
											}
										]
									},
									"id": 3828,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_update",
									"nameLocation": "85347:7:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 3817,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 3815,
												"name": "ERC20",
												"nameLocations": [
													"85430:5:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 771,
												"src": "85430:5:0"
											},
											{
												"id": 3816,
												"name": "ERC20Pausable",
												"nameLocations": [
													"85437:13:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 955,
												"src": "85437:13:0"
											}
										],
										"src": "85421:30:0"
									},
									"parameters": {
										"id": 3814,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3809,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "85363:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 3828,
												"src": "85355:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3808,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "85355:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3811,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "85377:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 3828,
												"src": "85369:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3810,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "85369:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3813,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "85389:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 3828,
												"src": "85381:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3812,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "85381:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "85354:41:0"
									},
									"returnParameters": {
										"id": 3818,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "85456:0:0"
									},
									"scope": 3829,
									"src": "85338:165:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 3830,
							"src": "84759:746:0",
							"usedErrors": [
								140,
								145,
								150,
								159,
								164,
								169,
								831,
								834,
								966,
								971,
								1145,
								1150,
								1155,
								3080,
								3082,
								3535,
								3613,
								3620
							],
							"usedEvents": [
								11,
								20,
								823,
								828,
								977,
								3287
							]
						}
					],
					"src": "133:85372:0"
				},
				"id": 0
			}
		}
	}
}